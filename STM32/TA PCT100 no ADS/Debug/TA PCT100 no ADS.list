
TA PCT100 no ADS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c90  08008c90  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c98  08008c98  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000bf0  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c74  20000c74  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001925e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000300d  00000000  00000000  00039312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  0003c320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  0003d620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004991  00000000  00000000  0003e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001809d  00000000  00000000  00043189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcd6b  00000000  00000000  0005b226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00137f91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005564  00000000  00000000  00137fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008844 	.word	0x08008844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08008844 	.word	0x08008844

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	int i=0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8000b90:	e002      	b.n	8000b98 <bufsize+0x14>
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1f6      	bne.n	8000b92 <bufsize+0xe>
	return i;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <clear_buffer>:

void clear_buffer (void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	e007      	b.n	8000bd0 <clear_buffer+0x1c>
 8000bc0:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <clear_buffer+0x30>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd4:	ddf4      	ble.n	8000bc0 <clear_buffer+0xc>
}
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	200003e4 	.word	0x200003e4

08000be8 <send_uart>:

void send_uart (char *string)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff faed 	bl	80001d0 <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart4, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <send_uart+0x2c>)
 8000c06:	f003 fecc 	bl	80049a2 <HAL_UART_Transmit>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000514 	.word	0x20000514

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1e:	f001 f803 	bl	8001c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c22:	f000 fa37 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c26:	f000 fc8f 	bl	8001548 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2a:	f000 fc6d 	bl	8001508 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c2e:	f000 fa9b 	bl	8001168 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c32:	f000 faeb 	bl	800120c <MX_ADC2_Init>
  MX_DAC_Init();
 8000c36:	f000 fb3b 	bl	80012b0 <MX_DAC_Init>
  MX_TIM1_Init();
 8000c3a:	f000 fb99 	bl	8001370 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000c3e:	f000 fb61 	bl	8001304 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000c42:	f004 f977 	bl	8004f34 <MX_FATFS_Init>
  MX_UART4_Init();
 8000c46:	f000 fc35 	bl	80014b4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1); // Start TIMER n.14
//  HAL_ADC_Start_IT(&hadc1); // Start ADC in Interrupt
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	480e      	ldr	r0, [pc, #56]	; (8000c88 <main+0x70>)
 8000c4e:	f003 f82b 	bl	8003ca8 <HAL_TIM_PWM_Start>
  	    fresult = f_mount(&fs, "/", 1);
 8000c52:	2201      	movs	r2, #1
 8000c54:	490d      	ldr	r1, [pc, #52]	; (8000c8c <main+0x74>)
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <main+0x78>)
 8000c58:	f005 ff96 	bl	8006b88 <f_mount>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <main+0x7c>)
 8000c62:	701a      	strb	r2, [r3, #0]
  	    sprintf (buffer, "fresult: \t%lu\n\n",fresult);
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <main+0x7c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	490b      	ldr	r1, [pc, #44]	; (8000c98 <main+0x80>)
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <main+0x84>)
 8000c6e:	f007 f9c9 	bl	8008004 <siprintf>
  	    send_uart(buffer);
 8000c72:	480a      	ldr	r0, [pc, #40]	; (8000c9c <main+0x84>)
 8000c74:	f7ff ffb8 	bl	8000be8 <send_uart>


    	if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <main+0x7c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d011      	beq.n	8000ca4 <main+0x8c>
 8000c80:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <main+0x88>)
 8000c82:	f7ff ffb1 	bl	8000be8 <send_uart>
 8000c86:	e010      	b.n	8000caa <main+0x92>
 8000c88:	200004c4 	.word	0x200004c4
 8000c8c:	0800885c 	.word	0x0800885c
 8000c90:	20000104 	.word	0x20000104
 8000c94:	2000055c 	.word	0x2000055c
 8000c98:	08008860 	.word	0x08008860
 8000c9c:	200003e4 	.word	0x200003e4
 8000ca0:	08008870 	.word	0x08008870
    	else send_uart("SD CARD mounted successfully...\n\n");
 8000ca4:	48b7      	ldr	r0, [pc, #732]	; (8000f84 <main+0x36c>)
 8000ca6:	f7ff ff9f 	bl	8000be8 <send_uart>


    	/*************** Card capacity details ********************/

    	/* Check free space */
    	f_getfree("", &fre_clust, &pfs);
 8000caa:	4ab7      	ldr	r2, [pc, #732]	; (8000f88 <main+0x370>)
 8000cac:	49b7      	ldr	r1, [pc, #732]	; (8000f8c <main+0x374>)
 8000cae:	48b8      	ldr	r0, [pc, #736]	; (8000f90 <main+0x378>)
 8000cb0:	f006 fed3 	bl	8007a5a <f_getfree>

    	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000cb4:	4bb4      	ldr	r3, [pc, #720]	; (8000f88 <main+0x370>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	4ab2      	ldr	r2, [pc, #712]	; (8000f88 <main+0x370>)
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	8952      	ldrh	r2, [r2, #10]
 8000cc2:	fb02 f303 	mul.w	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fd46 	bl	8000758 <__aeabi_ui2d>
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	4bb0      	ldr	r3, [pc, #704]	; (8000f94 <main+0x37c>)
 8000cd2:	f7ff fad5 	bl	8000280 <__aeabi_dmul>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f7ff fdb5 	bl	800084c <__aeabi_d2uiz>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4aac      	ldr	r2, [pc, #688]	; (8000f98 <main+0x380>)
 8000ce6:	6013      	str	r3, [r2, #0]
    	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8000ce8:	4bab      	ldr	r3, [pc, #684]	; (8000f98 <main+0x380>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	49ab      	ldr	r1, [pc, #684]	; (8000f9c <main+0x384>)
 8000cf0:	48ab      	ldr	r0, [pc, #684]	; (8000fa0 <main+0x388>)
 8000cf2:	f007 f987 	bl	8008004 <siprintf>
    	send_uart(buffer);
 8000cf6:	48aa      	ldr	r0, [pc, #680]	; (8000fa0 <main+0x388>)
 8000cf8:	f7ff ff76 	bl	8000be8 <send_uart>
    	clear_buffer();
 8000cfc:	f7ff ff5a 	bl	8000bb4 <clear_buffer>
    	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000d00:	4ba1      	ldr	r3, [pc, #644]	; (8000f88 <main+0x370>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	895b      	ldrh	r3, [r3, #10]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4ba0      	ldr	r3, [pc, #640]	; (8000f8c <main+0x374>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	fb03 f302 	mul.w	r3, r3, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fd21 	bl	8000758 <__aeabi_ui2d>
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	4b9e      	ldr	r3, [pc, #632]	; (8000f94 <main+0x37c>)
 8000d1c:	f7ff fab0 	bl	8000280 <__aeabi_dmul>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4610      	mov	r0, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	f7ff fd90 	bl	800084c <__aeabi_d2uiz>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a9d      	ldr	r2, [pc, #628]	; (8000fa4 <main+0x38c>)
 8000d30:	6013      	str	r3, [r2, #0]
    	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8000d32:	4b9c      	ldr	r3, [pc, #624]	; (8000fa4 <main+0x38c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	499b      	ldr	r1, [pc, #620]	; (8000fa8 <main+0x390>)
 8000d3a:	4899      	ldr	r0, [pc, #612]	; (8000fa0 <main+0x388>)
 8000d3c:	f007 f962 	bl	8008004 <siprintf>
    	send_uart(buffer);
 8000d40:	4897      	ldr	r0, [pc, #604]	; (8000fa0 <main+0x388>)
 8000d42:	f7ff ff51 	bl	8000be8 <send_uart>
    	clear_buffer();
 8000d46:	f7ff ff35 	bl	8000bb4 <clear_buffer>


    	/************* The following operation is using PUTS and GETS *********************/

    	/* Open file to write/ create a file if it doesn't exist */
        fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000d4a:	2213      	movs	r2, #19
 8000d4c:	4997      	ldr	r1, [pc, #604]	; (8000fac <main+0x394>)
 8000d4e:	4898      	ldr	r0, [pc, #608]	; (8000fb0 <main+0x398>)
 8000d50:	f005 ff60 	bl	8006c14 <f_open>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b96      	ldr	r3, [pc, #600]	; (8000fb4 <main+0x39c>)
 8000d5a:	701a      	strb	r2, [r3, #0]

    	/* Writing text */
    	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 8000d5c:	4994      	ldr	r1, [pc, #592]	; (8000fb0 <main+0x398>)
 8000d5e:	4896      	ldr	r0, [pc, #600]	; (8000fb8 <main+0x3a0>)
 8000d60:	f007 f88f 	bl	8007e82 <f_puts>

    	/* Close file */
    	fresult = f_close(&fil);
 8000d64:	4892      	ldr	r0, [pc, #584]	; (8000fb0 <main+0x398>)
 8000d66:	f006 fc45 	bl	80075f4 <f_close>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b91      	ldr	r3, [pc, #580]	; (8000fb4 <main+0x39c>)
 8000d70:	701a      	strb	r2, [r3, #0]

    	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");
 8000d72:	4b90      	ldr	r3, [pc, #576]	; (8000fb4 <main+0x39c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d102      	bne.n	8000d80 <main+0x168>
 8000d7a:	4890      	ldr	r0, [pc, #576]	; (8000fbc <main+0x3a4>)
 8000d7c:	f7ff ff34 	bl	8000be8 <send_uart>

    	/* Open file to read */
    	fresult = f_open(&fil, "file1.txt", FA_READ);
 8000d80:	2201      	movs	r2, #1
 8000d82:	498a      	ldr	r1, [pc, #552]	; (8000fac <main+0x394>)
 8000d84:	488a      	ldr	r0, [pc, #552]	; (8000fb0 <main+0x398>)
 8000d86:	f005 ff45 	bl	8006c14 <f_open>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b89      	ldr	r3, [pc, #548]	; (8000fb4 <main+0x39c>)
 8000d90:	701a      	strb	r2, [r3, #0]

    	/* Read string from the file */
    	f_gets(buffer, f_size(&fil), &fil);
 8000d92:	4b87      	ldr	r3, [pc, #540]	; (8000fb0 <main+0x398>)
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	4a86      	ldr	r2, [pc, #536]	; (8000fb0 <main+0x398>)
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4881      	ldr	r0, [pc, #516]	; (8000fa0 <main+0x388>)
 8000d9c:	f006 ffbd 	bl	8007d1a <f_gets>

    	send_uart("File1.txt is opened and it contains the data as shown below\n");
 8000da0:	4887      	ldr	r0, [pc, #540]	; (8000fc0 <main+0x3a8>)
 8000da2:	f7ff ff21 	bl	8000be8 <send_uart>
    	send_uart(buffer);
 8000da6:	487e      	ldr	r0, [pc, #504]	; (8000fa0 <main+0x388>)
 8000da8:	f7ff ff1e 	bl	8000be8 <send_uart>
    	send_uart("\n\n");
 8000dac:	4885      	ldr	r0, [pc, #532]	; (8000fc4 <main+0x3ac>)
 8000dae:	f7ff ff1b 	bl	8000be8 <send_uart>

    	/* Close file */
    	f_close(&fil);
 8000db2:	487f      	ldr	r0, [pc, #508]	; (8000fb0 <main+0x398>)
 8000db4:	f006 fc1e 	bl	80075f4 <f_close>

    	clear_buffer();
 8000db8:	f7ff fefc 	bl	8000bb4 <clear_buffer>


    	/**************** The following operation is using f_write and f_read **************************/

    	/* Create second file with read write access and open it */
    	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000dbc:	220a      	movs	r2, #10
 8000dbe:	4982      	ldr	r1, [pc, #520]	; (8000fc8 <main+0x3b0>)
 8000dc0:	487b      	ldr	r0, [pc, #492]	; (8000fb0 <main+0x398>)
 8000dc2:	f005 ff27 	bl	8006c14 <f_open>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b7a      	ldr	r3, [pc, #488]	; (8000fb4 <main+0x39c>)
 8000dcc:	701a      	strb	r2, [r3, #0]

    	/* Writing text */
    	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 8000dce:	4a74      	ldr	r2, [pc, #464]	; (8000fa0 <main+0x388>)
 8000dd0:	4b7e      	ldr	r3, [pc, #504]	; (8000fcc <main+0x3b4>)
 8000dd2:	4610      	mov	r0, r2
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	2357      	movs	r3, #87	; 0x57
 8000dd8:	461a      	mov	r2, r3
 8000dda:	f007 f8fd 	bl	8007fd8 <memcpy>

    	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8000dde:	4870      	ldr	r0, [pc, #448]	; (8000fa0 <main+0x388>)
 8000de0:	f7ff fed0 	bl	8000b84 <bufsize>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b79      	ldr	r3, [pc, #484]	; (8000fd0 <main+0x3b8>)
 8000dea:	496d      	ldr	r1, [pc, #436]	; (8000fa0 <main+0x388>)
 8000dec:	4870      	ldr	r0, [pc, #448]	; (8000fb0 <main+0x398>)
 8000dee:	f006 fa0e 	bl	800720e <f_write>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b6f      	ldr	r3, [pc, #444]	; (8000fb4 <main+0x39c>)
 8000df8:	701a      	strb	r2, [r3, #0]

    	send_uart ("File2.txt created and data is written\n");
 8000dfa:	4876      	ldr	r0, [pc, #472]	; (8000fd4 <main+0x3bc>)
 8000dfc:	f7ff fef4 	bl	8000be8 <send_uart>

    	/* Close file */
    	f_close(&fil);
 8000e00:	486b      	ldr	r0, [pc, #428]	; (8000fb0 <main+0x398>)
 8000e02:	f006 fbf7 	bl	80075f4 <f_close>



    	// clearing buffer to show that result obtained is from the file
    	clear_buffer();
 8000e06:	f7ff fed5 	bl	8000bb4 <clear_buffer>

    	/* Open second file to read */
    	fresult = f_open(&fil, "file2.txt", FA_READ);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	496e      	ldr	r1, [pc, #440]	; (8000fc8 <main+0x3b0>)
 8000e0e:	4868      	ldr	r0, [pc, #416]	; (8000fb0 <main+0x398>)
 8000e10:	f005 ff00 	bl	8006c14 <f_open>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b66      	ldr	r3, [pc, #408]	; (8000fb4 <main+0x39c>)
 8000e1a:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");
 8000e1c:	4b65      	ldr	r3, [pc, #404]	; (8000fb4 <main+0x39c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <main+0x212>
 8000e24:	486c      	ldr	r0, [pc, #432]	; (8000fd8 <main+0x3c0>)
 8000e26:	f7ff fedf 	bl	8000be8 <send_uart>

    	/* Read data from the file
    	 * Please see the function details for the arguments */
    	f_read (&fil, buffer, f_size(&fil), &br);
 8000e2a:	4b61      	ldr	r3, [pc, #388]	; (8000fb0 <main+0x398>)
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	4b6b      	ldr	r3, [pc, #428]	; (8000fdc <main+0x3c4>)
 8000e30:	495b      	ldr	r1, [pc, #364]	; (8000fa0 <main+0x388>)
 8000e32:	485f      	ldr	r0, [pc, #380]	; (8000fb0 <main+0x398>)
 8000e34:	f006 f8ac 	bl	8006f90 <f_read>
    	send_uart(buffer);
 8000e38:	4859      	ldr	r0, [pc, #356]	; (8000fa0 <main+0x388>)
 8000e3a:	f7ff fed5 	bl	8000be8 <send_uart>
    	send_uart("\n\n");
 8000e3e:	4861      	ldr	r0, [pc, #388]	; (8000fc4 <main+0x3ac>)
 8000e40:	f7ff fed2 	bl	8000be8 <send_uart>

    	/* Close file */
    	f_close(&fil);
 8000e44:	485a      	ldr	r0, [pc, #360]	; (8000fb0 <main+0x398>)
 8000e46:	f006 fbd5 	bl	80075f4 <f_close>

    	clear_buffer();
 8000e4a:	f7ff feb3 	bl	8000bb4 <clear_buffer>


    	/*********************UPDATING an existing file ***************************/

    	/* Open the file with write access */
    	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8000e4e:	2203      	movs	r2, #3
 8000e50:	495d      	ldr	r1, [pc, #372]	; (8000fc8 <main+0x3b0>)
 8000e52:	4857      	ldr	r0, [pc, #348]	; (8000fb0 <main+0x398>)
 8000e54:	f005 fede 	bl	8006c14 <f_open>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b55      	ldr	r3, [pc, #340]	; (8000fb4 <main+0x39c>)
 8000e5e:	701a      	strb	r2, [r3, #0]

    	/* Move to offset to the end of the file */
    	fresult = f_lseek(&fil, f_size(&fil));
 8000e60:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <main+0x398>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	4619      	mov	r1, r3
 8000e66:	4852      	ldr	r0, [pc, #328]	; (8000fb0 <main+0x398>)
 8000e68:	f006 fbee 	bl	8007648 <f_lseek>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b50      	ldr	r3, [pc, #320]	; (8000fb4 <main+0x39c>)
 8000e72:	701a      	strb	r2, [r3, #0]

    	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");
 8000e74:	4b4f      	ldr	r3, [pc, #316]	; (8000fb4 <main+0x39c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <main+0x26a>
 8000e7c:	4858      	ldr	r0, [pc, #352]	; (8000fe0 <main+0x3c8>)
 8000e7e:	f7ff feb3 	bl	8000be8 <send_uart>

    	/* write the string to the file */
    	fresult = f_puts("This is updated data and it should be in the end", &fil);
 8000e82:	494b      	ldr	r1, [pc, #300]	; (8000fb0 <main+0x398>)
 8000e84:	4857      	ldr	r0, [pc, #348]	; (8000fe4 <main+0x3cc>)
 8000e86:	f006 fffc 	bl	8007e82 <f_puts>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <main+0x39c>)
 8000e90:	701a      	strb	r2, [r3, #0]

    	f_close (&fil);
 8000e92:	4847      	ldr	r0, [pc, #284]	; (8000fb0 <main+0x398>)
 8000e94:	f006 fbae 	bl	80075f4 <f_close>

    	clear_buffer();
 8000e98:	f7ff fe8c 	bl	8000bb4 <clear_buffer>

    	/* Open to read the file */
    	fresult = f_open (&fil, "file2.txt", FA_READ);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	494a      	ldr	r1, [pc, #296]	; (8000fc8 <main+0x3b0>)
 8000ea0:	4843      	ldr	r0, [pc, #268]	; (8000fb0 <main+0x398>)
 8000ea2:	f005 feb7 	bl	8006c14 <f_open>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b42      	ldr	r3, [pc, #264]	; (8000fb4 <main+0x39c>)
 8000eac:	701a      	strb	r2, [r3, #0]

    	/* Read string from the file */
    	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8000eae:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <main+0x398>)
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <main+0x3c4>)
 8000eb4:	493a      	ldr	r1, [pc, #232]	; (8000fa0 <main+0x388>)
 8000eb6:	483e      	ldr	r0, [pc, #248]	; (8000fb0 <main+0x398>)
 8000eb8:	f006 f86a 	bl	8006f90 <f_read>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <main+0x39c>)
 8000ec2:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <main+0x39c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <main+0x2ba>
 8000ecc:	4846      	ldr	r0, [pc, #280]	; (8000fe8 <main+0x3d0>)
 8000ece:	f7ff fe8b 	bl	8000be8 <send_uart>
    	send_uart(buffer);
 8000ed2:	4833      	ldr	r0, [pc, #204]	; (8000fa0 <main+0x388>)
 8000ed4:	f7ff fe88 	bl	8000be8 <send_uart>
    	send_uart("\n\n");
 8000ed8:	483a      	ldr	r0, [pc, #232]	; (8000fc4 <main+0x3ac>)
 8000eda:	f7ff fe85 	bl	8000be8 <send_uart>

    	/* Close file */
    	f_close(&fil);
 8000ede:	4834      	ldr	r0, [pc, #208]	; (8000fb0 <main+0x398>)
 8000ee0:	f006 fb88 	bl	80075f4 <f_close>

    	clear_buffer();
 8000ee4:	f7ff fe66 	bl	8000bb4 <clear_buffer>


    	/*************************REMOVING FILES FROM THE DIRECTORY ****************************/

    	fresult = f_unlink("/file1.txt");
 8000ee8:	4840      	ldr	r0, [pc, #256]	; (8000fec <main+0x3d4>)
 8000eea:	f006 fe6b 	bl	8007bc4 <f_unlink>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <main+0x39c>)
 8000ef4:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK) send_uart("file1.txt removed successfully...\n");
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <main+0x39c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d102      	bne.n	8000f04 <main+0x2ec>
 8000efe:	483c      	ldr	r0, [pc, #240]	; (8000ff0 <main+0x3d8>)
 8000f00:	f7ff fe72 	bl	8000be8 <send_uart>

    	fresult = f_unlink("/file2.txt");
 8000f04:	483b      	ldr	r0, [pc, #236]	; (8000ff4 <main+0x3dc>)
 8000f06:	f006 fe5d 	bl	8007bc4 <f_unlink>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <main+0x39c>)
 8000f10:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK) send_uart("file2.txt removed successfully...\n");
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <main+0x39c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <main+0x308>
 8000f1a:	4837      	ldr	r0, [pc, #220]	; (8000ff8 <main+0x3e0>)
 8000f1c:	f7ff fe64 	bl	8000be8 <send_uart>

    	/* Unmount SDCARD */
    	fresult = f_mount(NULL, "/", 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	4936      	ldr	r1, [pc, #216]	; (8000ffc <main+0x3e4>)
 8000f24:	2000      	movs	r0, #0
 8000f26:	f005 fe2f 	bl	8006b88 <f_mount>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <main+0x39c>)
 8000f30:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <main+0x39c>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <main+0x328>
 8000f3a:	4831      	ldr	r0, [pc, #196]	; (8001000 <main+0x3e8>)
 8000f3c:	f7ff fe54 	bl	8000be8 <send_uart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc1);
 8000f40:	4830      	ldr	r0, [pc, #192]	; (8001004 <main+0x3ec>)
 8000f42:	f000 ff4b 	bl	8001ddc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f46:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4a:	482e      	ldr	r0, [pc, #184]	; (8001004 <main+0x3ec>)
 8000f4c:	f001 f818 	bl	8001f80 <HAL_ADC_PollForConversion>
	  value1 = HAL_ADC_GetValue(&hadc1);
 8000f50:	482c      	ldr	r0, [pc, #176]	; (8001004 <main+0x3ec>)
 8000f52:	f001 f8a0 	bl	8002096 <HAL_ADC_GetValue>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <main+0x3f0>)
 8000f5c:	601a      	str	r2, [r3, #0]
	  Vout = value1*10/4096;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <main+0x3f0>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	da01      	bge.n	8000f72 <main+0x35a>
 8000f6e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000f72:	131b      	asrs	r3, r3, #12
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <main+0x3f4>)
 8000f7e:	edc3 7a00 	vstr	s15, [r3]
 8000f82:	e045      	b.n	8001010 <main+0x3f8>
 8000f84:	08008894 	.word	0x08008894
 8000f88:	20000558 	.word	0x20000558
 8000f8c:	200000e8 	.word	0x200000e8
 8000f90:	080088b8 	.word	0x080088b8
 8000f94:	3fe00000 	.word	0x3fe00000
 8000f98:	200005bc 	.word	0x200005bc
 8000f9c:	080088bc 	.word	0x080088bc
 8000fa0:	200003e4 	.word	0x200003e4
 8000fa4:	200003cc 	.word	0x200003cc
 8000fa8:	080088d8 	.word	0x080088d8
 8000fac:	080088f4 	.word	0x080088f4
 8000fb0:	200005c0 	.word	0x200005c0
 8000fb4:	2000055c 	.word	0x2000055c
 8000fb8:	08008900 	.word	0x08008900
 8000fbc:	08008948 	.word	0x08008948
 8000fc0:	08008974 	.word	0x08008974
 8000fc4:	080089b4 	.word	0x080089b4
 8000fc8:	080089b8 	.word	0x080089b8
 8000fcc:	080089c4 	.word	0x080089c4
 8000fd0:	20000510 	.word	0x20000510
 8000fd4:	08008a1c 	.word	0x08008a1c
 8000fd8:	08008a44 	.word	0x08008a44
 8000fdc:	2000037c 	.word	0x2000037c
 8000fe0:	08008a74 	.word	0x08008a74
 8000fe4:	08008a94 	.word	0x08008a94
 8000fe8:	08008ac8 	.word	0x08008ac8
 8000fec:	08008af4 	.word	0x08008af4
 8000ff0:	08008b00 	.word	0x08008b00
 8000ff4:	08008b24 	.word	0x08008b24
 8000ff8:	08008b30 	.word	0x08008b30
 8000ffc:	0800885c 	.word	0x0800885c
 8001000:	08008b54 	.word	0x08008b54
 8001004:	20000384 	.word	0x20000384
 8001008:	200007f0 	.word	0x200007f0
 800100c:	200000a0 	.word	0x200000a0
	  DAC_OUT=4096-value1;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <main+0x464>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001018:	4a19      	ldr	r2, [pc, #100]	; (8001080 <main+0x468>)
 800101a:	6013      	str	r3, [r2, #0]
//	  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT);
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <main+0x468>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	4817      	ldr	r0, [pc, #92]	; (8001084 <main+0x46c>)
 8001026:	f001 fbb1 	bl	800278c <HAL_DAC_SetValue>
	  HAL_ADC_Start(&hadc2);
 800102a:	4817      	ldr	r0, [pc, #92]	; (8001088 <main+0x470>)
 800102c:	f000 fed6 	bl	8001ddc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	4814      	ldr	r0, [pc, #80]	; (8001088 <main+0x470>)
 8001036:	f000 ffa3 	bl	8001f80 <HAL_ADC_PollForConversion>
	  value2 = HAL_ADC_GetValue(&hadc2);
 800103a:	4813      	ldr	r0, [pc, #76]	; (8001088 <main+0x470>)
 800103c:	f001 f82b 	bl	8002096 <HAL_ADC_GetValue>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <main+0x474>)
 8001046:	601a      	str	r2, [r3, #0]

	  HAL_Delay(500);
 8001048:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800104c:	f000 fe5e 	bl	8001d0c <HAL_Delay>
	  HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 8001050:	2100      	movs	r1, #0
 8001052:	480c      	ldr	r0, [pc, #48]	; (8001084 <main+0x46c>)
 8001054:	f001 fb7d 	bl	8002752 <HAL_DAC_Stop>
	  uint16_t PWM_OUT = value1*999/4096;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <main+0x464>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	da01      	bge.n	800106c <main+0x454>
 8001068:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800106c:	131b      	asrs	r3, r3, #12
 800106e:	80fb      	strh	r3, [r7, #6]
	  htim1.Instance->CCR1 = PWM_OUT ;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <main+0x478>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	88fa      	ldrh	r2, [r7, #6]
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
  {
 8001078:	e762      	b.n	8000f40 <main+0x328>
 800107a:	bf00      	nop
 800107c:	200007f0 	.word	0x200007f0
 8001080:	200005b8 	.word	0x200005b8
 8001084:	200003d0 	.word	0x200003d0
 8001088:	20000334 	.word	0x20000334
 800108c:	2000050c 	.word	0x2000050c
 8001090:	200004c4 	.word	0x200004c4

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2230      	movs	r2, #48	; 0x30
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f006 ffa6 	bl	8007ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <SystemClock_Config+0xcc>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a27      	ldr	r2, [pc, #156]	; (8001160 <SystemClock_Config+0xcc>)
 80010c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b25      	ldr	r3, [pc, #148]	; (8001160 <SystemClock_Config+0xcc>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <SystemClock_Config+0xd0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a21      	ldr	r2, [pc, #132]	; (8001164 <SystemClock_Config+0xd0>)
 80010de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <SystemClock_Config+0xd0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f0:	2302      	movs	r3, #2
 80010f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f8:	2310      	movs	r3, #16
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fc:	2302      	movs	r3, #2
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001100:	2300      	movs	r3, #0
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001104:	2310      	movs	r3, #16
 8001106:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 8001108:	f44f 7390 	mov.w	r3, #288	; 0x120
 800110c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800110e:	2302      	movs	r3, #2
 8001110:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001112:	2304      	movs	r3, #4
 8001114:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	4618      	mov	r0, r3
 800111c:	f002 f84a 	bl	80031b4 <HAL_RCC_OscConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001126:	f000 fa7b 	bl	8001620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	230f      	movs	r3, #15
 800112c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112e:	2302      	movs	r3, #2
 8001130:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2102      	movs	r1, #2
 8001146:	4618      	mov	r0, r3
 8001148:	f002 faac 	bl	80036a4 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001152:	f000 fa65 	bl	8001620 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3750      	adds	r7, #80	; 0x50
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <MX_ADC1_Init+0x98>)
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <MX_ADC1_Init+0x9c>)
 800117e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_ADC1_Init+0x98>)
 8001182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001186:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_ADC1_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_ADC1_Init+0x98>)
 8001190:	2201      	movs	r2, #1
 8001192:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_ADC1_Init+0x98>)
 8001196:	2201      	movs	r2, #1
 8001198:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_ADC1_Init+0x98>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_ADC1_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_ADC1_Init+0x98>)
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <MX_ADC1_Init+0xa0>)
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_ADC1_Init+0x98>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_ADC1_Init+0x98>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_ADC1_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_ADC1_Init+0x98>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <MX_ADC1_Init+0x98>)
 80011ca:	f000 fdc3 	bl	8001d54 <HAL_ADC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011d4:	f000 fa24 	bl	8001620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011dc:	2301      	movs	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_ADC1_Init+0x98>)
 80011ea:	f000 ff61 	bl	80020b0 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011f4:	f000 fa14 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000384 	.word	0x20000384
 8001204:	40012000 	.word	0x40012000
 8001208:	0f000001 	.word	0x0f000001

0800120c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_ADC2_Init+0x98>)
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <MX_ADC2_Init+0x9c>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_ADC2_Init+0x98>)
 8001226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800122a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_ADC2_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_ADC2_Init+0x98>)
 8001234:	2201      	movs	r2, #1
 8001236:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_ADC2_Init+0x98>)
 800123a:	2201      	movs	r2, #1
 800123c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_ADC2_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_ADC2_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_ADC2_Init+0x98>)
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_ADC2_Init+0xa0>)
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_ADC2_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_ADC2_Init+0x98>)
 800125a:	2201      	movs	r2, #1
 800125c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_ADC2_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_ADC2_Init+0x98>)
 8001268:	2201      	movs	r2, #1
 800126a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_ADC2_Init+0x98>)
 800126e:	f000 fd71 	bl	8001d54 <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001278:	f000 f9d2 	bl	8001620 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800127c:	2301      	movs	r3, #1
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_ADC2_Init+0x98>)
 800128e:	f000 ff0f 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001298:	f000 f9c2 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000334 	.word	0x20000334
 80012a8:	40012100 	.word	0x40012100
 80012ac:	0f000001 	.word	0x0f000001

080012b0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_DAC_Init+0x4c>)
 80012c0:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <MX_DAC_Init+0x50>)
 80012c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_DAC_Init+0x4c>)
 80012c6:	f001 fa22 	bl	800270e <HAL_DAC_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80012d0:	f000 f9a6 	bl	8001620 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	2210      	movs	r2, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_DAC_Init+0x4c>)
 80012e4:	f001 fa77 	bl	80027d6 <HAL_DAC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012ee:	f000 f997 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200003d0 	.word	0x200003d0
 8001300:	40007400 	.word	0x40007400

08001304 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_SPI1_Init+0x64>)
 800130a:	4a18      	ldr	r2, [pc, #96]	; (800136c <MX_SPI1_Init+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_SPI1_Init+0x64>)
 8001310:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_SPI1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_SPI1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_SPI1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_SPI1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_SPI1_Init+0x64>)
 8001330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001334:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_SPI1_Init+0x64>)
 8001338:	2220      	movs	r2, #32
 800133a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_SPI1_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_SPI1_Init+0x64>)
 8001350:	220a      	movs	r2, #10
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_SPI1_Init+0x64>)
 8001356:	f002 fb75 	bl	8003a44 <HAL_SPI_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001360:	f000 f95e 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000560 	.word	0x20000560
 800136c:	40013000 	.word	0x40013000

08001370 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b096      	sub	sp, #88	; 0x58
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001376:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2220      	movs	r2, #32
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f006 fe23 	bl	8007ff4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ae:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <MX_TIM1_Init+0x13c>)
 80013b0:	4a3f      	ldr	r2, [pc, #252]	; (80014b0 <MX_TIM1_Init+0x140>)
 80013b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80013b4:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <MX_TIM1_Init+0x13c>)
 80013b6:	2247      	movs	r2, #71	; 0x47
 80013b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <MX_TIM1_Init+0x13c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80013c0:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <MX_TIM1_Init+0x13c>)
 80013c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <MX_TIM1_Init+0x13c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 3;
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <MX_TIM1_Init+0x13c>)
 80013d0:	2203      	movs	r2, #3
 80013d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <MX_TIM1_Init+0x13c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013da:	4834      	ldr	r0, [pc, #208]	; (80014ac <MX_TIM1_Init+0x13c>)
 80013dc:	f002 fbbb 	bl	8003b56 <HAL_TIM_Base_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013e6:	f000 f91b 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013f4:	4619      	mov	r1, r3
 80013f6:	482d      	ldr	r0, [pc, #180]	; (80014ac <MX_TIM1_Init+0x13c>)
 80013f8:	f002 fde0 	bl	8003fbc <HAL_TIM_ConfigClockSource>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001402:	f000 f90d 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001406:	4829      	ldr	r0, [pc, #164]	; (80014ac <MX_TIM1_Init+0x13c>)
 8001408:	f002 fbf4 	bl	8003bf4 <HAL_TIM_PWM_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001412:	f000 f905 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800141e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001422:	4619      	mov	r1, r3
 8001424:	4821      	ldr	r0, [pc, #132]	; (80014ac <MX_TIM1_Init+0x13c>)
 8001426:	f003 f9a1 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001430:	f000 f8f6 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001434:	2360      	movs	r3, #96	; 0x60
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001438:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	2200      	movs	r2, #0
 8001458:	4619      	mov	r1, r3
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <MX_TIM1_Init+0x13c>)
 800145c:	f002 fcec 	bl	8003e38 <HAL_TIM_PWM_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001466:	f000 f8db 	bl	8001620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800147e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001482:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4807      	ldr	r0, [pc, #28]	; (80014ac <MX_TIM1_Init+0x13c>)
 800148e:	f003 f9e9 	bl	8004864 <HAL_TIMEx_ConfigBreakDeadTime>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001498:	f000 f8c2 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <MX_TIM1_Init+0x13c>)
 800149e:	f000 fa63 	bl	8001968 <HAL_TIM_MspPostInit>

}
 80014a2:	bf00      	nop
 80014a4:	3758      	adds	r7, #88	; 0x58
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200004c4 	.word	0x200004c4
 80014b0:	40010000 	.word	0x40010000

080014b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_UART4_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_UART4_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_UART4_Init+0x4c>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_UART4_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_UART4_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_UART4_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_UART4_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_UART4_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_UART4_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_UART4_Init+0x4c>)
 80014ec:	f003 fa0c 	bl	8004908 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80014f6:	f000 f893 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000514 	.word	0x20000514
 8001504:	40004c00 	.word	0x40004c00

08001508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_DMA_Init+0x3c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <MX_DMA_Init+0x3c>)
 8001518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_DMA_Init+0x3c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2038      	movs	r0, #56	; 0x38
 8001530:	f001 f8b7 	bl	80026a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001534:	2038      	movs	r0, #56	; 0x38
 8001536:	f001 f8d0 	bl	80026da <HAL_NVIC_EnableIRQ>

}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <MX_GPIO_Init+0xd0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a2c      	ldr	r2, [pc, #176]	; (8001618 <MX_GPIO_Init+0xd0>)
 8001568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <MX_GPIO_Init+0xd0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <MX_GPIO_Init+0xd0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a25      	ldr	r2, [pc, #148]	; (8001618 <MX_GPIO_Init+0xd0>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <MX_GPIO_Init+0xd0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <MX_GPIO_Init+0xd0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <MX_GPIO_Init+0xd0>)
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_GPIO_Init+0xd0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_GPIO_Init+0xd0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <MX_GPIO_Init+0xd0>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_GPIO_Init+0xd0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_GPIO_Init+0xd0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <MX_GPIO_Init+0xd0>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_GPIO_Init+0xd0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2110      	movs	r1, #16
 80015ee:	480b      	ldr	r0, [pc, #44]	; (800161c <MX_GPIO_Init+0xd4>)
 80015f0:	f001 fdc6 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015f4:	2310      	movs	r3, #16
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_GPIO_Init+0xd4>)
 800160c:	f001 fc1c 	bl	8002e48 <HAL_GPIO_Init>

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	e7fe      	b.n	8001628 <Error_Handler+0x8>
	...

0800162c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_MspInit+0x4c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_MspInit+0x4c>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_MspInit+0x4c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_MspInit+0x4c>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	; 0x30
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a46      	ldr	r2, [pc, #280]	; (80017b4 <HAL_ADC_MspInit+0x138>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d158      	bne.n	8001750 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a44      	ldr	r2, [pc, #272]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b42      	ldr	r3, [pc, #264]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	4b3e      	ldr	r3, [pc, #248]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a3d      	ldr	r2, [pc, #244]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016da:	2303      	movs	r3, #3
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	4834      	ldr	r0, [pc, #208]	; (80017bc <HAL_ADC_MspInit+0x140>)
 80016ea:	f001 fbad 	bl	8002e48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 80016f0:	4a34      	ldr	r2, [pc, #208]	; (80017c4 <HAL_ADC_MspInit+0x148>)
 80016f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016f4:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001700:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 8001708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800170e:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 8001710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001714:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001716:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 8001718:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800171e:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 8001720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001724:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001732:	4823      	ldr	r0, [pc, #140]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 8001734:	f001 f89e 	bl	8002874 <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800173e:	f7ff ff6f 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 8001746:	639a      	str	r2, [r3, #56]	; 0x38
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_ADC_MspInit+0x144>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800174e:	e02c      	b.n	80017aa <HAL_ADC_MspInit+0x12e>
  else if(hadc->Instance==ADC2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <HAL_ADC_MspInit+0x14c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d127      	bne.n	80017aa <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 8001764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_ADC_MspInit+0x13c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001792:	2302      	movs	r3, #2
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001796:	2303      	movs	r3, #3
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <HAL_ADC_MspInit+0x140>)
 80017a6:	f001 fb4f 	bl	8002e48 <HAL_GPIO_Init>
}
 80017aa:	bf00      	nop
 80017ac:	3730      	adds	r7, #48	; 0x30
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40012000 	.word	0x40012000
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020000 	.word	0x40020000
 80017c0:	20000464 	.word	0x20000464
 80017c4:	40026410 	.word	0x40026410
 80017c8:	40012100 	.word	0x40012100

080017cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a17      	ldr	r2, [pc, #92]	; (8001848 <HAL_DAC_MspInit+0x7c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d127      	bne.n	800183e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_DAC_MspInit+0x80>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <HAL_DAC_MspInit+0x80>)
 80017f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <HAL_DAC_MspInit+0x80>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_DAC_MspInit+0x80>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_DAC_MspInit+0x80>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_DAC_MspInit+0x80>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001826:	2320      	movs	r3, #32
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182a:	2303      	movs	r3, #3
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_DAC_MspInit+0x84>)
 800183a:	f001 fb05 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40007400 	.word	0x40007400
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000

08001854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_SPI_MspInit+0xc0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d149      	bne.n	800190a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	4a26      	ldr	r2, [pc, #152]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 8001880:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001884:	6453      	str	r3, [r2, #68]	; 0x44
 8001886:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_SPI_MspInit+0xc4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018ca:	23c0      	movs	r3, #192	; 0xc0
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018da:	2305      	movs	r3, #5
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <HAL_SPI_MspInit+0xc8>)
 80018e6:	f001 faaf 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018ea:	2308      	movs	r3, #8
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018fa:	2305      	movs	r3, #5
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4806      	ldr	r0, [pc, #24]	; (8001920 <HAL_SPI_MspInit+0xcc>)
 8001906:	f001 fa9f 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40013000 	.word	0x40013000
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_TIM_Base_MspInit+0x3c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d10d      	bne.n	8001952 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_TIM_Base_MspInit+0x40>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <HAL_TIM_Base_MspInit+0x40>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_TIM_Base_MspInit+0x40>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40010000 	.word	0x40010000
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <HAL_TIM_MspPostInit+0x68>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11e      	bne.n	80019c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	4619      	mov	r1, r3
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_TIM_MspPostInit+0x70>)
 80019c4:	f001 fa40 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40010000 	.word	0x40010000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <HAL_UART_MspInit+0x84>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d12c      	bne.n	8001a58 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_UART_MspInit+0x88>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <HAL_UART_MspInit+0x88>)
 8001a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_UART_MspInit+0x88>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_UART_MspInit+0x88>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <HAL_UART_MspInit+0x88>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_UART_MspInit+0x88>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <HAL_UART_MspInit+0x8c>)
 8001a54:	f001 f9f8 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40004c00 	.word	0x40004c00
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020800 	.word	0x40020800

08001a6c <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <SDTimer_Handler+0x40>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <SDTimer_Handler+0x1c>
    Timer1--;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <SDTimer_Handler+0x40>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <SDTimer_Handler+0x40>)
 8001a86:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <SDTimer_Handler+0x44>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <SDTimer_Handler+0x34>
    Timer2--;
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <SDTimer_Handler+0x44>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <SDTimer_Handler+0x44>)
 8001a9e:	801a      	strh	r2, [r3, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	200007f6 	.word	0x200007f6
 8001ab0:	200007f4 	.word	0x200007f4

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <SysTick_Handler+0x30>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3301      	adds	r3, #1
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <SysTick_Handler+0x30>)
 8001b0c:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <SysTick_Handler+0x30>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b09      	cmp	r3, #9
 8001b16:	d904      	bls.n	8001b22 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SysTick_Handler+0x30>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001b1e:	f7ff ffa5 	bl	8001a6c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b22:	f000 f8d3 	bl	8001ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200000a4 	.word	0x200000a4

08001b30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <DMA2_Stream0_IRQHandler+0x10>)
 8001b36:	f000 ff4b 	bl	80029d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000464 	.word	0x20000464

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f006 fa06 	bl	8007f84 <__errno>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <_sbrk+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20020000 	.word	0x20020000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	200000a8 	.word	0x200000a8
 8001bac:	20000c78 	.word	0x20000c78

08001bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <SystemInit+0x20>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <SystemInit+0x20>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bda:	490e      	ldr	r1, [pc, #56]	; (8001c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be0:	e002      	b.n	8001be8 <LoopCopyDataInit>

08001be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be6:	3304      	adds	r3, #4

08001be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bec:	d3f9      	bcc.n	8001be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bf0:	4c0b      	ldr	r4, [pc, #44]	; (8001c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf4:	e001      	b.n	8001bfa <LoopFillZerobss>

08001bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf8:	3204      	adds	r2, #4

08001bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bfc:	d3fb      	bcc.n	8001bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bfe:	f7ff ffd7 	bl	8001bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c02:	f006 f9c5 	bl	8007f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c06:	f7ff f807 	bl	8000c18 <main>
  bx  lr    
 8001c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c14:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001c18:	08008ca0 	.word	0x08008ca0
  ldr r2, =_sbss
 8001c1c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001c20:	20000c74 	.word	0x20000c74

08001c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC_IRQHandler>
	...

08001c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <HAL_Init+0x40>)
 8001c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_Init+0x40>)
 8001c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_Init+0x40>)
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f000 fd1b 	bl	800268c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c56:	200f      	movs	r0, #15
 8001c58:	f000 f808 	bl	8001c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5c:	f7ff fce6 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_InitTick+0x54>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_InitTick+0x58>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fd33 	bl	80026f6 <HAL_SYSTICK_Config>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00e      	b.n	8001cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b0f      	cmp	r3, #15
 8001c9e:	d80a      	bhi.n	8001cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f000 fcfb 	bl	80026a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cac:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <HAL_InitTick+0x5c>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	20000004 	.word	0x20000004

08001ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x20>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_IncTick+0x24>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_IncTick+0x24>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000008 	.word	0x20000008
 8001cf0:	200007f8 	.word	0x200007f8

08001cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_GetTick+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	200007f8 	.word	0x200007f8

08001d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff ffee 	bl	8001cf4 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d005      	beq.n	8001d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_Delay+0x44>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d32:	bf00      	nop
 8001d34:	f7ff ffde 	bl	8001cf4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f7      	bhi.n	8001d34 <HAL_Delay+0x28>
  {
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000008 	.word	0x20000008

08001d54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e033      	b.n	8001dd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fc82 	bl	800167c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d9a:	f023 0302 	bic.w	r3, r3, #2
 8001d9e:	f043 0202 	orr.w	r2, r3, #2
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 faa4 	bl	80022f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc2:	e001      	b.n	8001dc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Start+0x1a>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e0b2      	b.n	8001f5c <HAL_ADC_Start+0x180>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d018      	beq.n	8001e3e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1c:	4b52      	ldr	r3, [pc, #328]	; (8001f68 <HAL_ADC_Start+0x18c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_ADC_Start+0x190>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0c9a      	lsrs	r2, r3, #18
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e30:	e002      	b.n	8001e38 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f9      	bne.n	8001e32 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d17a      	bne.n	8001f42 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8a:	d106      	bne.n	8001e9a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f023 0206 	bic.w	r2, r3, #6
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
 8001e98:	e002      	b.n	8001ea0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_ADC_Start+0x194>)
 8001eaa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001eb4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d12a      	bne.n	8001f18 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a2b      	ldr	r2, [pc, #172]	; (8001f74 <HAL_ADC_Start+0x198>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d015      	beq.n	8001ef8 <HAL_ADC_Start+0x11c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <HAL_ADC_Start+0x19c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d105      	bne.n	8001ee2 <HAL_ADC_Start+0x106>
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <HAL_ADC_Start+0x194>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a25      	ldr	r2, [pc, #148]	; (8001f7c <HAL_ADC_Start+0x1a0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d136      	bne.n	8001f5a <HAL_ADC_Start+0x17e>
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_ADC_Start+0x194>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d130      	bne.n	8001f5a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d129      	bne.n	8001f5a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	e020      	b.n	8001f5a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <HAL_ADC_Start+0x198>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d11b      	bne.n	8001f5a <HAL_ADC_Start+0x17e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d114      	bne.n	8001f5a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	e00b      	b.n	8001f5a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f043 0210 	orr.w	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f043 0201 	orr.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	40012300 	.word	0x40012300
 8001f74:	40012000 	.word	0x40012000
 8001f78:	40012100 	.word	0x40012100
 8001f7c:	40012200 	.word	0x40012200

08001f80 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9c:	d113      	bne.n	8001fc6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fac:	d10b      	bne.n	8001fc6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f043 0220 	orr.w	r2, r3, #32
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e063      	b.n	800208e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001fc6:	f7ff fe95 	bl	8001cf4 <HAL_GetTick>
 8001fca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fcc:	e021      	b.n	8002012 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d01d      	beq.n	8002012 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <HAL_ADC_PollForConversion+0x6c>
 8001fdc:	f7ff fe8a 	bl	8001cf4 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d212      	bcs.n	8002012 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d00b      	beq.n	8002012 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f043 0204 	orr.w	r2, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e03d      	b.n	800208e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d1d6      	bne.n	8001fce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0212 	mvn.w	r2, #18
 8002028:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d123      	bne.n	800208c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002048:	2b00      	cmp	r3, #0
 800204a:	d11f      	bne.n	800208c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002056:	2b00      	cmp	r3, #0
 8002058:	d006      	beq.n	8002068 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002064:	2b00      	cmp	r3, #0
 8002066:	d111      	bne.n	800208c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1c>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e105      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x228>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b09      	cmp	r3, #9
 80020da:	d925      	bls.n	8002128 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68d9      	ldr	r1, [r3, #12]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	3b1e      	subs	r3, #30
 80020f2:	2207      	movs	r2, #7
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43da      	mvns	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	400a      	ands	r2, r1
 8002100:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68d9      	ldr	r1, [r3, #12]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	4603      	mov	r3, r0
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4403      	add	r3, r0
 800211a:	3b1e      	subs	r3, #30
 800211c:	409a      	lsls	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	e022      	b.n	800216e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6919      	ldr	r1, [r3, #16]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	2207      	movs	r2, #7
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	400a      	ands	r2, r1
 800214a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6919      	ldr	r1, [r3, #16]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	4603      	mov	r3, r0
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4403      	add	r3, r0
 8002164:	409a      	lsls	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b06      	cmp	r3, #6
 8002174:	d824      	bhi.n	80021c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	3b05      	subs	r3, #5
 8002188:	221f      	movs	r2, #31
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	400a      	ands	r2, r1
 8002196:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4618      	mov	r0, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3b05      	subs	r3, #5
 80021b2:	fa00 f203 	lsl.w	r2, r0, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
 80021be:	e04c      	b.n	800225a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	d824      	bhi.n	8002212 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3b23      	subs	r3, #35	; 0x23
 80021da:	221f      	movs	r2, #31
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43da      	mvns	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	400a      	ands	r2, r1
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3b23      	subs	r3, #35	; 0x23
 8002204:	fa00 f203 	lsl.w	r2, r0, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
 8002210:	e023      	b.n	800225a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	3b41      	subs	r3, #65	; 0x41
 8002224:	221f      	movs	r2, #31
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	400a      	ands	r2, r1
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b41      	subs	r3, #65	; 0x41
 800224e:	fa00 f203 	lsl.w	r2, r0, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <HAL_ADC_ConfigChannel+0x234>)
 800225c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_ADC_ConfigChannel+0x238>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d109      	bne.n	800227c <HAL_ADC_ConfigChannel+0x1cc>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b12      	cmp	r3, #18
 800226e:	d105      	bne.n	800227c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_ADC_ConfigChannel+0x238>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d123      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x21e>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b10      	cmp	r3, #16
 800228c:	d003      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x1e6>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b11      	cmp	r3, #17
 8002294:	d11b      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d111      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_ADC_ConfigChannel+0x23c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <HAL_ADC_ConfigChannel+0x240>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	0c9a      	lsrs	r2, r3, #18
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022c0:	e002      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f9      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40012300 	.word	0x40012300
 80022e8:	40012000 	.word	0x40012000
 80022ec:	20000000 	.word	0x20000000
 80022f0:	431bde83 	.word	0x431bde83

080022f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022fc:	4b79      	ldr	r3, [pc, #484]	; (80024e4 <ADC_Init+0x1f0>)
 80022fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	431a      	orrs	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	021a      	lsls	r2, r3, #8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800234c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6899      	ldr	r1, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	4a58      	ldr	r2, [pc, #352]	; (80024e8 <ADC_Init+0x1f4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d022      	beq.n	80023d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800239a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6899      	ldr	r1, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6899      	ldr	r1, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	e00f      	b.n	80023f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0202 	bic.w	r2, r2, #2
 8002400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6899      	ldr	r1, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7e1b      	ldrb	r3, [r3, #24]
 800240c:	005a      	lsls	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01b      	beq.n	8002458 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800242e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800243e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	3b01      	subs	r3, #1
 800244c:	035a      	lsls	r2, r3, #13
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	e007      	b.n	8002468 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002466:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	3b01      	subs	r3, #1
 8002484:	051a      	lsls	r2, r3, #20
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800249c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6899      	ldr	r1, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024aa:	025a      	lsls	r2, r3, #9
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	029a      	lsls	r2, r3, #10
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	609a      	str	r2, [r3, #8]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40012300 	.word	0x40012300
 80024e8:	0f000001 	.word	0x0f000001

080024ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251e:	4a04      	ldr	r2, [pc, #16]	; (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	60d3      	str	r3, [r2, #12]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <__NVIC_GetPriorityGrouping+0x18>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	f003 0307 	and.w	r3, r3, #7
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	2b00      	cmp	r3, #0
 8002560:	db0b      	blt.n	800257a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4907      	ldr	r1, [pc, #28]	; (8002588 <__NVIC_EnableIRQ+0x38>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2001      	movs	r0, #1
 8002572:	fa00 f202 	lsl.w	r2, r0, r2
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e100 	.word	0xe000e100

0800258c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db0a      	blt.n	80025b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	490c      	ldr	r1, [pc, #48]	; (80025d8 <__NVIC_SetPriority+0x4c>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	440b      	add	r3, r1
 80025b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b4:	e00a      	b.n	80025cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4908      	ldr	r1, [pc, #32]	; (80025dc <__NVIC_SetPriority+0x50>)
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3b04      	subs	r3, #4
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	440b      	add	r3, r1
 80025ca:	761a      	strb	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f1c3 0307 	rsb	r3, r3, #7
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	bf28      	it	cs
 80025fe:	2304      	movcs	r3, #4
 8002600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3304      	adds	r3, #4
 8002606:	2b06      	cmp	r3, #6
 8002608:	d902      	bls.n	8002610 <NVIC_EncodePriority+0x30>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3b03      	subs	r3, #3
 800260e:	e000      	b.n	8002612 <NVIC_EncodePriority+0x32>
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	401a      	ands	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43d9      	mvns	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	4313      	orrs	r3, r2
         );
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	; 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002658:	d301      	bcc.n	800265e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265a:	2301      	movs	r3, #1
 800265c:	e00f      	b.n	800267e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <SysTick_Config+0x40>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002666:	210f      	movs	r1, #15
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f7ff ff8e 	bl	800258c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <SysTick_Config+0x40>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <SysTick_Config+0x40>)
 8002678:	2207      	movs	r2, #7
 800267a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	e000e010 	.word	0xe000e010

0800268c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff29 	bl	80024ec <__NVIC_SetPriorityGrouping>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b4:	f7ff ff3e 	bl	8002534 <__NVIC_GetPriorityGrouping>
 80026b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7ff ff8e 	bl	80025e0 <NVIC_EncodePriority>
 80026c4:	4602      	mov	r2, r0
 80026c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff5d 	bl	800258c <__NVIC_SetPriority>
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff31 	bl	8002550 <__NVIC_EnableIRQ>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffa2 	bl	8002648 <SysTick_Config>
 8002704:	4603      	mov	r3, r0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e014      	b.n	800274a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	791b      	ldrb	r3, [r3, #4]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff f84b 	bl	80017cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6819      	ldr	r1, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2201      	movs	r2, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	400a      	ands	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	3308      	adds	r3, #8
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e004      	b.n	80027c0 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	3314      	adds	r3, #20
 80027be:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	461a      	mov	r2, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b087      	sub	sp, #28
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	795b      	ldrb	r3, [r3, #5]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_DAC_ConfigChannel+0x18>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e03c      	b.n	8002868 <HAL_DAC_ConfigChannel+0x92>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2202      	movs	r2, #2
 80027f8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	f640 72fe 	movw	r2, #4094	; 0xffe
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4013      	ands	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	22c0      	movs	r2, #192	; 0xc0
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43da      	mvns	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	400a      	ands	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002880:	f7ff fa38 	bl	8001cf4 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e099      	b.n	80029c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b0:	e00f      	b.n	80028d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028b2:	f7ff fa1f 	bl	8001cf4 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d908      	bls.n	80028d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2203      	movs	r2, #3
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e078      	b.n	80029c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e8      	bne.n	80028b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4b38      	ldr	r3, [pc, #224]	; (80029cc <HAL_DMA_Init+0x158>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	2b04      	cmp	r3, #4
 800292a:	d107      	bne.n	800293c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	4313      	orrs	r3, r2
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f023 0307 	bic.w	r3, r3, #7
 8002952:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	2b04      	cmp	r3, #4
 8002964:	d117      	bne.n	8002996 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00e      	beq.n	8002996 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f9e9 	bl	8002d50 <DMA_CheckFifoParam>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2240      	movs	r2, #64	; 0x40
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002992:	2301      	movs	r3, #1
 8002994:	e016      	b.n	80029c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f9a0 	bl	8002ce4 <DMA_CalcBaseAndBitshift>
 80029a4:	4603      	mov	r3, r0
 80029a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	223f      	movs	r2, #63	; 0x3f
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	f010803f 	.word	0xf010803f

080029d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029dc:	4b92      	ldr	r3, [pc, #584]	; (8002c28 <HAL_DMA_IRQHandler+0x258>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a92      	ldr	r2, [pc, #584]	; (8002c2c <HAL_DMA_IRQHandler+0x25c>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	0a9b      	lsrs	r3, r3, #10
 80029e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	2208      	movs	r2, #8
 80029fc:	409a      	lsls	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01a      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	2208      	movs	r2, #8
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2201      	movs	r2, #1
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d012      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	2201      	movs	r2, #1
 8002a60:	409a      	lsls	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	f043 0202 	orr.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	2204      	movs	r2, #4
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d012      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	2204      	movs	r2, #4
 8002a96:	409a      	lsls	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	f043 0204 	orr.w	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	2210      	movs	r2, #16
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d043      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d03c      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	2210      	movs	r2, #16
 8002acc:	409a      	lsls	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d018      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d108      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d024      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
 8002afe:	e01f      	b.n	8002b40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01b      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
 8002b10:	e016      	b.n	8002b40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0208 	bic.w	r2, r2, #8
 8002b2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	2220      	movs	r2, #32
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 808e 	beq.w	8002c6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8086 	beq.w	8002c6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	2220      	movs	r2, #32
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b05      	cmp	r3, #5
 8002b78:	d136      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0216 	bic.w	r2, r2, #22
 8002b88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d103      	bne.n	8002baa <HAL_DMA_IRQHandler+0x1da>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0208 	bic.w	r2, r2, #8
 8002bb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbe:	223f      	movs	r2, #63	; 0x3f
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d07d      	beq.n	8002cda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
        }
        return;
 8002be6:	e078      	b.n	8002cda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01c      	beq.n	8002c30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d108      	bne.n	8002c16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d030      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
 8002c14:	e02b      	b.n	8002c6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d027      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
 8002c26:	e022      	b.n	8002c6e <HAL_DMA_IRQHandler+0x29e>
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0210 	bic.w	r2, r2, #16
 8002c4c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d032      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d022      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2205      	movs	r2, #5
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0201 	bic.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d307      	bcc.n	8002cb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f2      	bne.n	8002c9a <HAL_DMA_IRQHandler+0x2ca>
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cb6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	4798      	blx	r3
 8002cd8:	e000      	b.n	8002cdc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cda:	bf00      	nop
    }
  }
}
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop

08002ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	3b10      	subs	r3, #16
 8002cf4:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <DMA_CalcBaseAndBitshift+0x64>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cfe:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <DMA_CalcBaseAndBitshift+0x68>)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4413      	add	r3, r2
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d909      	bls.n	8002d26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d1a:	f023 0303 	bic.w	r3, r3, #3
 8002d1e:	1d1a      	adds	r2, r3, #4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	659a      	str	r2, [r3, #88]	; 0x58
 8002d24:	e007      	b.n	8002d36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d2e:	f023 0303 	bic.w	r3, r3, #3
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	aaaaaaab 	.word	0xaaaaaaab
 8002d4c:	08008bd4 	.word	0x08008bd4

08002d50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11f      	bne.n	8002daa <DMA_CheckFifoParam+0x5a>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d856      	bhi.n	8002e1e <DMA_CheckFifoParam+0xce>
 8002d70:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <DMA_CheckFifoParam+0x28>)
 8002d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d76:	bf00      	nop
 8002d78:	08002d89 	.word	0x08002d89
 8002d7c:	08002d9b 	.word	0x08002d9b
 8002d80:	08002d89 	.word	0x08002d89
 8002d84:	08002e1f 	.word	0x08002e1f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d046      	beq.n	8002e22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d98:	e043      	b.n	8002e22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002da2:	d140      	bne.n	8002e26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da8:	e03d      	b.n	8002e26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db2:	d121      	bne.n	8002df8 <DMA_CheckFifoParam+0xa8>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d837      	bhi.n	8002e2a <DMA_CheckFifoParam+0xda>
 8002dba:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <DMA_CheckFifoParam+0x70>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002dd1 	.word	0x08002dd1
 8002dc4:	08002dd7 	.word	0x08002dd7
 8002dc8:	08002dd1 	.word	0x08002dd1
 8002dcc:	08002de9 	.word	0x08002de9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd4:	e030      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d025      	beq.n	8002e2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de6:	e022      	b.n	8002e2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002df0:	d11f      	bne.n	8002e32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002df6:	e01c      	b.n	8002e32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d903      	bls.n	8002e06 <DMA_CheckFifoParam+0xb6>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d003      	beq.n	8002e0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e04:	e018      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0a:	e015      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00e      	beq.n	8002e36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e1c:	e00b      	b.n	8002e36 <DMA_CheckFifoParam+0xe6>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e00a      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;
 8002e22:	bf00      	nop
 8002e24:	e008      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;
 8002e26:	bf00      	nop
 8002e28:	e006      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e004      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e002      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e32:	bf00      	nop
 8002e34:	e000      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;
 8002e36:	bf00      	nop
    }
  } 
  
  return status; 
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop

08002e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e16b      	b.n	800313c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e64:	2201      	movs	r2, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	f040 815a 	bne.w	8003136 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d005      	beq.n	8002e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d130      	bne.n	8002efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 0201 	and.w	r2, r3, #1
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d017      	beq.n	8002f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	2203      	movs	r2, #3
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d123      	bne.n	8002f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	08da      	lsrs	r2, r3, #3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3208      	adds	r2, #8
 8002f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	220f      	movs	r2, #15
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	08da      	lsrs	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3208      	adds	r2, #8
 8002f86:	69b9      	ldr	r1, [r7, #24]
 8002f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	2203      	movs	r2, #3
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0203 	and.w	r2, r3, #3
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80b4 	beq.w	8003136 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	4b60      	ldr	r3, [pc, #384]	; (8003154 <HAL_GPIO_Init+0x30c>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4a5f      	ldr	r2, [pc, #380]	; (8003154 <HAL_GPIO_Init+0x30c>)
 8002fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fde:	4b5d      	ldr	r3, [pc, #372]	; (8003154 <HAL_GPIO_Init+0x30c>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fea:	4a5b      	ldr	r2, [pc, #364]	; (8003158 <HAL_GPIO_Init+0x310>)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	220f      	movs	r2, #15
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a52      	ldr	r2, [pc, #328]	; (800315c <HAL_GPIO_Init+0x314>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02b      	beq.n	800306e <HAL_GPIO_Init+0x226>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a51      	ldr	r2, [pc, #324]	; (8003160 <HAL_GPIO_Init+0x318>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d025      	beq.n	800306a <HAL_GPIO_Init+0x222>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a50      	ldr	r2, [pc, #320]	; (8003164 <HAL_GPIO_Init+0x31c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01f      	beq.n	8003066 <HAL_GPIO_Init+0x21e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4f      	ldr	r2, [pc, #316]	; (8003168 <HAL_GPIO_Init+0x320>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d019      	beq.n	8003062 <HAL_GPIO_Init+0x21a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a4e      	ldr	r2, [pc, #312]	; (800316c <HAL_GPIO_Init+0x324>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <HAL_GPIO_Init+0x216>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4d      	ldr	r2, [pc, #308]	; (8003170 <HAL_GPIO_Init+0x328>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00d      	beq.n	800305a <HAL_GPIO_Init+0x212>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4c      	ldr	r2, [pc, #304]	; (8003174 <HAL_GPIO_Init+0x32c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <HAL_GPIO_Init+0x20e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4b      	ldr	r2, [pc, #300]	; (8003178 <HAL_GPIO_Init+0x330>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <HAL_GPIO_Init+0x20a>
 800304e:	2307      	movs	r3, #7
 8003050:	e00e      	b.n	8003070 <HAL_GPIO_Init+0x228>
 8003052:	2308      	movs	r3, #8
 8003054:	e00c      	b.n	8003070 <HAL_GPIO_Init+0x228>
 8003056:	2306      	movs	r3, #6
 8003058:	e00a      	b.n	8003070 <HAL_GPIO_Init+0x228>
 800305a:	2305      	movs	r3, #5
 800305c:	e008      	b.n	8003070 <HAL_GPIO_Init+0x228>
 800305e:	2304      	movs	r3, #4
 8003060:	e006      	b.n	8003070 <HAL_GPIO_Init+0x228>
 8003062:	2303      	movs	r3, #3
 8003064:	e004      	b.n	8003070 <HAL_GPIO_Init+0x228>
 8003066:	2302      	movs	r3, #2
 8003068:	e002      	b.n	8003070 <HAL_GPIO_Init+0x228>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_GPIO_Init+0x228>
 800306e:	2300      	movs	r3, #0
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	f002 0203 	and.w	r2, r2, #3
 8003076:	0092      	lsls	r2, r2, #2
 8003078:	4093      	lsls	r3, r2
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003080:	4935      	ldr	r1, [pc, #212]	; (8003158 <HAL_GPIO_Init+0x310>)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	089b      	lsrs	r3, r3, #2
 8003086:	3302      	adds	r3, #2
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <HAL_GPIO_Init+0x334>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030b2:	4a32      	ldr	r2, [pc, #200]	; (800317c <HAL_GPIO_Init+0x334>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030b8:	4b30      	ldr	r3, [pc, #192]	; (800317c <HAL_GPIO_Init+0x334>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <HAL_GPIO_Init+0x334>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <HAL_GPIO_Init+0x334>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003106:	4a1d      	ldr	r2, [pc, #116]	; (800317c <HAL_GPIO_Init+0x334>)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_GPIO_Init+0x334>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003130:	4a12      	ldr	r2, [pc, #72]	; (800317c <HAL_GPIO_Init+0x334>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3301      	adds	r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b0f      	cmp	r3, #15
 8003140:	f67f ae90 	bls.w	8002e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3724      	adds	r7, #36	; 0x24
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	40013800 	.word	0x40013800
 800315c:	40020000 	.word	0x40020000
 8003160:	40020400 	.word	0x40020400
 8003164:	40020800 	.word	0x40020800
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40021000 	.word	0x40021000
 8003170:	40021400 	.word	0x40021400
 8003174:	40021800 	.word	0x40021800
 8003178:	40021c00 	.word	0x40021c00
 800317c:	40013c00 	.word	0x40013c00

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800319c:	e003      	b.n	80031a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	041a      	lsls	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	619a      	str	r2, [r3, #24]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e264      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d075      	beq.n	80032be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031d2:	4ba3      	ldr	r3, [pc, #652]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4ba0      	ldr	r3, [pc, #640]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d112      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b9d      	ldr	r3, [pc, #628]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f6:	d10b      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	4b99      	ldr	r3, [pc, #612]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d05b      	beq.n	80032bc <HAL_RCC_OscConfig+0x108>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d157      	bne.n	80032bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e23f      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d106      	bne.n	8003228 <HAL_RCC_OscConfig+0x74>
 800321a:	4b91      	ldr	r3, [pc, #580]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a90      	ldr	r2, [pc, #576]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x98>
 8003232:	4b8b      	ldr	r3, [pc, #556]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a8a      	ldr	r2, [pc, #552]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b88      	ldr	r3, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a87      	ldr	r2, [pc, #540]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 800324c:	4b84      	ldr	r3, [pc, #528]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a83      	ldr	r2, [pc, #524]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b81      	ldr	r3, [pc, #516]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a80      	ldr	r2, [pc, #512]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fd42 	bl	8001cf4 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe fd3e 	bl	8001cf4 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e204      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b76      	ldr	r3, [pc, #472]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xc0>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe fd2e 	bl	8001cf4 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe fd2a 	bl	8001cf4 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1f0      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	4b6c      	ldr	r3, [pc, #432]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0xe8>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d063      	beq.n	8003392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ca:	4b65      	ldr	r3, [pc, #404]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b62      	ldr	r3, [pc, #392]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d11c      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b5f      	ldr	r3, [pc, #380]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d116      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	4b5c      	ldr	r3, [pc, #368]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1c4      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b56      	ldr	r3, [pc, #344]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4952      	ldr	r1, [pc, #328]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	e03a      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003324:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_RCC_OscConfig+0x2b0>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fe fce3 	bl	8001cf4 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003332:	f7fe fcdf 	bl	8001cf4 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1a5      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b43      	ldr	r3, [pc, #268]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4940      	ldr	r1, [pc, #256]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_RCC_OscConfig+0x2b0>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fe fcc2 	bl	8001cf4 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003374:	f7fe fcbe 	bl	8001cf4 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e184      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d030      	beq.n	8003400 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a6:	4b30      	ldr	r3, [pc, #192]	; (8003468 <HAL_RCC_OscConfig+0x2b4>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fe fca2 	bl	8001cf4 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fe fc9e 	bl	8001cf4 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e164      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	4b26      	ldr	r3, [pc, #152]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x200>
 80033d2:	e015      	b.n	8003400 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_RCC_OscConfig+0x2b4>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7fe fc8b 	bl	8001cf4 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e2:	f7fe fc87 	bl	8001cf4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e14d      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80033f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a0 	beq.w	800354e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10f      	bne.n	800343e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4a0e      	ldr	r2, [pc, #56]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343a:	2301      	movs	r3, #1
 800343c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCC_OscConfig+0x2b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d121      	bne.n	800348e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <HAL_RCC_OscConfig+0x2b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a07      	ldr	r2, [pc, #28]	; (800346c <HAL_RCC_OscConfig+0x2b8>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003456:	f7fe fc4d 	bl	8001cf4 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	e011      	b.n	8003482 <HAL_RCC_OscConfig+0x2ce>
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	42470000 	.word	0x42470000
 8003468:	42470e80 	.word	0x42470e80
 800346c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003470:	f7fe fc40 	bl	8001cf4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e106      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	4b85      	ldr	r3, [pc, #532]	; (8003698 <HAL_RCC_OscConfig+0x4e4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2f0>
 8003496:	4b81      	ldr	r3, [pc, #516]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	4a80      	ldr	r2, [pc, #512]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6713      	str	r3, [r2, #112]	; 0x70
 80034a2:	e01c      	b.n	80034de <HAL_RCC_OscConfig+0x32a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b05      	cmp	r3, #5
 80034aa:	d10c      	bne.n	80034c6 <HAL_RCC_OscConfig+0x312>
 80034ac:	4b7b      	ldr	r3, [pc, #492]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	4a7a      	ldr	r2, [pc, #488]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034b2:	f043 0304 	orr.w	r3, r3, #4
 80034b6:	6713      	str	r3, [r2, #112]	; 0x70
 80034b8:	4b78      	ldr	r3, [pc, #480]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	4a77      	ldr	r2, [pc, #476]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6713      	str	r3, [r2, #112]	; 0x70
 80034c4:	e00b      	b.n	80034de <HAL_RCC_OscConfig+0x32a>
 80034c6:	4b75      	ldr	r3, [pc, #468]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	4a74      	ldr	r2, [pc, #464]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70
 80034d2:	4b72      	ldr	r3, [pc, #456]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	4a71      	ldr	r2, [pc, #452]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d015      	beq.n	8003512 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e6:	f7fe fc05 	bl	8001cf4 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fe fc01 	bl	8001cf4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0c5      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003504:	4b65      	ldr	r3, [pc, #404]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ee      	beq.n	80034ee <HAL_RCC_OscConfig+0x33a>
 8003510:	e014      	b.n	800353c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003512:	f7fe fbef 	bl	8001cf4 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe fbeb 	bl	8001cf4 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0af      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003530:	4b5a      	ldr	r3, [pc, #360]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ee      	bne.n	800351a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d105      	bne.n	800354e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003542:	4b56      	ldr	r3, [pc, #344]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a55      	ldr	r2, [pc, #340]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 809b 	beq.w	800368e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003558:	4b50      	ldr	r3, [pc, #320]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b08      	cmp	r3, #8
 8003562:	d05c      	beq.n	800361e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d141      	bne.n	80035f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356c:	4b4c      	ldr	r3, [pc, #304]	; (80036a0 <HAL_RCC_OscConfig+0x4ec>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fe fbbf 	bl	8001cf4 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357a:	f7fe fbbb 	bl	8001cf4 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e081      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358c:	4b43      	ldr	r3, [pc, #268]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	019b      	lsls	r3, r3, #6
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	3b01      	subs	r3, #1
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	061b      	lsls	r3, r3, #24
 80035bc:	4937      	ldr	r1, [pc, #220]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <HAL_RCC_OscConfig+0x4ec>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe fb94 	bl	8001cf4 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe fb90 	bl	8001cf4 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e056      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e2:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x41c>
 80035ee:	e04e      	b.n	800368e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f0:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_RCC_OscConfig+0x4ec>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7fe fb7d 	bl	8001cf4 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe fb79 	bl	8001cf4 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e03f      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x44a>
 800361c:	e037      	b.n	800368e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e032      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800362a:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d028      	beq.n	800368a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d121      	bne.n	800368a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d11a      	bne.n	800368a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800365a:	4013      	ands	r3, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003660:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003662:	4293      	cmp	r3, r2
 8003664:	d111      	bne.n	800368a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	3b01      	subs	r3, #1
 8003674:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d107      	bne.n	800368a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40007000 	.word	0x40007000
 800369c:	40023800 	.word	0x40023800
 80036a0:	42470060 	.word	0x42470060

080036a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0cc      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d90c      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b65      	ldr	r3, [pc, #404]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800371a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d044      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d119      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e067      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b37      	ldr	r3, [pc, #220]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4934      	ldr	r1, [pc, #208]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fe faae 	bl	8001cf4 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fe faaa 	bl	8001cf4 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e04f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d20c      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	490a      	ldr	r1, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fa0e 	bl	8001c6c <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023c00 	.word	0x40023c00
 8003860:	40023800 	.word	0x40023800
 8003864:	08008bbc 	.word	0x08008bbc
 8003868:	20000000 	.word	0x20000000
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	b5b0      	push	{r4, r5, r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003876:	2100      	movs	r1, #0
 8003878:	6079      	str	r1, [r7, #4]
 800387a:	2100      	movs	r1, #0
 800387c:	60f9      	str	r1, [r7, #12]
 800387e:	2100      	movs	r1, #0
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003882:	2100      	movs	r1, #0
 8003884:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003886:	4952      	ldr	r1, [pc, #328]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003888:	6889      	ldr	r1, [r1, #8]
 800388a:	f001 010c 	and.w	r1, r1, #12
 800388e:	2908      	cmp	r1, #8
 8003890:	d00d      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x3e>
 8003892:	2908      	cmp	r1, #8
 8003894:	f200 8094 	bhi.w	80039c0 <HAL_RCC_GetSysClockFreq+0x150>
 8003898:	2900      	cmp	r1, #0
 800389a:	d002      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x32>
 800389c:	2904      	cmp	r1, #4
 800389e:	d003      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x38>
 80038a0:	e08e      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a2:	4b4c      	ldr	r3, [pc, #304]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80038a4:	60bb      	str	r3, [r7, #8]
       break;
 80038a6:	e08e      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038a8:	4b4b      	ldr	r3, [pc, #300]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80038aa:	60bb      	str	r3, [r7, #8]
      break;
 80038ac:	e08b      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038ae:	4948      	ldr	r1, [pc, #288]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80038b0:	6849      	ldr	r1, [r1, #4]
 80038b2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80038b6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038b8:	4945      	ldr	r1, [pc, #276]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80038ba:	6849      	ldr	r1, [r1, #4]
 80038bc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80038c0:	2900      	cmp	r1, #0
 80038c2:	d024      	beq.n	800390e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c4:	4942      	ldr	r1, [pc, #264]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80038c6:	6849      	ldr	r1, [r1, #4]
 80038c8:	0989      	lsrs	r1, r1, #6
 80038ca:	4608      	mov	r0, r1
 80038cc:	f04f 0100 	mov.w	r1, #0
 80038d0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80038d4:	f04f 0500 	mov.w	r5, #0
 80038d8:	ea00 0204 	and.w	r2, r0, r4
 80038dc:	ea01 0305 	and.w	r3, r1, r5
 80038e0:	493d      	ldr	r1, [pc, #244]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80038e2:	fb01 f003 	mul.w	r0, r1, r3
 80038e6:	2100      	movs	r1, #0
 80038e8:	fb01 f102 	mul.w	r1, r1, r2
 80038ec:	1844      	adds	r4, r0, r1
 80038ee:	493a      	ldr	r1, [pc, #232]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80038f0:	fba2 0101 	umull	r0, r1, r2, r1
 80038f4:	1863      	adds	r3, r4, r1
 80038f6:	4619      	mov	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	f7fc ffc4 	bl	800088c <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4613      	mov	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e04a      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390e:	4b30      	ldr	r3, [pc, #192]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	461a      	mov	r2, r3
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800391e:	f04f 0100 	mov.w	r1, #0
 8003922:	ea02 0400 	and.w	r4, r2, r0
 8003926:	ea03 0501 	and.w	r5, r3, r1
 800392a:	4620      	mov	r0, r4
 800392c:	4629      	mov	r1, r5
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	014b      	lsls	r3, r1, #5
 8003938:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800393c:	0142      	lsls	r2, r0, #5
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
 8003942:	1b00      	subs	r0, r0, r4
 8003944:	eb61 0105 	sbc.w	r1, r1, r5
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	018b      	lsls	r3, r1, #6
 8003952:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003956:	0182      	lsls	r2, r0, #6
 8003958:	1a12      	subs	r2, r2, r0
 800395a:	eb63 0301 	sbc.w	r3, r3, r1
 800395e:	f04f 0000 	mov.w	r0, #0
 8003962:	f04f 0100 	mov.w	r1, #0
 8003966:	00d9      	lsls	r1, r3, #3
 8003968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800396c:	00d0      	lsls	r0, r2, #3
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	1912      	adds	r2, r2, r4
 8003974:	eb45 0303 	adc.w	r3, r5, r3
 8003978:	f04f 0000 	mov.w	r0, #0
 800397c:	f04f 0100 	mov.w	r1, #0
 8003980:	0299      	lsls	r1, r3, #10
 8003982:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003986:	0290      	lsls	r0, r2, #10
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4610      	mov	r0, r2
 800398e:	4619      	mov	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	461a      	mov	r2, r3
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	f7fc ff78 	bl	800088c <__aeabi_uldivmod>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4613      	mov	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	3301      	adds	r3, #1
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	60bb      	str	r3, [r7, #8]
      break;
 80039be:	e002      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80039c2:	60bb      	str	r3, [r7, #8]
      break;
 80039c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039c6:	68bb      	ldr	r3, [r7, #8]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bdb0      	pop	{r4, r5, r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	00f42400 	.word	0x00f42400
 80039d8:	017d7840 	.word	0x017d7840

080039dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000000 	.word	0x20000000

080039f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039f8:	f7ff fff0 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	0a9b      	lsrs	r3, r3, #10
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	4903      	ldr	r1, [pc, #12]	; (8003a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40023800 	.word	0x40023800
 8003a18:	08008bcc 	.word	0x08008bcc

08003a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a20:	f7ff ffdc 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0b5b      	lsrs	r3, r3, #13
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4903      	ldr	r1, [pc, #12]	; (8003a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	08008bcc 	.word	0x08008bcc

08003a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e07b      	b.n	8003b4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d108      	bne.n	8003a70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a66:	d009      	beq.n	8003a7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	61da      	str	r2, [r3, #28]
 8003a6e:	e005      	b.n	8003a7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fedc 	bl	8001854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	ea42 0103 	orr.w	r1, r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	f003 0104 	and.w	r1, r3, #4
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	f003 0210 	and.w	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e041      	b.n	8003bec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d106      	bne.n	8003b82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7fd fed1 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3304      	adds	r3, #4
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f000 fad9 	bl	800414c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e041      	b.n	8003c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f839 	bl	8003c92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f000 fa8a 	bl	800414c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <HAL_TIM_PWM_Start+0x24>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e022      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d109      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0x3e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e015      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x58>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e008      	b.n	8003d12 <HAL_TIM_PWM_Start+0x6a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e07c      	b.n	8003e14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x82>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d28:	e013      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d104      	bne.n	8003d3a <HAL_TIM_PWM_Start+0x92>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d38:	e00b      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_PWM_Start+0xa2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d48:	e003      	b.n	8003d52 <HAL_TIM_PWM_Start+0xaa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2201      	movs	r2, #1
 8003d58:	6839      	ldr	r1, [r7, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fce0 	bl	8004720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2d      	ldr	r2, [pc, #180]	; (8003e1c <HAL_TIM_PWM_Start+0x174>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d004      	beq.n	8003d74 <HAL_TIM_PWM_Start+0xcc>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2c      	ldr	r2, [pc, #176]	; (8003e20 <HAL_TIM_PWM_Start+0x178>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <HAL_TIM_PWM_Start+0xd0>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_TIM_PWM_Start+0xd2>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a22      	ldr	r2, [pc, #136]	; (8003e1c <HAL_TIM_PWM_Start+0x174>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d022      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d01d      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <HAL_TIM_PWM_Start+0x17c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <HAL_TIM_PWM_Start+0x180>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <HAL_TIM_PWM_Start+0x184>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <HAL_TIM_PWM_Start+0x178>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <HAL_TIM_PWM_Start+0x188>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_TIM_PWM_Start+0x136>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <HAL_TIM_PWM_Start+0x18c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d111      	bne.n	8003e02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b06      	cmp	r3, #6
 8003dee:	d010      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e00:	e007      	b.n	8003e12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0201 	orr.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40010400 	.word	0x40010400
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800
 8003e2c:	40000c00 	.word	0x40000c00
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40001800 	.word	0x40001800

08003e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e0ae      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	f200 809f 	bhi.w	8003fa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e66:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003ea1 	.word	0x08003ea1
 8003e70:	08003fa5 	.word	0x08003fa5
 8003e74:	08003fa5 	.word	0x08003fa5
 8003e78:	08003fa5 	.word	0x08003fa5
 8003e7c:	08003ee1 	.word	0x08003ee1
 8003e80:	08003fa5 	.word	0x08003fa5
 8003e84:	08003fa5 	.word	0x08003fa5
 8003e88:	08003fa5 	.word	0x08003fa5
 8003e8c:	08003f23 	.word	0x08003f23
 8003e90:	08003fa5 	.word	0x08003fa5
 8003e94:	08003fa5 	.word	0x08003fa5
 8003e98:	08003fa5 	.word	0x08003fa5
 8003e9c:	08003f63 	.word	0x08003f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f9f0 	bl	800428c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0208 	orr.w	r2, r2, #8
 8003eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0204 	bic.w	r2, r2, #4
 8003eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6999      	ldr	r1, [r3, #24]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	619a      	str	r2, [r3, #24]
      break;
 8003ede:	e064      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fa40 	bl	800436c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6999      	ldr	r1, [r3, #24]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	021a      	lsls	r2, r3, #8
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	619a      	str	r2, [r3, #24]
      break;
 8003f20:	e043      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fa95 	bl	8004458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0208 	orr.w	r2, r2, #8
 8003f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0204 	bic.w	r2, r2, #4
 8003f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69d9      	ldr	r1, [r3, #28]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	61da      	str	r2, [r3, #28]
      break;
 8003f60:	e023      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fae9 	bl	8004540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69d9      	ldr	r1, [r3, #28]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	021a      	lsls	r2, r3, #8
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	61da      	str	r2, [r3, #28]
      break;
 8003fa2:	e002      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIM_ConfigClockSource+0x1c>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e0b4      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x186>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004010:	d03e      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0xd4>
 8004012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004016:	f200 8087 	bhi.w	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401e:	f000 8086 	beq.w	800412e <HAL_TIM_ConfigClockSource+0x172>
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004026:	d87f      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004028:	2b70      	cmp	r3, #112	; 0x70
 800402a:	d01a      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0xa6>
 800402c:	2b70      	cmp	r3, #112	; 0x70
 800402e:	d87b      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b60      	cmp	r3, #96	; 0x60
 8004032:	d050      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004034:	2b60      	cmp	r3, #96	; 0x60
 8004036:	d877      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b50      	cmp	r3, #80	; 0x50
 800403a:	d03c      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0xfa>
 800403c:	2b50      	cmp	r3, #80	; 0x50
 800403e:	d873      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d058      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d86f      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004048:	2b30      	cmp	r3, #48	; 0x30
 800404a:	d064      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15a>
 800404c:	2b30      	cmp	r3, #48	; 0x30
 800404e:	d86b      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004050:	2b20      	cmp	r3, #32
 8004052:	d060      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15a>
 8004054:	2b20      	cmp	r3, #32
 8004056:	d867      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d05c      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15a>
 800405c:	2b10      	cmp	r3, #16
 800405e:	d05a      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15a>
 8004060:	e062      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6899      	ldr	r1, [r3, #8]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f000 fb35 	bl	80046e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	609a      	str	r2, [r3, #8]
      break;
 800408e:	e04f      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6899      	ldr	r1, [r3, #8]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f000 fb1e 	bl	80046e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040b2:	609a      	str	r2, [r3, #8]
      break;
 80040b4:	e03c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f000 fa92 	bl	80045ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2150      	movs	r1, #80	; 0x50
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 faeb 	bl	80046aa <TIM_ITRx_SetConfig>
      break;
 80040d4:	e02c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6859      	ldr	r1, [r3, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f000 fab1 	bl	800464a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2160      	movs	r1, #96	; 0x60
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fadb 	bl	80046aa <TIM_ITRx_SetConfig>
      break;
 80040f4:	e01c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6859      	ldr	r1, [r3, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	461a      	mov	r2, r3
 8004104:	f000 fa72 	bl	80045ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2140      	movs	r1, #64	; 0x40
 800410e:	4618      	mov	r0, r3
 8004110:	f000 facb 	bl	80046aa <TIM_ITRx_SetConfig>
      break;
 8004114:	e00c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4619      	mov	r1, r3
 8004120:	4610      	mov	r0, r2
 8004122:	f000 fac2 	bl	80046aa <TIM_ITRx_SetConfig>
      break;
 8004126:	e003      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      break;
 800412c:	e000      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800412e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a40      	ldr	r2, [pc, #256]	; (8004260 <TIM_Base_SetConfig+0x114>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d00f      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3d      	ldr	r2, [pc, #244]	; (8004264 <TIM_Base_SetConfig+0x118>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00b      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3c      	ldr	r2, [pc, #240]	; (8004268 <TIM_Base_SetConfig+0x11c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d007      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3b      	ldr	r2, [pc, #236]	; (800426c <TIM_Base_SetConfig+0x120>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a3a      	ldr	r2, [pc, #232]	; (8004270 <TIM_Base_SetConfig+0x124>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2f      	ldr	r2, [pc, #188]	; (8004260 <TIM_Base_SetConfig+0x114>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d027      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2c      	ldr	r2, [pc, #176]	; (8004264 <TIM_Base_SetConfig+0x118>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d023      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <TIM_Base_SetConfig+0x11c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01f      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2a      	ldr	r2, [pc, #168]	; (800426c <TIM_Base_SetConfig+0x120>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a29      	ldr	r2, [pc, #164]	; (8004270 <TIM_Base_SetConfig+0x124>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d017      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a28      	ldr	r2, [pc, #160]	; (8004274 <TIM_Base_SetConfig+0x128>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a27      	ldr	r2, [pc, #156]	; (8004278 <TIM_Base_SetConfig+0x12c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a26      	ldr	r2, [pc, #152]	; (800427c <TIM_Base_SetConfig+0x130>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a25      	ldr	r2, [pc, #148]	; (8004280 <TIM_Base_SetConfig+0x134>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a24      	ldr	r2, [pc, #144]	; (8004284 <TIM_Base_SetConfig+0x138>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a23      	ldr	r2, [pc, #140]	; (8004288 <TIM_Base_SetConfig+0x13c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <TIM_Base_SetConfig+0x114>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0xf8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <TIM_Base_SetConfig+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d103      	bne.n	800424c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	615a      	str	r2, [r3, #20]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40010000 	.word	0x40010000
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800
 800426c:	40000c00 	.word	0x40000c00
 8004270:	40010400 	.word	0x40010400
 8004274:	40014000 	.word	0x40014000
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800
 8004280:	40001800 	.word	0x40001800
 8004284:	40001c00 	.word	0x40001c00
 8004288:	40002000 	.word	0x40002000

0800428c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f023 0201 	bic.w	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0303 	bic.w	r3, r3, #3
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f023 0302 	bic.w	r3, r3, #2
 80042d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a20      	ldr	r2, [pc, #128]	; (8004364 <TIM_OC1_SetConfig+0xd8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_OC1_SetConfig+0x64>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <TIM_OC1_SetConfig+0xdc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d10c      	bne.n	800430a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0308 	bic.w	r3, r3, #8
 80042f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 0304 	bic.w	r3, r3, #4
 8004308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <TIM_OC1_SetConfig+0xd8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_OC1_SetConfig+0x8e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a14      	ldr	r2, [pc, #80]	; (8004368 <TIM_OC1_SetConfig+0xdc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d111      	bne.n	800433e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	621a      	str	r2, [r3, #32]
}
 8004358:	bf00      	nop
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40010000 	.word	0x40010000
 8004368:	40010400 	.word	0x40010400

0800436c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f023 0210 	bic.w	r2, r3, #16
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0320 	bic.w	r3, r3, #32
 80043b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a22      	ldr	r2, [pc, #136]	; (8004450 <TIM_OC2_SetConfig+0xe4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_OC2_SetConfig+0x68>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a21      	ldr	r2, [pc, #132]	; (8004454 <TIM_OC2_SetConfig+0xe8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10d      	bne.n	80043f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a17      	ldr	r2, [pc, #92]	; (8004450 <TIM_OC2_SetConfig+0xe4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_OC2_SetConfig+0x94>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a16      	ldr	r2, [pc, #88]	; (8004454 <TIM_OC2_SetConfig+0xe8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d113      	bne.n	8004428 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800440e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40010400 	.word	0x40010400

08004458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a21      	ldr	r2, [pc, #132]	; (8004538 <TIM_OC3_SetConfig+0xe0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d003      	beq.n	80044be <TIM_OC3_SetConfig+0x66>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a20      	ldr	r2, [pc, #128]	; (800453c <TIM_OC3_SetConfig+0xe4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10d      	bne.n	80044da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a16      	ldr	r2, [pc, #88]	; (8004538 <TIM_OC3_SetConfig+0xe0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_OC3_SetConfig+0x92>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a15      	ldr	r2, [pc, #84]	; (800453c <TIM_OC3_SetConfig+0xe4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d113      	bne.n	8004512 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	621a      	str	r2, [r3, #32]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40010000 	.word	0x40010000
 800453c:	40010400 	.word	0x40010400

08004540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800458a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	031b      	lsls	r3, r3, #12
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a12      	ldr	r2, [pc, #72]	; (80045e4 <TIM_OC4_SetConfig+0xa4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_OC4_SetConfig+0x68>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a11      	ldr	r2, [pc, #68]	; (80045e8 <TIM_OC4_SetConfig+0xa8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d109      	bne.n	80045bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	019b      	lsls	r3, r3, #6
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40010400 	.word	0x40010400

080045ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f023 0201 	bic.w	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 030a 	bic.w	r3, r3, #10
 8004628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0210 	bic.w	r2, r3, #16
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	031b      	lsls	r3, r3, #12
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004686:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f043 0307 	orr.w	r3, r3, #7
 80046cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	609a      	str	r2, [r3, #8]
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	021a      	lsls	r2, r3, #8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	431a      	orrs	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4313      	orrs	r3, r2
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	609a      	str	r2, [r3, #8]
}
 8004714:	bf00      	nop
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2201      	movs	r2, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	43db      	mvns	r3, r3
 8004742:	401a      	ands	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1a      	ldr	r2, [r3, #32]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	431a      	orrs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004780:	2302      	movs	r3, #2
 8004782:	e05a      	b.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a21      	ldr	r2, [pc, #132]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d01d      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1d      	ldr	r2, [pc, #116]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1b      	ldr	r2, [pc, #108]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1a      	ldr	r2, [pc, #104]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a18      	ldr	r2, [pc, #96]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a17      	ldr	r2, [pc, #92]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a15      	ldr	r2, [pc, #84]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d10c      	bne.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4313      	orrs	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40000c00 	.word	0x40000c00
 8004858:	40010400 	.word	0x40010400
 800485c:	40014000 	.word	0x40014000
 8004860:	40001800 	.word	0x40001800

08004864 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800487c:	2302      	movs	r3, #2
 800487e:	e03d      	b.n	80048fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e03f      	b.n	800499a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fd f854 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2224      	movs	r2, #36	; 0x24
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800494a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f929 	bl	8004ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b08a      	sub	sp, #40	; 0x28
 80049a6:	af02      	add	r7, sp, #8
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	603b      	str	r3, [r7, #0]
 80049ae:	4613      	mov	r3, r2
 80049b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b20      	cmp	r3, #32
 80049c0:	d17c      	bne.n	8004abc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_UART_Transmit+0x2c>
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e075      	b.n	8004abe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_UART_Transmit+0x3e>
 80049dc:	2302      	movs	r3, #2
 80049de:	e06e      	b.n	8004abe <HAL_UART_Transmit+0x11c>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2221      	movs	r2, #33	; 0x21
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049f6:	f7fd f97d 	bl	8001cf4 <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	88fa      	ldrh	r2, [r7, #6]
 8004a06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a10:	d108      	bne.n	8004a24 <HAL_UART_Transmit+0x82>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	e003      	b.n	8004a2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a34:	e02a      	b.n	8004a8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2180      	movs	r1, #128	; 0x80
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f840 	bl	8004ac6 <UART_WaitOnFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e036      	b.n	8004abe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	3302      	adds	r3, #2
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	e007      	b.n	8004a7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	781a      	ldrb	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1cf      	bne.n	8004a36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2140      	movs	r1, #64	; 0x40
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f810 	bl	8004ac6 <UART_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e006      	b.n	8004abe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e000      	b.n	8004abe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b090      	sub	sp, #64	; 0x40
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad6:	e050      	b.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d04c      	beq.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ae6:	f7fd f905 	bl	8001cf4 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d241      	bcs.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	330c      	adds	r3, #12
 8004b14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b16:	637a      	str	r2, [r7, #52]	; 0x34
 8004b18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e5      	bne.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3314      	adds	r3, #20
 8004b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
 8004b40:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3314      	adds	r3, #20
 8004b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b4a:	623a      	str	r2, [r7, #32]
 8004b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	69f9      	ldr	r1, [r7, #28]
 8004b50:	6a3a      	ldr	r2, [r7, #32]
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e5      	bne.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e00f      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4013      	ands	r3, r2
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	bf0c      	ite	eq
 8004b8a:	2301      	moveq	r3, #1
 8004b8c:	2300      	movne	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d09f      	beq.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3740      	adds	r7, #64	; 0x40
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	b09f      	sub	sp, #124	; 0x7c
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bba:	68d9      	ldr	r1, [r3, #12]
 8004bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	ea40 0301 	orr.w	r3, r0, r1
 8004bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004be8:	f021 010c 	bic.w	r1, r1, #12
 8004bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	6999      	ldr	r1, [r3, #24]
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	ea40 0301 	orr.w	r3, r0, r1
 8004c0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4bc5      	ldr	r3, [pc, #788]	; (8004f28 <UART_SetConfig+0x384>)
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d004      	beq.n	8004c22 <UART_SetConfig+0x7e>
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4bc3      	ldr	r3, [pc, #780]	; (8004f2c <UART_SetConfig+0x388>)
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d103      	bne.n	8004c2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c22:	f7fe fefb 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 8004c26:	6778      	str	r0, [r7, #116]	; 0x74
 8004c28:	e002      	b.n	8004c30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c2a:	f7fe fee3 	bl	80039f4 <HAL_RCC_GetPCLK1Freq>
 8004c2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c38:	f040 80b6 	bne.w	8004da8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c3e:	461c      	mov	r4, r3
 8004c40:	f04f 0500 	mov.w	r5, #0
 8004c44:	4622      	mov	r2, r4
 8004c46:	462b      	mov	r3, r5
 8004c48:	1891      	adds	r1, r2, r2
 8004c4a:	6439      	str	r1, [r7, #64]	; 0x40
 8004c4c:	415b      	adcs	r3, r3
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c54:	1912      	adds	r2, r2, r4
 8004c56:	eb45 0303 	adc.w	r3, r5, r3
 8004c5a:	f04f 0000 	mov.w	r0, #0
 8004c5e:	f04f 0100 	mov.w	r1, #0
 8004c62:	00d9      	lsls	r1, r3, #3
 8004c64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c68:	00d0      	lsls	r0, r2, #3
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	1911      	adds	r1, r2, r4
 8004c70:	6639      	str	r1, [r7, #96]	; 0x60
 8004c72:	416b      	adcs	r3, r5
 8004c74:	667b      	str	r3, [r7, #100]	; 0x64
 8004c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	1891      	adds	r1, r2, r2
 8004c82:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c84:	415b      	adcs	r3, r3
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c90:	f7fb fdfc 	bl	800088c <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4ba5      	ldr	r3, [pc, #660]	; (8004f30 <UART_SetConfig+0x38c>)
 8004c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	011e      	lsls	r6, r3, #4
 8004ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca4:	461c      	mov	r4, r3
 8004ca6:	f04f 0500 	mov.w	r5, #0
 8004caa:	4622      	mov	r2, r4
 8004cac:	462b      	mov	r3, r5
 8004cae:	1891      	adds	r1, r2, r2
 8004cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8004cb2:	415b      	adcs	r3, r3
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cba:	1912      	adds	r2, r2, r4
 8004cbc:	eb45 0303 	adc.w	r3, r5, r3
 8004cc0:	f04f 0000 	mov.w	r0, #0
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	00d9      	lsls	r1, r3, #3
 8004cca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cce:	00d0      	lsls	r0, r2, #3
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	1911      	adds	r1, r2, r4
 8004cd6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cd8:	416b      	adcs	r3, r5
 8004cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cea:	415b      	adcs	r3, r3
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cf2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004cf6:	f7fb fdc9 	bl	800088c <__aeabi_uldivmod>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4b8c      	ldr	r3, [pc, #560]	; (8004f30 <UART_SetConfig+0x38c>)
 8004d00:	fba3 1302 	umull	r1, r3, r3, r2
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	2164      	movs	r1, #100	; 0x64
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	3332      	adds	r3, #50	; 0x32
 8004d12:	4a87      	ldr	r2, [pc, #540]	; (8004f30 <UART_SetConfig+0x38c>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d20:	441e      	add	r6, r3
 8004d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d24:	4618      	mov	r0, r3
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	1894      	adds	r4, r2, r2
 8004d30:	623c      	str	r4, [r7, #32]
 8004d32:	415b      	adcs	r3, r3
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
 8004d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d3a:	1812      	adds	r2, r2, r0
 8004d3c:	eb41 0303 	adc.w	r3, r1, r3
 8004d40:	f04f 0400 	mov.w	r4, #0
 8004d44:	f04f 0500 	mov.w	r5, #0
 8004d48:	00dd      	lsls	r5, r3, #3
 8004d4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d4e:	00d4      	lsls	r4, r2, #3
 8004d50:	4622      	mov	r2, r4
 8004d52:	462b      	mov	r3, r5
 8004d54:	1814      	adds	r4, r2, r0
 8004d56:	653c      	str	r4, [r7, #80]	; 0x50
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	461a      	mov	r2, r3
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	1891      	adds	r1, r2, r2
 8004d68:	61b9      	str	r1, [r7, #24]
 8004d6a:	415b      	adcs	r3, r3
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d76:	f7fb fd89 	bl	800088c <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4b6c      	ldr	r3, [pc, #432]	; (8004f30 <UART_SetConfig+0x38c>)
 8004d80:	fba3 1302 	umull	r1, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	2164      	movs	r1, #100	; 0x64
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	3332      	adds	r3, #50	; 0x32
 8004d92:	4a67      	ldr	r2, [pc, #412]	; (8004f30 <UART_SetConfig+0x38c>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	f003 0207 	and.w	r2, r3, #7
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4432      	add	r2, r6
 8004da4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da6:	e0b9      	b.n	8004f1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004daa:	461c      	mov	r4, r3
 8004dac:	f04f 0500 	mov.w	r5, #0
 8004db0:	4622      	mov	r2, r4
 8004db2:	462b      	mov	r3, r5
 8004db4:	1891      	adds	r1, r2, r2
 8004db6:	6139      	str	r1, [r7, #16]
 8004db8:	415b      	adcs	r3, r3
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dc0:	1912      	adds	r2, r2, r4
 8004dc2:	eb45 0303 	adc.w	r3, r5, r3
 8004dc6:	f04f 0000 	mov.w	r0, #0
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	00d9      	lsls	r1, r3, #3
 8004dd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dd4:	00d0      	lsls	r0, r2, #3
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	eb12 0804 	adds.w	r8, r2, r4
 8004dde:	eb43 0905 	adc.w	r9, r3, r5
 8004de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	008b      	lsls	r3, r1, #2
 8004df6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dfa:	0082      	lsls	r2, r0, #2
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	4649      	mov	r1, r9
 8004e00:	f7fb fd44 	bl	800088c <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4b49      	ldr	r3, [pc, #292]	; (8004f30 <UART_SetConfig+0x38c>)
 8004e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	011e      	lsls	r6, r3, #4
 8004e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e14:	4618      	mov	r0, r3
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	1894      	adds	r4, r2, r2
 8004e20:	60bc      	str	r4, [r7, #8]
 8004e22:	415b      	adcs	r3, r3
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e2a:	1812      	adds	r2, r2, r0
 8004e2c:	eb41 0303 	adc.w	r3, r1, r3
 8004e30:	f04f 0400 	mov.w	r4, #0
 8004e34:	f04f 0500 	mov.w	r5, #0
 8004e38:	00dd      	lsls	r5, r3, #3
 8004e3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e3e:	00d4      	lsls	r4, r2, #3
 8004e40:	4622      	mov	r2, r4
 8004e42:	462b      	mov	r3, r5
 8004e44:	1814      	adds	r4, r2, r0
 8004e46:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e48:	414b      	adcs	r3, r1
 8004e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	008b      	lsls	r3, r1, #2
 8004e60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e64:	0082      	lsls	r2, r0, #2
 8004e66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e6a:	f7fb fd0f 	bl	800088c <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4b2f      	ldr	r3, [pc, #188]	; (8004f30 <UART_SetConfig+0x38c>)
 8004e74:	fba3 1302 	umull	r1, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	2164      	movs	r1, #100	; 0x64
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	3332      	adds	r3, #50	; 0x32
 8004e86:	4a2a      	ldr	r2, [pc, #168]	; (8004f30 <UART_SetConfig+0x38c>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e92:	441e      	add	r6, r3
 8004e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e96:	4618      	mov	r0, r3
 8004e98:	f04f 0100 	mov.w	r1, #0
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	1894      	adds	r4, r2, r2
 8004ea2:	603c      	str	r4, [r7, #0]
 8004ea4:	415b      	adcs	r3, r3
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eac:	1812      	adds	r2, r2, r0
 8004eae:	eb41 0303 	adc.w	r3, r1, r3
 8004eb2:	f04f 0400 	mov.w	r4, #0
 8004eb6:	f04f 0500 	mov.w	r5, #0
 8004eba:	00dd      	lsls	r5, r3, #3
 8004ebc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ec0:	00d4      	lsls	r4, r2, #3
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	eb12 0a00 	adds.w	sl, r2, r0
 8004eca:	eb43 0b01 	adc.w	fp, r3, r1
 8004ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	008b      	lsls	r3, r1, #2
 8004ee2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ee6:	0082      	lsls	r2, r0, #2
 8004ee8:	4650      	mov	r0, sl
 8004eea:	4659      	mov	r1, fp
 8004eec:	f7fb fcce 	bl	800088c <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <UART_SetConfig+0x38c>)
 8004ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	2164      	movs	r1, #100	; 0x64
 8004efe:	fb01 f303 	mul.w	r3, r1, r3
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	3332      	adds	r3, #50	; 0x32
 8004f08:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <UART_SetConfig+0x38c>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	f003 020f 	and.w	r2, r3, #15
 8004f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4432      	add	r2, r6
 8004f1a:	609a      	str	r2, [r3, #8]
}
 8004f1c:	bf00      	nop
 8004f1e:	377c      	adds	r7, #124	; 0x7c
 8004f20:	46bd      	mov	sp, r7
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	bf00      	nop
 8004f28:	40011000 	.word	0x40011000
 8004f2c:	40011400 	.word	0x40011400
 8004f30:	51eb851f 	.word	0x51eb851f

08004f34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004f38:	4904      	ldr	r1, [pc, #16]	; (8004f4c <MX_FATFS_Init+0x18>)
 8004f3a:	4805      	ldr	r0, [pc, #20]	; (8004f50 <MX_FATFS_Init+0x1c>)
 8004f3c:	f003 f812 	bl	8007f64 <FATFS_LinkDriver>
 8004f40:	4603      	mov	r3, r0
 8004f42:	461a      	mov	r2, r3
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <MX_FATFS_Init+0x20>)
 8004f46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004f48:	bf00      	nop
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	200007fc 	.word	0x200007fc
 8004f50:	2000000c 	.word	0x2000000c
 8004f54:	20000800 	.word	0x20000800

08004f58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004f5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004f72:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <USER_initialize+0x24>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <USER_initialize+0x24>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	20000009 	.word	0x20000009

08004f90 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <USER_status+0x24>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004fa0:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <USER_status+0x24>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000009 	.word	0x20000009

08004fb8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004fc8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004fe6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	603a      	str	r2, [r7, #0]
 8004ffe:	71fb      	strb	r3, [r7, #7]
 8005000:	460b      	mov	r3, r1
 8005002:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
    return res;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	4a08      	ldr	r2, [pc, #32]	; (8005048 <disk_status+0x30>)
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	79fa      	ldrb	r2, [r7, #7]
 8005030:	4905      	ldr	r1, [pc, #20]	; (8005048 <disk_status+0x30>)
 8005032:	440a      	add	r2, r1
 8005034:	7a12      	ldrb	r2, [r2, #8]
 8005036:	4610      	mov	r0, r2
 8005038:	4798      	blx	r3
 800503a:	4603      	mov	r3, r0
 800503c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	200000d4 	.word	0x200000d4

0800504c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	4a0d      	ldr	r2, [pc, #52]	; (8005094 <disk_initialize+0x48>)
 800505e:	5cd3      	ldrb	r3, [r2, r3]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d111      	bne.n	8005088 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	4a0b      	ldr	r2, [pc, #44]	; (8005094 <disk_initialize+0x48>)
 8005068:	2101      	movs	r1, #1
 800506a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	4a09      	ldr	r2, [pc, #36]	; (8005094 <disk_initialize+0x48>)
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	79fa      	ldrb	r2, [r7, #7]
 800507a:	4906      	ldr	r1, [pc, #24]	; (8005094 <disk_initialize+0x48>)
 800507c:	440a      	add	r2, r1
 800507e:	7a12      	ldrb	r2, [r2, #8]
 8005080:	4610      	mov	r0, r2
 8005082:	4798      	blx	r3
 8005084:	4603      	mov	r3, r0
 8005086:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005088:	7bfb      	ldrb	r3, [r7, #15]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	200000d4 	.word	0x200000d4

08005098 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	4603      	mov	r3, r0
 80050a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	4a0a      	ldr	r2, [pc, #40]	; (80050d4 <disk_read+0x3c>)
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	689c      	ldr	r4, [r3, #8]
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	4a07      	ldr	r2, [pc, #28]	; (80050d4 <disk_read+0x3c>)
 80050b8:	4413      	add	r3, r2
 80050ba:	7a18      	ldrb	r0, [r3, #8]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	47a0      	blx	r4
 80050c4:	4603      	mov	r3, r0
 80050c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd90      	pop	{r4, r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200000d4 	.word	0x200000d4

080050d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	4603      	mov	r3, r0
 80050e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	4a0a      	ldr	r2, [pc, #40]	; (8005114 <disk_write+0x3c>)
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	68dc      	ldr	r4, [r3, #12]
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	4a07      	ldr	r2, [pc, #28]	; (8005114 <disk_write+0x3c>)
 80050f8:	4413      	add	r3, r2
 80050fa:	7a18      	ldrb	r0, [r3, #8]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	47a0      	blx	r4
 8005104:	4603      	mov	r3, r0
 8005106:	75fb      	strb	r3, [r7, #23]
  return res;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
}
 800510a:	4618      	mov	r0, r3
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	bd90      	pop	{r4, r7, pc}
 8005112:	bf00      	nop
 8005114:	200000d4 	.word	0x200000d4

08005118 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	603a      	str	r2, [r7, #0]
 8005122:	71fb      	strb	r3, [r7, #7]
 8005124:	460b      	mov	r3, r1
 8005126:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	4a09      	ldr	r2, [pc, #36]	; (8005150 <disk_ioctl+0x38>)
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	79fa      	ldrb	r2, [r7, #7]
 8005136:	4906      	ldr	r1, [pc, #24]	; (8005150 <disk_ioctl+0x38>)
 8005138:	440a      	add	r2, r1
 800513a:	7a10      	ldrb	r0, [r2, #8]
 800513c:	79b9      	ldrb	r1, [r7, #6]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	4798      	blx	r3
 8005142:	4603      	mov	r3, r0
 8005144:	73fb      	strb	r3, [r7, #15]
  return res;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	200000d4 	.word	0x200000d4

08005154 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3301      	adds	r3, #1
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005164:	89fb      	ldrh	r3, [r7, #14]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	b21a      	sxth	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	b21b      	sxth	r3, r3
 8005170:	4313      	orrs	r3, r2
 8005172:	b21b      	sxth	r3, r3
 8005174:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005176:	89fb      	ldrh	r3, [r7, #14]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3303      	adds	r3, #3
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	3202      	adds	r2, #2
 800519c:	7812      	ldrb	r2, [r2, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	3201      	adds	r2, #1
 80051aa:	7812      	ldrb	r2, [r2, #0]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	7812      	ldrb	r2, [r2, #0]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
	return rv;
 80051bc:	68fb      	ldr	r3, [r7, #12]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	887a      	ldrh	r2, [r7, #2]
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	887b      	ldrh	r3, [r7, #2]
 80051e4:	0a1b      	lsrs	r3, r3, #8
 80051e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	607a      	str	r2, [r7, #4]
 80051ee:	887a      	ldrh	r2, [r7, #2]
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	0a1b      	lsrs	r3, r3, #8
 800521a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00d      	beq.n	800528e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	1c53      	adds	r3, r2, #1
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	1c59      	adds	r1, r3, #1
 800527c:	6179      	str	r1, [r7, #20]
 800527e:	7812      	ldrb	r2, [r2, #0]
 8005280:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3b01      	subs	r3, #1
 8005286:	607b      	str	r3, [r7, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f1      	bne.n	8005272 <mem_cpy+0x1a>
	}
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800529a:	b480      	push	{r7}
 800529c:	b087      	sub	sp, #28
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	617a      	str	r2, [r7, #20]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	607b      	str	r3, [r7, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f3      	bne.n	80052aa <mem_set+0x10>
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80052d0:	b480      	push	{r7}
 80052d2:	b089      	sub	sp, #36	; 0x24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	61fa      	str	r2, [r7, #28]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	4619      	mov	r1, r3
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	61ba      	str	r2, [r7, #24]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	1acb      	subs	r3, r1, r3
 80052fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3b01      	subs	r3, #1
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <mem_cmp+0x40>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0eb      	beq.n	80052e8 <mem_cmp+0x18>

	return r;
 8005310:	697b      	ldr	r3, [r7, #20]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3724      	adds	r7, #36	; 0x24
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005328:	e002      	b.n	8005330 <chk_chr+0x12>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3301      	adds	r3, #1
 800532e:	607b      	str	r3, [r7, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <chk_chr+0x26>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	4293      	cmp	r3, r2
 8005342:	d1f2      	bne.n	800532a <chk_chr+0xc>
	return *str;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	781b      	ldrb	r3, [r3, #0]
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800535e:	2300      	movs	r3, #0
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	e029      	b.n	80053bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005368:	4a27      	ldr	r2, [pc, #156]	; (8005408 <chk_lock+0xb4>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	4413      	add	r3, r2
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d01d      	beq.n	80053b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005376:	4a24      	ldr	r2, [pc, #144]	; (8005408 <chk_lock+0xb4>)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	4413      	add	r3, r2
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d116      	bne.n	80053b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005388:	4a1f      	ldr	r2, [pc, #124]	; (8005408 <chk_lock+0xb4>)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	4413      	add	r3, r2
 8005390:	3304      	adds	r3, #4
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005398:	429a      	cmp	r2, r3
 800539a:	d10c      	bne.n	80053b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800539c:	4a1a      	ldr	r2, [pc, #104]	; (8005408 <chk_lock+0xb4>)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	4413      	add	r3, r2
 80053a4:	3308      	adds	r3, #8
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d102      	bne.n	80053b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80053b0:	e007      	b.n	80053c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80053b2:	2301      	movs	r3, #1
 80053b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3301      	adds	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d9d2      	bls.n	8005368 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d109      	bne.n	80053dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <chk_lock+0x80>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d101      	bne.n	80053d8 <chk_lock+0x84>
 80053d4:	2300      	movs	r3, #0
 80053d6:	e010      	b.n	80053fa <chk_lock+0xa6>
 80053d8:	2312      	movs	r3, #18
 80053da:	e00e      	b.n	80053fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d108      	bne.n	80053f4 <chk_lock+0xa0>
 80053e2:	4a09      	ldr	r2, [pc, #36]	; (8005408 <chk_lock+0xb4>)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	4413      	add	r3, r2
 80053ea:	330c      	adds	r3, #12
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f2:	d101      	bne.n	80053f8 <chk_lock+0xa4>
 80053f4:	2310      	movs	r3, #16
 80053f6:	e000      	b.n	80053fa <chk_lock+0xa6>
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	200000b4 	.word	0x200000b4

0800540c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005412:	2300      	movs	r3, #0
 8005414:	607b      	str	r3, [r7, #4]
 8005416:	e002      	b.n	800541e <enq_lock+0x12>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3301      	adds	r3, #1
 800541c:	607b      	str	r3, [r7, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d806      	bhi.n	8005432 <enq_lock+0x26>
 8005424:	4a09      	ldr	r2, [pc, #36]	; (800544c <enq_lock+0x40>)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	4413      	add	r3, r2
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f2      	bne.n	8005418 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b02      	cmp	r3, #2
 8005436:	bf14      	ite	ne
 8005438:	2301      	movne	r3, #1
 800543a:	2300      	moveq	r3, #0
 800543c:	b2db      	uxtb	r3, r3
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	200000b4 	.word	0x200000b4

08005450 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	e01f      	b.n	80054a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005460:	4a41      	ldr	r2, [pc, #260]	; (8005568 <inc_lock+0x118>)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	4413      	add	r3, r2
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d113      	bne.n	800549a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005472:	4a3d      	ldr	r2, [pc, #244]	; (8005568 <inc_lock+0x118>)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	4413      	add	r3, r2
 800547a:	3304      	adds	r3, #4
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005482:	429a      	cmp	r2, r3
 8005484:	d109      	bne.n	800549a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005486:	4a38      	ldr	r2, [pc, #224]	; (8005568 <inc_lock+0x118>)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	4413      	add	r3, r2
 800548e:	3308      	adds	r3, #8
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005496:	429a      	cmp	r2, r3
 8005498:	d006      	beq.n	80054a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d9dc      	bls.n	8005460 <inc_lock+0x10>
 80054a6:	e000      	b.n	80054aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80054a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d132      	bne.n	8005516 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e002      	b.n	80054bc <inc_lock+0x6c>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d806      	bhi.n	80054d0 <inc_lock+0x80>
 80054c2:	4a29      	ldr	r2, [pc, #164]	; (8005568 <inc_lock+0x118>)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	4413      	add	r3, r2
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f2      	bne.n	80054b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d101      	bne.n	80054da <inc_lock+0x8a>
 80054d6:	2300      	movs	r3, #0
 80054d8:	e040      	b.n	800555c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4922      	ldr	r1, [pc, #136]	; (8005568 <inc_lock+0x118>)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	440b      	add	r3, r1
 80054e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	491e      	ldr	r1, [pc, #120]	; (8005568 <inc_lock+0x118>)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	440b      	add	r3, r1
 80054f4:	3304      	adds	r3, #4
 80054f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695a      	ldr	r2, [r3, #20]
 80054fc:	491a      	ldr	r1, [pc, #104]	; (8005568 <inc_lock+0x118>)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	440b      	add	r3, r1
 8005504:	3308      	adds	r3, #8
 8005506:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005508:	4a17      	ldr	r2, [pc, #92]	; (8005568 <inc_lock+0x118>)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	4413      	add	r3, r2
 8005510:	330c      	adds	r3, #12
 8005512:	2200      	movs	r2, #0
 8005514:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d009      	beq.n	8005530 <inc_lock+0xe0>
 800551c:	4a12      	ldr	r2, [pc, #72]	; (8005568 <inc_lock+0x118>)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	4413      	add	r3, r2
 8005524:	330c      	adds	r3, #12
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <inc_lock+0xe0>
 800552c:	2300      	movs	r3, #0
 800552e:	e015      	b.n	800555c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d108      	bne.n	8005548 <inc_lock+0xf8>
 8005536:	4a0c      	ldr	r2, [pc, #48]	; (8005568 <inc_lock+0x118>)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	4413      	add	r3, r2
 800553e:	330c      	adds	r3, #12
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	e001      	b.n	800554c <inc_lock+0xfc>
 8005548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800554c:	4906      	ldr	r1, [pc, #24]	; (8005568 <inc_lock+0x118>)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	440b      	add	r3, r1
 8005554:	330c      	adds	r3, #12
 8005556:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3301      	adds	r3, #1
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	200000b4 	.word	0x200000b4

0800556c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3b01      	subs	r3, #1
 8005578:	607b      	str	r3, [r7, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d825      	bhi.n	80055cc <dec_lock+0x60>
		n = Files[i].ctr;
 8005580:	4a17      	ldr	r2, [pc, #92]	; (80055e0 <dec_lock+0x74>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	4413      	add	r3, r2
 8005588:	330c      	adds	r3, #12
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800558e:	89fb      	ldrh	r3, [r7, #14]
 8005590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005594:	d101      	bne.n	800559a <dec_lock+0x2e>
 8005596:	2300      	movs	r3, #0
 8005598:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800559a:	89fb      	ldrh	r3, [r7, #14]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <dec_lock+0x3a>
 80055a0:	89fb      	ldrh	r3, [r7, #14]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80055a6:	4a0e      	ldr	r2, [pc, #56]	; (80055e0 <dec_lock+0x74>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	4413      	add	r3, r2
 80055ae:	330c      	adds	r3, #12
 80055b0:	89fa      	ldrh	r2, [r7, #14]
 80055b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80055b4:	89fb      	ldrh	r3, [r7, #14]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <dec_lock+0x5a>
 80055ba:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <dec_lock+0x74>)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	4413      	add	r3, r2
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	737b      	strb	r3, [r7, #13]
 80055ca:	e001      	b.n	80055d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80055cc:	2302      	movs	r3, #2
 80055ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80055d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	200000b4 	.word	0x200000b4

080055e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e010      	b.n	8005614 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80055f2:	4a0d      	ldr	r2, [pc, #52]	; (8005628 <clear_lock+0x44>)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	4413      	add	r3, r2
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d105      	bne.n	800560e <clear_lock+0x2a>
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <clear_lock+0x44>)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	4413      	add	r3, r2
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3301      	adds	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d9eb      	bls.n	80055f2 <clear_lock+0xe>
	}
}
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	200000b4 	.word	0x200000b4

0800562c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	78db      	ldrb	r3, [r3, #3]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d034      	beq.n	80056aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	7858      	ldrb	r0, [r3, #1]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005650:	2301      	movs	r3, #1
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	f7ff fd40 	bl	80050d8 <disk_write>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <sync_window+0x38>
			res = FR_DISK_ERR;
 800565e:	2301      	movs	r3, #1
 8005660:	73fb      	strb	r3, [r7, #15]
 8005662:	e022      	b.n	80056aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	1ad2      	subs	r2, r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	429a      	cmp	r2, r3
 8005678:	d217      	bcs.n	80056aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	789b      	ldrb	r3, [r3, #2]
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	e010      	b.n	80056a4 <sync_window+0x78>
					wsect += fs->fsize;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4413      	add	r3, r2
 800568a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	7858      	ldrb	r0, [r3, #1]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005696:	2301      	movs	r3, #1
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	f7ff fd1d 	bl	80050d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d8eb      	bhi.n	8005682 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d01b      	beq.n	8005704 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff ffad 	bl	800562c <sync_window>
 80056d2:	4603      	mov	r3, r0
 80056d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d113      	bne.n	8005704 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	7858      	ldrb	r0, [r3, #1]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80056e6:	2301      	movs	r3, #1
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	f7ff fcd5 	bl	8005098 <disk_read>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d004      	beq.n	80056fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005704:	7bfb      	ldrb	r3, [r7, #15]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff ff87 	bl	800562c <sync_window>
 800571e:	4603      	mov	r3, r0
 8005720:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d158      	bne.n	80057da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d148      	bne.n	80057c2 <sync_fs+0xb2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	791b      	ldrb	r3, [r3, #4]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d144      	bne.n	80057c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3330      	adds	r3, #48	; 0x30
 800573c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fda9 	bl	800529a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3330      	adds	r3, #48	; 0x30
 800574c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005750:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff fd38 	bl	80051ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3330      	adds	r3, #48	; 0x30
 800575e:	4921      	ldr	r1, [pc, #132]	; (80057e4 <sync_fs+0xd4>)
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fd4d 	bl	8005200 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3330      	adds	r3, #48	; 0x30
 800576a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800576e:	491e      	ldr	r1, [pc, #120]	; (80057e8 <sync_fs+0xd8>)
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff fd45 	bl	8005200 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3330      	adds	r3, #48	; 0x30
 800577a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f7ff fd3b 	bl	8005200 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3330      	adds	r3, #48	; 0x30
 800578e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f7ff fd31 	bl	8005200 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	7858      	ldrb	r0, [r3, #1]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b6:	2301      	movs	r3, #1
 80057b8:	f7ff fc8e 	bl	80050d8 <disk_write>
			fs->fsi_flag = 0;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	2200      	movs	r2, #0
 80057c8:	2100      	movs	r1, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff fca4 	bl	8005118 <disk_ioctl>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <sync_fs+0xca>
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	41615252 	.word	0x41615252
 80057e8:	61417272 	.word	0x61417272

080057ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	3b02      	subs	r3, #2
 80057fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	3b02      	subs	r3, #2
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d301      	bcc.n	800580c <clust2sect+0x20>
 8005808:	2300      	movs	r3, #0
 800580a:	e008      	b.n	800581e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	895b      	ldrh	r3, [r3, #10]
 8005810:	461a      	mov	r2, r3
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	fb03 f202 	mul.w	r2, r3, r2
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	4413      	add	r3, r2
}
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d904      	bls.n	800584a <get_fat+0x20>
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d302      	bcc.n	8005850 <get_fat+0x26>
		val = 1;	/* Internal error */
 800584a:	2301      	movs	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	e08f      	b.n	8005970 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005850:	f04f 33ff 	mov.w	r3, #4294967295
 8005854:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b03      	cmp	r3, #3
 800585c:	d062      	beq.n	8005924 <get_fat+0xfa>
 800585e:	2b03      	cmp	r3, #3
 8005860:	dc7c      	bgt.n	800595c <get_fat+0x132>
 8005862:	2b01      	cmp	r3, #1
 8005864:	d002      	beq.n	800586c <get_fat+0x42>
 8005866:	2b02      	cmp	r3, #2
 8005868:	d042      	beq.n	80058f0 <get_fat+0xc6>
 800586a:	e077      	b.n	800595c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	0a5b      	lsrs	r3, r3, #9
 8005882:	4413      	add	r3, r2
 8005884:	4619      	mov	r1, r3
 8005886:	6938      	ldr	r0, [r7, #16]
 8005888:	f7ff ff14 	bl	80056b4 <move_window>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d167      	bne.n	8005962 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	60fa      	str	r2, [r7, #12]
 8005898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4413      	add	r3, r2
 80058a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	6a1a      	ldr	r2, [r3, #32]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	0a5b      	lsrs	r3, r3, #9
 80058ae:	4413      	add	r3, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	6938      	ldr	r0, [r7, #16]
 80058b4:	f7ff fefe 	bl	80056b4 <move_window>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d153      	bne.n	8005966 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4413      	add	r3, r2
 80058c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	461a      	mov	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <get_fat+0xbc>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	091b      	lsrs	r3, r3, #4
 80058e4:	e002      	b.n	80058ec <get_fat+0xc2>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ec:	617b      	str	r3, [r7, #20]
			break;
 80058ee:	e03f      	b.n	8005970 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	6a1a      	ldr	r2, [r3, #32]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	4413      	add	r3, r2
 80058fa:	4619      	mov	r1, r3
 80058fc:	6938      	ldr	r0, [r7, #16]
 80058fe:	f7ff fed9 	bl	80056b4 <move_window>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d130      	bne.n	800596a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005916:	4413      	add	r3, r2
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fc1b 	bl	8005154 <ld_word>
 800591e:	4603      	mov	r3, r0
 8005920:	617b      	str	r3, [r7, #20]
			break;
 8005922:	e025      	b.n	8005970 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	6a1a      	ldr	r2, [r3, #32]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	09db      	lsrs	r3, r3, #7
 800592c:	4413      	add	r3, r2
 800592e:	4619      	mov	r1, r3
 8005930:	6938      	ldr	r0, [r7, #16]
 8005932:	f7ff febf 	bl	80056b4 <move_window>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d118      	bne.n	800596e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800594a:	4413      	add	r3, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fc19 	bl	8005184 <ld_dword>
 8005952:	4603      	mov	r3, r0
 8005954:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005958:	617b      	str	r3, [r7, #20]
			break;
 800595a:	e009      	b.n	8005970 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800595c:	2301      	movs	r3, #1
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	e006      	b.n	8005970 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005962:	bf00      	nop
 8005964:	e004      	b.n	8005970 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005966:	bf00      	nop
 8005968:	e002      	b.n	8005970 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800596a:	bf00      	nop
 800596c:	e000      	b.n	8005970 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800596e:	bf00      	nop
		}
	}

	return val;
 8005970:	697b      	ldr	r3, [r7, #20]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800597a:	b590      	push	{r4, r7, lr}
 800597c:	b089      	sub	sp, #36	; 0x24
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005986:	2302      	movs	r3, #2
 8005988:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b01      	cmp	r3, #1
 800598e:	f240 80d2 	bls.w	8005b36 <put_fat+0x1bc>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	f080 80cc 	bcs.w	8005b36 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	f000 8096 	beq.w	8005ad4 <put_fat+0x15a>
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	f300 80cd 	bgt.w	8005b48 <put_fat+0x1ce>
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d002      	beq.n	80059b8 <put_fat+0x3e>
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d06e      	beq.n	8005a94 <put_fat+0x11a>
 80059b6:	e0c7      	b.n	8005b48 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	085b      	lsrs	r3, r3, #1
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4413      	add	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a1a      	ldr	r2, [r3, #32]
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	0a5b      	lsrs	r3, r3, #9
 80059ce:	4413      	add	r3, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff fe6e 	bl	80056b4 <move_window>
 80059d8:	4603      	mov	r3, r0
 80059da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059dc:	7ffb      	ldrb	r3, [r7, #31]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f040 80ab 	bne.w	8005b3a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	1c59      	adds	r1, r3, #1
 80059ee:	61b9      	str	r1, [r7, #24]
 80059f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f4:	4413      	add	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00d      	beq.n	8005a1e <put_fat+0xa4>
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b25b      	sxtb	r3, r3
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	b25a      	sxtb	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	b25b      	sxtb	r3, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b25b      	sxtb	r3, r3
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	e001      	b.n	8005a22 <put_fat+0xa8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a1a      	ldr	r2, [r3, #32]
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	0a5b      	lsrs	r3, r3, #9
 8005a34:	4413      	add	r3, r2
 8005a36:	4619      	mov	r1, r3
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff fe3b 	bl	80056b4 <move_window>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a42:	7ffb      	ldrb	r3, [r7, #31]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d17a      	bne.n	8005b3e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a54:	4413      	add	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <put_fat+0xf0>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	e00e      	b.n	8005a88 <put_fat+0x10e>
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b25b      	sxtb	r3, r3
 8005a70:	f023 030f 	bic.w	r3, r3, #15
 8005a74:	b25a      	sxtb	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	0a1b      	lsrs	r3, r3, #8
 8005a7a:	b25b      	sxtb	r3, r3
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	b25b      	sxtb	r3, r3
 8005a82:	4313      	orrs	r3, r2
 8005a84:	b25b      	sxtb	r3, r3
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	70da      	strb	r2, [r3, #3]
			break;
 8005a92:	e059      	b.n	8005b48 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a1a      	ldr	r2, [r3, #32]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	0a1b      	lsrs	r3, r3, #8
 8005a9c:	4413      	add	r3, r2
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7ff fe07 	bl	80056b4 <move_window>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005aaa:	7ffb      	ldrb	r3, [r7, #31]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d148      	bne.n	8005b42 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005abe:	4413      	add	r3, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	b292      	uxth	r2, r2
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff fb7f 	bl	80051ca <st_word>
			fs->wflag = 1;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	70da      	strb	r2, [r3, #3]
			break;
 8005ad2:	e039      	b.n	8005b48 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a1a      	ldr	r2, [r3, #32]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	09db      	lsrs	r3, r3, #7
 8005adc:	4413      	add	r3, r2
 8005ade:	4619      	mov	r1, r3
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff fde7 	bl	80056b4 <move_window>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005aea:	7ffb      	ldrb	r3, [r7, #31]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d12a      	bne.n	8005b46 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005b04:	4413      	add	r3, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff fb3c 	bl	8005184 <ld_dword>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b12:	4323      	orrs	r3, r4
 8005b14:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005b24:	4413      	add	r3, r2
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff fb69 	bl	8005200 <st_dword>
			fs->wflag = 1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	70da      	strb	r2, [r3, #3]
			break;
 8005b34:	e008      	b.n	8005b48 <put_fat+0x1ce>
		}
	}
 8005b36:	bf00      	nop
 8005b38:	e006      	b.n	8005b48 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005b3a:	bf00      	nop
 8005b3c:	e004      	b.n	8005b48 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005b3e:	bf00      	nop
 8005b40:	e002      	b.n	8005b48 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005b42:	bf00      	nop
 8005b44:	e000      	b.n	8005b48 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005b46:	bf00      	nop
	return res;
 8005b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3724      	adds	r7, #36	; 0x24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd90      	pop	{r4, r7, pc}

08005b52 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b088      	sub	sp, #32
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d904      	bls.n	8005b78 <remove_chain+0x26>
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d301      	bcc.n	8005b7c <remove_chain+0x2a>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e04b      	b.n	8005c14 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00c      	beq.n	8005b9c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005b82:	f04f 32ff 	mov.w	r2, #4294967295
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	69b8      	ldr	r0, [r7, #24]
 8005b8a:	f7ff fef6 	bl	800597a <put_fat>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005b92:	7ffb      	ldrb	r3, [r7, #31]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <remove_chain+0x4a>
 8005b98:	7ffb      	ldrb	r3, [r7, #31]
 8005b9a:	e03b      	b.n	8005c14 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f7ff fe43 	bl	800582a <get_fat>
 8005ba4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d031      	beq.n	8005c10 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <remove_chain+0x64>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e02e      	b.n	8005c14 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d101      	bne.n	8005bc2 <remove_chain+0x70>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e028      	b.n	8005c14 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	69b8      	ldr	r0, [r7, #24]
 8005bc8:	f7ff fed7 	bl	800597a <put_fat>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005bd0:	7ffb      	ldrb	r3, [r7, #31]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <remove_chain+0x88>
 8005bd6:	7ffb      	ldrb	r3, [r7, #31]
 8005bd8:	e01c      	b.n	8005c14 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	3b02      	subs	r3, #2
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d20b      	bcs.n	8005c00 <remove_chain+0xae>
			fs->free_clst++;
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	791b      	ldrb	r3, [r3, #4]
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d3c6      	bcc.n	8005b9c <remove_chain+0x4a>
 8005c0e:	e000      	b.n	8005c12 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005c10:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10d      	bne.n	8005c4e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <create_chain+0x2c>
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d31b      	bcc.n	8005c80 <create_chain+0x64>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	e018      	b.n	8005c80 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff fdea 	bl	800582a <get_fat>
 8005c56:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d801      	bhi.n	8005c62 <create_chain+0x46>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e070      	b.n	8005d44 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c68:	d101      	bne.n	8005c6e <create_chain+0x52>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	e06a      	b.n	8005d44 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d201      	bcs.n	8005c7c <create_chain+0x60>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	e063      	b.n	8005d44 <create_chain+0x128>
		scl = clst;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	3301      	adds	r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d307      	bcc.n	8005ca4 <create_chain+0x88>
				ncl = 2;
 8005c94:	2302      	movs	r3, #2
 8005c96:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d901      	bls.n	8005ca4 <create_chain+0x88>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e04f      	b.n	8005d44 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005ca4:	69f9      	ldr	r1, [r7, #28]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff fdbf 	bl	800582a <get_fat>
 8005cac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00e      	beq.n	8005cd2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d003      	beq.n	8005cc2 <create_chain+0xa6>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d101      	bne.n	8005cc6 <create_chain+0xaa>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	e03e      	b.n	8005d44 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d1da      	bne.n	8005c84 <create_chain+0x68>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e038      	b.n	8005d44 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005cd2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd8:	69f9      	ldr	r1, [r7, #28]
 8005cda:	6938      	ldr	r0, [r7, #16]
 8005cdc:	f7ff fe4d 	bl	800597a <put_fat>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <create_chain+0xe2>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d006      	beq.n	8005cfe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6938      	ldr	r0, [r7, #16]
 8005cf6:	f7ff fe40 	bl	800597a <put_fat>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d116      	bne.n	8005d32 <create_chain+0x116>
		fs->last_clst = ncl;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	3b02      	subs	r3, #2
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d804      	bhi.n	8005d22 <create_chain+0x106>
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	1e5a      	subs	r2, r3, #1
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	791b      	ldrb	r3, [r3, #4]
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	711a      	strb	r2, [r3, #4]
 8005d30:	e007      	b.n	8005d42 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d102      	bne.n	8005d3e <create_chain+0x122>
 8005d38:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3c:	e000      	b.n	8005d40 <create_chain+0x124>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005d42:	69fb      	ldr	r3, [r7, #28]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	3304      	adds	r3, #4
 8005d62:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	0a5b      	lsrs	r3, r3, #9
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	8952      	ldrh	r2, [r2, #10]
 8005d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1d1a      	adds	r2, r3, #4
 8005d76:	613a      	str	r2, [r7, #16]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <clmt_clust+0x3a>
 8005d82:	2300      	movs	r3, #0
 8005d84:	e010      	b.n	8005da8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d307      	bcc.n	8005d9e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d9c:	e7e9      	b.n	8005d72 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005d9e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	4413      	add	r3, r2
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dca:	d204      	bcs.n	8005dd6 <dir_sdi+0x22>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <dir_sdi+0x26>
		return FR_INT_ERR;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e063      	b.n	8005ea2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d106      	bne.n	8005dfa <dir_sdi+0x46>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d902      	bls.n	8005dfa <dir_sdi+0x46>
		clst = fs->dirbase;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10c      	bne.n	8005e1a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	8912      	ldrh	r2, [r2, #8]
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d301      	bcc.n	8005e10 <dir_sdi+0x5c>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e048      	b.n	8005ea2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	61da      	str	r2, [r3, #28]
 8005e18:	e029      	b.n	8005e6e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	895b      	ldrh	r3, [r3, #10]
 8005e1e:	025b      	lsls	r3, r3, #9
 8005e20:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e22:	e019      	b.n	8005e58 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6979      	ldr	r1, [r7, #20]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff fcfe 	bl	800582a <get_fat>
 8005e2e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d101      	bne.n	8005e3c <dir_sdi+0x88>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e032      	b.n	8005ea2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d904      	bls.n	8005e4c <dir_sdi+0x98>
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d301      	bcc.n	8005e50 <dir_sdi+0x9c>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e028      	b.n	8005ea2 <dir_sdi+0xee>
			ofs -= csz;
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d2e1      	bcs.n	8005e24 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005e60:	6979      	ldr	r1, [r7, #20]
 8005e62:	6938      	ldr	r0, [r7, #16]
 8005e64:	f7ff fcc2 	bl	80057ec <clust2sect>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <dir_sdi+0xcc>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e010      	b.n	8005ea2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	0a5b      	lsrs	r3, r3, #9
 8005e88:	441a      	add	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9a:	441a      	add	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b086      	sub	sp, #24
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	3320      	adds	r3, #32
 8005ec0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <dir_next+0x28>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ed0:	d301      	bcc.n	8005ed6 <dir_next+0x2c>
 8005ed2:	2304      	movs	r3, #4
 8005ed4:	e0aa      	b.n	800602c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 8098 	bne.w	8006012 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	8912      	ldrh	r2, [r2, #8]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	f0c0 8088 	bcc.w	8006012 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	61da      	str	r2, [r3, #28]
 8005f08:	2304      	movs	r3, #4
 8005f0a:	e08f      	b.n	800602c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	0a5b      	lsrs	r3, r3, #9
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	8952      	ldrh	r2, [r2, #10]
 8005f14:	3a01      	subs	r2, #1
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d17a      	bne.n	8006012 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f7ff fc80 	bl	800582a <get_fat>
 8005f2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d801      	bhi.n	8005f36 <dir_next+0x8c>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e07a      	b.n	800602c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d101      	bne.n	8005f42 <dir_next+0x98>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e074      	b.n	800602c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d358      	bcc.n	8005ffe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d104      	bne.n	8005f5c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	61da      	str	r2, [r3, #28]
 8005f58:	2304      	movs	r3, #4
 8005f5a:	e067      	b.n	800602c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	4619      	mov	r1, r3
 8005f64:	4610      	mov	r0, r2
 8005f66:	f7ff fe59 	bl	8005c1c <create_chain>
 8005f6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <dir_next+0xcc>
 8005f72:	2307      	movs	r3, #7
 8005f74:	e05a      	b.n	800602c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <dir_next+0xd6>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	e055      	b.n	800602c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d101      	bne.n	8005f8c <dir_next+0xe2>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e04f      	b.n	800602c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f7ff fb4d 	bl	800562c <sync_window>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <dir_next+0xf2>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e047      	b.n	800602c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3330      	adds	r3, #48	; 0x30
 8005fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff f977 	bl	800529a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005fac:	2300      	movs	r3, #0
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	6979      	ldr	r1, [r7, #20]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7ff fc1a 	bl	80057ec <clust2sect>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fbe:	e012      	b.n	8005fe6 <dir_next+0x13c>
						fs->wflag = 1;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7ff fb30 	bl	800562c <sync_window>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <dir_next+0x12c>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e02a      	b.n	800602c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	895b      	ldrh	r3, [r3, #10]
 8005fea:	461a      	mov	r2, r3
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d3e6      	bcc.n	8005fc0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad2      	subs	r2, r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006004:	6979      	ldr	r1, [r7, #20]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7ff fbf0 	bl	80057ec <clust2sect>
 800600c:	4602      	mov	r2, r0
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006024:	441a      	add	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006044:	2100      	movs	r1, #0
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff feb4 	bl	8005db4 <dir_sdi>
 800604c:	4603      	mov	r3, r0
 800604e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d12b      	bne.n	80060ae <dir_alloc+0x7a>
		n = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	4619      	mov	r1, r3
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fb27 	bl	80056b4 <move_window>
 8006066:	4603      	mov	r3, r0
 8006068:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d11d      	bne.n	80060ac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2be5      	cmp	r3, #229	; 0xe5
 8006078:	d004      	beq.n	8006084 <dir_alloc+0x50>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d107      	bne.n	8006094 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	3301      	adds	r3, #1
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d102      	bne.n	8006098 <dir_alloc+0x64>
 8006092:	e00c      	b.n	80060ae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006098:	2101      	movs	r1, #1
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff ff05 	bl	8005eaa <dir_next>
 80060a0:	4603      	mov	r3, r0
 80060a2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0d7      	beq.n	800605a <dir_alloc+0x26>
 80060aa:	e000      	b.n	80060ae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80060ac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d101      	bne.n	80060b8 <dir_alloc+0x84>
 80060b4:	2307      	movs	r3, #7
 80060b6:	75fb      	strb	r3, [r7, #23]
	return res;
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	331a      	adds	r3, #26
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff f83f 	bl	8005154 <ld_word>
 80060d6:	4603      	mov	r3, r0
 80060d8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d109      	bne.n	80060f6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	3314      	adds	r3, #20
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff f834 	bl	8005154 <ld_word>
 80060ec:	4603      	mov	r3, r0
 80060ee:	041b      	lsls	r3, r3, #16
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80060f6:	68fb      	ldr	r3, [r7, #12]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	331a      	adds	r3, #26
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	b292      	uxth	r2, r2
 8006114:	4611      	mov	r1, r2
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff f857 	bl	80051ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b03      	cmp	r3, #3
 8006122:	d109      	bne.n	8006138 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f103 0214 	add.w	r2, r3, #20
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	b29b      	uxth	r3, r3
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f7ff f849 	bl	80051ca <st_word>
	}
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800614a:	2304      	movs	r3, #4
 800614c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006154:	e03c      	b.n	80061d0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	4619      	mov	r1, r3
 800615c:	6938      	ldr	r0, [r7, #16]
 800615e:	f7ff faa9 	bl	80056b4 <move_window>
 8006162:	4603      	mov	r3, r0
 8006164:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006166:	7dfb      	ldrb	r3, [r7, #23]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d136      	bne.n	80061da <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d102      	bne.n	8006180 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800617a:	2304      	movs	r3, #4
 800617c:	75fb      	strb	r3, [r7, #23]
 800617e:	e031      	b.n	80061e4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	330b      	adds	r3, #11
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800618c:	73bb      	strb	r3, [r7, #14]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	7bba      	ldrb	r2, [r7, #14]
 8006192:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	2be5      	cmp	r3, #229	; 0xe5
 8006198:	d011      	beq.n	80061be <dir_read+0x7e>
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	2b2e      	cmp	r3, #46	; 0x2e
 800619e:	d00e      	beq.n	80061be <dir_read+0x7e>
 80061a0:	7bbb      	ldrb	r3, [r7, #14]
 80061a2:	2b0f      	cmp	r3, #15
 80061a4:	d00b      	beq.n	80061be <dir_read+0x7e>
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	f023 0320 	bic.w	r3, r3, #32
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	bf0c      	ite	eq
 80061b0:	2301      	moveq	r3, #1
 80061b2:	2300      	movne	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00f      	beq.n	80061de <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80061be:	2100      	movs	r1, #0
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff fe72 	bl	8005eaa <dir_next>
 80061c6:	4603      	mov	r3, r0
 80061c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d108      	bne.n	80061e2 <dir_read+0xa2>
	while (dp->sect) {
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1be      	bne.n	8006156 <dir_read+0x16>
 80061d8:	e004      	b.n	80061e4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80061da:	bf00      	nop
 80061dc:	e002      	b.n	80061e4 <dir_read+0xa4>
				break;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80061e2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <dir_read+0xb0>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	61da      	str	r2, [r3, #28]
	return res;
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b086      	sub	sp, #24
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006208:	2100      	movs	r1, #0
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fdd2 	bl	8005db4 <dir_sdi>
 8006210:	4603      	mov	r3, r0
 8006212:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <dir_find+0x24>
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	e03e      	b.n	800629c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	4619      	mov	r1, r3
 8006224:	6938      	ldr	r0, [r7, #16]
 8006226:	f7ff fa45 	bl	80056b4 <move_window>
 800622a:	4603      	mov	r3, r0
 800622c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d12f      	bne.n	8006294 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <dir_find+0x4e>
 8006242:	2304      	movs	r3, #4
 8006244:	75fb      	strb	r3, [r7, #23]
 8006246:	e028      	b.n	800629a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	330b      	adds	r3, #11
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006254:	b2da      	uxtb	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	330b      	adds	r3, #11
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <dir_find+0x86>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a18      	ldr	r0, [r3, #32]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3324      	adds	r3, #36	; 0x24
 8006272:	220b      	movs	r2, #11
 8006274:	4619      	mov	r1, r3
 8006276:	f7ff f82b 	bl	80052d0 <mem_cmp>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006280:	2100      	movs	r1, #0
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff fe11 	bl	8005eaa <dir_next>
 8006288:	4603      	mov	r3, r0
 800628a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0c5      	beq.n	800621e <dir_find+0x24>
 8006292:	e002      	b.n	800629a <dir_find+0xa0>
		if (res != FR_OK) break;
 8006294:	bf00      	nop
 8006296:	e000      	b.n	800629a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006298:	bf00      	nop

	return res;
 800629a:	7dfb      	ldrb	r3, [r7, #23]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80062b2:	2101      	movs	r1, #1
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff febd 	bl	8006034 <dir_alloc>
 80062ba:	4603      	mov	r3, r0
 80062bc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d11c      	bne.n	80062fe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	4619      	mov	r1, r3
 80062ca:	68b8      	ldr	r0, [r7, #8]
 80062cc:	f7ff f9f2 	bl	80056b4 <move_window>
 80062d0:	4603      	mov	r3, r0
 80062d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d111      	bne.n	80062fe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	2220      	movs	r2, #32
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe ffd9 	bl	800529a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a18      	ldr	r0, [r3, #32]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3324      	adds	r3, #36	; 0x24
 80062f0:	220b      	movs	r2, #11
 80062f2:	4619      	mov	r1, r3
 80062f4:	f7fe ffb0 	bl	8005258 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2201      	movs	r2, #1
 80062fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	4619      	mov	r1, r3
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff f9c9 	bl	80056b4 <move_window>
 8006322:	4603      	mov	r3, r0
 8006324:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006326:	7afb      	ldrb	r3, [r7, #11]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d106      	bne.n	800633a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	22e5      	movs	r2, #229	; 0xe5
 8006332:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2201      	movs	r2, #1
 8006338:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800633a:	7afb      	ldrb	r3, [r7, #11]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3324      	adds	r3, #36	; 0x24
 8006358:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800635a:	220b      	movs	r2, #11
 800635c:	2120      	movs	r1, #32
 800635e:	68b8      	ldr	r0, [r7, #8]
 8006360:	f7fe ff9b 	bl	800529a <mem_set>
	si = i = 0; ni = 8;
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	2308      	movs	r3, #8
 800636e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	61fa      	str	r2, [r7, #28]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800637e:	7efb      	ldrb	r3, [r7, #27]
 8006380:	2b20      	cmp	r3, #32
 8006382:	d94e      	bls.n	8006422 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006384:	7efb      	ldrb	r3, [r7, #27]
 8006386:	2b2f      	cmp	r3, #47	; 0x2f
 8006388:	d006      	beq.n	8006398 <create_name+0x54>
 800638a:	7efb      	ldrb	r3, [r7, #27]
 800638c:	2b5c      	cmp	r3, #92	; 0x5c
 800638e:	d110      	bne.n	80063b2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006390:	e002      	b.n	8006398 <create_name+0x54>
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	3301      	adds	r3, #1
 8006396:	61fb      	str	r3, [r7, #28]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b2f      	cmp	r3, #47	; 0x2f
 80063a2:	d0f6      	beq.n	8006392 <create_name+0x4e>
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b5c      	cmp	r3, #92	; 0x5c
 80063ae:	d0f0      	beq.n	8006392 <create_name+0x4e>
			break;
 80063b0:	e038      	b.n	8006424 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80063b2:	7efb      	ldrb	r3, [r7, #27]
 80063b4:	2b2e      	cmp	r3, #46	; 0x2e
 80063b6:	d003      	beq.n	80063c0 <create_name+0x7c>
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d30c      	bcc.n	80063da <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b0b      	cmp	r3, #11
 80063c4:	d002      	beq.n	80063cc <create_name+0x88>
 80063c6:	7efb      	ldrb	r3, [r7, #27]
 80063c8:	2b2e      	cmp	r3, #46	; 0x2e
 80063ca:	d001      	beq.n	80063d0 <create_name+0x8c>
 80063cc:	2306      	movs	r3, #6
 80063ce:	e044      	b.n	800645a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80063d0:	2308      	movs	r3, #8
 80063d2:	613b      	str	r3, [r7, #16]
 80063d4:	230b      	movs	r3, #11
 80063d6:	617b      	str	r3, [r7, #20]
			continue;
 80063d8:	e022      	b.n	8006420 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80063da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	da04      	bge.n	80063ec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80063e2:	7efb      	ldrb	r3, [r7, #27]
 80063e4:	3b80      	subs	r3, #128	; 0x80
 80063e6:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <create_name+0x120>)
 80063e8:	5cd3      	ldrb	r3, [r2, r3]
 80063ea:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80063ec:	7efb      	ldrb	r3, [r7, #27]
 80063ee:	4619      	mov	r1, r3
 80063f0:	481d      	ldr	r0, [pc, #116]	; (8006468 <create_name+0x124>)
 80063f2:	f7fe ff94 	bl	800531e <chk_chr>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <create_name+0xbc>
 80063fc:	2306      	movs	r3, #6
 80063fe:	e02c      	b.n	800645a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006400:	7efb      	ldrb	r3, [r7, #27]
 8006402:	2b60      	cmp	r3, #96	; 0x60
 8006404:	d905      	bls.n	8006412 <create_name+0xce>
 8006406:	7efb      	ldrb	r3, [r7, #27]
 8006408:	2b7a      	cmp	r3, #122	; 0x7a
 800640a:	d802      	bhi.n	8006412 <create_name+0xce>
 800640c:	7efb      	ldrb	r3, [r7, #27]
 800640e:	3b20      	subs	r3, #32
 8006410:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	613a      	str	r2, [r7, #16]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	4413      	add	r3, r2
 800641c:	7efa      	ldrb	r2, [r7, #27]
 800641e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006420:	e7a6      	b.n	8006370 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006422:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	441a      	add	r2, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <create_name+0xf4>
 8006434:	2306      	movs	r3, #6
 8006436:	e010      	b.n	800645a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2be5      	cmp	r3, #229	; 0xe5
 800643e:	d102      	bne.n	8006446 <create_name+0x102>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2205      	movs	r2, #5
 8006444:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006446:	7efb      	ldrb	r3, [r7, #27]
 8006448:	2b20      	cmp	r3, #32
 800644a:	d801      	bhi.n	8006450 <create_name+0x10c>
 800644c:	2204      	movs	r2, #4
 800644e:	e000      	b.n	8006452 <create_name+0x10e>
 8006450:	2200      	movs	r2, #0
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	330b      	adds	r3, #11
 8006456:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006458:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800645a:	4618      	mov	r0, r3
 800645c:	3720      	adds	r7, #32
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	08008bdc 	.word	0x08008bdc
 8006468:	08008b78 	.word	0x08008b78

0800646c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006480:	e002      	b.n	8006488 <follow_path+0x1c>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	3301      	adds	r3, #1
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b2f      	cmp	r3, #47	; 0x2f
 800648e:	d0f8      	beq.n	8006482 <follow_path+0x16>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b5c      	cmp	r3, #92	; 0x5c
 8006496:	d0f4      	beq.n	8006482 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2200      	movs	r2, #0
 800649c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b1f      	cmp	r3, #31
 80064a4:	d80a      	bhi.n	80064bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2280      	movs	r2, #128	; 0x80
 80064aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80064ae:	2100      	movs	r1, #0
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff fc7f 	bl	8005db4 <dir_sdi>
 80064b6:	4603      	mov	r3, r0
 80064b8:	75fb      	strb	r3, [r7, #23]
 80064ba:	e043      	b.n	8006544 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80064bc:	463b      	mov	r3, r7
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff ff3f 	bl	8006344 <create_name>
 80064c6:	4603      	mov	r3, r0
 80064c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d134      	bne.n	800653a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fe92 	bl	80061fa <dir_find>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d127      	bne.n	800653e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80064ee:	7afb      	ldrb	r3, [r7, #11]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d122      	bne.n	800653e <follow_path+0xd2>
 80064f8:	2305      	movs	r3, #5
 80064fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80064fc:	e01f      	b.n	800653e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80064fe:	7afb      	ldrb	r3, [r7, #11]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11c      	bne.n	8006542 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	799b      	ldrb	r3, [r3, #6]
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b00      	cmp	r3, #0
 8006512:	d102      	bne.n	800651a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006514:	2305      	movs	r3, #5
 8006516:	75fb      	strb	r3, [r7, #23]
 8006518:	e014      	b.n	8006544 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006528:	4413      	add	r3, r2
 800652a:	4619      	mov	r1, r3
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f7ff fdc8 	bl	80060c2 <ld_clust>
 8006532:	4602      	mov	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006538:	e7c0      	b.n	80064bc <follow_path+0x50>
			if (res != FR_OK) break;
 800653a:	bf00      	nop
 800653c:	e002      	b.n	8006544 <follow_path+0xd8>
				break;
 800653e:	bf00      	nop
 8006540:	e000      	b.n	8006544 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006542:	bf00      	nop
			}
		}
	}

	return res;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800654e:	b480      	push	{r7}
 8006550:	b087      	sub	sp, #28
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006556:	f04f 33ff 	mov.w	r3, #4294967295
 800655a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d031      	beq.n	80065c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	e002      	b.n	8006572 <get_ldnumber+0x24>
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	3301      	adds	r3, #1
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b20      	cmp	r3, #32
 8006578:	d903      	bls.n	8006582 <get_ldnumber+0x34>
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b3a      	cmp	r3, #58	; 0x3a
 8006580:	d1f4      	bne.n	800656c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b3a      	cmp	r3, #58	; 0x3a
 8006588:	d11c      	bne.n	80065c4 <get_ldnumber+0x76>
			tp = *path;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	60fa      	str	r2, [r7, #12]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	3b30      	subs	r3, #48	; 0x30
 800659a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b09      	cmp	r3, #9
 80065a0:	d80e      	bhi.n	80065c0 <get_ldnumber+0x72>
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d10a      	bne.n	80065c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d107      	bne.n	80065c0 <get_ldnumber+0x72>
					vol = (int)i;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	3301      	adds	r3, #1
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	e002      	b.n	80065ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80065c4:	2300      	movs	r3, #0
 80065c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80065c8:	693b      	ldr	r3, [r7, #16]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	70da      	strb	r2, [r3, #3]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f04f 32ff 	mov.w	r2, #4294967295
 80065ee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff f85e 	bl	80056b4 <move_window>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <check_fs+0x2a>
 80065fe:	2304      	movs	r3, #4
 8006600:	e038      	b.n	8006674 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3330      	adds	r3, #48	; 0x30
 8006606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe fda2 	bl	8005154 <ld_word>
 8006610:	4603      	mov	r3, r0
 8006612:	461a      	mov	r2, r3
 8006614:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <check_fs+0x48>
 800661c:	2303      	movs	r3, #3
 800661e:	e029      	b.n	8006674 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006626:	2be9      	cmp	r3, #233	; 0xe9
 8006628:	d009      	beq.n	800663e <check_fs+0x66>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006630:	2beb      	cmp	r3, #235	; 0xeb
 8006632:	d11e      	bne.n	8006672 <check_fs+0x9a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800663a:	2b90      	cmp	r3, #144	; 0x90
 800663c:	d119      	bne.n	8006672 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3330      	adds	r3, #48	; 0x30
 8006642:	3336      	adds	r3, #54	; 0x36
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fd9d 	bl	8005184 <ld_dword>
 800664a:	4603      	mov	r3, r0
 800664c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006650:	4a0a      	ldr	r2, [pc, #40]	; (800667c <check_fs+0xa4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d101      	bne.n	800665a <check_fs+0x82>
 8006656:	2300      	movs	r3, #0
 8006658:	e00c      	b.n	8006674 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3330      	adds	r3, #48	; 0x30
 800665e:	3352      	adds	r3, #82	; 0x52
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fd8f 	bl	8005184 <ld_dword>
 8006666:	4603      	mov	r3, r0
 8006668:	4a05      	ldr	r2, [pc, #20]	; (8006680 <check_fs+0xa8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d101      	bne.n	8006672 <check_fs+0x9a>
 800666e:	2300      	movs	r3, #0
 8006670:	e000      	b.n	8006674 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006672:	2302      	movs	r3, #2
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	00544146 	.word	0x00544146
 8006680:	33544146 	.word	0x33544146

08006684 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b096      	sub	sp, #88	; 0x58
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff ff58 	bl	800654e <get_ldnumber>
 800669e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80066a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	da01      	bge.n	80066aa <find_volume+0x26>
 80066a6:	230b      	movs	r3, #11
 80066a8:	e22e      	b.n	8006b08 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80066aa:	4aa8      	ldr	r2, [pc, #672]	; (800694c <find_volume+0x2c8>)
 80066ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <find_volume+0x3a>
 80066ba:	230c      	movs	r3, #12
 80066bc:	e224      	b.n	8006b08 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80066c4:	79fb      	ldrb	r3, [r7, #7]
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80066cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01a      	beq.n	800670a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	785b      	ldrb	r3, [r3, #1]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fe fc9d 	bl	8005018 <disk_status>
 80066de:	4603      	mov	r3, r0
 80066e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80066e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10c      	bne.n	800670a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <find_volume+0x82>
 80066f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006702:	230a      	movs	r3, #10
 8006704:	e200      	b.n	8006b08 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8006706:	2300      	movs	r3, #0
 8006708:	e1fe      	b.n	8006b08 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	2200      	movs	r2, #0
 800670e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006712:	b2da      	uxtb	r2, r3
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe fc95 	bl	800504c <disk_initialize>
 8006722:	4603      	mov	r3, r0
 8006724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006734:	2303      	movs	r3, #3
 8006736:	e1e7      	b.n	8006b08 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d007      	beq.n	800674e <find_volume+0xca>
 800673e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800674a:	230a      	movs	r3, #10
 800674c:	e1dc      	b.n	8006b08 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006752:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006756:	f7ff ff3f 	bl	80065d8 <check_fs>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006764:	2b02      	cmp	r3, #2
 8006766:	d14b      	bne.n	8006800 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006768:	2300      	movs	r3, #0
 800676a:	643b      	str	r3, [r7, #64]	; 0x40
 800676c:	e01f      	b.n	80067ae <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800677c:	4413      	add	r3, r2
 800677e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	3304      	adds	r3, #4
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d006      	beq.n	8006798 <find_volume+0x114>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	3308      	adds	r3, #8
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fcf8 	bl	8005184 <ld_dword>
 8006794:	4602      	mov	r2, r0
 8006796:	e000      	b.n	800679a <find_volume+0x116>
 8006798:	2200      	movs	r2, #0
 800679a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80067a2:	440b      	add	r3, r1
 80067a4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80067a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067aa:	3301      	adds	r3, #1
 80067ac:	643b      	str	r3, [r7, #64]	; 0x40
 80067ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d9dc      	bls.n	800676e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80067b4:	2300      	movs	r3, #0
 80067b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80067b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <find_volume+0x140>
 80067be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c0:	3b01      	subs	r3, #1
 80067c2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80067c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80067cc:	4413      	add	r3, r2
 80067ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80067d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80067d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <find_volume+0x162>
 80067da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067de:	f7ff fefb 	bl	80065d8 <check_fs>
 80067e2:	4603      	mov	r3, r0
 80067e4:	e000      	b.n	80067e8 <find_volume+0x164>
 80067e6:	2303      	movs	r3, #3
 80067e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80067ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d905      	bls.n	8006800 <find_volume+0x17c>
 80067f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f6:	3301      	adds	r3, #1
 80067f8:	643b      	str	r3, [r7, #64]	; 0x40
 80067fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d9e1      	bls.n	80067c4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006804:	2b04      	cmp	r3, #4
 8006806:	d101      	bne.n	800680c <find_volume+0x188>
 8006808:	2301      	movs	r3, #1
 800680a:	e17d      	b.n	8006b08 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800680c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006810:	2b01      	cmp	r3, #1
 8006812:	d901      	bls.n	8006818 <find_volume+0x194>
 8006814:	230d      	movs	r3, #13
 8006816:	e177      	b.n	8006b08 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	3330      	adds	r3, #48	; 0x30
 800681c:	330b      	adds	r3, #11
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fc98 	bl	8005154 <ld_word>
 8006824:	4603      	mov	r3, r0
 8006826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800682a:	d001      	beq.n	8006830 <find_volume+0x1ac>
 800682c:	230d      	movs	r3, #13
 800682e:	e16b      	b.n	8006b08 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	3330      	adds	r3, #48	; 0x30
 8006834:	3316      	adds	r3, #22
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe fc8c 	bl	8005154 <ld_word>
 800683c:	4603      	mov	r3, r0
 800683e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <find_volume+0x1d0>
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	3330      	adds	r3, #48	; 0x30
 800684a:	3324      	adds	r3, #36	; 0x24
 800684c:	4618      	mov	r0, r3
 800684e:	f7fe fc99 	bl	8005184 <ld_dword>
 8006852:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006858:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	789b      	ldrb	r3, [r3, #2]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d005      	beq.n	8006878 <find_volume+0x1f4>
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	789b      	ldrb	r3, [r3, #2]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d001      	beq.n	8006878 <find_volume+0x1f4>
 8006874:	230d      	movs	r3, #13
 8006876:	e147      	b.n	8006b08 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	789b      	ldrb	r3, [r3, #2]
 800687c:	461a      	mov	r2, r3
 800687e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006880:	fb02 f303 	mul.w	r3, r2, r3
 8006884:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688c:	b29a      	uxth	r2, r3
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	895b      	ldrh	r3, [r3, #10]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <find_volume+0x228>
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	895b      	ldrh	r3, [r3, #10]
 800689e:	461a      	mov	r2, r3
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	895b      	ldrh	r3, [r3, #10]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <find_volume+0x22c>
 80068ac:	230d      	movs	r3, #13
 80068ae:	e12b      	b.n	8006b08 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	3330      	adds	r3, #48	; 0x30
 80068b4:	3311      	adds	r3, #17
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe fc4c 	bl	8005154 <ld_word>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	891b      	ldrh	r3, [r3, #8]
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <find_volume+0x252>
 80068d2:	230d      	movs	r3, #13
 80068d4:	e118      	b.n	8006b08 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	3330      	adds	r3, #48	; 0x30
 80068da:	3313      	adds	r3, #19
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe fc39 	bl	8005154 <ld_word>
 80068e2:	4603      	mov	r3, r0
 80068e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80068e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <find_volume+0x276>
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	3330      	adds	r3, #48	; 0x30
 80068f0:	3320      	adds	r3, #32
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fc46 	bl	8005184 <ld_dword>
 80068f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	3330      	adds	r3, #48	; 0x30
 80068fe:	330e      	adds	r3, #14
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe fc27 	bl	8005154 <ld_word>
 8006906:	4603      	mov	r3, r0
 8006908:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800690a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <find_volume+0x290>
 8006910:	230d      	movs	r3, #13
 8006912:	e0f9      	b.n	8006b08 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006914:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006918:	4413      	add	r3, r2
 800691a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800691c:	8912      	ldrh	r2, [r2, #8]
 800691e:	0912      	lsrs	r2, r2, #4
 8006920:	b292      	uxth	r2, r2
 8006922:	4413      	add	r3, r2
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	429a      	cmp	r2, r3
 800692c:	d201      	bcs.n	8006932 <find_volume+0x2ae>
 800692e:	230d      	movs	r3, #13
 8006930:	e0ea      	b.n	8006b08 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800693a:	8952      	ldrh	r2, [r2, #10]
 800693c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <find_volume+0x2cc>
 8006948:	230d      	movs	r3, #13
 800694a:	e0dd      	b.n	8006b08 <find_volume+0x484>
 800694c:	200000ac 	.word	0x200000ac
		fmt = FS_FAT32;
 8006950:	2303      	movs	r3, #3
 8006952:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800695c:	4293      	cmp	r3, r2
 800695e:	d802      	bhi.n	8006966 <find_volume+0x2e2>
 8006960:	2302      	movs	r3, #2
 8006962:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	f640 72f5 	movw	r2, #4085	; 0xff5
 800696c:	4293      	cmp	r3, r2
 800696e:	d802      	bhi.n	8006976 <find_volume+0x2f2>
 8006970:	2301      	movs	r3, #1
 8006972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	1c9a      	adds	r2, r3, #2
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006982:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006984:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006988:	441a      	add	r2, r3
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800698e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	441a      	add	r2, r3
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800699c:	2b03      	cmp	r3, #3
 800699e:	d11e      	bne.n	80069de <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	3330      	adds	r3, #48	; 0x30
 80069a4:	332a      	adds	r3, #42	; 0x2a
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fbd4 	bl	8005154 <ld_word>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <find_volume+0x332>
 80069b2:	230d      	movs	r3, #13
 80069b4:	e0a8      	b.n	8006b08 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	891b      	ldrh	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <find_volume+0x33e>
 80069be:	230d      	movs	r3, #13
 80069c0:	e0a2      	b.n	8006b08 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	3330      	adds	r3, #48	; 0x30
 80069c6:	332c      	adds	r3, #44	; 0x2c
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe fbdb 	bl	8005184 <ld_dword>
 80069ce:	4602      	mov	r2, r0
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	647b      	str	r3, [r7, #68]	; 0x44
 80069dc:	e01f      	b.n	8006a1e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	891b      	ldrh	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <find_volume+0x366>
 80069e6:	230d      	movs	r3, #13
 80069e8:	e08e      	b.n	8006b08 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	6a1a      	ldr	r2, [r3, #32]
 80069ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f0:	441a      	add	r2, r3
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80069f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d103      	bne.n	8006a06 <find_volume+0x382>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	e00a      	b.n	8006a1c <find_volume+0x398>
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	695a      	ldr	r2, [r3, #20]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	4413      	add	r3, r2
 8006a10:	085a      	lsrs	r2, r3, #1
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006a1c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a24:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006a28:	0a5b      	lsrs	r3, r3, #9
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d201      	bcs.n	8006a32 <find_volume+0x3ae>
 8006a2e:	230d      	movs	r3, #13
 8006a30:	e06a      	b.n	8006b08 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	f04f 32ff 	mov.w	r2, #4294967295
 8006a38:	611a      	str	r2, [r3, #16]
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	2280      	movs	r2, #128	; 0x80
 8006a46:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006a48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d149      	bne.n	8006ae4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	3330      	adds	r3, #48	; 0x30
 8006a54:	3330      	adds	r3, #48	; 0x30
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe fb7c 	bl	8005154 <ld_word>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d140      	bne.n	8006ae4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a64:	3301      	adds	r3, #1
 8006a66:	4619      	mov	r1, r3
 8006a68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a6a:	f7fe fe23 	bl	80056b4 <move_window>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d137      	bne.n	8006ae4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	2200      	movs	r2, #0
 8006a78:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	3330      	adds	r3, #48	; 0x30
 8006a7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe fb66 	bl	8005154 <ld_word>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d127      	bne.n	8006ae4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a96:	3330      	adds	r3, #48	; 0x30
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fe fb73 	bl	8005184 <ld_dword>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	4a1b      	ldr	r2, [pc, #108]	; (8006b10 <find_volume+0x48c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d11e      	bne.n	8006ae4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	3330      	adds	r3, #48	; 0x30
 8006aaa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe fb68 	bl	8005184 <ld_dword>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4a17      	ldr	r2, [pc, #92]	; (8006b14 <find_volume+0x490>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d113      	bne.n	8006ae4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	3330      	adds	r3, #48	; 0x30
 8006ac0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fb5d 	bl	8005184 <ld_dword>
 8006aca:	4602      	mov	r2, r0
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	3330      	adds	r3, #48	; 0x30
 8006ad4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe fb53 	bl	8005184 <ld_dword>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006aea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <find_volume+0x494>)
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	4b08      	ldr	r3, [pc, #32]	; (8006b18 <find_volume+0x494>)
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <find_volume+0x494>)
 8006afa:	881a      	ldrh	r2, [r3, #0]
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006b00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b02:	f7fe fd6f 	bl	80055e4 <clear_lock>
#endif
	return FR_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3758      	adds	r7, #88	; 0x58
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	41615252 	.word	0x41615252
 8006b14:	61417272 	.word	0x61417272
 8006b18:	200000b0 	.word	0x200000b0

08006b1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006b26:	2309      	movs	r3, #9
 8006b28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01c      	beq.n	8006b6a <validate+0x4e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d018      	beq.n	8006b6a <validate+0x4e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d013      	beq.n	8006b6a <validate+0x4e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	889a      	ldrh	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	88db      	ldrh	r3, [r3, #6]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d10c      	bne.n	8006b6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	785b      	ldrb	r3, [r3, #1]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe fa5e 	bl	8005018 <disk_status>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <validate+0x4e>
			res = FR_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <validate+0x5a>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	e000      	b.n	8006b78 <validate+0x5c>
 8006b76:	2300      	movs	r3, #0
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	6013      	str	r3, [r2, #0]
	return res;
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006b9a:	f107 0310 	add.w	r3, r7, #16
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fcd5 	bl	800654e <get_ldnumber>
 8006ba4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	da01      	bge.n	8006bb0 <f_mount+0x28>
 8006bac:	230b      	movs	r3, #11
 8006bae:	e02b      	b.n	8006c08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006bb0:	4a17      	ldr	r2, [pc, #92]	; (8006c10 <f_mount+0x88>)
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006bc0:	69b8      	ldr	r0, [r7, #24]
 8006bc2:	f7fe fd0f 	bl	80055e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	490d      	ldr	r1, [pc, #52]	; (8006c10 <f_mount+0x88>)
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <f_mount+0x66>
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d001      	beq.n	8006bf2 <f_mount+0x6a>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e00a      	b.n	8006c08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006bf2:	f107 010c 	add.w	r1, r7, #12
 8006bf6:	f107 0308 	add.w	r3, r7, #8
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fd41 	bl	8006684 <find_volume>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3720      	adds	r7, #32
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	200000ac 	.word	0x200000ac

08006c14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b098      	sub	sp, #96	; 0x60
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <f_open+0x18>
 8006c28:	2309      	movs	r3, #9
 8006c2a:	e1ad      	b.n	8006f88 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006c34:	79fa      	ldrb	r2, [r7, #7]
 8006c36:	f107 0110 	add.w	r1, r7, #16
 8006c3a:	f107 0308 	add.w	r3, r7, #8
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fd20 	bl	8006684 <find_volume>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006c4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f040 8191 	bne.w	8006f76 <f_open+0x362>
		dj.obj.fs = fs;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	f107 0314 	add.w	r3, r7, #20
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fc03 	bl	800646c <follow_path>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d11a      	bne.n	8006caa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006c74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c78:	b25b      	sxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da03      	bge.n	8006c86 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006c7e:	2306      	movs	r3, #6
 8006c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006c84:	e011      	b.n	8006caa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	bf14      	ite	ne
 8006c90:	2301      	movne	r3, #1
 8006c92:	2300      	moveq	r3, #0
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	f107 0314 	add.w	r3, r7, #20
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fb58 	bl	8005354 <chk_lock>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	f003 031c 	and.w	r3, r3, #28
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d07f      	beq.n	8006db4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006cb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d017      	beq.n	8006cec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006cbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d10e      	bne.n	8006ce2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006cc4:	f7fe fba2 	bl	800540c <enq_lock>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d006      	beq.n	8006cdc <f_open+0xc8>
 8006cce:	f107 0314 	add.w	r3, r7, #20
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7ff fae6 	bl	80062a4 <dir_register>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	e000      	b.n	8006cde <f_open+0xca>
 8006cdc:	2312      	movs	r3, #18
 8006cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	f043 0308 	orr.w	r3, r3, #8
 8006ce8:	71fb      	strb	r3, [r7, #7]
 8006cea:	e010      	b.n	8006d0e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006cec:	7ebb      	ldrb	r3, [r7, #26]
 8006cee:	f003 0311 	and.w	r3, r3, #17
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <f_open+0xea>
					res = FR_DENIED;
 8006cf6:	2307      	movs	r3, #7
 8006cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006cfc:	e007      	b.n	8006d0e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <f_open+0xfa>
 8006d08:	2308      	movs	r3, #8
 8006d0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d168      	bne.n	8006de8 <f_open+0x1d4>
 8006d16:	79fb      	ldrb	r3, [r7, #7]
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d063      	beq.n	8006de8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006d20:	f7fe f91a 	bl	8004f58 <get_fattime>
 8006d24:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d28:	330e      	adds	r3, #14
 8006d2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fa67 	bl	8005200 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d34:	3316      	adds	r3, #22
 8006d36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fa61 	bl	8005200 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d40:	330b      	adds	r3, #11
 8006d42:	2220      	movs	r2, #32
 8006d44:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff f9b8 	bl	80060c2 <ld_clust>
 8006d52:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff f9d0 	bl	8006100 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d62:	331c      	adds	r3, #28
 8006d64:	2100      	movs	r1, #0
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fa4a 	bl	8005200 <st_dword>
					fs->wflag = 1;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d037      	beq.n	8006de8 <f_open+0x1d4>
						dw = fs->winsect;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006d7e:	f107 0314 	add.w	r3, r7, #20
 8006d82:	2200      	movs	r2, #0
 8006d84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fee3 	bl	8005b52 <remove_chain>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006d92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d126      	bne.n	8006de8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe fc88 	bl	80056b4 <move_window>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dae:	3a01      	subs	r2, #1
 8006db0:	60da      	str	r2, [r3, #12]
 8006db2:	e019      	b.n	8006de8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006db4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d115      	bne.n	8006de8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006dbc:	7ebb      	ldrb	r3, [r7, #26]
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <f_open+0x1ba>
					res = FR_NO_FILE;
 8006dc6:	2304      	movs	r3, #4
 8006dc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006dcc:	e00c      	b.n	8006de8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d007      	beq.n	8006de8 <f_open+0x1d4>
 8006dd8:	7ebb      	ldrb	r3, [r7, #26]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <f_open+0x1d4>
						res = FR_DENIED;
 8006de2:	2307      	movs	r3, #7
 8006de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006de8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d128      	bne.n	8006e42 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006df0:	79fb      	ldrb	r3, [r7, #7]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e00:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bf14      	ite	ne
 8006e1a:	2301      	movne	r3, #1
 8006e1c:	2300      	moveq	r3, #0
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	f107 0314 	add.w	r3, r7, #20
 8006e26:	4611      	mov	r1, r2
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe fb11 	bl	8005450 <inc_lock>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <f_open+0x22e>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006e42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 8095 	bne.w	8006f76 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e50:	4611      	mov	r1, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff f935 	bl	80060c2 <ld_clust>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e60:	331c      	adds	r3, #28
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe f98e 	bl	8005184 <ld_dword>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	88da      	ldrh	r2, [r3, #6]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	79fa      	ldrb	r2, [r7, #7]
 8006e86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3330      	adds	r3, #48	; 0x30
 8006e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fe f9f8 	bl	800529a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006eaa:	79fb      	ldrb	r3, [r7, #7]
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d060      	beq.n	8006f76 <f_open+0x362>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d05c      	beq.n	8006f76 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	895b      	ldrh	r3, [r3, #10]
 8006ec8:	025b      	lsls	r3, r3, #9
 8006eca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ed8:	e016      	b.n	8006f08 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fca3 	bl	800582a <get_fat>
 8006ee4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d802      	bhi.n	8006ef2 <f_open+0x2de>
 8006eec:	2302      	movs	r3, #2
 8006eee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef8:	d102      	bne.n	8006f00 <f_open+0x2ec>
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	657b      	str	r3, [r7, #84]	; 0x54
 8006f08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d103      	bne.n	8006f18 <f_open+0x304>
 8006f10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d8e0      	bhi.n	8006eda <f_open+0x2c6>
				}
				fp->clust = clst;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d127      	bne.n	8006f76 <f_open+0x362>
 8006f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d022      	beq.n	8006f76 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fe fc59 	bl	80057ec <clust2sect>
 8006f3a:	6478      	str	r0, [r7, #68]	; 0x44
 8006f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d103      	bne.n	8006f4a <f_open+0x336>
						res = FR_INT_ERR;
 8006f42:	2302      	movs	r3, #2
 8006f44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f48:	e015      	b.n	8006f76 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f4c:	0a5a      	lsrs	r2, r3, #9
 8006f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f50:	441a      	add	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	7858      	ldrb	r0, [r3, #1]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a1a      	ldr	r2, [r3, #32]
 8006f64:	2301      	movs	r3, #1
 8006f66:	f7fe f897 	bl	8005098 <disk_read>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <f_open+0x362>
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006f76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <f_open+0x370>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3760      	adds	r7, #96	; 0x60
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08e      	sub	sp, #56	; 0x38
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f107 0214 	add.w	r2, r7, #20
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff fdb3 	bl	8006b1c <validate>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d107      	bne.n	8006fd4 <f_read+0x44>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	7d5b      	ldrb	r3, [r3, #21]
 8006fc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006fcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <f_read+0x4a>
 8006fd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fd8:	e115      	b.n	8007206 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	7d1b      	ldrb	r3, [r3, #20]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <f_read+0x5a>
 8006fe6:	2307      	movs	r3, #7
 8006fe8:	e10d      	b.n	8007206 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	f240 80fe 	bls.w	80071fc <f_read+0x26c>
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007004:	e0fa      	b.n	80071fc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 80c6 	bne.w	80071a0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	0a5b      	lsrs	r3, r3, #9
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	8952      	ldrh	r2, [r2, #10]
 800701e:	3a01      	subs	r2, #1
 8007020:	4013      	ands	r3, r2
 8007022:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d12f      	bne.n	800708a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d103      	bne.n	800703a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	633b      	str	r3, [r7, #48]	; 0x30
 8007038:	e013      	b.n	8007062 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	4619      	mov	r1, r3
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7fe fe7f 	bl	8005d4c <clmt_clust>
 800704e:	6338      	str	r0, [r7, #48]	; 0x30
 8007050:	e007      	b.n	8007062 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	4619      	mov	r1, r3
 800705a:	4610      	mov	r0, r2
 800705c:	f7fe fbe5 	bl	800582a <get_fat>
 8007060:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	2b01      	cmp	r3, #1
 8007066:	d804      	bhi.n	8007072 <f_read+0xe2>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2202      	movs	r2, #2
 800706c:	755a      	strb	r2, [r3, #21]
 800706e:	2302      	movs	r3, #2
 8007070:	e0c9      	b.n	8007206 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007078:	d104      	bne.n	8007084 <f_read+0xf4>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	755a      	strb	r2, [r3, #21]
 8007080:	2301      	movs	r3, #1
 8007082:	e0c0      	b.n	8007206 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007088:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	4619      	mov	r1, r3
 8007092:	4610      	mov	r0, r2
 8007094:	f7fe fbaa 	bl	80057ec <clust2sect>
 8007098:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <f_read+0x11a>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2202      	movs	r2, #2
 80070a4:	755a      	strb	r2, [r3, #21]
 80070a6:	2302      	movs	r3, #2
 80070a8:	e0ad      	b.n	8007206 <f_read+0x276>
			sect += csect;
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	4413      	add	r3, r2
 80070b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	0a5b      	lsrs	r3, r3, #9
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d039      	beq.n	8007132 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	4413      	add	r3, r2
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	8952      	ldrh	r2, [r2, #10]
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d905      	bls.n	80070d8 <f_read+0x148>
					cc = fs->csize - csect;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	895b      	ldrh	r3, [r3, #10]
 80070d0:	461a      	mov	r2, r3
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	7858      	ldrb	r0, [r3, #1]
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070e2:	f7fd ffd9 	bl	8005098 <disk_read>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <f_read+0x166>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2201      	movs	r2, #1
 80070f0:	755a      	strb	r2, [r3, #21]
 80070f2:	2301      	movs	r3, #1
 80070f4:	e087      	b.n	8007206 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	7d1b      	ldrb	r3, [r3, #20]
 80070fa:	b25b      	sxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	da14      	bge.n	800712a <f_read+0x19a>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a1a      	ldr	r2, [r3, #32]
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800710a:	429a      	cmp	r2, r3
 800710c:	d90d      	bls.n	800712a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6a1a      	ldr	r2, [r3, #32]
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	025b      	lsls	r3, r3, #9
 8007118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711a:	18d0      	adds	r0, r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3330      	adds	r3, #48	; 0x30
 8007120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007124:	4619      	mov	r1, r3
 8007126:	f7fe f897 	bl	8005258 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	025b      	lsls	r3, r3, #9
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007130:	e050      	b.n	80071d4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	429a      	cmp	r2, r3
 800713a:	d02e      	beq.n	800719a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	7d1b      	ldrb	r3, [r3, #20]
 8007140:	b25b      	sxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	da18      	bge.n	8007178 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	7858      	ldrb	r0, [r3, #1]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a1a      	ldr	r2, [r3, #32]
 8007154:	2301      	movs	r3, #1
 8007156:	f7fd ffbf 	bl	80050d8 <disk_write>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <f_read+0x1da>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	755a      	strb	r2, [r3, #21]
 8007166:	2301      	movs	r3, #1
 8007168:	e04d      	b.n	8007206 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	7d1b      	ldrb	r3, [r3, #20]
 800716e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007172:	b2da      	uxtb	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	7858      	ldrb	r0, [r3, #1]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007182:	2301      	movs	r3, #1
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	f7fd ff87 	bl	8005098 <disk_read>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <f_read+0x20a>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2201      	movs	r2, #1
 8007194:	755a      	strb	r2, [r3, #21]
 8007196:	2301      	movs	r3, #1
 8007198:	e035      	b.n	8007206 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80071ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80071ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d901      	bls.n	80071ba <f_read+0x22a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c8:	4413      	add	r3, r2
 80071ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071cc:	4619      	mov	r1, r3
 80071ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071d0:	f7fe f842 	bl	8005258 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80071d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	4413      	add	r3, r2
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	699a      	ldr	r2, [r3, #24]
 80071e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e2:	441a      	add	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	619a      	str	r2, [r3, #24]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ee:	441a      	add	r2, r3
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f47f af01 	bne.w	8007006 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3738      	adds	r7, #56	; 0x38
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b08c      	sub	sp, #48	; 0x30
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f107 0210 	add.w	r2, r7, #16
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fc74 	bl	8006b1c <validate>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800723a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800723e:	2b00      	cmp	r3, #0
 8007240:	d107      	bne.n	8007252 <f_write+0x44>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	7d5b      	ldrb	r3, [r3, #21]
 8007246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800724a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <f_write+0x4a>
 8007252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007256:	e14b      	b.n	80074f0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	7d1b      	ldrb	r3, [r3, #20]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <f_write+0x5a>
 8007264:	2307      	movs	r3, #7
 8007266:	e143      	b.n	80074f0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	441a      	add	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	429a      	cmp	r2, r3
 8007276:	f080 812d 	bcs.w	80074d4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	43db      	mvns	r3, r3
 8007280:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007282:	e127      	b.n	80074d4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728c:	2b00      	cmp	r3, #0
 800728e:	f040 80e3 	bne.w	8007458 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	0a5b      	lsrs	r3, r3, #9
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	8952      	ldrh	r2, [r2, #10]
 800729c:	3a01      	subs	r2, #1
 800729e:	4013      	ands	r3, r2
 80072a0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d143      	bne.n	8007330 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10c      	bne.n	80072ca <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80072b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d11a      	bne.n	80072f2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2100      	movs	r1, #0
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fe fcab 	bl	8005c1c <create_chain>
 80072c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80072c8:	e013      	b.n	80072f2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	4619      	mov	r1, r3
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7fe fd37 	bl	8005d4c <clmt_clust>
 80072de:	62b8      	str	r0, [r7, #40]	; 0x28
 80072e0:	e007      	b.n	80072f2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f7fe fc96 	bl	8005c1c <create_chain>
 80072f0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 80f2 	beq.w	80074de <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d104      	bne.n	800730a <f_write+0xfc>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2202      	movs	r2, #2
 8007304:	755a      	strb	r2, [r3, #21]
 8007306:	2302      	movs	r3, #2
 8007308:	e0f2      	b.n	80074f0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007310:	d104      	bne.n	800731c <f_write+0x10e>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	755a      	strb	r2, [r3, #21]
 8007318:	2301      	movs	r3, #1
 800731a:	e0e9      	b.n	80074f0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007320:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d102      	bne.n	8007330 <f_write+0x122>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800732e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	7d1b      	ldrb	r3, [r3, #20]
 8007334:	b25b      	sxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	da18      	bge.n	800736c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	7858      	ldrb	r0, [r3, #1]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6a1a      	ldr	r2, [r3, #32]
 8007348:	2301      	movs	r3, #1
 800734a:	f7fd fec5 	bl	80050d8 <disk_write>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d004      	beq.n	800735e <f_write+0x150>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	755a      	strb	r2, [r3, #21]
 800735a:	2301      	movs	r3, #1
 800735c:	e0c8      	b.n	80074f0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	7d1b      	ldrb	r3, [r3, #20]
 8007362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007366:	b2da      	uxtb	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	4619      	mov	r1, r3
 8007374:	4610      	mov	r0, r2
 8007376:	f7fe fa39 	bl	80057ec <clust2sect>
 800737a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d104      	bne.n	800738c <f_write+0x17e>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2202      	movs	r2, #2
 8007386:	755a      	strb	r2, [r3, #21]
 8007388:	2302      	movs	r3, #2
 800738a:	e0b1      	b.n	80074f0 <f_write+0x2e2>
			sect += csect;
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	4413      	add	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	0a5b      	lsrs	r3, r3, #9
 8007398:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d03c      	beq.n	800741a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	4413      	add	r3, r2
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	8952      	ldrh	r2, [r2, #10]
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d905      	bls.n	80073ba <f_write+0x1ac>
					cc = fs->csize - csect;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	895b      	ldrh	r3, [r3, #10]
 80073b2:	461a      	mov	r2, r3
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	7858      	ldrb	r0, [r3, #1]
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	69f9      	ldr	r1, [r7, #28]
 80073c4:	f7fd fe88 	bl	80050d8 <disk_write>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d004      	beq.n	80073d8 <f_write+0x1ca>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	755a      	strb	r2, [r3, #21]
 80073d4:	2301      	movs	r3, #1
 80073d6:	e08b      	b.n	80074f0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1a      	ldr	r2, [r3, #32]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	6a3a      	ldr	r2, [r7, #32]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d915      	bls.n	8007412 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a1a      	ldr	r2, [r3, #32]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	025b      	lsls	r3, r3, #9
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	4413      	add	r3, r2
 80073fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073fe:	4619      	mov	r1, r3
 8007400:	f7fd ff2a 	bl	8005258 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	7d1b      	ldrb	r3, [r3, #20]
 8007408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740c:	b2da      	uxtb	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	025b      	lsls	r3, r3, #9
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007418:	e03f      	b.n	800749a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	429a      	cmp	r2, r3
 8007422:	d016      	beq.n	8007452 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	699a      	ldr	r2, [r3, #24]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800742c:	429a      	cmp	r2, r3
 800742e:	d210      	bcs.n	8007452 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	7858      	ldrb	r0, [r3, #1]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800743a:	2301      	movs	r3, #1
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	f7fd fe2b 	bl	8005098 <disk_read>
 8007442:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2201      	movs	r2, #1
 800744c:	755a      	strb	r2, [r3, #21]
 800744e:	2301      	movs	r3, #1
 8007450:	e04e      	b.n	80074f0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007460:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	429a      	cmp	r2, r3
 800746c:	d901      	bls.n	8007472 <f_write+0x264>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007480:	4413      	add	r3, r2
 8007482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007484:	69f9      	ldr	r1, [r7, #28]
 8007486:	4618      	mov	r0, r3
 8007488:	f7fd fee6 	bl	8005258 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	7d1b      	ldrb	r3, [r3, #20]
 8007490:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007494:	b2da      	uxtb	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	4413      	add	r3, r2
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	699a      	ldr	r2, [r3, #24]
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	441a      	add	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	619a      	str	r2, [r3, #24]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	bf38      	it	cc
 80074ba:	461a      	movcc	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	60da      	str	r2, [r3, #12]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	441a      	add	r2, r3
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f47f aed4 	bne.w	8007284 <f_write+0x76>
 80074dc:	e000      	b.n	80074e0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80074de:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	7d1b      	ldrb	r3, [r3, #20]
 80074e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3730      	adds	r7, #48	; 0x30
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f107 0208 	add.w	r2, r7, #8
 8007506:	4611      	mov	r1, r2
 8007508:	4618      	mov	r0, r3
 800750a:	f7ff fb07 	bl	8006b1c <validate>
 800750e:	4603      	mov	r3, r0
 8007510:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007512:	7dfb      	ldrb	r3, [r7, #23]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d168      	bne.n	80075ea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7d1b      	ldrb	r3, [r3, #20]
 800751c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	d062      	beq.n	80075ea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	7d1b      	ldrb	r3, [r3, #20]
 8007528:	b25b      	sxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	da15      	bge.n	800755a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	7858      	ldrb	r0, [r3, #1]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a1a      	ldr	r2, [r3, #32]
 800753c:	2301      	movs	r3, #1
 800753e:	f7fd fdcb 	bl	80050d8 <disk_write>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <f_sync+0x54>
 8007548:	2301      	movs	r3, #1
 800754a:	e04f      	b.n	80075ec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	7d1b      	ldrb	r3, [r3, #20]
 8007550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007554:	b2da      	uxtb	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800755a:	f7fd fcfd 	bl	8004f58 <get_fattime>
 800755e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	4619      	mov	r1, r3
 8007568:	4610      	mov	r0, r2
 800756a:	f7fe f8a3 	bl	80056b4 <move_window>
 800756e:	4603      	mov	r3, r0
 8007570:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d138      	bne.n	80075ea <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	330b      	adds	r3, #11
 8007582:	781a      	ldrb	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	330b      	adds	r3, #11
 8007588:	f042 0220 	orr.w	r2, r2, #32
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6818      	ldr	r0, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	461a      	mov	r2, r3
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	f7fe fdb0 	bl	8006100 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f103 021c 	add.w	r2, r3, #28
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f7fd fe27 	bl	8005200 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3316      	adds	r3, #22
 80075b6:	6939      	ldr	r1, [r7, #16]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fd fe21 	bl	8005200 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3312      	adds	r3, #18
 80075c2:	2100      	movs	r1, #0
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fd fe00 	bl	80051ca <st_word>
					fs->wflag = 1;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2201      	movs	r2, #1
 80075ce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe f89c 	bl	8005710 <sync_fs>
 80075d8:	4603      	mov	r3, r0
 80075da:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	7d1b      	ldrb	r3, [r3, #20]
 80075e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff ff7b 	bl	80074f8 <f_sync>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d118      	bne.n	800763e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f107 0208 	add.w	r2, r7, #8
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff fa81 	bl	8006b1c <validate>
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10c      	bne.n	800763e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	4618      	mov	r0, r3
 800762a:	f7fd ff9f 	bl	800556c <dec_lock>
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d102      	bne.n	800763e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800763e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b090      	sub	sp, #64	; 0x40
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f107 0208 	add.w	r2, r7, #8
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f7ff fa5e 	bl	8006b1c <validate>
 8007660:	4603      	mov	r3, r0
 8007662:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007666:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <f_lseek+0x2e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	7d5b      	ldrb	r3, [r3, #21]
 8007672:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007676:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <f_lseek+0x3c>
 800767e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007682:	e1e6      	b.n	8007a52 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80d1 	beq.w	8007830 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007694:	d15a      	bne.n	800774c <f_lseek+0x104>
			tbl = fp->cltbl;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	1d1a      	adds	r2, r3, #4
 80076a0:	627a      	str	r2, [r7, #36]	; 0x24
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	617b      	str	r3, [r7, #20]
 80076a6:	2302      	movs	r3, #2
 80076a8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d03a      	beq.n	800772c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	2300      	movs	r3, #0
 80076bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	3302      	adds	r3, #2
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	3301      	adds	r3, #1
 80076cc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe f8a9 	bl	800582a <get_fat>
 80076d8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d804      	bhi.n	80076ea <f_lseek+0xa2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	755a      	strb	r2, [r3, #21]
 80076e6:	2302      	movs	r3, #2
 80076e8:	e1b3      	b.n	8007a52 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d104      	bne.n	80076fc <f_lseek+0xb4>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	755a      	strb	r2, [r3, #21]
 80076f8:	2301      	movs	r3, #1
 80076fa:	e1aa      	b.n	8007a52 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007702:	429a      	cmp	r2, r3
 8007704:	d0de      	beq.n	80076c4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	429a      	cmp	r2, r3
 800770c:	d809      	bhi.n	8007722 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	1d1a      	adds	r2, r3, #4
 8007712:	627a      	str	r2, [r7, #36]	; 0x24
 8007714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	1d1a      	adds	r2, r3, #4
 800771c:	627a      	str	r2, [r7, #36]	; 0x24
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007728:	429a      	cmp	r2, r3
 800772a:	d3c4      	bcc.n	80076b6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007732:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	429a      	cmp	r2, r3
 800773a:	d803      	bhi.n	8007744 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	e184      	b.n	8007a4e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007744:	2311      	movs	r3, #17
 8007746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800774a:	e180      	b.n	8007a4e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	429a      	cmp	r2, r3
 8007754:	d902      	bls.n	800775c <f_lseek+0x114>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8172 	beq.w	8007a4e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	3b01      	subs	r3, #1
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7fe faeb 	bl	8005d4c <clmt_clust>
 8007776:	4602      	mov	r2, r0
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	4619      	mov	r1, r3
 8007784:	4610      	mov	r0, r2
 8007786:	f7fe f831 	bl	80057ec <clust2sect>
 800778a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <f_lseek+0x154>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	755a      	strb	r2, [r3, #21]
 8007798:	2302      	movs	r3, #2
 800779a:	e15a      	b.n	8007a52 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	3b01      	subs	r3, #1
 80077a0:	0a5b      	lsrs	r3, r3, #9
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	8952      	ldrh	r2, [r2, #10]
 80077a6:	3a01      	subs	r2, #1
 80077a8:	4013      	ands	r3, r2
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	4413      	add	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8148 	beq.w	8007a4e <f_lseek+0x406>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	f000 8142 	beq.w	8007a4e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	7d1b      	ldrb	r3, [r3, #20]
 80077ce:	b25b      	sxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	da18      	bge.n	8007806 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	7858      	ldrb	r0, [r3, #1]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1a      	ldr	r2, [r3, #32]
 80077e2:	2301      	movs	r3, #1
 80077e4:	f7fd fc78 	bl	80050d8 <disk_write>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d004      	beq.n	80077f8 <f_lseek+0x1b0>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	755a      	strb	r2, [r3, #21]
 80077f4:	2301      	movs	r3, #1
 80077f6:	e12c      	b.n	8007a52 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	7d1b      	ldrb	r3, [r3, #20]
 80077fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007800:	b2da      	uxtb	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	7858      	ldrb	r0, [r3, #1]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007810:	2301      	movs	r3, #1
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	f7fd fc40 	bl	8005098 <disk_read>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d004      	beq.n	8007828 <f_lseek+0x1e0>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	755a      	strb	r2, [r3, #21]
 8007824:	2301      	movs	r3, #1
 8007826:	e114      	b.n	8007a52 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	621a      	str	r2, [r3, #32]
 800782e:	e10e      	b.n	8007a4e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d908      	bls.n	800784c <f_lseek+0x204>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	7d1b      	ldrb	r3, [r3, #20]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d102      	bne.n	800784c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	637b      	str	r3, [r7, #52]	; 0x34
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800785a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 80a7 	beq.w	80079b2 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	895b      	ldrh	r3, [r3, #10]
 8007868:	025b      	lsls	r3, r3, #9
 800786a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d01b      	beq.n	80078aa <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	1e5a      	subs	r2, r3, #1
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	fbb2 f2f3 	udiv	r2, r2, r3
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	1e59      	subs	r1, r3, #1
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007886:	429a      	cmp	r2, r3
 8007888:	d30f      	bcc.n	80078aa <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	1e5a      	subs	r2, r3, #1
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	425b      	negs	r3, r3
 8007892:	401a      	ands	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80078a8:	e022      	b.n	80078f0 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d119      	bne.n	80078ea <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe f9ae 	bl	8005c1c <create_chain>
 80078c0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d104      	bne.n	80078d2 <f_lseek+0x28a>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2202      	movs	r2, #2
 80078cc:	755a      	strb	r2, [r3, #21]
 80078ce:	2302      	movs	r3, #2
 80078d0:	e0bf      	b.n	8007a52 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80078d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d8:	d104      	bne.n	80078e4 <f_lseek+0x29c>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	755a      	strb	r2, [r3, #21]
 80078e0:	2301      	movs	r3, #1
 80078e2:	e0b6      	b.n	8007a52 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078e8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ee:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d05d      	beq.n	80079b2 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80078f6:	e03a      	b.n	800796e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	441a      	add	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7d1b      	ldrb	r3, [r3, #20]
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe f97d 	bl	8005c1c <create_chain>
 8007922:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d108      	bne.n	800793c <f_lseek+0x2f4>
							ofs = 0; break;
 800792a:	2300      	movs	r3, #0
 800792c:	603b      	str	r3, [r7, #0]
 800792e:	e022      	b.n	8007976 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007934:	4618      	mov	r0, r3
 8007936:	f7fd ff78 	bl	800582a <get_fat>
 800793a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800793c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007942:	d104      	bne.n	800794e <f_lseek+0x306>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	755a      	strb	r2, [r3, #21]
 800794a:	2301      	movs	r3, #1
 800794c:	e081      	b.n	8007a52 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	2b01      	cmp	r3, #1
 8007952:	d904      	bls.n	800795e <f_lseek+0x316>
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800795a:	429a      	cmp	r2, r3
 800795c:	d304      	bcc.n	8007968 <f_lseek+0x320>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2202      	movs	r2, #2
 8007962:	755a      	strb	r2, [r3, #21]
 8007964:	2302      	movs	r3, #2
 8007966:	e074      	b.n	8007a52 <f_lseek+0x40a>
					fp->clust = clst;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800796c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	429a      	cmp	r2, r3
 8007974:	d8c0      	bhi.n	80078f8 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	441a      	add	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007988:	2b00      	cmp	r3, #0
 800798a:	d012      	beq.n	80079b2 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007990:	4618      	mov	r0, r3
 8007992:	f7fd ff2b 	bl	80057ec <clust2sect>
 8007996:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799a:	2b00      	cmp	r3, #0
 800799c:	d104      	bne.n	80079a8 <f_lseek+0x360>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2202      	movs	r2, #2
 80079a2:	755a      	strb	r2, [r3, #21]
 80079a4:	2302      	movs	r3, #2
 80079a6:	e054      	b.n	8007a52 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	0a5b      	lsrs	r3, r3, #9
 80079ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079ae:	4413      	add	r3, r2
 80079b0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d90a      	bls.n	80079d4 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699a      	ldr	r2, [r3, #24]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	7d1b      	ldrb	r3, [r3, #20]
 80079ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d036      	beq.n	8007a4e <f_lseek+0x406>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d031      	beq.n	8007a4e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7d1b      	ldrb	r3, [r3, #20]
 80079ee:	b25b      	sxtb	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	da18      	bge.n	8007a26 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	7858      	ldrb	r0, [r3, #1]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1a      	ldr	r2, [r3, #32]
 8007a02:	2301      	movs	r3, #1
 8007a04:	f7fd fb68 	bl	80050d8 <disk_write>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d004      	beq.n	8007a18 <f_lseek+0x3d0>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	755a      	strb	r2, [r3, #21]
 8007a14:	2301      	movs	r3, #1
 8007a16:	e01c      	b.n	8007a52 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	7d1b      	ldrb	r3, [r3, #20]
 8007a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	7858      	ldrb	r0, [r3, #1]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a30:	2301      	movs	r3, #1
 8007a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a34:	f7fd fb30 	bl	8005098 <disk_read>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d004      	beq.n	8007a48 <f_lseek+0x400>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	755a      	strb	r2, [r3, #21]
 8007a44:	2301      	movs	r3, #1
 8007a46:	e004      	b.n	8007a52 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a4c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007a4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3740      	adds	r7, #64	; 0x40
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b092      	sub	sp, #72	; 0x48
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007a66:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007a6a:	f107 030c 	add.w	r3, r7, #12
 8007a6e:	2200      	movs	r2, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe fe07 	bl	8006684 <find_volume>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007a7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f040 8099 	bne.w	8007bb8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	3b02      	subs	r3, #2
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d804      	bhi.n	8007aa4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	e089      	b.n	8007bb8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d128      	bne.n	8007b02 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007ab8:	f107 0314 	add.w	r3, r7, #20
 8007abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fd feb3 	bl	800582a <get_fat>
 8007ac4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d103      	bne.n	8007ad6 <f_getfree+0x7c>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007ad4:	e063      	b.n	8007b9e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d103      	bne.n	8007ae4 <f_getfree+0x8a>
 8007adc:	2302      	movs	r3, #2
 8007ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007ae2:	e05c      	b.n	8007b9e <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d102      	bne.n	8007af0 <f_getfree+0x96>
 8007aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aec:	3301      	adds	r3, #1
 8007aee:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8007af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af2:	3301      	adds	r3, #1
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d3db      	bcc.n	8007ab8 <f_getfree+0x5e>
 8007b00:	e04d      	b.n	8007b9e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	637b      	str	r3, [r7, #52]	; 0x34
 8007b12:	2300      	movs	r3, #0
 8007b14:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8007b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d113      	bne.n	8007b44 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	63ba      	str	r2, [r7, #56]	; 0x38
 8007b24:	4619      	mov	r1, r3
 8007b26:	f7fd fdc5 	bl	80056b4 <move_window>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007b30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d131      	bne.n	8007b9c <f_getfree+0x142>
							p = fs->win;
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	3330      	adds	r3, #48	; 0x30
 8007b3c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b42:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d10f      	bne.n	8007b6c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b4e:	f7fd fb01 	bl	8005154 <ld_word>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <f_getfree+0x104>
 8007b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	3302      	adds	r3, #2
 8007b62:	633b      	str	r3, [r7, #48]	; 0x30
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	3b02      	subs	r3, #2
 8007b68:	637b      	str	r3, [r7, #52]	; 0x34
 8007b6a:	e010      	b.n	8007b8e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b6e:	f7fd fb09 	bl	8005184 <ld_dword>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d102      	bne.n	8007b82 <f_getfree+0x128>
 8007b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7e:	3301      	adds	r3, #1
 8007b80:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	3304      	adds	r3, #4
 8007b86:	633b      	str	r3, [r7, #48]	; 0x30
 8007b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8a:	3b04      	subs	r3, #4
 8007b8c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b90:	3b01      	subs	r3, #1
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1bd      	bne.n	8007b16 <f_getfree+0xbc>
 8007b9a:	e000      	b.n	8007b9e <f_getfree+0x144>
							if (res != FR_OK) break;
 8007b9c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ba2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ba8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	791a      	ldrb	r2, [r3, #4]
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	f042 0201 	orr.w	r2, r2, #1
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007bb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3748      	adds	r7, #72	; 0x48
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b09e      	sub	sp, #120	; 0x78
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007bd0:	f107 010c 	add.w	r1, r7, #12
 8007bd4:	1d3b      	adds	r3, r7, #4
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fd53 	bl	8006684 <find_volume>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8007be8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f040 808e 	bne.w	8007d0e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe fc36 	bl	800646c <follow_path>
 8007c00:	4603      	mov	r3, r0
 8007c02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8007c06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d108      	bne.n	8007c20 <f_unlink+0x5c>
 8007c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c12:	2102      	movs	r1, #2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fd fb9d 	bl	8005354 <chk_lock>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8007c20:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d172      	bne.n	8007d0e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8007c28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c2c:	b25b      	sxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	da03      	bge.n	8007c3a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8007c32:	2306      	movs	r3, #6
 8007c34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007c38:	e008      	b.n	8007c4c <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8007c3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8007c46:	2307      	movs	r3, #7
 8007c48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8007c4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d134      	bne.n	8007cbe <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c58:	4611      	mov	r1, r2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fa31 	bl	80060c2 <ld_clust>
 8007c60:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8007c62:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d027      	beq.n	8007cbe <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8007c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c74:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8007c76:	f107 0310 	add.w	r3, r7, #16
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fe f899 	bl	8005db4 <dir_sdi>
 8007c82:	4603      	mov	r3, r0
 8007c84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8007c88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d116      	bne.n	8007cbe <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8007c90:	f107 0310 	add.w	r3, r7, #16
 8007c94:	2100      	movs	r1, #0
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fa52 	bl	8006140 <dir_read>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8007ca2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <f_unlink+0xec>
 8007caa:	2307      	movs	r3, #7
 8007cac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007cb0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d102      	bne.n	8007cbe <f_unlink+0xfa>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8007cbe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d123      	bne.n	8007d0e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8007cc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe fb1c 	bl	8006308 <dir_remove>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8007cd6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10c      	bne.n	8007cf8 <f_unlink+0x134>
 8007cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d009      	beq.n	8007cf8 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8007ce4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ce8:	2200      	movs	r2, #0
 8007cea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fd ff30 	bl	8005b52 <remove_chain>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8007cf8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d106      	bne.n	8007d0e <f_unlink+0x14a>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fd fd04 	bl	8005710 <sync_fs>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8007d0e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3778      	adds	r7, #120	; 0x78
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b088      	sub	sp, #32
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007d2e:	e01b      	b.n	8007d68 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007d30:	f107 0310 	add.w	r3, r7, #16
 8007d34:	f107 0114 	add.w	r1, r7, #20
 8007d38:	2201      	movs	r2, #1
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff f928 	bl	8006f90 <f_read>
		if (rc != 1) break;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d116      	bne.n	8007d74 <f_gets+0x5a>
		c = s[0];
 8007d46:	7d3b      	ldrb	r3, [r7, #20]
 8007d48:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	2b0d      	cmp	r3, #13
 8007d4e:	d100      	bne.n	8007d52 <f_gets+0x38>
 8007d50:	e00a      	b.n	8007d68 <f_gets+0x4e>
		*p++ = c;
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	1c5a      	adds	r2, r3, #1
 8007d56:	61ba      	str	r2, [r7, #24]
 8007d58:	7dfa      	ldrb	r2, [r7, #23]
 8007d5a:	701a      	strb	r2, [r3, #0]
		n++;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	2b0a      	cmp	r3, #10
 8007d66:	d007      	beq.n	8007d78 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	69fa      	ldr	r2, [r7, #28]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	dbde      	blt.n	8007d30 <f_gets+0x16>
 8007d72:	e002      	b.n	8007d7a <f_gets+0x60>
		if (rc != 1) break;
 8007d74:	bf00      	nop
 8007d76:	e000      	b.n	8007d7a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007d78:	bf00      	nop
	}
	*p = 0;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <f_gets+0x70>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	e000      	b.n	8007d8c <f_gets+0x72>
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3720      	adds	r7, #32
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	2b0a      	cmp	r3, #10
 8007da4:	d103      	bne.n	8007dae <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007da6:	210d      	movs	r1, #13
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7ff fff3 	bl	8007d94 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	db25      	blt.n	8007e06 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	60fa      	str	r2, [r7, #12]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	78fa      	ldrb	r2, [r7, #3]
 8007dc6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b3c      	cmp	r3, #60	; 0x3c
 8007dcc:	dd12      	ble.n	8007df4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f103 010c 	add.w	r1, r3, #12
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	f107 0308 	add.w	r3, r7, #8
 8007dde:	f7ff fa16 	bl	800720e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d101      	bne.n	8007dee <putc_bfd+0x5a>
 8007dea:	2300      	movs	r3, #0
 8007dec:	e001      	b.n	8007df2 <putc_bfd+0x5e>
 8007dee:	f04f 33ff 	mov.w	r3, #4294967295
 8007df2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	609a      	str	r2, [r3, #8]
 8007e04:	e000      	b.n	8007e08 <putc_bfd+0x74>
	if (i < 0) return;
 8007e06:	bf00      	nop
}
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	db16      	blt.n	8007e4c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f103 010c 	add.w	r1, r3, #12
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f107 030c 	add.w	r3, r7, #12
 8007e32:	f7ff f9ec 	bl	800720e <f_write>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d107      	bne.n	8007e4c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d102      	bne.n	8007e4c <putc_flush+0x3e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	e001      	b.n	8007e50 <putc_flush+0x42>
	return EOF;
 8007e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	605a      	str	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	609a      	str	r2, [r3, #8]
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b096      	sub	sp, #88	; 0x58
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007e8c:	f107 030c 	add.w	r3, r7, #12
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7ff ffe0 	bl	8007e58 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007e98:	e009      	b.n	8007eae <f_puts+0x2c>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	781a      	ldrb	r2, [r3, #0]
 8007ea2:	f107 030c 	add.w	r3, r7, #12
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7ff ff73 	bl	8007d94 <putc_bfd>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1f1      	bne.n	8007e9a <f_puts+0x18>
	return putc_flush(&pb);
 8007eb6:	f107 030c 	add.w	r3, r7, #12
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff ffa7 	bl	8007e0e <putc_flush>
 8007ec0:	4603      	mov	r3, r0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3758      	adds	r7, #88	; 0x58
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ee2:	4b1f      	ldr	r3, [pc, #124]	; (8007f60 <FATFS_LinkDriverEx+0x94>)
 8007ee4:	7a5b      	ldrb	r3, [r3, #9]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d131      	bne.n	8007f50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007eec:	4b1c      	ldr	r3, [pc, #112]	; (8007f60 <FATFS_LinkDriverEx+0x94>)
 8007eee:	7a5b      	ldrb	r3, [r3, #9]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <FATFS_LinkDriverEx+0x94>)
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007efa:	4b19      	ldr	r3, [pc, #100]	; (8007f60 <FATFS_LinkDriverEx+0x94>)
 8007efc:	7a5b      	ldrb	r3, [r3, #9]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	4a17      	ldr	r2, [pc, #92]	; (8007f60 <FATFS_LinkDriverEx+0x94>)
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007f0a:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <FATFS_LinkDriverEx+0x94>)
 8007f0c:	7a5b      	ldrb	r3, [r3, #9]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	461a      	mov	r2, r3
 8007f12:	4b13      	ldr	r3, [pc, #76]	; (8007f60 <FATFS_LinkDriverEx+0x94>)
 8007f14:	4413      	add	r3, r2
 8007f16:	79fa      	ldrb	r2, [r7, #7]
 8007f18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f1a:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <FATFS_LinkDriverEx+0x94>)
 8007f1c:	7a5b      	ldrb	r3, [r3, #9]
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	b2d1      	uxtb	r1, r2
 8007f24:	4a0e      	ldr	r2, [pc, #56]	; (8007f60 <FATFS_LinkDriverEx+0x94>)
 8007f26:	7251      	strb	r1, [r2, #9]
 8007f28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007f2a:	7dbb      	ldrb	r3, [r7, #22]
 8007f2c:	3330      	adds	r3, #48	; 0x30
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	3301      	adds	r3, #1
 8007f38:	223a      	movs	r2, #58	; 0x3a
 8007f3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	3302      	adds	r3, #2
 8007f40:	222f      	movs	r2, #47	; 0x2f
 8007f42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	3303      	adds	r3, #3
 8007f48:	2200      	movs	r2, #0
 8007f4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	371c      	adds	r7, #28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	200000d4 	.word	0x200000d4

08007f64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f6e:	2200      	movs	r2, #0
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7ff ffaa 	bl	8007ecc <FATFS_LinkDriverEx>
 8007f78:	4603      	mov	r3, r0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
	...

08007f84 <__errno>:
 8007f84:	4b01      	ldr	r3, [pc, #4]	; (8007f8c <__errno+0x8>)
 8007f86:	6818      	ldr	r0, [r3, #0]
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	20000020 	.word	0x20000020

08007f90 <__libc_init_array>:
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	4d0d      	ldr	r5, [pc, #52]	; (8007fc8 <__libc_init_array+0x38>)
 8007f94:	4c0d      	ldr	r4, [pc, #52]	; (8007fcc <__libc_init_array+0x3c>)
 8007f96:	1b64      	subs	r4, r4, r5
 8007f98:	10a4      	asrs	r4, r4, #2
 8007f9a:	2600      	movs	r6, #0
 8007f9c:	42a6      	cmp	r6, r4
 8007f9e:	d109      	bne.n	8007fb4 <__libc_init_array+0x24>
 8007fa0:	4d0b      	ldr	r5, [pc, #44]	; (8007fd0 <__libc_init_array+0x40>)
 8007fa2:	4c0c      	ldr	r4, [pc, #48]	; (8007fd4 <__libc_init_array+0x44>)
 8007fa4:	f000 fc4e 	bl	8008844 <_init>
 8007fa8:	1b64      	subs	r4, r4, r5
 8007faa:	10a4      	asrs	r4, r4, #2
 8007fac:	2600      	movs	r6, #0
 8007fae:	42a6      	cmp	r6, r4
 8007fb0:	d105      	bne.n	8007fbe <__libc_init_array+0x2e>
 8007fb2:	bd70      	pop	{r4, r5, r6, pc}
 8007fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb8:	4798      	blx	r3
 8007fba:	3601      	adds	r6, #1
 8007fbc:	e7ee      	b.n	8007f9c <__libc_init_array+0xc>
 8007fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc2:	4798      	blx	r3
 8007fc4:	3601      	adds	r6, #1
 8007fc6:	e7f2      	b.n	8007fae <__libc_init_array+0x1e>
 8007fc8:	08008c98 	.word	0x08008c98
 8007fcc:	08008c98 	.word	0x08008c98
 8007fd0:	08008c98 	.word	0x08008c98
 8007fd4:	08008c9c 	.word	0x08008c9c

08007fd8 <memcpy>:
 8007fd8:	440a      	add	r2, r1
 8007fda:	4291      	cmp	r1, r2
 8007fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fe0:	d100      	bne.n	8007fe4 <memcpy+0xc>
 8007fe2:	4770      	bx	lr
 8007fe4:	b510      	push	{r4, lr}
 8007fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fee:	4291      	cmp	r1, r2
 8007ff0:	d1f9      	bne.n	8007fe6 <memcpy+0xe>
 8007ff2:	bd10      	pop	{r4, pc}

08007ff4 <memset>:
 8007ff4:	4402      	add	r2, r0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d100      	bne.n	8007ffe <memset+0xa>
 8007ffc:	4770      	bx	lr
 8007ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8008002:	e7f9      	b.n	8007ff8 <memset+0x4>

08008004 <siprintf>:
 8008004:	b40e      	push	{r1, r2, r3}
 8008006:	b500      	push	{lr}
 8008008:	b09c      	sub	sp, #112	; 0x70
 800800a:	ab1d      	add	r3, sp, #116	; 0x74
 800800c:	9002      	str	r0, [sp, #8]
 800800e:	9006      	str	r0, [sp, #24]
 8008010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008014:	4809      	ldr	r0, [pc, #36]	; (800803c <siprintf+0x38>)
 8008016:	9107      	str	r1, [sp, #28]
 8008018:	9104      	str	r1, [sp, #16]
 800801a:	4909      	ldr	r1, [pc, #36]	; (8008040 <siprintf+0x3c>)
 800801c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008020:	9105      	str	r1, [sp, #20]
 8008022:	6800      	ldr	r0, [r0, #0]
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	a902      	add	r1, sp, #8
 8008028:	f000 f868 	bl	80080fc <_svfiprintf_r>
 800802c:	9b02      	ldr	r3, [sp, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	b01c      	add	sp, #112	; 0x70
 8008034:	f85d eb04 	ldr.w	lr, [sp], #4
 8008038:	b003      	add	sp, #12
 800803a:	4770      	bx	lr
 800803c:	20000020 	.word	0x20000020
 8008040:	ffff0208 	.word	0xffff0208

08008044 <__ssputs_r>:
 8008044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008048:	688e      	ldr	r6, [r1, #8]
 800804a:	429e      	cmp	r6, r3
 800804c:	4682      	mov	sl, r0
 800804e:	460c      	mov	r4, r1
 8008050:	4690      	mov	r8, r2
 8008052:	461f      	mov	r7, r3
 8008054:	d838      	bhi.n	80080c8 <__ssputs_r+0x84>
 8008056:	898a      	ldrh	r2, [r1, #12]
 8008058:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800805c:	d032      	beq.n	80080c4 <__ssputs_r+0x80>
 800805e:	6825      	ldr	r5, [r4, #0]
 8008060:	6909      	ldr	r1, [r1, #16]
 8008062:	eba5 0901 	sub.w	r9, r5, r1
 8008066:	6965      	ldr	r5, [r4, #20]
 8008068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800806c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008070:	3301      	adds	r3, #1
 8008072:	444b      	add	r3, r9
 8008074:	106d      	asrs	r5, r5, #1
 8008076:	429d      	cmp	r5, r3
 8008078:	bf38      	it	cc
 800807a:	461d      	movcc	r5, r3
 800807c:	0553      	lsls	r3, r2, #21
 800807e:	d531      	bpl.n	80080e4 <__ssputs_r+0xa0>
 8008080:	4629      	mov	r1, r5
 8008082:	f000 fb39 	bl	80086f8 <_malloc_r>
 8008086:	4606      	mov	r6, r0
 8008088:	b950      	cbnz	r0, 80080a0 <__ssputs_r+0x5c>
 800808a:	230c      	movs	r3, #12
 800808c:	f8ca 3000 	str.w	r3, [sl]
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a0:	6921      	ldr	r1, [r4, #16]
 80080a2:	464a      	mov	r2, r9
 80080a4:	f7ff ff98 	bl	8007fd8 <memcpy>
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	6126      	str	r6, [r4, #16]
 80080b6:	6165      	str	r5, [r4, #20]
 80080b8:	444e      	add	r6, r9
 80080ba:	eba5 0509 	sub.w	r5, r5, r9
 80080be:	6026      	str	r6, [r4, #0]
 80080c0:	60a5      	str	r5, [r4, #8]
 80080c2:	463e      	mov	r6, r7
 80080c4:	42be      	cmp	r6, r7
 80080c6:	d900      	bls.n	80080ca <__ssputs_r+0x86>
 80080c8:	463e      	mov	r6, r7
 80080ca:	4632      	mov	r2, r6
 80080cc:	6820      	ldr	r0, [r4, #0]
 80080ce:	4641      	mov	r1, r8
 80080d0:	f000 faa8 	bl	8008624 <memmove>
 80080d4:	68a3      	ldr	r3, [r4, #8]
 80080d6:	6822      	ldr	r2, [r4, #0]
 80080d8:	1b9b      	subs	r3, r3, r6
 80080da:	4432      	add	r2, r6
 80080dc:	60a3      	str	r3, [r4, #8]
 80080de:	6022      	str	r2, [r4, #0]
 80080e0:	2000      	movs	r0, #0
 80080e2:	e7db      	b.n	800809c <__ssputs_r+0x58>
 80080e4:	462a      	mov	r2, r5
 80080e6:	f000 fb61 	bl	80087ac <_realloc_r>
 80080ea:	4606      	mov	r6, r0
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d1e1      	bne.n	80080b4 <__ssputs_r+0x70>
 80080f0:	6921      	ldr	r1, [r4, #16]
 80080f2:	4650      	mov	r0, sl
 80080f4:	f000 fab0 	bl	8008658 <_free_r>
 80080f8:	e7c7      	b.n	800808a <__ssputs_r+0x46>
	...

080080fc <_svfiprintf_r>:
 80080fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008100:	4698      	mov	r8, r3
 8008102:	898b      	ldrh	r3, [r1, #12]
 8008104:	061b      	lsls	r3, r3, #24
 8008106:	b09d      	sub	sp, #116	; 0x74
 8008108:	4607      	mov	r7, r0
 800810a:	460d      	mov	r5, r1
 800810c:	4614      	mov	r4, r2
 800810e:	d50e      	bpl.n	800812e <_svfiprintf_r+0x32>
 8008110:	690b      	ldr	r3, [r1, #16]
 8008112:	b963      	cbnz	r3, 800812e <_svfiprintf_r+0x32>
 8008114:	2140      	movs	r1, #64	; 0x40
 8008116:	f000 faef 	bl	80086f8 <_malloc_r>
 800811a:	6028      	str	r0, [r5, #0]
 800811c:	6128      	str	r0, [r5, #16]
 800811e:	b920      	cbnz	r0, 800812a <_svfiprintf_r+0x2e>
 8008120:	230c      	movs	r3, #12
 8008122:	603b      	str	r3, [r7, #0]
 8008124:	f04f 30ff 	mov.w	r0, #4294967295
 8008128:	e0d1      	b.n	80082ce <_svfiprintf_r+0x1d2>
 800812a:	2340      	movs	r3, #64	; 0x40
 800812c:	616b      	str	r3, [r5, #20]
 800812e:	2300      	movs	r3, #0
 8008130:	9309      	str	r3, [sp, #36]	; 0x24
 8008132:	2320      	movs	r3, #32
 8008134:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008138:	f8cd 800c 	str.w	r8, [sp, #12]
 800813c:	2330      	movs	r3, #48	; 0x30
 800813e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082e8 <_svfiprintf_r+0x1ec>
 8008142:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008146:	f04f 0901 	mov.w	r9, #1
 800814a:	4623      	mov	r3, r4
 800814c:	469a      	mov	sl, r3
 800814e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008152:	b10a      	cbz	r2, 8008158 <_svfiprintf_r+0x5c>
 8008154:	2a25      	cmp	r2, #37	; 0x25
 8008156:	d1f9      	bne.n	800814c <_svfiprintf_r+0x50>
 8008158:	ebba 0b04 	subs.w	fp, sl, r4
 800815c:	d00b      	beq.n	8008176 <_svfiprintf_r+0x7a>
 800815e:	465b      	mov	r3, fp
 8008160:	4622      	mov	r2, r4
 8008162:	4629      	mov	r1, r5
 8008164:	4638      	mov	r0, r7
 8008166:	f7ff ff6d 	bl	8008044 <__ssputs_r>
 800816a:	3001      	adds	r0, #1
 800816c:	f000 80aa 	beq.w	80082c4 <_svfiprintf_r+0x1c8>
 8008170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008172:	445a      	add	r2, fp
 8008174:	9209      	str	r2, [sp, #36]	; 0x24
 8008176:	f89a 3000 	ldrb.w	r3, [sl]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 80a2 	beq.w	80082c4 <_svfiprintf_r+0x1c8>
 8008180:	2300      	movs	r3, #0
 8008182:	f04f 32ff 	mov.w	r2, #4294967295
 8008186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800818a:	f10a 0a01 	add.w	sl, sl, #1
 800818e:	9304      	str	r3, [sp, #16]
 8008190:	9307      	str	r3, [sp, #28]
 8008192:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008196:	931a      	str	r3, [sp, #104]	; 0x68
 8008198:	4654      	mov	r4, sl
 800819a:	2205      	movs	r2, #5
 800819c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a0:	4851      	ldr	r0, [pc, #324]	; (80082e8 <_svfiprintf_r+0x1ec>)
 80081a2:	f7f8 f81d 	bl	80001e0 <memchr>
 80081a6:	9a04      	ldr	r2, [sp, #16]
 80081a8:	b9d8      	cbnz	r0, 80081e2 <_svfiprintf_r+0xe6>
 80081aa:	06d0      	lsls	r0, r2, #27
 80081ac:	bf44      	itt	mi
 80081ae:	2320      	movmi	r3, #32
 80081b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b4:	0711      	lsls	r1, r2, #28
 80081b6:	bf44      	itt	mi
 80081b8:	232b      	movmi	r3, #43	; 0x2b
 80081ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081be:	f89a 3000 	ldrb.w	r3, [sl]
 80081c2:	2b2a      	cmp	r3, #42	; 0x2a
 80081c4:	d015      	beq.n	80081f2 <_svfiprintf_r+0xf6>
 80081c6:	9a07      	ldr	r2, [sp, #28]
 80081c8:	4654      	mov	r4, sl
 80081ca:	2000      	movs	r0, #0
 80081cc:	f04f 0c0a 	mov.w	ip, #10
 80081d0:	4621      	mov	r1, r4
 80081d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d6:	3b30      	subs	r3, #48	; 0x30
 80081d8:	2b09      	cmp	r3, #9
 80081da:	d94e      	bls.n	800827a <_svfiprintf_r+0x17e>
 80081dc:	b1b0      	cbz	r0, 800820c <_svfiprintf_r+0x110>
 80081de:	9207      	str	r2, [sp, #28]
 80081e0:	e014      	b.n	800820c <_svfiprintf_r+0x110>
 80081e2:	eba0 0308 	sub.w	r3, r0, r8
 80081e6:	fa09 f303 	lsl.w	r3, r9, r3
 80081ea:	4313      	orrs	r3, r2
 80081ec:	9304      	str	r3, [sp, #16]
 80081ee:	46a2      	mov	sl, r4
 80081f0:	e7d2      	b.n	8008198 <_svfiprintf_r+0x9c>
 80081f2:	9b03      	ldr	r3, [sp, #12]
 80081f4:	1d19      	adds	r1, r3, #4
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	9103      	str	r1, [sp, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	bfbb      	ittet	lt
 80081fe:	425b      	neglt	r3, r3
 8008200:	f042 0202 	orrlt.w	r2, r2, #2
 8008204:	9307      	strge	r3, [sp, #28]
 8008206:	9307      	strlt	r3, [sp, #28]
 8008208:	bfb8      	it	lt
 800820a:	9204      	strlt	r2, [sp, #16]
 800820c:	7823      	ldrb	r3, [r4, #0]
 800820e:	2b2e      	cmp	r3, #46	; 0x2e
 8008210:	d10c      	bne.n	800822c <_svfiprintf_r+0x130>
 8008212:	7863      	ldrb	r3, [r4, #1]
 8008214:	2b2a      	cmp	r3, #42	; 0x2a
 8008216:	d135      	bne.n	8008284 <_svfiprintf_r+0x188>
 8008218:	9b03      	ldr	r3, [sp, #12]
 800821a:	1d1a      	adds	r2, r3, #4
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	9203      	str	r2, [sp, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	bfb8      	it	lt
 8008224:	f04f 33ff 	movlt.w	r3, #4294967295
 8008228:	3402      	adds	r4, #2
 800822a:	9305      	str	r3, [sp, #20]
 800822c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082f8 <_svfiprintf_r+0x1fc>
 8008230:	7821      	ldrb	r1, [r4, #0]
 8008232:	2203      	movs	r2, #3
 8008234:	4650      	mov	r0, sl
 8008236:	f7f7 ffd3 	bl	80001e0 <memchr>
 800823a:	b140      	cbz	r0, 800824e <_svfiprintf_r+0x152>
 800823c:	2340      	movs	r3, #64	; 0x40
 800823e:	eba0 000a 	sub.w	r0, r0, sl
 8008242:	fa03 f000 	lsl.w	r0, r3, r0
 8008246:	9b04      	ldr	r3, [sp, #16]
 8008248:	4303      	orrs	r3, r0
 800824a:	3401      	adds	r4, #1
 800824c:	9304      	str	r3, [sp, #16]
 800824e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008252:	4826      	ldr	r0, [pc, #152]	; (80082ec <_svfiprintf_r+0x1f0>)
 8008254:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008258:	2206      	movs	r2, #6
 800825a:	f7f7 ffc1 	bl	80001e0 <memchr>
 800825e:	2800      	cmp	r0, #0
 8008260:	d038      	beq.n	80082d4 <_svfiprintf_r+0x1d8>
 8008262:	4b23      	ldr	r3, [pc, #140]	; (80082f0 <_svfiprintf_r+0x1f4>)
 8008264:	bb1b      	cbnz	r3, 80082ae <_svfiprintf_r+0x1b2>
 8008266:	9b03      	ldr	r3, [sp, #12]
 8008268:	3307      	adds	r3, #7
 800826a:	f023 0307 	bic.w	r3, r3, #7
 800826e:	3308      	adds	r3, #8
 8008270:	9303      	str	r3, [sp, #12]
 8008272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008274:	4433      	add	r3, r6
 8008276:	9309      	str	r3, [sp, #36]	; 0x24
 8008278:	e767      	b.n	800814a <_svfiprintf_r+0x4e>
 800827a:	fb0c 3202 	mla	r2, ip, r2, r3
 800827e:	460c      	mov	r4, r1
 8008280:	2001      	movs	r0, #1
 8008282:	e7a5      	b.n	80081d0 <_svfiprintf_r+0xd4>
 8008284:	2300      	movs	r3, #0
 8008286:	3401      	adds	r4, #1
 8008288:	9305      	str	r3, [sp, #20]
 800828a:	4619      	mov	r1, r3
 800828c:	f04f 0c0a 	mov.w	ip, #10
 8008290:	4620      	mov	r0, r4
 8008292:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008296:	3a30      	subs	r2, #48	; 0x30
 8008298:	2a09      	cmp	r2, #9
 800829a:	d903      	bls.n	80082a4 <_svfiprintf_r+0x1a8>
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0c5      	beq.n	800822c <_svfiprintf_r+0x130>
 80082a0:	9105      	str	r1, [sp, #20]
 80082a2:	e7c3      	b.n	800822c <_svfiprintf_r+0x130>
 80082a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80082a8:	4604      	mov	r4, r0
 80082aa:	2301      	movs	r3, #1
 80082ac:	e7f0      	b.n	8008290 <_svfiprintf_r+0x194>
 80082ae:	ab03      	add	r3, sp, #12
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	462a      	mov	r2, r5
 80082b4:	4b0f      	ldr	r3, [pc, #60]	; (80082f4 <_svfiprintf_r+0x1f8>)
 80082b6:	a904      	add	r1, sp, #16
 80082b8:	4638      	mov	r0, r7
 80082ba:	f3af 8000 	nop.w
 80082be:	1c42      	adds	r2, r0, #1
 80082c0:	4606      	mov	r6, r0
 80082c2:	d1d6      	bne.n	8008272 <_svfiprintf_r+0x176>
 80082c4:	89ab      	ldrh	r3, [r5, #12]
 80082c6:	065b      	lsls	r3, r3, #25
 80082c8:	f53f af2c 	bmi.w	8008124 <_svfiprintf_r+0x28>
 80082cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ce:	b01d      	add	sp, #116	; 0x74
 80082d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d4:	ab03      	add	r3, sp, #12
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	462a      	mov	r2, r5
 80082da:	4b06      	ldr	r3, [pc, #24]	; (80082f4 <_svfiprintf_r+0x1f8>)
 80082dc:	a904      	add	r1, sp, #16
 80082de:	4638      	mov	r0, r7
 80082e0:	f000 f87a 	bl	80083d8 <_printf_i>
 80082e4:	e7eb      	b.n	80082be <_svfiprintf_r+0x1c2>
 80082e6:	bf00      	nop
 80082e8:	08008c5c 	.word	0x08008c5c
 80082ec:	08008c66 	.word	0x08008c66
 80082f0:	00000000 	.word	0x00000000
 80082f4:	08008045 	.word	0x08008045
 80082f8:	08008c62 	.word	0x08008c62

080082fc <_printf_common>:
 80082fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008300:	4616      	mov	r6, r2
 8008302:	4699      	mov	r9, r3
 8008304:	688a      	ldr	r2, [r1, #8]
 8008306:	690b      	ldr	r3, [r1, #16]
 8008308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800830c:	4293      	cmp	r3, r2
 800830e:	bfb8      	it	lt
 8008310:	4613      	movlt	r3, r2
 8008312:	6033      	str	r3, [r6, #0]
 8008314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008318:	4607      	mov	r7, r0
 800831a:	460c      	mov	r4, r1
 800831c:	b10a      	cbz	r2, 8008322 <_printf_common+0x26>
 800831e:	3301      	adds	r3, #1
 8008320:	6033      	str	r3, [r6, #0]
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	0699      	lsls	r1, r3, #26
 8008326:	bf42      	ittt	mi
 8008328:	6833      	ldrmi	r3, [r6, #0]
 800832a:	3302      	addmi	r3, #2
 800832c:	6033      	strmi	r3, [r6, #0]
 800832e:	6825      	ldr	r5, [r4, #0]
 8008330:	f015 0506 	ands.w	r5, r5, #6
 8008334:	d106      	bne.n	8008344 <_printf_common+0x48>
 8008336:	f104 0a19 	add.w	sl, r4, #25
 800833a:	68e3      	ldr	r3, [r4, #12]
 800833c:	6832      	ldr	r2, [r6, #0]
 800833e:	1a9b      	subs	r3, r3, r2
 8008340:	42ab      	cmp	r3, r5
 8008342:	dc26      	bgt.n	8008392 <_printf_common+0x96>
 8008344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008348:	1e13      	subs	r3, r2, #0
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	bf18      	it	ne
 800834e:	2301      	movne	r3, #1
 8008350:	0692      	lsls	r2, r2, #26
 8008352:	d42b      	bmi.n	80083ac <_printf_common+0xb0>
 8008354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008358:	4649      	mov	r1, r9
 800835a:	4638      	mov	r0, r7
 800835c:	47c0      	blx	r8
 800835e:	3001      	adds	r0, #1
 8008360:	d01e      	beq.n	80083a0 <_printf_common+0xa4>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	68e5      	ldr	r5, [r4, #12]
 8008366:	6832      	ldr	r2, [r6, #0]
 8008368:	f003 0306 	and.w	r3, r3, #6
 800836c:	2b04      	cmp	r3, #4
 800836e:	bf08      	it	eq
 8008370:	1aad      	subeq	r5, r5, r2
 8008372:	68a3      	ldr	r3, [r4, #8]
 8008374:	6922      	ldr	r2, [r4, #16]
 8008376:	bf0c      	ite	eq
 8008378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800837c:	2500      	movne	r5, #0
 800837e:	4293      	cmp	r3, r2
 8008380:	bfc4      	itt	gt
 8008382:	1a9b      	subgt	r3, r3, r2
 8008384:	18ed      	addgt	r5, r5, r3
 8008386:	2600      	movs	r6, #0
 8008388:	341a      	adds	r4, #26
 800838a:	42b5      	cmp	r5, r6
 800838c:	d11a      	bne.n	80083c4 <_printf_common+0xc8>
 800838e:	2000      	movs	r0, #0
 8008390:	e008      	b.n	80083a4 <_printf_common+0xa8>
 8008392:	2301      	movs	r3, #1
 8008394:	4652      	mov	r2, sl
 8008396:	4649      	mov	r1, r9
 8008398:	4638      	mov	r0, r7
 800839a:	47c0      	blx	r8
 800839c:	3001      	adds	r0, #1
 800839e:	d103      	bne.n	80083a8 <_printf_common+0xac>
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a8:	3501      	adds	r5, #1
 80083aa:	e7c6      	b.n	800833a <_printf_common+0x3e>
 80083ac:	18e1      	adds	r1, r4, r3
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	2030      	movs	r0, #48	; 0x30
 80083b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083b6:	4422      	add	r2, r4
 80083b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083c0:	3302      	adds	r3, #2
 80083c2:	e7c7      	b.n	8008354 <_printf_common+0x58>
 80083c4:	2301      	movs	r3, #1
 80083c6:	4622      	mov	r2, r4
 80083c8:	4649      	mov	r1, r9
 80083ca:	4638      	mov	r0, r7
 80083cc:	47c0      	blx	r8
 80083ce:	3001      	adds	r0, #1
 80083d0:	d0e6      	beq.n	80083a0 <_printf_common+0xa4>
 80083d2:	3601      	adds	r6, #1
 80083d4:	e7d9      	b.n	800838a <_printf_common+0x8e>
	...

080083d8 <_printf_i>:
 80083d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	460c      	mov	r4, r1
 80083de:	4691      	mov	r9, r2
 80083e0:	7e27      	ldrb	r7, [r4, #24]
 80083e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083e4:	2f78      	cmp	r7, #120	; 0x78
 80083e6:	4680      	mov	r8, r0
 80083e8:	469a      	mov	sl, r3
 80083ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083ee:	d807      	bhi.n	8008400 <_printf_i+0x28>
 80083f0:	2f62      	cmp	r7, #98	; 0x62
 80083f2:	d80a      	bhi.n	800840a <_printf_i+0x32>
 80083f4:	2f00      	cmp	r7, #0
 80083f6:	f000 80d8 	beq.w	80085aa <_printf_i+0x1d2>
 80083fa:	2f58      	cmp	r7, #88	; 0x58
 80083fc:	f000 80a3 	beq.w	8008546 <_printf_i+0x16e>
 8008400:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008408:	e03a      	b.n	8008480 <_printf_i+0xa8>
 800840a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800840e:	2b15      	cmp	r3, #21
 8008410:	d8f6      	bhi.n	8008400 <_printf_i+0x28>
 8008412:	a001      	add	r0, pc, #4	; (adr r0, 8008418 <_printf_i+0x40>)
 8008414:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008418:	08008471 	.word	0x08008471
 800841c:	08008485 	.word	0x08008485
 8008420:	08008401 	.word	0x08008401
 8008424:	08008401 	.word	0x08008401
 8008428:	08008401 	.word	0x08008401
 800842c:	08008401 	.word	0x08008401
 8008430:	08008485 	.word	0x08008485
 8008434:	08008401 	.word	0x08008401
 8008438:	08008401 	.word	0x08008401
 800843c:	08008401 	.word	0x08008401
 8008440:	08008401 	.word	0x08008401
 8008444:	08008591 	.word	0x08008591
 8008448:	080084b5 	.word	0x080084b5
 800844c:	08008573 	.word	0x08008573
 8008450:	08008401 	.word	0x08008401
 8008454:	08008401 	.word	0x08008401
 8008458:	080085b3 	.word	0x080085b3
 800845c:	08008401 	.word	0x08008401
 8008460:	080084b5 	.word	0x080084b5
 8008464:	08008401 	.word	0x08008401
 8008468:	08008401 	.word	0x08008401
 800846c:	0800857b 	.word	0x0800857b
 8008470:	680b      	ldr	r3, [r1, #0]
 8008472:	1d1a      	adds	r2, r3, #4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	600a      	str	r2, [r1, #0]
 8008478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800847c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008480:	2301      	movs	r3, #1
 8008482:	e0a3      	b.n	80085cc <_printf_i+0x1f4>
 8008484:	6825      	ldr	r5, [r4, #0]
 8008486:	6808      	ldr	r0, [r1, #0]
 8008488:	062e      	lsls	r6, r5, #24
 800848a:	f100 0304 	add.w	r3, r0, #4
 800848e:	d50a      	bpl.n	80084a6 <_printf_i+0xce>
 8008490:	6805      	ldr	r5, [r0, #0]
 8008492:	600b      	str	r3, [r1, #0]
 8008494:	2d00      	cmp	r5, #0
 8008496:	da03      	bge.n	80084a0 <_printf_i+0xc8>
 8008498:	232d      	movs	r3, #45	; 0x2d
 800849a:	426d      	negs	r5, r5
 800849c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a0:	485e      	ldr	r0, [pc, #376]	; (800861c <_printf_i+0x244>)
 80084a2:	230a      	movs	r3, #10
 80084a4:	e019      	b.n	80084da <_printf_i+0x102>
 80084a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084aa:	6805      	ldr	r5, [r0, #0]
 80084ac:	600b      	str	r3, [r1, #0]
 80084ae:	bf18      	it	ne
 80084b0:	b22d      	sxthne	r5, r5
 80084b2:	e7ef      	b.n	8008494 <_printf_i+0xbc>
 80084b4:	680b      	ldr	r3, [r1, #0]
 80084b6:	6825      	ldr	r5, [r4, #0]
 80084b8:	1d18      	adds	r0, r3, #4
 80084ba:	6008      	str	r0, [r1, #0]
 80084bc:	0628      	lsls	r0, r5, #24
 80084be:	d501      	bpl.n	80084c4 <_printf_i+0xec>
 80084c0:	681d      	ldr	r5, [r3, #0]
 80084c2:	e002      	b.n	80084ca <_printf_i+0xf2>
 80084c4:	0669      	lsls	r1, r5, #25
 80084c6:	d5fb      	bpl.n	80084c0 <_printf_i+0xe8>
 80084c8:	881d      	ldrh	r5, [r3, #0]
 80084ca:	4854      	ldr	r0, [pc, #336]	; (800861c <_printf_i+0x244>)
 80084cc:	2f6f      	cmp	r7, #111	; 0x6f
 80084ce:	bf0c      	ite	eq
 80084d0:	2308      	moveq	r3, #8
 80084d2:	230a      	movne	r3, #10
 80084d4:	2100      	movs	r1, #0
 80084d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084da:	6866      	ldr	r6, [r4, #4]
 80084dc:	60a6      	str	r6, [r4, #8]
 80084de:	2e00      	cmp	r6, #0
 80084e0:	bfa2      	ittt	ge
 80084e2:	6821      	ldrge	r1, [r4, #0]
 80084e4:	f021 0104 	bicge.w	r1, r1, #4
 80084e8:	6021      	strge	r1, [r4, #0]
 80084ea:	b90d      	cbnz	r5, 80084f0 <_printf_i+0x118>
 80084ec:	2e00      	cmp	r6, #0
 80084ee:	d04d      	beq.n	800858c <_printf_i+0x1b4>
 80084f0:	4616      	mov	r6, r2
 80084f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80084f6:	fb03 5711 	mls	r7, r3, r1, r5
 80084fa:	5dc7      	ldrb	r7, [r0, r7]
 80084fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008500:	462f      	mov	r7, r5
 8008502:	42bb      	cmp	r3, r7
 8008504:	460d      	mov	r5, r1
 8008506:	d9f4      	bls.n	80084f2 <_printf_i+0x11a>
 8008508:	2b08      	cmp	r3, #8
 800850a:	d10b      	bne.n	8008524 <_printf_i+0x14c>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	07df      	lsls	r7, r3, #31
 8008510:	d508      	bpl.n	8008524 <_printf_i+0x14c>
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	6861      	ldr	r1, [r4, #4]
 8008516:	4299      	cmp	r1, r3
 8008518:	bfde      	ittt	le
 800851a:	2330      	movle	r3, #48	; 0x30
 800851c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008520:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008524:	1b92      	subs	r2, r2, r6
 8008526:	6122      	str	r2, [r4, #16]
 8008528:	f8cd a000 	str.w	sl, [sp]
 800852c:	464b      	mov	r3, r9
 800852e:	aa03      	add	r2, sp, #12
 8008530:	4621      	mov	r1, r4
 8008532:	4640      	mov	r0, r8
 8008534:	f7ff fee2 	bl	80082fc <_printf_common>
 8008538:	3001      	adds	r0, #1
 800853a:	d14c      	bne.n	80085d6 <_printf_i+0x1fe>
 800853c:	f04f 30ff 	mov.w	r0, #4294967295
 8008540:	b004      	add	sp, #16
 8008542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008546:	4835      	ldr	r0, [pc, #212]	; (800861c <_printf_i+0x244>)
 8008548:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	680e      	ldr	r6, [r1, #0]
 8008550:	061f      	lsls	r7, r3, #24
 8008552:	f856 5b04 	ldr.w	r5, [r6], #4
 8008556:	600e      	str	r6, [r1, #0]
 8008558:	d514      	bpl.n	8008584 <_printf_i+0x1ac>
 800855a:	07d9      	lsls	r1, r3, #31
 800855c:	bf44      	itt	mi
 800855e:	f043 0320 	orrmi.w	r3, r3, #32
 8008562:	6023      	strmi	r3, [r4, #0]
 8008564:	b91d      	cbnz	r5, 800856e <_printf_i+0x196>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	f023 0320 	bic.w	r3, r3, #32
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	2310      	movs	r3, #16
 8008570:	e7b0      	b.n	80084d4 <_printf_i+0xfc>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	f043 0320 	orr.w	r3, r3, #32
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	2378      	movs	r3, #120	; 0x78
 800857c:	4828      	ldr	r0, [pc, #160]	; (8008620 <_printf_i+0x248>)
 800857e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008582:	e7e3      	b.n	800854c <_printf_i+0x174>
 8008584:	065e      	lsls	r6, r3, #25
 8008586:	bf48      	it	mi
 8008588:	b2ad      	uxthmi	r5, r5
 800858a:	e7e6      	b.n	800855a <_printf_i+0x182>
 800858c:	4616      	mov	r6, r2
 800858e:	e7bb      	b.n	8008508 <_printf_i+0x130>
 8008590:	680b      	ldr	r3, [r1, #0]
 8008592:	6826      	ldr	r6, [r4, #0]
 8008594:	6960      	ldr	r0, [r4, #20]
 8008596:	1d1d      	adds	r5, r3, #4
 8008598:	600d      	str	r5, [r1, #0]
 800859a:	0635      	lsls	r5, r6, #24
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	d501      	bpl.n	80085a4 <_printf_i+0x1cc>
 80085a0:	6018      	str	r0, [r3, #0]
 80085a2:	e002      	b.n	80085aa <_printf_i+0x1d2>
 80085a4:	0671      	lsls	r1, r6, #25
 80085a6:	d5fb      	bpl.n	80085a0 <_printf_i+0x1c8>
 80085a8:	8018      	strh	r0, [r3, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	6123      	str	r3, [r4, #16]
 80085ae:	4616      	mov	r6, r2
 80085b0:	e7ba      	b.n	8008528 <_printf_i+0x150>
 80085b2:	680b      	ldr	r3, [r1, #0]
 80085b4:	1d1a      	adds	r2, r3, #4
 80085b6:	600a      	str	r2, [r1, #0]
 80085b8:	681e      	ldr	r6, [r3, #0]
 80085ba:	6862      	ldr	r2, [r4, #4]
 80085bc:	2100      	movs	r1, #0
 80085be:	4630      	mov	r0, r6
 80085c0:	f7f7 fe0e 	bl	80001e0 <memchr>
 80085c4:	b108      	cbz	r0, 80085ca <_printf_i+0x1f2>
 80085c6:	1b80      	subs	r0, r0, r6
 80085c8:	6060      	str	r0, [r4, #4]
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	2300      	movs	r3, #0
 80085d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085d4:	e7a8      	b.n	8008528 <_printf_i+0x150>
 80085d6:	6923      	ldr	r3, [r4, #16]
 80085d8:	4632      	mov	r2, r6
 80085da:	4649      	mov	r1, r9
 80085dc:	4640      	mov	r0, r8
 80085de:	47d0      	blx	sl
 80085e0:	3001      	adds	r0, #1
 80085e2:	d0ab      	beq.n	800853c <_printf_i+0x164>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	079b      	lsls	r3, r3, #30
 80085e8:	d413      	bmi.n	8008612 <_printf_i+0x23a>
 80085ea:	68e0      	ldr	r0, [r4, #12]
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	4298      	cmp	r0, r3
 80085f0:	bfb8      	it	lt
 80085f2:	4618      	movlt	r0, r3
 80085f4:	e7a4      	b.n	8008540 <_printf_i+0x168>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4632      	mov	r2, r6
 80085fa:	4649      	mov	r1, r9
 80085fc:	4640      	mov	r0, r8
 80085fe:	47d0      	blx	sl
 8008600:	3001      	adds	r0, #1
 8008602:	d09b      	beq.n	800853c <_printf_i+0x164>
 8008604:	3501      	adds	r5, #1
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	9903      	ldr	r1, [sp, #12]
 800860a:	1a5b      	subs	r3, r3, r1
 800860c:	42ab      	cmp	r3, r5
 800860e:	dcf2      	bgt.n	80085f6 <_printf_i+0x21e>
 8008610:	e7eb      	b.n	80085ea <_printf_i+0x212>
 8008612:	2500      	movs	r5, #0
 8008614:	f104 0619 	add.w	r6, r4, #25
 8008618:	e7f5      	b.n	8008606 <_printf_i+0x22e>
 800861a:	bf00      	nop
 800861c:	08008c6d 	.word	0x08008c6d
 8008620:	08008c7e 	.word	0x08008c7e

08008624 <memmove>:
 8008624:	4288      	cmp	r0, r1
 8008626:	b510      	push	{r4, lr}
 8008628:	eb01 0402 	add.w	r4, r1, r2
 800862c:	d902      	bls.n	8008634 <memmove+0x10>
 800862e:	4284      	cmp	r4, r0
 8008630:	4623      	mov	r3, r4
 8008632:	d807      	bhi.n	8008644 <memmove+0x20>
 8008634:	1e43      	subs	r3, r0, #1
 8008636:	42a1      	cmp	r1, r4
 8008638:	d008      	beq.n	800864c <memmove+0x28>
 800863a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800863e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008642:	e7f8      	b.n	8008636 <memmove+0x12>
 8008644:	4402      	add	r2, r0
 8008646:	4601      	mov	r1, r0
 8008648:	428a      	cmp	r2, r1
 800864a:	d100      	bne.n	800864e <memmove+0x2a>
 800864c:	bd10      	pop	{r4, pc}
 800864e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008656:	e7f7      	b.n	8008648 <memmove+0x24>

08008658 <_free_r>:
 8008658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800865a:	2900      	cmp	r1, #0
 800865c:	d048      	beq.n	80086f0 <_free_r+0x98>
 800865e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008662:	9001      	str	r0, [sp, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f1a1 0404 	sub.w	r4, r1, #4
 800866a:	bfb8      	it	lt
 800866c:	18e4      	addlt	r4, r4, r3
 800866e:	f000 f8d3 	bl	8008818 <__malloc_lock>
 8008672:	4a20      	ldr	r2, [pc, #128]	; (80086f4 <_free_r+0x9c>)
 8008674:	9801      	ldr	r0, [sp, #4]
 8008676:	6813      	ldr	r3, [r2, #0]
 8008678:	4615      	mov	r5, r2
 800867a:	b933      	cbnz	r3, 800868a <_free_r+0x32>
 800867c:	6063      	str	r3, [r4, #4]
 800867e:	6014      	str	r4, [r2, #0]
 8008680:	b003      	add	sp, #12
 8008682:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008686:	f000 b8cd 	b.w	8008824 <__malloc_unlock>
 800868a:	42a3      	cmp	r3, r4
 800868c:	d90b      	bls.n	80086a6 <_free_r+0x4e>
 800868e:	6821      	ldr	r1, [r4, #0]
 8008690:	1862      	adds	r2, r4, r1
 8008692:	4293      	cmp	r3, r2
 8008694:	bf04      	itt	eq
 8008696:	681a      	ldreq	r2, [r3, #0]
 8008698:	685b      	ldreq	r3, [r3, #4]
 800869a:	6063      	str	r3, [r4, #4]
 800869c:	bf04      	itt	eq
 800869e:	1852      	addeq	r2, r2, r1
 80086a0:	6022      	streq	r2, [r4, #0]
 80086a2:	602c      	str	r4, [r5, #0]
 80086a4:	e7ec      	b.n	8008680 <_free_r+0x28>
 80086a6:	461a      	mov	r2, r3
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	b10b      	cbz	r3, 80086b0 <_free_r+0x58>
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	d9fa      	bls.n	80086a6 <_free_r+0x4e>
 80086b0:	6811      	ldr	r1, [r2, #0]
 80086b2:	1855      	adds	r5, r2, r1
 80086b4:	42a5      	cmp	r5, r4
 80086b6:	d10b      	bne.n	80086d0 <_free_r+0x78>
 80086b8:	6824      	ldr	r4, [r4, #0]
 80086ba:	4421      	add	r1, r4
 80086bc:	1854      	adds	r4, r2, r1
 80086be:	42a3      	cmp	r3, r4
 80086c0:	6011      	str	r1, [r2, #0]
 80086c2:	d1dd      	bne.n	8008680 <_free_r+0x28>
 80086c4:	681c      	ldr	r4, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	6053      	str	r3, [r2, #4]
 80086ca:	4421      	add	r1, r4
 80086cc:	6011      	str	r1, [r2, #0]
 80086ce:	e7d7      	b.n	8008680 <_free_r+0x28>
 80086d0:	d902      	bls.n	80086d8 <_free_r+0x80>
 80086d2:	230c      	movs	r3, #12
 80086d4:	6003      	str	r3, [r0, #0]
 80086d6:	e7d3      	b.n	8008680 <_free_r+0x28>
 80086d8:	6825      	ldr	r5, [r4, #0]
 80086da:	1961      	adds	r1, r4, r5
 80086dc:	428b      	cmp	r3, r1
 80086de:	bf04      	itt	eq
 80086e0:	6819      	ldreq	r1, [r3, #0]
 80086e2:	685b      	ldreq	r3, [r3, #4]
 80086e4:	6063      	str	r3, [r4, #4]
 80086e6:	bf04      	itt	eq
 80086e8:	1949      	addeq	r1, r1, r5
 80086ea:	6021      	streq	r1, [r4, #0]
 80086ec:	6054      	str	r4, [r2, #4]
 80086ee:	e7c7      	b.n	8008680 <_free_r+0x28>
 80086f0:	b003      	add	sp, #12
 80086f2:	bd30      	pop	{r4, r5, pc}
 80086f4:	200000e0 	.word	0x200000e0

080086f8 <_malloc_r>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	1ccd      	adds	r5, r1, #3
 80086fc:	f025 0503 	bic.w	r5, r5, #3
 8008700:	3508      	adds	r5, #8
 8008702:	2d0c      	cmp	r5, #12
 8008704:	bf38      	it	cc
 8008706:	250c      	movcc	r5, #12
 8008708:	2d00      	cmp	r5, #0
 800870a:	4606      	mov	r6, r0
 800870c:	db01      	blt.n	8008712 <_malloc_r+0x1a>
 800870e:	42a9      	cmp	r1, r5
 8008710:	d903      	bls.n	800871a <_malloc_r+0x22>
 8008712:	230c      	movs	r3, #12
 8008714:	6033      	str	r3, [r6, #0]
 8008716:	2000      	movs	r0, #0
 8008718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800871a:	f000 f87d 	bl	8008818 <__malloc_lock>
 800871e:	4921      	ldr	r1, [pc, #132]	; (80087a4 <_malloc_r+0xac>)
 8008720:	680a      	ldr	r2, [r1, #0]
 8008722:	4614      	mov	r4, r2
 8008724:	b99c      	cbnz	r4, 800874e <_malloc_r+0x56>
 8008726:	4f20      	ldr	r7, [pc, #128]	; (80087a8 <_malloc_r+0xb0>)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	b923      	cbnz	r3, 8008736 <_malloc_r+0x3e>
 800872c:	4621      	mov	r1, r4
 800872e:	4630      	mov	r0, r6
 8008730:	f000 f862 	bl	80087f8 <_sbrk_r>
 8008734:	6038      	str	r0, [r7, #0]
 8008736:	4629      	mov	r1, r5
 8008738:	4630      	mov	r0, r6
 800873a:	f000 f85d 	bl	80087f8 <_sbrk_r>
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	d123      	bne.n	800878a <_malloc_r+0x92>
 8008742:	230c      	movs	r3, #12
 8008744:	6033      	str	r3, [r6, #0]
 8008746:	4630      	mov	r0, r6
 8008748:	f000 f86c 	bl	8008824 <__malloc_unlock>
 800874c:	e7e3      	b.n	8008716 <_malloc_r+0x1e>
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	1b5b      	subs	r3, r3, r5
 8008752:	d417      	bmi.n	8008784 <_malloc_r+0x8c>
 8008754:	2b0b      	cmp	r3, #11
 8008756:	d903      	bls.n	8008760 <_malloc_r+0x68>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	441c      	add	r4, r3
 800875c:	6025      	str	r5, [r4, #0]
 800875e:	e004      	b.n	800876a <_malloc_r+0x72>
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	42a2      	cmp	r2, r4
 8008764:	bf0c      	ite	eq
 8008766:	600b      	streq	r3, [r1, #0]
 8008768:	6053      	strne	r3, [r2, #4]
 800876a:	4630      	mov	r0, r6
 800876c:	f000 f85a 	bl	8008824 <__malloc_unlock>
 8008770:	f104 000b 	add.w	r0, r4, #11
 8008774:	1d23      	adds	r3, r4, #4
 8008776:	f020 0007 	bic.w	r0, r0, #7
 800877a:	1ac2      	subs	r2, r0, r3
 800877c:	d0cc      	beq.n	8008718 <_malloc_r+0x20>
 800877e:	1a1b      	subs	r3, r3, r0
 8008780:	50a3      	str	r3, [r4, r2]
 8008782:	e7c9      	b.n	8008718 <_malloc_r+0x20>
 8008784:	4622      	mov	r2, r4
 8008786:	6864      	ldr	r4, [r4, #4]
 8008788:	e7cc      	b.n	8008724 <_malloc_r+0x2c>
 800878a:	1cc4      	adds	r4, r0, #3
 800878c:	f024 0403 	bic.w	r4, r4, #3
 8008790:	42a0      	cmp	r0, r4
 8008792:	d0e3      	beq.n	800875c <_malloc_r+0x64>
 8008794:	1a21      	subs	r1, r4, r0
 8008796:	4630      	mov	r0, r6
 8008798:	f000 f82e 	bl	80087f8 <_sbrk_r>
 800879c:	3001      	adds	r0, #1
 800879e:	d1dd      	bne.n	800875c <_malloc_r+0x64>
 80087a0:	e7cf      	b.n	8008742 <_malloc_r+0x4a>
 80087a2:	bf00      	nop
 80087a4:	200000e0 	.word	0x200000e0
 80087a8:	200000e4 	.word	0x200000e4

080087ac <_realloc_r>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	4607      	mov	r7, r0
 80087b0:	4614      	mov	r4, r2
 80087b2:	460e      	mov	r6, r1
 80087b4:	b921      	cbnz	r1, 80087c0 <_realloc_r+0x14>
 80087b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087ba:	4611      	mov	r1, r2
 80087bc:	f7ff bf9c 	b.w	80086f8 <_malloc_r>
 80087c0:	b922      	cbnz	r2, 80087cc <_realloc_r+0x20>
 80087c2:	f7ff ff49 	bl	8008658 <_free_r>
 80087c6:	4625      	mov	r5, r4
 80087c8:	4628      	mov	r0, r5
 80087ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087cc:	f000 f830 	bl	8008830 <_malloc_usable_size_r>
 80087d0:	42a0      	cmp	r0, r4
 80087d2:	d20f      	bcs.n	80087f4 <_realloc_r+0x48>
 80087d4:	4621      	mov	r1, r4
 80087d6:	4638      	mov	r0, r7
 80087d8:	f7ff ff8e 	bl	80086f8 <_malloc_r>
 80087dc:	4605      	mov	r5, r0
 80087de:	2800      	cmp	r0, #0
 80087e0:	d0f2      	beq.n	80087c8 <_realloc_r+0x1c>
 80087e2:	4631      	mov	r1, r6
 80087e4:	4622      	mov	r2, r4
 80087e6:	f7ff fbf7 	bl	8007fd8 <memcpy>
 80087ea:	4631      	mov	r1, r6
 80087ec:	4638      	mov	r0, r7
 80087ee:	f7ff ff33 	bl	8008658 <_free_r>
 80087f2:	e7e9      	b.n	80087c8 <_realloc_r+0x1c>
 80087f4:	4635      	mov	r5, r6
 80087f6:	e7e7      	b.n	80087c8 <_realloc_r+0x1c>

080087f8 <_sbrk_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d06      	ldr	r5, [pc, #24]	; (8008814 <_sbrk_r+0x1c>)
 80087fc:	2300      	movs	r3, #0
 80087fe:	4604      	mov	r4, r0
 8008800:	4608      	mov	r0, r1
 8008802:	602b      	str	r3, [r5, #0]
 8008804:	f7f9 f99e 	bl	8001b44 <_sbrk>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	d102      	bne.n	8008812 <_sbrk_r+0x1a>
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	b103      	cbz	r3, 8008812 <_sbrk_r+0x1a>
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	bd38      	pop	{r3, r4, r5, pc}
 8008814:	20000c64 	.word	0x20000c64

08008818 <__malloc_lock>:
 8008818:	4801      	ldr	r0, [pc, #4]	; (8008820 <__malloc_lock+0x8>)
 800881a:	f000 b811 	b.w	8008840 <__retarget_lock_acquire_recursive>
 800881e:	bf00      	nop
 8008820:	20000c6c 	.word	0x20000c6c

08008824 <__malloc_unlock>:
 8008824:	4801      	ldr	r0, [pc, #4]	; (800882c <__malloc_unlock+0x8>)
 8008826:	f000 b80c 	b.w	8008842 <__retarget_lock_release_recursive>
 800882a:	bf00      	nop
 800882c:	20000c6c 	.word	0x20000c6c

08008830 <_malloc_usable_size_r>:
 8008830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008834:	1f18      	subs	r0, r3, #4
 8008836:	2b00      	cmp	r3, #0
 8008838:	bfbc      	itt	lt
 800883a:	580b      	ldrlt	r3, [r1, r0]
 800883c:	18c0      	addlt	r0, r0, r3
 800883e:	4770      	bx	lr

08008840 <__retarget_lock_acquire_recursive>:
 8008840:	4770      	bx	lr

08008842 <__retarget_lock_release_recursive>:
 8008842:	4770      	bx	lr

08008844 <_init>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr

08008850 <_fini>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr
