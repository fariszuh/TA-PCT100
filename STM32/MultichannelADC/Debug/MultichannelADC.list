
MultichannelADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f49c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  0800f630  0800f630  0001f630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fee0  0800fee0  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fee0  0800fee0  0001fee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fee8  0800fee8  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fee8  0800fee8  0001fee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800feec  0800feec  0001feec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800fef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002024c  2**0
                  CONTENTS
 10 .bss          000008dc  2000024c  2000024c  0002024c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b28  20000b28  0002024c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000214dd  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004348  00000000  00000000  00041759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  00045aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015c8  00000000  00000000  00047210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271ae  00000000  00000000  000487d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020512  00000000  00000000  0006f986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfff4  00000000  00000000  0008fe98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016fe8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a18  00000000  00000000  0016fee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f614 	.word	0x0800f614

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	0800f614 	.word	0x0800f614

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MCP4725_init>:

    Constructor
*/
/**************************************************************************/
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	ed87 0a00 	vstr	s0, [r7]
 8000ffc:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	ed97 0a00 	vldr	s0, [r7]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f822 	bl	800105c <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	461c      	mov	r4, r3
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}

0800102e <MCP4725_isConnected>:

    Check the connection
*/
/**************************************************************************/
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	791b      	ldrb	r3, [r3, #4]
 800103e:	b299      	uxth	r1, r3
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	2202      	movs	r2, #2
 8001044:	f003 ff08 	bl	8004e58 <HAL_I2C_IsDeviceReady>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf0c      	ite	eq
 800104e:	2301      	moveq	r3, #1
 8001050:	2300      	movne	r3, #0
 8001052:	b2db      	uxtb	r3, r3
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8001068:	edd7 7a00 	vldr	s15, [r7]
 800106c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	d103      	bne.n	800107e <MCP4725_setReferenceVoltage+0x22>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <MCP4725_setReferenceVoltage+0x50>)
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	e002      	b.n	8001084 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	ed93 7a02 	vldr	s14, [r3, #8]
 800108a:	eddf 6a09 	vldr	s13, [pc, #36]	; 80010b0 <MCP4725_setReferenceVoltage+0x54>
 800108e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001096:	ee17 3a90 	vmov	r3, s15
 800109a:	b29a      	uxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	819a      	strh	r2, [r3, #12]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	40533333 	.word	0x40533333
 80010b0:	45800000 	.word	0x45800000

080010b4 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	807b      	strh	r3, [r7, #2]
 80010c6:	460b      	mov	r3, r1
 80010c8:	707b      	strb	r3, [r7, #1]
 80010ca:	4613      	mov	r3, r2
 80010cc:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 80010ce:	783b      	ldrb	r3, [r7, #0]
 80010d0:	787a      	ldrb	r2, [r7, #1]
 80010d2:	8879      	ldrh	r1, [r7, #2]
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f822 	bl	800111e <MCP4725_writeComand>
 80010da:	4603      	mov	r3, r0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 80010ec:	2101      	movs	r1, #1
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f895 	bl	800121e <MCP4725_readRegister>
 80010f4:	4603      	mov	r3, r0
 80010f6:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fe:	4293      	cmp	r3, r2
 8001100:	d008      	beq.n	8001114 <MCP4725_getEepromBusyFlag+0x30>
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf14      	ite	ne
 800110c:	2301      	movne	r3, #1
 800110e:	2300      	moveq	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	e000      	b.n	8001116 <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af02      	add	r7, sp, #8
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	4608      	mov	r0, r1
 8001128:	4611      	mov	r1, r2
 800112a:	461a      	mov	r2, r3
 800112c:	4603      	mov	r3, r0
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	460b      	mov	r3, r1
 8001132:	707b      	strb	r3, [r7, #1]
 8001134:	4613      	mov	r3, r2
 8001136:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
//  Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001138:	787b      	ldrb	r3, [r7, #1]
 800113a:	2b60      	cmp	r3, #96	; 0x60
 800113c:	d028      	beq.n	8001190 <MCP4725_writeComand+0x72>
 800113e:	2b60      	cmp	r3, #96	; 0x60
 8001140:	dc4a      	bgt.n	80011d8 <MCP4725_writeComand+0xba>
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <MCP4725_writeComand+0x2e>
 8001146:	2b40      	cmp	r3, #64	; 0x40
 8001148:	d022      	beq.n	8001190 <MCP4725_writeComand+0x72>
 800114a:	e045      	b.n	80011d8 <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18

      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode | (powerType << 4)  | highByte(value);
 800114c:	783b      	ldrb	r3, [r7, #0]
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	b25a      	sxtb	r2, r3
 8001152:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001156:	4313      	orrs	r3, r2
 8001158:	b25a      	sxtb	r2, r3
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	b29b      	uxth	r3, r3
 8001160:	b25b      	sxtb	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b25b      	sxtb	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	737b      	strb	r3, [r7, #13]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	791b      	ldrb	r3, [r3, #4]
 8001178:	b299      	uxth	r1, r3
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2302      	movs	r3, #2
 8001186:	f003 fb43 	bl	8004810 <HAL_I2C_Master_Transmit>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

      break;
 800118e:	e023      	b.n	80011d8 <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode  | (powerType << 1);
 8001196:	783b      	ldrb	r3, [r7, #0]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	b25a      	sxtb	r2, r3
 800119c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	73bb      	strb	r3, [r7, #14]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	b299      	uxth	r1, r3
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2303      	movs	r3, #3
 80011ce:	f003 fb1f 	bl	8004810 <HAL_I2C_Master_Transmit>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]

			break;
 80011d6:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MCP4725_writeComand+0xc4>
 80011de:	2300      	movs	r3, #0
 80011e0:	e019      	b.n	8001216 <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 80011e2:	787b      	ldrb	r3, [r7, #1]
 80011e4:	2b60      	cmp	r3, #96	; 0x60
 80011e6:	d115      	bne.n	8001214 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff7b 	bl	80010e4 <MCP4725_getEepromBusyFlag>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <MCP4725_writeComand+0xda>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e00e      	b.n	8001216 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 80011f8:	2019      	movs	r0, #25
 80011fa:	f001 ff61 	bl	80030c0 <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff70 	bl	80010e4 <MCP4725_getEepromBusyFlag>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <MCP4725_writeComand+0xf0>
 800120a:	2301      	movs	r3, #1
 800120c:	e003      	b.n	8001216 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 800120e:	2019      	movs	r0, #25
 8001210:	f001 ff56 	bl	80030c0 <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 800121e:	b5b0      	push	{r4, r5, r7, lr}
 8001220:	b088      	sub	sp, #32
 8001222:	af02      	add	r7, sp, #8
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	70fb      	strb	r3, [r7, #3]
 800122a:	466b      	mov	r3, sp
 800122c:	461d      	mov	r5, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8001232:	2300      	movs	r3, #0
 8001234:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8001236:	78fc      	ldrb	r4, [r7, #3]
 8001238:	4623      	mov	r3, r4
 800123a:	3b01      	subs	r3, #1
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	b2e0      	uxtb	r0, r4
 8001240:	f04f 0100 	mov.w	r1, #0
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	00cb      	lsls	r3, r1, #3
 800124e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001252:	00c2      	lsls	r2, r0, #3
 8001254:	b2e0      	uxtb	r0, r4
 8001256:	f04f 0100 	mov.w	r1, #0
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	00cb      	lsls	r3, r1, #3
 8001264:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001268:	00c2      	lsls	r2, r0, #3
 800126a:	4623      	mov	r3, r4
 800126c:	3307      	adds	r3, #7
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	ebad 0d03 	sub.w	sp, sp, r3
 8001276:	ab02      	add	r3, sp, #8
 8001278:	3300      	adds	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;

	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	791b      	ldrb	r3, [r3, #4]
 8001284:	b299      	uxth	r1, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	b29b      	uxth	r3, r3
 800128c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001290:	9400      	str	r4, [sp, #0]
 8001292:	f003 fbbb 	bl	8004a0c <HAL_I2C_Master_Receive>
 8001296:	4603      	mov	r3, r0
 8001298:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <MCP4725_readRegister+0x88>
 80012a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a4:	e01f      	b.n	80012e6 <MCP4725_readRegister+0xc8>


  /* read data from buffer */
  switch (dataType)
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d00a      	beq.n	80012c2 <MCP4725_readRegister+0xa4>
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	dc19      	bgt.n	80012e4 <MCP4725_readRegister+0xc6>
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d002      	beq.n	80012ba <MCP4725_readRegister+0x9c>
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d004      	beq.n	80012c2 <MCP4725_readRegister+0xa4>
 80012b8:	e014      	b.n	80012e4 <MCP4725_readRegister+0xc6>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	82fb      	strh	r3, [r7, #22]

      break;
 80012c0:	e010      	b.n	80012e4 <MCP4725_readRegister+0xc6>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 80012c2:	8abb      	ldrh	r3, [r7, #20]
 80012c4:	3b02      	subs	r3, #2
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 80012cc:	8afb      	ldrh	r3, [r7, #22]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	8abb      	ldrh	r3, [r7, #20]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	68f9      	ldr	r1, [r7, #12]
 80012d8:	5ccb      	ldrb	r3, [r1, r3]
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21b      	sxth	r3, r3
 80012e0:	82fb      	strh	r3, [r7, #22]
      break;
 80012e2:	bf00      	nop
  }

  return ret_val;
 80012e4:	8afb      	ldrh	r3, [r7, #22]
 80012e6:	46ad      	mov	sp, r5
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdb0      	pop	{r4, r5, r7, pc}

080012f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001302:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001304:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <MX_ADC1_Init+0xd4>)
 8001306:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800130a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800130e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001318:	2201      	movs	r2, #1
 800131a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800131e:	2201      	movs	r2, #1
 8001320:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800132c:	2200      	movs	r2, #0
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <MX_ADC1_Init+0xd8>)
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800133c:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800133e:	2203      	movs	r2, #3
 8001340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800134c:	2201      	movs	r2, #1
 800134e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001350:	481b      	ldr	r0, [pc, #108]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001352:	f001 fed9 	bl	8003108 <HAL_ADC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800135c:	f000 fe00 	bl	8001f60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001360:	2300      	movs	r3, #0
 8001362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001364:	2301      	movs	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001368:	2307      	movs	r3, #7
 800136a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001372:	f002 f831 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800137c:	f000 fdf0 	bl	8001f60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001380:	2301      	movs	r3, #1
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800138e:	f002 f823 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001398:	f000 fde2 	bl	8001f60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800139c:	2302      	movs	r3, #2
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013a0:	2303      	movs	r3, #3
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_ADC1_Init+0xd0>)
 80013aa:	f002 f815 	bl	80033d8 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013b4:	f000 fdd4 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200002c8 	.word	0x200002c8
 80013c4:	40012000 	.word	0x40012000
 80013c8:	0f000001 	.word	0x0f000001

080013cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a2f      	ldr	r2, [pc, #188]	; (80014a8 <HAL_ADC_MspInit+0xdc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d157      	bne.n	800149e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a2d      	ldr	r2, [pc, #180]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a26      	ldr	r2, [pc, #152]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001426:	2307      	movs	r3, #7
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	481d      	ldr	r0, [pc, #116]	; (80014b0 <HAL_ADC_MspInit+0xe4>)
 800143a:	f002 feef 	bl	800421c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_ADC_MspInit+0xec>)
 8001442:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001460:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001464:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001468:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001474:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001484:	f002 fb5a 	bl	8003b3c <HAL_DMA_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800148e:	f000 fd67 	bl	8001f60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001496:	639a      	str	r2, [r3, #56]	; 0x38
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	; 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40012000 	.word	0x40012000
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	20000310 	.word	0x20000310
 80014b8:	40026410 	.word	0x40026410

080014bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_DMA_Init+0x3c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <MX_DMA_Init+0x3c>)
 80014cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_DMA_Init+0x3c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2038      	movs	r0, #56	; 0x38
 80014e4:	f002 faf3 	bl	8003ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014e8:	2038      	movs	r0, #56	; 0x38
 80014ea:	f002 fb0c 	bl	8003b06 <HAL_NVIC_EnableIRQ>

}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a2c      	ldr	r2, [pc, #176]	; (80015cc <MX_GPIO_Init+0xd0>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a25      	ldr	r2, [pc, #148]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001554:	f043 0310 	orr.w	r3, r3, #16
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_GPIO_Init+0xd0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_GPIO_Init+0xd0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a17      	ldr	r2, [pc, #92]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a10      	ldr	r2, [pc, #64]	; (80015cc <MX_GPIO_Init+0xd0>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2110      	movs	r1, #16
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <MX_GPIO_Init+0xd4>)
 80015a4:	f002 ffd6 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015a8:	2310      	movs	r3, #16
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_GPIO_Init+0xd4>)
 80015c0:	f002 fe2c 	bl	800421c <HAL_GPIO_Init>

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000

080015d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2C1_Init+0x50>)
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <MX_I2C1_Init+0x54>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_I2C1_Init+0x58>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_I2C1_Init+0x50>)
 80015f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_I2C1_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_I2C1_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_I2C1_Init+0x50>)
 8001612:	f002 ffb9 	bl	8004588 <HAL_I2C_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800161c:	f000 fca0 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000370 	.word	0x20000370
 8001628:	40005400 	.word	0x40005400
 800162c:	000186a0 	.word	0x000186a0

08001630 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_I2C2_Init+0x50>)
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <MX_I2C2_Init+0x54>)
 8001638:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_I2C2_Init+0x50>)
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_I2C2_Init+0x58>)
 800163e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_I2C2_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 2;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_I2C2_Init+0x50>)
 8001648:	2202      	movs	r2, #2
 800164a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_I2C2_Init+0x50>)
 800164e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001652:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <MX_I2C2_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_I2C2_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <MX_I2C2_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_I2C2_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_I2C2_Init+0x50>)
 800166e:	f002 ff8b 	bl	8004588 <HAL_I2C_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001678:	f000 fc72 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200003c4 	.word	0x200003c4
 8001684:	40005800 	.word	0x40005800
 8001688:	000186a0 	.word	0x000186a0

0800168c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a32      	ldr	r2, [pc, #200]	; (8001774 <HAL_I2C_MspInit+0xe8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12c      	bne.n	8001708 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <HAL_I2C_MspInit+0xec>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a30      	ldr	r2, [pc, #192]	; (8001778 <HAL_I2C_MspInit+0xec>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <HAL_I2C_MspInit+0xec>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ca:	23c0      	movs	r3, #192	; 0xc0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ce:	2312      	movs	r3, #18
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016da:	2304      	movs	r3, #4
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4825      	ldr	r0, [pc, #148]	; (800177c <HAL_I2C_MspInit+0xf0>)
 80016e6:	f002 fd99 	bl	800421c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_I2C_MspInit+0xec>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a21      	ldr	r2, [pc, #132]	; (8001778 <HAL_I2C_MspInit+0xec>)
 80016f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <HAL_I2C_MspInit+0xec>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001706:	e031      	b.n	800176c <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <HAL_I2C_MspInit+0xf4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12c      	bne.n	800176c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_I2C_MspInit+0xec>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_I2C_MspInit+0xec>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_I2C_MspInit+0xec>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800172e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001734:	2312      	movs	r3, #18
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001740:	2304      	movs	r3, #4
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	480c      	ldr	r0, [pc, #48]	; (800177c <HAL_I2C_MspInit+0xf0>)
 800174c:	f002 fd66 	bl	800421c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_I2C_MspInit+0xec>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_I2C_MspInit+0xec>)
 800175a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_I2C_MspInit+0xec>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	bf00      	nop
 800176e:	3730      	adds	r7, #48	; 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40005400 	.word	0x40005400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020400 	.word	0x40020400
 8001780:	40005800 	.word	0x40005800
 8001784:	00000000 	.word	0x00000000

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	f2ad 4ddc 	subw	sp, sp, #1244	; 0x4dc
 800178e:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	startTime = HAL_GetTick();
 8001790:	f001 fc8a 	bl	80030a8 <HAL_GetTick>
 8001794:	4603      	mov	r3, r0
 8001796:	4a77      	ldr	r2, [pc, #476]	; (8001974 <main+0x1ec>)
 8001798:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179a:	f001 fc1f 	bl	8002fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179e:	f000 faf7 	bl	8001d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a2:	f7ff feab 	bl	80014fc <MX_GPIO_Init>
  MX_DMA_Init();
 80017a6:	f7ff fe89 	bl	80014bc <MX_DMA_Init>
  MX_ADC1_Init();
 80017aa:	f7ff fda1 	bl	80012f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80017ae:	f000 fd8f 	bl	80022d0 <MX_TIM1_Init>
  MX_SPI1_Init();
 80017b2:	f000 fbdb 	bl	8001f6c <MX_SPI1_Init>
  MX_FATFS_Init();
 80017b6:	f006 f9a5 	bl	8007b04 <MX_FATFS_Init>
  MX_UART4_Init();
 80017ba:	f000 fe93 	bl	80024e4 <MX_UART4_Init>
  MX_I2C1_Init();
 80017be:	f7ff ff09 	bl	80015d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80017c2:	f7ff ff35 	bl	8001630 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, my_adc, 3);
 80017c6:	2203      	movs	r2, #3
 80017c8:	496b      	ldr	r1, [pc, #428]	; (8001978 <main+0x1f0>)
 80017ca:	486c      	ldr	r0, [pc, #432]	; (800197c <main+0x1f4>)
 80017cc:	f001 fce0 	bl	8003190 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017d0:	2100      	movs	r1, #0
 80017d2:	486b      	ldr	r0, [pc, #428]	; (8001980 <main+0x1f8>)
 80017d4:	f004 ffae 	bl	8006734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017d8:	2104      	movs	r1, #4
 80017da:	4869      	ldr	r0, [pc, #420]	; (8001980 <main+0x1f8>)
 80017dc:	f004 ffaa 	bl	8006734 <HAL_TIM_PWM_Start>
  //https://github.com/SMotlaq/mcp4725/blob/master/Core/Src/main.c
  // Second, initilaize the MCP4725 object:


	myMCP4725_AO0 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 5);
 80017e0:	4c68      	ldr	r4, [pc, #416]	; (8001984 <main+0x1fc>)
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80017ea:	2260      	movs	r2, #96	; 0x60
 80017ec:	4966      	ldr	r1, [pc, #408]	; (8001988 <main+0x200>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fbfc 	bl	8000fec <MCP4725_init>
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myMCP4725_AO1 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A01, 5);
 80017fe:	4c63      	ldr	r4, [pc, #396]	; (800198c <main+0x204>)
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001808:	2261      	movs	r2, #97	; 0x61
 800180a:	495f      	ldr	r1, [pc, #380]	; (8001988 <main+0x200>)
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fbed 	bl	8000fec <MCP4725_init>
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

//  https://github.com/kiwih/cubemx-mmc-sd-card/blob/master/Src/main.c

  myprintf("\r\n\r\n(Powering up)\r\nReady to write data --\r\nThe data will be save in csv format.\r\n\r\n");
 800181c:	485c      	ldr	r0, [pc, #368]	; (8001990 <main+0x208>)
 800181e:	f000 fb59 	bl	8001ed4 <myprintf>
  FRESULT fres;

  //Mount drive
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8001822:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8001826:	2201      	movs	r2, #1
 8001828:	495a      	ldr	r1, [pc, #360]	; (8001994 <main+0x20c>)
 800182a:	4618      	mov	r0, r3
 800182c:	f007 ff18 	bl	8009660 <f_mount>
 8001830:	4603      	mov	r3, r0
 8001832:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
  if (fres != FR_OK) {
 8001836:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <main+0xc4>
	myprintf("f_mount error (%i)\r\n", fres);
 800183e:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8001842:	4619      	mov	r1, r3
 8001844:	4854      	ldr	r0, [pc, #336]	; (8001998 <main+0x210>)
 8001846:	f000 fb45 	bl	8001ed4 <myprintf>
 800184a:	e002      	b.n	8001852 <main+0xca>
//	while(1);
 }
  else{
	  myprintf("SD CARD mounted successfully...\n\n");
 800184c:	4853      	ldr	r0, [pc, #332]	; (800199c <main+0x214>)
 800184e:	f000 fb41 	bl	8001ed4 <myprintf>
 }

 /* Check free space */
  DWORD free_clusters, free_sectors, total_sectors;
  FATFS* getFreeFs;
  fres = f_getfree("", &free_clusters, &getFreeFs);
 8001852:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001856:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800185a:	4619      	mov	r1, r3
 800185c:	484d      	ldr	r0, [pc, #308]	; (8001994 <main+0x20c>)
 800185e:	f008 fc5f 	bl	800a120 <f_getfree>
 8001862:	4603      	mov	r3, r0
 8001864:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7

  if (fres != FR_OK) {
 8001868:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <main+0xf6>
	myprintf("f_getfree error (%i)\r\n", fres);
 8001870:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8001874:	4619      	mov	r1, r3
 8001876:	484a      	ldr	r0, [pc, #296]	; (80019a0 <main+0x218>)
 8001878:	f000 fb2c 	bl	8001ed4 <myprintf>
	while(1);
 800187c:	e7fe      	b.n	800187c <main+0xf4>
  } else{
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800187e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	3b02      	subs	r3, #2
 8001888:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	8952      	ldrh	r2, [r2, #10]
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
	free_sectors = free_clusters * getFreeFs->csize;
 8001898:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	895b      	ldrh	r3, [r3, #10]
 80018a0:	461a      	mov	r2, r3
 80018a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fb03 f302 	mul.w	r3, r3, r2
 80018ac:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
	myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80018b0:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 80018b4:	0859      	lsrs	r1, r3, #1
 80018b6:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 80018ba:	085b      	lsrs	r3, r3, #1
 80018bc:	461a      	mov	r2, r3
 80018be:	4839      	ldr	r0, [pc, #228]	; (80019a4 <main+0x21c>)
 80018c0:	f000 fb08 	bl	8001ed4 <myprintf>
  }

  /*-----READ TEST.TXT by f_open method----*/
  fres = f_open(&fil, "testBaca.txt", FA_READ); //Try to open file
 80018c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018c8:	2201      	movs	r2, #1
 80018ca:	4937      	ldr	r1, [pc, #220]	; (80019a8 <main+0x220>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f007 ff0d 	bl	80096ec <f_open>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
  if (fres != FR_OK) {
 80018d8:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <main+0x160>
	  myprintf("f_open error (%i)\r\n");
 80018e0:	4832      	ldr	r0, [pc, #200]	; (80019ac <main+0x224>)
 80018e2:	f000 faf7 	bl	8001ed4 <myprintf>
	  while(1);
 80018e6:	e7fe      	b.n	80018e6 <main+0x15e>
  } else{
	  myprintf("I was able to open 'testBaca.txt' for reading!\r\n");
 80018e8:	4831      	ldr	r0, [pc, #196]	; (80019b0 <main+0x228>)
 80018ea:	f000 faf3 	bl	8001ed4 <myprintf>

  /*-----READ TEST.TXT by f_gets method----*/
  BYTE readBuf[30];
  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80018ee:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	211e      	movs	r1, #30
 80018f8:	4618      	mov	r0, r3
 80018fa:	f008 fcc6 	bl	800a28a <f_gets>
 80018fe:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
  if(rres != 0) {
 8001902:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d019      	beq.n	800193e <main+0x1b6>
	  myprintf("Read string from 'testBaca.txt' contents: %s\r\n", readBuf);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4828      	ldr	r0, [pc, #160]	; (80019b4 <main+0x22c>)
 8001912:	f000 fadf 	bl	8001ed4 <myprintf>
  } else {
	  myprintf("f_gets error (%i)\r\n", fres);
	  while(1);
  }
  f_close(&fil); //Close file, don't forget this!
 8001916:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800191a:	4618      	mov	r0, r3
 800191c:	f008 fbd6 	bl	800a0cc <f_close>

  /*-----OPEN WRITE.TXT READY TO WRITE----*/
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001920:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001924:	221a      	movs	r2, #26
 8001926:	4924      	ldr	r1, [pc, #144]	; (80019b8 <main+0x230>)
 8001928:	4618      	mov	r0, r3
 800192a:	f007 fedf 	bl	80096ec <f_open>
 800192e:	4603      	mov	r3, r0
 8001930:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
  if(fres == FR_OK) {
 8001934:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8001938:	2b00      	cmp	r3, #0
 800193a:	d114      	bne.n	8001966 <main+0x1de>
 800193c:	e006      	b.n	800194c <main+0x1c4>
	  myprintf("f_gets error (%i)\r\n", fres);
 800193e:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8001942:	4619      	mov	r1, r3
 8001944:	481d      	ldr	r0, [pc, #116]	; (80019bc <main+0x234>)
 8001946:	f000 fac5 	bl	8001ed4 <myprintf>
	  while(1);
 800194a:	e7fe      	b.n	800194a <main+0x1c2>
	  myprintf("I was able to open 'write.txt' for writing\r\n");
 800194c:	481c      	ldr	r0, [pc, #112]	; (80019c0 <main+0x238>)
 800194e:	f000 fac1 	bl	8001ed4 <myprintf>
  } else {
	  myprintf("f_open error (%i)\r\n", fres);
   while(1);
  }

  setValue_AO0(0);	// 0mV di awal
 8001952:	2000      	movs	r0, #0
 8001954:	f000 fae0 	bl	8001f18 <setValue_AO0>
  setValue_AO1(0);	// 0mV di awal
 8001958:	2000      	movs	r0, #0
 800195a:	f000 faef 	bl	8001f3c <setValue_AO1>
  prevTime = 0;
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <main+0x23c>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e030      	b.n	80019c8 <main+0x240>
	  myprintf("f_open error (%i)\r\n", fres);
 8001966:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 800196a:	4619      	mov	r1, r3
 800196c:	480f      	ldr	r0, [pc, #60]	; (80019ac <main+0x224>)
 800196e:	f000 fab1 	bl	8001ed4 <myprintf>
   while(1);
 8001972:	e7fe      	b.n	8001972 <main+0x1ea>
 8001974:	200005b4 	.word	0x200005b4
 8001978:	20000450 	.word	0x20000450
 800197c:	200002c8 	.word	0x200002c8
 8001980:	20000618 	.word	0x20000618
 8001984:	2000041c 	.word	0x2000041c
 8001988:	20000370 	.word	0x20000370
 800198c:	20000438 	.word	0x20000438
 8001990:	0800f630 	.word	0x0800f630
 8001994:	0800f684 	.word	0x0800f684
 8001998:	0800f688 	.word	0x0800f688
 800199c:	0800f6a0 	.word	0x0800f6a0
 80019a0:	0800f6c4 	.word	0x0800f6c4
 80019a4:	0800f6dc 	.word	0x0800f6dc
 80019a8:	0800f724 	.word	0x0800f724
 80019ac:	0800f734 	.word	0x0800f734
 80019b0:	0800f748 	.word	0x0800f748
 80019b4:	0800f77c 	.word	0x0800f77c
 80019b8:	0800f7c0 	.word	0x0800f7c0
 80019bc:	0800f7ac 	.word	0x0800f7ac
 80019c0:	0800f7cc 	.word	0x0800f7cc
 80019c4:	2000027c 	.word	0x2000027c

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	{
	diffTime = HAL_GetTick() - startTime; // dalam ms
 80019c8:	f001 fb6e 	bl	80030a8 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <main+0x468>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	4a87      	ldr	r2, [pc, #540]	; (8001bf4 <main+0x46c>)
 80019d6:	6013      	str	r3, [r2, #0]

	AO0_bit = (uint16_t) 4095 * AO0_volt / 24; // divided by 24V karena AO0 mengirim tegangan max 24V
 80019d8:	4b87      	ldr	r3, [pc, #540]	; (8001bf8 <main+0x470>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001bfc <main+0x474>
 80019e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019e6:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 80019ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f2:	ee17 3a90 	vmov	r3, s15
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b81      	ldr	r3, [pc, #516]	; (8001c00 <main+0x478>)
 80019fa:	801a      	strh	r2, [r3, #0]
	AO1_bit = (uint16_t) 4095 * AO1_volt / 10; // divided by 10V karena AO0 mengirim tegangan max 10V
 80019fc:	4b81      	ldr	r3, [pc, #516]	; (8001c04 <main+0x47c>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001bfc <main+0x474>
 8001a06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a0a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001a0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a16:	ee17 3a90 	vmov	r3, s15
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b7a      	ldr	r3, [pc, #488]	; (8001c08 <main+0x480>)
 8001a1e:	801a      	strh	r2, [r3, #0]

	if(!MCP4725_isConnected(&myMCP4725_AO0)){
 8001a20:	487a      	ldr	r0, [pc, #488]	; (8001c0c <main+0x484>)
 8001a22:	f7ff fb04 	bl	800102e <MCP4725_isConnected>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <main+0x2b0>
		/* Print that the DAC is connected */
		errorDAC = 1;
 8001a2c:	4b78      	ldr	r3, [pc, #480]	; (8001c10 <main+0x488>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]
		myprintf("MCP A0 not connected | ");
 8001a32:	4878      	ldr	r0, [pc, #480]	; (8001c14 <main+0x48c>)
 8001a34:	f000 fa4e 	bl	8001ed4 <myprintf>
		}
	if(!MCP4725_isConnected(&myMCP4725_AO1)){
 8001a38:	4877      	ldr	r0, [pc, #476]	; (8001c18 <main+0x490>)
 8001a3a:	f7ff faf8 	bl	800102e <MCP4725_isConnected>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d105      	bne.n	8001a50 <main+0x2c8>
		/* Print that the DAC is connected */
		errorDAC = 1;
 8001a44:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <main+0x488>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
		myprintf("MCP A1 not connected | ");
 8001a4a:	4874      	ldr	r0, [pc, #464]	; (8001c1c <main+0x494>)
 8001a4c:	f000 fa42 	bl	8001ed4 <myprintf>
		}

	if(MCP4725_isConnected(&myMCP4725_AO0) && MCP4725_isConnected(&myMCP4725_AO1)){
 8001a50:	486e      	ldr	r0, [pc, #440]	; (8001c0c <main+0x484>)
 8001a52:	f7ff faec 	bl	800102e <MCP4725_isConnected>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00b      	beq.n	8001a74 <main+0x2ec>
 8001a5c:	486e      	ldr	r0, [pc, #440]	; (8001c18 <main+0x490>)
 8001a5e:	f7ff fae6 	bl	800102e <MCP4725_isConnected>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <main+0x2ec>
		errorDAC = 0;/* Print that the DAC is NOT connected */
 8001a68:	4b69      	ldr	r3, [pc, #420]	; (8001c10 <main+0x488>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
		myprintf("Both MCP4725 s Connected  -- ");
 8001a6e:	486c      	ldr	r0, [pc, #432]	; (8001c20 <main+0x498>)
 8001a70:	f000 fa30 	bl	8001ed4 <myprintf>
		}


	setValue_AO0(AO0_bit);
 8001a74:	4b62      	ldr	r3, [pc, #392]	; (8001c00 <main+0x478>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fa4d 	bl	8001f18 <setValue_AO0>
	setValue_AO1(AO1_bit);
 8001a7e:	4b62      	ldr	r3, [pc, #392]	; (8001c08 <main+0x480>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fa5a 	bl	8001f3c <setValue_AO1>

	/*-----STORING TO MICRO SD----*/
	UINT bytesWrote;
	if((diffTime - prevTime) >= timeSampling){
 8001a88:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <main+0x46c>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <main+0x49c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	4a65      	ldr	r2, [pc, #404]	; (8001c28 <main+0x4a0>)
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d317      	bcc.n	8001aca <main+0x342>
		fres = f_write(&fil, stringKirim, strlen(stringKirim), &bytesWrote);
 8001a9a:	4864      	ldr	r0, [pc, #400]	; (8001c2c <main+0x4a4>)
 8001a9c:	f7fe fb98 	bl	80001d0 <strlen>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f107 0318 	add.w	r3, r7, #24
 8001aa6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001aaa:	4960      	ldr	r1, [pc, #384]	; (8001c2c <main+0x4a4>)
 8001aac:	f008 f91b 	bl	8009ce6 <f_write>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
		k++;
 8001ab6:	4b5e      	ldr	r3, [pc, #376]	; (8001c30 <main+0x4a8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4a5c      	ldr	r2, [pc, #368]	; (8001c30 <main+0x4a8>)
 8001abe:	6013      	str	r3, [r2, #0]
		prevTime = HAL_GetTick();
 8001ac0:	f001 faf2 	bl	80030a8 <HAL_GetTick>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a57      	ldr	r2, [pc, #348]	; (8001c24 <main+0x49c>)
 8001ac8:	6013      	str	r3, [r2, #0]
		}

	timestamp = HAL_GetTick() - startTime;
 8001aca:	f001 faed 	bl	80030a8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <main+0x468>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	4a57      	ldr	r2, [pc, #348]	; (8001c34 <main+0x4ac>)
 8001ad8:	6013      	str	r3, [r2, #0]
	/* KONVERSI bit ke Volt */
	AI0_volt = AI0_bit * 3.3 / 4096; // PA0
 8001ada:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <main+0x4b0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd10 	bl	8000504 <__aeabi_ui2d>
 8001ae4:	a340      	add	r3, pc, #256	; (adr r3, 8001be8 <main+0x460>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fd85 	bl	80005f8 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <main+0x4b4>)
 8001afc:	f7fe fea6 	bl	800084c <__aeabi_ddiv>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7ff f86e 	bl	8000be8 <__aeabi_d2f>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a4c      	ldr	r2, [pc, #304]	; (8001c40 <main+0x4b8>)
 8001b10:	6013      	str	r3, [r2, #0]
	AI1_volt = AI1_bit * 3.3 / 4096; // PA1
 8001b12:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <main+0x4bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fcf4 	bl	8000504 <__aeabi_ui2d>
 8001b1c:	a332      	add	r3, pc, #200	; (adr r3, 8001be8 <main+0x460>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd69 	bl	80005f8 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <main+0x4b4>)
 8001b34:	f7fe fe8a 	bl	800084c <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff f852 	bl	8000be8 <__aeabi_d2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a40      	ldr	r2, [pc, #256]	; (8001c48 <main+0x4c0>)
 8001b48:	6013      	str	r3, [r2, #0]
	AI2_volt = AI2_bit * 3.3 / 4096; // PA2
 8001b4a:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <main+0x4c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fcd8 	bl	8000504 <__aeabi_ui2d>
 8001b54:	a324      	add	r3, pc, #144	; (adr r3, 8001be8 <main+0x460>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	f7fe fd4d 	bl	80005f8 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <main+0x4b4>)
 8001b6c:	f7fe fe6e 	bl	800084c <__aeabi_ddiv>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7ff f836 	bl	8000be8 <__aeabi_d2f>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a34      	ldr	r2, [pc, #208]	; (8001c50 <main+0x4c8>)
 8001b80:	6013      	str	r3, [r2, #0]
	sprintf(stringKirim,"%d, %d, %f, %f, %d, %d, %d\n",k,timestamp, AO0_volt, AO1_volt, AI0_bit, AI1_bit, AI2_bit); // stringKirim baru, sesuai nilai adc cpltCallback
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <main+0x4a8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <main+0x4ac>)
 8001b8a:	6819      	ldr	r1, [r3, #0]
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <main+0x470>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fcd8 	bl	8000548 <__aeabi_f2d>
 8001b98:	4604      	mov	r4, r0
 8001b9a:	460d      	mov	r5, r1
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <main+0x47c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcd1 	bl	8000548 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4923      	ldr	r1, [pc, #140]	; (8001c38 <main+0x4b0>)
 8001bac:	6809      	ldr	r1, [r1, #0]
 8001bae:	4825      	ldr	r0, [pc, #148]	; (8001c44 <main+0x4bc>)
 8001bb0:	6800      	ldr	r0, [r0, #0]
 8001bb2:	4e26      	ldr	r6, [pc, #152]	; (8001c4c <main+0x4c4>)
 8001bb4:	6836      	ldr	r6, [r6, #0]
 8001bb6:	9606      	str	r6, [sp, #24]
 8001bb8:	9005      	str	r0, [sp, #20]
 8001bba:	9104      	str	r1, [sp, #16]
 8001bbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bc0:	e9cd 4500 	strd	r4, r5, [sp]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4922      	ldr	r1, [pc, #136]	; (8001c54 <main+0x4cc>)
 8001bca:	4818      	ldr	r0, [pc, #96]	; (8001c2c <main+0x4a4>)
 8001bcc:	f009 faa8 	bl	800b120 <siprintf>

	if(fres == FR_OK) {
 8001bd0:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d141      	bne.n	8001c5c <main+0x4d4>
	myprintf("Status: %s",stringKirim);
 8001bd8:	4914      	ldr	r1, [pc, #80]	; (8001c2c <main+0x4a4>)
 8001bda:	481f      	ldr	r0, [pc, #124]	; (8001c58 <main+0x4d0>)
 8001bdc:	f000 f97a 	bl	8001ed4 <myprintf>
 8001be0:	e067      	b.n	8001cb2 <main+0x52a>
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	66666666 	.word	0x66666666
 8001bec:	400a6666 	.word	0x400a6666
 8001bf0:	200005b4 	.word	0x200005b4
 8001bf4:	2000044c 	.word	0x2000044c
 8001bf8:	20000268 	.word	0x20000268
 8001bfc:	457ff000 	.word	0x457ff000
 8001c00:	200005bc 	.word	0x200005bc
 8001c04:	2000026c 	.word	0x2000026c
 8001c08:	20000270 	.word	0x20000270
 8001c0c:	2000041c 	.word	0x2000041c
 8001c10:	20000280 	.word	0x20000280
 8001c14:	0800f7fc 	.word	0x0800f7fc
 8001c18:	20000438 	.word	0x20000438
 8001c1c:	0800f814 	.word	0x0800f814
 8001c20:	0800f82c 	.word	0x0800f82c
 8001c24:	2000027c 	.word	0x2000027c
 8001c28:	20000050 	.word	0x20000050
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	20000278 	.word	0x20000278
 8001c34:	20000434 	.word	0x20000434
 8001c38:	20000464 	.word	0x20000464
 8001c3c:	40b00000 	.word	0x40b00000
 8001c40:	2000042c 	.word	0x2000042c
 8001c44:	200005ac 	.word	0x200005ac
 8001c48:	20000468 	.word	0x20000468
 8001c4c:	200004d4 	.word	0x200004d4
 8001c50:	2000045c 	.word	0x2000045c
 8001c54:	0800f84c 	.word	0x0800f84c
 8001c58:	0800f868 	.word	0x0800f868
	} else {
	if(awal==0){ myprintf("f_write error (%i)\r\n"); }
 8001c5c:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <main+0x5b4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <main+0x4e2>
 8001c64:	4836      	ldr	r0, [pc, #216]	; (8001d40 <main+0x5b8>)
 8001c66:	f000 f935 	bl	8001ed4 <myprintf>
	HAL_UART_Receive(&huart4, (char*)Rx_buffer, 50, 500);
 8001c6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c6e:	2232      	movs	r2, #50	; 0x32
 8001c70:	4934      	ldr	r1, [pc, #208]	; (8001d44 <main+0x5bc>)
 8001c72:	4835      	ldr	r0, [pc, #212]	; (8001d48 <main+0x5c0>)
 8001c74:	f005 fc6d 	bl	8007552 <HAL_UART_Receive>
	sprintf(Rx_buffer_string,"%s",Rx_buffer);
 8001c78:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <main+0x5bc>)
 8001c7a:	4934      	ldr	r1, [pc, #208]	; (8001d4c <main+0x5c4>)
 8001c7c:	4834      	ldr	r0, [pc, #208]	; (8001d50 <main+0x5c8>)
 8001c7e:	f009 fa4f 	bl	800b120 <siprintf>
	char* Rx_buffer_print = strtok(Rx_buffer_string,"\r\n");
 8001c82:	4934      	ldr	r1, [pc, #208]	; (8001d54 <main+0x5cc>)
 8001c84:	4832      	ldr	r0, [pc, #200]	; (8001d50 <main+0x5c8>)
 8001c86:	f00a f90b 	bl	800bea0 <strtok>
 8001c8a:	f8c7 04a4 	str.w	r0, [r7, #1188]	; 0x4a4
	sscanf(Rx_buffer_print, "[SP=%d],[KP=%d],[KI=%d]", &SP, &KP, &KI);
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <main+0x5d0>)
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <main+0x5d4>)
 8001c94:	4a32      	ldr	r2, [pc, #200]	; (8001d60 <main+0x5d8>)
 8001c96:	4933      	ldr	r1, [pc, #204]	; (8001d64 <main+0x5dc>)
 8001c98:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 8001c9c:	f009 fa60 	bl	800b160 <siscanf>
	myprintf("SP = %d | KP = %d | KI = %d \n",SP, KP, KI);
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <main+0x5d8>)
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <main+0x5d4>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <main+0x5d0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	482e      	ldr	r0, [pc, #184]	; (8001d68 <main+0x5e0>)
 8001cae:	f000 f911 	bl	8001ed4 <myprintf>
	}
	if(SP != prevSP){
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <main+0x5d8>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <main+0x5e4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d017      	beq.n	8001cee <main+0x566>
	/*-----PWM DAC DUTY CYCLE GENERATION-----*/
		htim1.Instance->CCR1 = SP * 999 / 4096; // output PE9 dalam 0 (0% duty cycle) - 4096 (100% duty cycle) 1kHz HCLK
 8001cbe:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <main+0x5d8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cc6:	fb02 f203 	mul.w	r2, r2, r3
 8001cca:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <main+0x5e8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0b12      	lsrs	r2, r2, #12
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2 = KP * 999 / 4096; // output PE9 dalam 0 (0% duty cycle) - 4096 (100% duty cycle) 1kHz HCLK
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <main+0x5d4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cda:	fb02 f203 	mul.w	r2, r2, r3
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <main+0x5e8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	0b12      	lsrs	r2, r2, #12
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38
		prevSP = SP;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <main+0x5d8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a20      	ldr	r2, [pc, #128]	; (8001d6c <main+0x5e4>)
 8001cec:	6013      	str	r3, [r2, #0]
	}

	if(diffTime > 3000){ // awal kali 0V, setelah 2s keluar AO sesuai yg diminta
 8001cee:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <main+0x5ec>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	f67f ae66 	bls.w	80019c8 <main+0x240>
			AO0_volt = 22; // valve flow control Qin
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <main+0x5f0>)
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <main+0x5f4>)
 8001d00:	601a      	str	r2, [r3, #0]
			AO1_volt = 10; // pompa, drain valve
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <main+0x5f8>)
 8001d04:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <main+0x5fc>)
 8001d06:	601a      	str	r2, [r3, #0]
			if(diffTime > 123000) { // waktu stop untuk close dan unmount csv, nilai ini harus + difftime 2s
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <main+0x5ec>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <main+0x600>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	f67f ae5a 	bls.w	80019c8 <main+0x240>
				f_close(&fil); //Close file, don't forget this!
 8001d14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f008 f9d7 	bl	800a0cc <f_close>
				f_mount(NULL, "", 0); //De-mount drive
 8001d1e:	2200      	movs	r2, #0
 8001d20:	491a      	ldr	r1, [pc, #104]	; (8001d8c <main+0x604>)
 8001d22:	2000      	movs	r0, #0
 8001d24:	f007 fc9c 	bl	8009660 <f_mount>
				// normalkan kondisi semua off
				AO0_volt = 0;
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <main+0x5f0>)
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
				AO1_volt = 0;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <main+0x5f8>)
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
	{
 8001d38:	e646      	b.n	80019c8 <main+0x240>
 8001d3a:	bf00      	nop
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	0800f874 	.word	0x0800f874
 8001d44:	20000548 	.word	0x20000548
 8001d48:	20000660 	.word	0x20000660
 8001d4c:	0800f88c 	.word	0x0800f88c
 8001d50:	20000544 	.word	0x20000544
 8001d54:	0800f890 	.word	0x0800f890
 8001d58:	20000274 	.word	0x20000274
 8001d5c:	20000430 	.word	0x20000430
 8001d60:	20000418 	.word	0x20000418
 8001d64:	0800f894 	.word	0x0800f894
 8001d68:	0800f8ac 	.word	0x0800f8ac
 8001d6c:	20000460 	.word	0x20000460
 8001d70:	20000618 	.word	0x20000618
 8001d74:	2000044c 	.word	0x2000044c
 8001d78:	20000268 	.word	0x20000268
 8001d7c:	41b00000 	.word	0x41b00000
 8001d80:	2000026c 	.word	0x2000026c
 8001d84:	41200000 	.word	0x41200000
 8001d88:	0001e078 	.word	0x0001e078
 8001d8c:	0800f684 	.word	0x0800f684

08001d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b094      	sub	sp, #80	; 0x50
 8001d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d96:	f107 0320 	add.w	r3, r7, #32
 8001d9a:	2230      	movs	r2, #48	; 0x30
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f008 fb36 	bl	800a410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <SystemClock_Config+0xcc>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	4a27      	ldr	r2, [pc, #156]	; (8001e5c <SystemClock_Config+0xcc>)
 8001dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <SystemClock_Config+0xcc>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <SystemClock_Config+0xd0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <SystemClock_Config+0xd0>)
 8001dda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <SystemClock_Config+0xd0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dec:	2301      	movs	r3, #1
 8001dee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df6:	2302      	movs	r3, #2
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e00:	2304      	movs	r3, #4
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e04:	23a8      	movs	r3, #168	; 0xa8
 8001e06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e10:	f107 0320 	add.w	r3, r7, #32
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fc7b 	bl	8005710 <HAL_RCC_OscConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e20:	f000 f89e 	bl	8001f60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e24:	230f      	movs	r3, #15
 8001e26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	2105      	movs	r1, #5
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fedc 	bl	8005c00 <HAL_RCC_ClockConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e4e:	f000 f887 	bl	8001f60 <Error_Handler>
  }
}
 8001e52:	bf00      	nop
 8001e54:	3750      	adds	r7, #80	; 0x50
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40007000 	.word	0x40007000

08001e64 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

 if(hadc->Instance == ADC1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <HAL_ADC_ConvCpltCallback+0x50>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d119      	bne.n	8001eaa <HAL_ADC_ConvCpltCallback+0x46>
  {
   AI0_bit = my_adc[0]; // PA0
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_ADC_ConvCpltCallback+0x54>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <HAL_ADC_ConvCpltCallback+0x58>)
 8001e7c:	6013      	str	r3, [r2, #0]
   AI1_bit = my_adc[1]; // PA1
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_ADC_ConvCpltCallback+0x54>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001e84:	6013      	str	r3, [r2, #0]
   AI2_bit = my_adc[2]; // PA2
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <HAL_ADC_ConvCpltCallback+0x54>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <HAL_ADC_ConvCpltCallback+0x60>)
 8001e8c:	6013      	str	r3, [r2, #0]
   if(awal = 1){
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_ADC_ConvCpltCallback+0x64>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
	   diffTime = HAL_GetTick() - startTime;
 8001e94:	f001 f908 	bl	80030a8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x68>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001ea2:	6013      	str	r3, [r2, #0]
   }
   awal = 0;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_ADC_ConvCpltCallback+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
  }
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40012000 	.word	0x40012000
 8001eb8:	20000450 	.word	0x20000450
 8001ebc:	20000464 	.word	0x20000464
 8001ec0:	200005ac 	.word	0x200005ac
 8001ec4:	200004d4 	.word	0x200004d4
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	200005b4 	.word	0x200005b4
 8001ed0:	2000044c 	.word	0x2000044c

08001ed4 <myprintf>:

void myprintf(const char *fmt, ...) {
 8001ed4:	b40f      	push	{r0, r1, r2, r3}
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, fmt);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	607b      	str	r3, [r7, #4]
  vsnprintf(Tx_buffer, sizeof(Tx_buffer), fmt, args);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	2164      	movs	r1, #100	; 0x64
 8001ee8:	4809      	ldr	r0, [pc, #36]	; (8001f10 <myprintf+0x3c>)
 8001eea:	f00a f8e7 	bl	800c0bc <vsniprintf>
  va_end(args);
  HAL_UART_Transmit(&huart4, (uint8_t*)Tx_buffer, strlen(Tx_buffer), 100);
 8001eee:	4808      	ldr	r0, [pc, #32]	; (8001f10 <myprintf+0x3c>)
 8001ef0:	f7fe f96e 	bl	80001d0 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	2364      	movs	r3, #100	; 0x64
 8001efa:	4905      	ldr	r1, [pc, #20]	; (8001f10 <myprintf+0x3c>)
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <myprintf+0x40>)
 8001efe:	f005 fa96 	bl	800742e <HAL_UART_Transmit>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f0c:	b004      	add	sp, #16
 8001f0e:	4770      	bx	lr
 8001f10:	200004dc 	.word	0x200004dc
 8001f14:	20000660 	.word	0x20000660

08001f18 <setValue_AO0>:

uint8_t setValue_AO0(uint16_t AO0_bit){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
	return MCP4725_setValue(&myMCP4725_AO0, AO0_bit, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001f22:	88f9      	ldrh	r1, [r7, #6]
 8001f24:	2300      	movs	r3, #0
 8001f26:	2200      	movs	r2, #0
 8001f28:	4803      	ldr	r0, [pc, #12]	; (8001f38 <setValue_AO0+0x20>)
 8001f2a:	f7ff f8c3 	bl	80010b4 <MCP4725_setValue>
 8001f2e:	4603      	mov	r3, r0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	2000041c 	.word	0x2000041c

08001f3c <setValue_AO1>:

uint8_t setValue_AO1(uint16_t AO1_bit){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
	return MCP4725_setValue(&myMCP4725_AO1, AO1_bit, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001f46:	88f9      	ldrh	r1, [r7, #6]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <setValue_AO1+0x20>)
 8001f4e:	f7ff f8b1 	bl	80010b4 <MCP4725_setValue>
 8001f52:	4603      	mov	r3, r0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000438 	.word	0x20000438

08001f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f64:	b672      	cpsid	i
}
 8001f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <Error_Handler+0x8>
	...

08001f6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <MX_SPI1_Init+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fb8:	220a      	movs	r2, #10
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fbc:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fbe:	f004 f81b 	bl	8005ff8 <HAL_SPI_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fc8:	f7ff ffca 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200005c0 	.word	0x200005c0
 8001fd4:	40013000 	.word	0x40013000

08001fd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_SPI_MspInit+0x84>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d12b      	bne.n	8002052 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_SPI_MspInit+0x88>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a17      	ldr	r2, [pc, #92]	; (8002060 <HAL_SPI_MspInit+0x88>)
 8002004:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_SPI_MspInit+0x88>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_SPI_MspInit+0x88>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <HAL_SPI_MspInit+0x88>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_SPI_MspInit+0x88>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002032:	23e0      	movs	r3, #224	; 0xe0
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800203a:	2301      	movs	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002042:	2305      	movs	r3, #5
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <HAL_SPI_MspInit+0x8c>)
 800204e:	f002 f8e5 	bl	800421c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40013000 	.word	0x40013000
 8002060:	40023800 	.word	0x40023800
 8002064:	40020000 	.word	0x40020000

08002068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_MspInit+0x4c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <HAL_MspInit+0x4c>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_MspInit+0x4c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_MspInit+0x4c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_MspInit+0x4c>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_MspInit+0x4c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <NMI_Handler+0x4>

080020be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <HardFault_Handler+0x4>

080020c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <MemManage_Handler+0x4>

080020ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <BusFault_Handler+0x4>

080020d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <UsageFault_Handler+0x4>

080020d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002104:	f000 ffbc 	bl	8003080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <DMA2_Stream0_IRQHandler+0x10>)
 8002112:	f001 fe19 	bl	8003d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000310 	.word	0x20000310

08002120 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
	return 1;
 8002124:	2301      	movs	r3, #1
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_kill>:

int _kill(int pid, int sig)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800213a:	f008 f93f 	bl	800a3bc <__errno>
 800213e:	4603      	mov	r3, r0
 8002140:	2216      	movs	r2, #22
 8002142:	601a      	str	r2, [r3, #0]
	return -1;
 8002144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_exit>:

void _exit (int status)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ffe7 	bl	8002130 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002162:	e7fe      	b.n	8002162 <_exit+0x12>

08002164 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e00a      	b.n	800218c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002176:	f3af 8000 	nop.w
 800217a:	4601      	mov	r1, r0
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	60ba      	str	r2, [r7, #8]
 8002182:	b2ca      	uxtb	r2, r1
 8002184:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	dbf0      	blt.n	8002176 <_read+0x12>
	}

return len;
 8002194:	687b      	ldr	r3, [r7, #4]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e009      	b.n	80021c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	60ba      	str	r2, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbf1      	blt.n	80021b0 <_write+0x12>
	}
	return len;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_close>:

int _close(int file)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
	return -1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <_isatty>:

int _isatty(int file)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
	return 1;
 8002216:	2301      	movs	r3, #1
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <_sbrk+0x5c>)
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <_sbrk+0x60>)
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <_sbrk+0x64>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <_sbrk+0x64>)
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <_sbrk+0x68>)
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <_sbrk+0x64>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	429a      	cmp	r2, r3
 800226e:	d207      	bcs.n	8002280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002270:	f008 f8a4 	bl	800a3bc <__errno>
 8002274:	4603      	mov	r3, r0
 8002276:	220c      	movs	r2, #12
 8002278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	e009      	b.n	8002294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <_sbrk+0x64>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <_sbrk+0x64>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <_sbrk+0x64>)
 8002290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20020000 	.word	0x20020000
 80022a0:	00000400 	.word	0x00000400
 80022a4:	20000284 	.word	0x20000284
 80022a8:	20000b28 	.word	0x20000b28

080022ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <SystemInit+0x20>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <SystemInit+0x20>)
 80022b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b096      	sub	sp, #88	; 0x58
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	611a      	str	r2, [r3, #16]
 80022fe:	615a      	str	r2, [r3, #20]
 8002300:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2220      	movs	r2, #32
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f008 f881 	bl	800a410 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800230e:	4b45      	ldr	r3, [pc, #276]	; (8002424 <MX_TIM1_Init+0x154>)
 8002310:	4a45      	ldr	r2, [pc, #276]	; (8002428 <MX_TIM1_Init+0x158>)
 8002312:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <MX_TIM1_Init+0x154>)
 8002316:	f240 124f 	movw	r2, #335	; 0x14f
 800231a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231c:	4b41      	ldr	r3, [pc, #260]	; (8002424 <MX_TIM1_Init+0x154>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002322:	4b40      	ldr	r3, [pc, #256]	; (8002424 <MX_TIM1_Init+0x154>)
 8002324:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002328:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232a:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <MX_TIM1_Init+0x154>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 12;
 8002330:	4b3c      	ldr	r3, [pc, #240]	; (8002424 <MX_TIM1_Init+0x154>)
 8002332:	220c      	movs	r2, #12
 8002334:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002336:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <MX_TIM1_Init+0x154>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800233c:	4839      	ldr	r0, [pc, #228]	; (8002424 <MX_TIM1_Init+0x154>)
 800233e:	f004 f951 	bl	80065e4 <HAL_TIM_Base_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002348:	f7ff fe0a 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800234c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002350:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002356:	4619      	mov	r1, r3
 8002358:	4832      	ldr	r0, [pc, #200]	; (8002424 <MX_TIM1_Init+0x154>)
 800235a:	f004 fb75 	bl	8006a48 <HAL_TIM_ConfigClockSource>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002364:	f7ff fdfc 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002368:	482e      	ldr	r0, [pc, #184]	; (8002424 <MX_TIM1_Init+0x154>)
 800236a:	f004 f98a 	bl	8006682 <HAL_TIM_PWM_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002374:	f7ff fdf4 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002378:	2300      	movs	r3, #0
 800237a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002384:	4619      	mov	r1, r3
 8002386:	4827      	ldr	r0, [pc, #156]	; (8002424 <MX_TIM1_Init+0x154>)
 8002388:	f004 ff36 	bl	80071f8 <HAL_TIMEx_MasterConfigSynchronization>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002392:	f7ff fde5 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002396:	2360      	movs	r3, #96	; 0x60
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239e:	2300      	movs	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023a2:	2300      	movs	r3, #0
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b6:	2200      	movs	r2, #0
 80023b8:	4619      	mov	r1, r3
 80023ba:	481a      	ldr	r0, [pc, #104]	; (8002424 <MX_TIM1_Init+0x154>)
 80023bc:	f004 fa82 	bl	80068c4 <HAL_TIM_PWM_ConfigChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80023c6:	f7ff fdcb 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ce:	2204      	movs	r2, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4814      	ldr	r0, [pc, #80]	; (8002424 <MX_TIM1_Init+0x154>)
 80023d4:	f004 fa76 	bl	80068c4 <HAL_TIM_PWM_ConfigChannel>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80023de:	f7ff fdbf 	bl	8001f60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	4619      	mov	r1, r3
 8002404:	4807      	ldr	r0, [pc, #28]	; (8002424 <MX_TIM1_Init+0x154>)
 8002406:	f004 ff73 	bl	80072f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002410:	f7ff fda6 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002414:	4803      	ldr	r0, [pc, #12]	; (8002424 <MX_TIM1_Init+0x154>)
 8002416:	f000 f82b 	bl	8002470 <HAL_TIM_MspPostInit>

}
 800241a:	bf00      	nop
 800241c:	3758      	adds	r7, #88	; 0x58
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000618 	.word	0x20000618
 8002428:	40010000 	.word	0x40010000

0800242c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <HAL_TIM_Base_MspInit+0x3c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d10d      	bne.n	800245a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_TIM_Base_MspInit+0x40>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_TIM_Base_MspInit+0x40>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_TIM_Base_MspInit+0x40>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40010000 	.word	0x40010000
 800246c:	40023800 	.word	0x40023800

08002470 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <HAL_TIM_MspPostInit+0x68>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d11e      	bne.n	80024d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_TIM_MspPostInit+0x6c>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_TIM_MspPostInit+0x6c>)
 800249c:	f043 0310 	orr.w	r3, r3, #16
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_TIM_MspPostInit+0x6c>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80024ae:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80024b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	4619      	mov	r1, r3
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <HAL_TIM_MspPostInit+0x70>)
 80024cc:	f001 fea6 	bl	800421c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024d0:	bf00      	nop
 80024d2:	3720      	adds	r7, #32
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40010000 	.word	0x40010000
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40021000 	.word	0x40021000

080024e4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <MX_UART4_Init+0x4c>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <MX_UART4_Init+0x50>)
 80024ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <MX_UART4_Init+0x4c>)
 80024f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <MX_UART4_Init+0x4c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <MX_UART4_Init+0x4c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <MX_UART4_Init+0x4c>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <MX_UART4_Init+0x4c>)
 800250a:	220c      	movs	r2, #12
 800250c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <MX_UART4_Init+0x4c>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <MX_UART4_Init+0x4c>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800251a:	4805      	ldr	r0, [pc, #20]	; (8002530 <MX_UART4_Init+0x4c>)
 800251c:	f004 ff3a 	bl	8007394 <HAL_UART_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002526:	f7ff fd1b 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000660 	.word	0x20000660
 8002534:	40004c00 	.word	0x40004c00

08002538 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_UART_MspInit+0x84>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d12c      	bne.n	80025b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_UART_MspInit+0x88>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <HAL_UART_MspInit+0x88>)
 8002564:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_UART_MspInit+0x88>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_UART_MspInit+0x88>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_UART_MspInit+0x88>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_UART_MspInit+0x88>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002592:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025a4:	2308      	movs	r3, #8
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4619      	mov	r1, r3
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <HAL_UART_MspInit+0x8c>)
 80025b0:	f001 fe34 	bl	800421c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80025b4:	bf00      	nop
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40004c00 	.word	0x40004c00
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020800 	.word	0x40020800

080025c8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80025d0:	f000 fd6a 	bl	80030a8 <HAL_GetTick>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <SPI_Timer_On+0x20>)
 80025d8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <SPI_Timer_On+0x24>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200006a4 	.word	0x200006a4
 80025ec:	200006a8 	.word	0x200006a8

080025f0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80025f4:	f000 fd58 	bl	80030a8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <SPI_Timer_Status+0x24>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1ad2      	subs	r2, r2, r3
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <SPI_Timer_Status+0x28>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	bf34      	ite	cc
 8002608:	2301      	movcc	r3, #1
 800260a:	2300      	movcs	r3, #0
 800260c:	b2db      	uxtb	r3, r3
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200006a4 	.word	0x200006a4
 8002618:	200006a8 	.word	0x200006a8

0800261c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af02      	add	r7, sp, #8
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi1, &dat, &rxDat, 1, 50);
 8002626:	f107 020f 	add.w	r2, r7, #15
 800262a:	1df9      	adds	r1, r7, #7
 800262c:	2332      	movs	r3, #50	; 0x32
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2301      	movs	r3, #1
 8002632:	4804      	ldr	r0, [pc, #16]	; (8002644 <xchg_spi+0x28>)
 8002634:	f003 fd69 	bl	800610a <HAL_SPI_TransmitReceive>
    return rxDat;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200005c0 	.word	0x200005c0

08002648 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e00a      	b.n	800266e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	18d4      	adds	r4, r2, r3
 800265e:	20ff      	movs	r0, #255	; 0xff
 8002660:	f7ff ffdc 	bl	800261c <xchg_spi>
 8002664:	4603      	mov	r3, r0
 8002666:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3301      	adds	r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d3f0      	bcc.n	8002658 <rcvr_spi_multi+0x10>
	}
}
 8002676:	bf00      	nop
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	bd90      	pop	{r4, r7, pc}

08002680 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e009      	b.n	80026a4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4413      	add	r3, r2
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ffbf 	bl	800261c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3301      	adds	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d3f1      	bcc.n	8002690 <xmit_spi_multi+0x10>
	}
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80026be:	f000 fcf3 	bl	80030a8 <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80026c8:	20ff      	movs	r0, #255	; 0xff
 80026ca:	f7ff ffa7 	bl	800261c <xchg_spi>
 80026ce:	4603      	mov	r3, r0
 80026d0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2bff      	cmp	r3, #255	; 0xff
 80026d6:	d007      	beq.n	80026e8 <wait_ready+0x32>
 80026d8:	f000 fce6 	bl	80030a8 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d8ef      	bhi.n	80026c8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2bff      	cmp	r3, #255	; 0xff
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002700:	2201      	movs	r2, #1
 8002702:	2110      	movs	r1, #16
 8002704:	4803      	ldr	r0, [pc, #12]	; (8002714 <despiselect+0x18>)
 8002706:	f001 ff25 	bl	8004554 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800270a:	20ff      	movs	r0, #255	; 0xff
 800270c:	f7ff ff86 	bl	800261c <xchg_spi>

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40020000 	.word	0x40020000

08002718 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800271c:	2200      	movs	r2, #0
 800271e:	2110      	movs	r1, #16
 8002720:	4809      	ldr	r0, [pc, #36]	; (8002748 <spiselect+0x30>)
 8002722:	f001 ff17 	bl	8004554 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002726:	20ff      	movs	r0, #255	; 0xff
 8002728:	f7ff ff78 	bl	800261c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800272c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002730:	f7ff ffc1 	bl	80026b6 <wait_ready>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <spiselect+0x26>
 800273a:	2301      	movs	r3, #1
 800273c:	e002      	b.n	8002744 <spiselect+0x2c>

	despiselect();
 800273e:	f7ff ffdd 	bl	80026fc <despiselect>
	return 0;	/* Timeout */
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40020000 	.word	0x40020000

0800274c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002756:	20c8      	movs	r0, #200	; 0xc8
 8002758:	f7ff ff36 	bl	80025c8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800275c:	20ff      	movs	r0, #255	; 0xff
 800275e:	f7ff ff5d 	bl	800261c <xchg_spi>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2bff      	cmp	r3, #255	; 0xff
 800276a:	d104      	bne.n	8002776 <rcvr_datablock+0x2a>
 800276c:	f7ff ff40 	bl	80025f0 <SPI_Timer_Status>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f2      	bne.n	800275c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2bfe      	cmp	r3, #254	; 0xfe
 800277a:	d001      	beq.n	8002780 <rcvr_datablock+0x34>
 800277c:	2300      	movs	r3, #0
 800277e:	e00a      	b.n	8002796 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ff60 	bl	8002648 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002788:	20ff      	movs	r0, #255	; 0xff
 800278a:	f7ff ff47 	bl	800261c <xchg_spi>
 800278e:	20ff      	movs	r0, #255	; 0xff
 8002790:	f7ff ff44 	bl	800261c <xchg_spi>

	return 1;						/* Function succeeded */
 8002794:	2301      	movs	r3, #1
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80027aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027ae:	f7ff ff82 	bl	80026b6 <wait_ready>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <xmit_datablock+0x1e>
 80027b8:	2300      	movs	r3, #0
 80027ba:	e01e      	b.n	80027fa <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff2c 	bl	800261c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	2bfd      	cmp	r3, #253	; 0xfd
 80027c8:	d016      	beq.n	80027f8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80027ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ff56 	bl	8002680 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80027d4:	20ff      	movs	r0, #255	; 0xff
 80027d6:	f7ff ff21 	bl	800261c <xchg_spi>
 80027da:	20ff      	movs	r0, #255	; 0xff
 80027dc:	f7ff ff1e 	bl	800261c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80027e0:	20ff      	movs	r0, #255	; 0xff
 80027e2:	f7ff ff1b 	bl	800261c <xchg_spi>
 80027e6:	4603      	mov	r3, r0
 80027e8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2b05      	cmp	r3, #5
 80027f2:	d001      	beq.n	80027f8 <xmit_datablock+0x5a>
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <xmit_datablock+0x5c>
	}
	return 1;
 80027f8:	2301      	movs	r3, #1
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	6039      	str	r1, [r7, #0]
 800280c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	da0e      	bge.n	8002834 <send_cmd+0x32>
		cmd &= 0x7F;
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800281c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800281e:	2100      	movs	r1, #0
 8002820:	2037      	movs	r0, #55	; 0x37
 8002822:	f7ff ffee 	bl	8002802 <send_cmd>
 8002826:	4603      	mov	r3, r0
 8002828:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800282a:	7bbb      	ldrb	r3, [r7, #14]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d901      	bls.n	8002834 <send_cmd+0x32>
 8002830:	7bbb      	ldrb	r3, [r7, #14]
 8002832:	e051      	b.n	80028d8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d008      	beq.n	800284c <send_cmd+0x4a>
		despiselect();
 800283a:	f7ff ff5f 	bl	80026fc <despiselect>
		if (!spiselect()) return 0xFF;
 800283e:	f7ff ff6b 	bl	8002718 <spiselect>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <send_cmd+0x4a>
 8002848:	23ff      	movs	r3, #255	; 0xff
 800284a:	e045      	b.n	80028d8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002852:	b2db      	uxtb	r3, r3
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fee1 	bl	800261c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	0e1b      	lsrs	r3, r3, #24
 800285e:	b2db      	uxtb	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fedb 	bl	800261c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	b2db      	uxtb	r3, r3
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fed5 	bl	800261c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	b2db      	uxtb	r3, r3
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fecf 	bl	800261c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff feca 	bl	800261c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <send_cmd+0x94>
 8002892:	2395      	movs	r3, #149	; 0x95
 8002894:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d101      	bne.n	80028a0 <send_cmd+0x9e>
 800289c:	2387      	movs	r3, #135	; 0x87
 800289e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff feba 	bl	800261c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d102      	bne.n	80028b4 <send_cmd+0xb2>
 80028ae:	20ff      	movs	r0, #255	; 0xff
 80028b0:	f7ff feb4 	bl	800261c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80028b4:	230a      	movs	r3, #10
 80028b6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80028b8:	20ff      	movs	r0, #255	; 0xff
 80028ba:	f7ff feaf 	bl	800261c <xchg_spi>
 80028be:	4603      	mov	r3, r0
 80028c0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80028c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	da05      	bge.n	80028d6 <send_cmd+0xd4>
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <send_cmd+0xb6>

	return res;							/* Return received response */
 80028d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <USER_SPI_initialize+0x14>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0d6      	b.n	8002aa2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80028f4:	4b6d      	ldr	r3, [pc, #436]	; (8002aac <USER_SPI_initialize+0x1cc>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <USER_SPI_initialize+0x2a>
 8002902:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <USER_SPI_initialize+0x1cc>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	e0cb      	b.n	8002aa2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800290a:	4b69      	ldr	r3, [pc, #420]	; (8002ab0 <USER_SPI_initialize+0x1d0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002914:	4b66      	ldr	r3, [pc, #408]	; (8002ab0 <USER_SPI_initialize+0x1d0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800291c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800291e:	230a      	movs	r3, #10
 8002920:	73fb      	strb	r3, [r7, #15]
 8002922:	e005      	b.n	8002930 <USER_SPI_initialize+0x50>
 8002924:	20ff      	movs	r0, #255	; 0xff
 8002926:	f7ff fe79 	bl	800261c <xchg_spi>
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	3b01      	subs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f6      	bne.n	8002924 <USER_SPI_initialize+0x44>

	ty = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800293a:	2100      	movs	r1, #0
 800293c:	2000      	movs	r0, #0
 800293e:	f7ff ff60 	bl	8002802 <send_cmd>
 8002942:	4603      	mov	r3, r0
 8002944:	2b01      	cmp	r3, #1
 8002946:	f040 808b 	bne.w	8002a60 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800294a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800294e:	f7ff fe3b 	bl	80025c8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002952:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002956:	2008      	movs	r0, #8
 8002958:	f7ff ff53 	bl	8002802 <send_cmd>
 800295c:	4603      	mov	r3, r0
 800295e:	2b01      	cmp	r3, #1
 8002960:	d151      	bne.n	8002a06 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e00d      	b.n	8002984 <USER_SPI_initialize+0xa4>
 8002968:	7bfc      	ldrb	r4, [r7, #15]
 800296a:	20ff      	movs	r0, #255	; 0xff
 800296c:	f7ff fe56 	bl	800261c <xchg_spi>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	4423      	add	r3, r4
 800297a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	3301      	adds	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d9ee      	bls.n	8002968 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800298a:	7abb      	ldrb	r3, [r7, #10]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d167      	bne.n	8002a60 <USER_SPI_initialize+0x180>
 8002990:	7afb      	ldrb	r3, [r7, #11]
 8002992:	2baa      	cmp	r3, #170	; 0xaa
 8002994:	d164      	bne.n	8002a60 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002996:	bf00      	nop
 8002998:	f7ff fe2a 	bl	80025f0 <SPI_Timer_Status>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <USER_SPI_initialize+0xd2>
 80029a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80029a6:	20a9      	movs	r0, #169	; 0xa9
 80029a8:	f7ff ff2b 	bl	8002802 <send_cmd>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f2      	bne.n	8002998 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80029b2:	f7ff fe1d 	bl	80025f0 <SPI_Timer_Status>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d051      	beq.n	8002a60 <USER_SPI_initialize+0x180>
 80029bc:	2100      	movs	r1, #0
 80029be:	203a      	movs	r0, #58	; 0x3a
 80029c0:	f7ff ff1f 	bl	8002802 <send_cmd>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d14a      	bne.n	8002a60 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
 80029ce:	e00d      	b.n	80029ec <USER_SPI_initialize+0x10c>
 80029d0:	7bfc      	ldrb	r4, [r7, #15]
 80029d2:	20ff      	movs	r0, #255	; 0xff
 80029d4:	f7ff fe22 	bl	800261c <xchg_spi>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	f107 0310 	add.w	r3, r7, #16
 80029e0:	4423      	add	r3, r4
 80029e2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	3301      	adds	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d9ee      	bls.n	80029d0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80029f2:	7a3b      	ldrb	r3, [r7, #8]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <USER_SPI_initialize+0x120>
 80029fc:	230c      	movs	r3, #12
 80029fe:	e000      	b.n	8002a02 <USER_SPI_initialize+0x122>
 8002a00:	2304      	movs	r3, #4
 8002a02:	737b      	strb	r3, [r7, #13]
 8002a04:	e02c      	b.n	8002a60 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002a06:	2100      	movs	r1, #0
 8002a08:	20a9      	movs	r0, #169	; 0xa9
 8002a0a:	f7ff fefa 	bl	8002802 <send_cmd>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d804      	bhi.n	8002a1e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002a14:	2302      	movs	r3, #2
 8002a16:	737b      	strb	r3, [r7, #13]
 8002a18:	23a9      	movs	r3, #169	; 0xa9
 8002a1a:	73bb      	strb	r3, [r7, #14]
 8002a1c:	e003      	b.n	8002a26 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002a1e:	2301      	movs	r3, #1
 8002a20:	737b      	strb	r3, [r7, #13]
 8002a22:	2301      	movs	r3, #1
 8002a24:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002a26:	bf00      	nop
 8002a28:	f7ff fde2 	bl	80025f0 <SPI_Timer_Status>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <USER_SPI_initialize+0x162>
 8002a32:	7bbb      	ldrb	r3, [r7, #14]
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fee3 	bl	8002802 <send_cmd>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f2      	bne.n	8002a28 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002a42:	f7ff fdd5 	bl	80025f0 <SPI_Timer_Status>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <USER_SPI_initialize+0x17c>
 8002a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a50:	2010      	movs	r0, #16
 8002a52:	f7ff fed6 	bl	8002802 <send_cmd>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <USER_SPI_initialize+0x180>
				ty = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <USER_SPI_initialize+0x1d4>)
 8002a62:	7b7b      	ldrb	r3, [r7, #13]
 8002a64:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002a66:	f7ff fe49 	bl	80026fc <despiselect>

	if (ty) {			/* OK */
 8002a6a:	7b7b      	ldrb	r3, [r7, #13]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d012      	beq.n	8002a96 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <USER_SPI_initialize+0x1d0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <USER_SPI_initialize+0x1d0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0210 	orr.w	r2, r2, #16
 8002a82:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <USER_SPI_initialize+0x1cc>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <USER_SPI_initialize+0x1cc>)
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e002      	b.n	8002a9c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <USER_SPI_initialize+0x1cc>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <USER_SPI_initialize+0x1cc>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	b2db      	uxtb	r3, r3
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000058 	.word	0x20000058
 8002ab0:	200005c0 	.word	0x200005c0
 8002ab4:	20000288 	.word	0x20000288

08002ab8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <USER_SPI_status+0x14>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e002      	b.n	8002ad2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <USER_SPI_status+0x28>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b2db      	uxtb	r3, r3
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000058 	.word	0x20000058

08002ae4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d102      	bne.n	8002b00 <USER_SPI_read+0x1c>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <USER_SPI_read+0x20>
 8002b00:	2304      	movs	r3, #4
 8002b02:	e04d      	b.n	8002ba0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002b04:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <USER_SPI_read+0xc4>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <USER_SPI_read+0x32>
 8002b12:	2303      	movs	r3, #3
 8002b14:	e044      	b.n	8002ba0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <USER_SPI_read+0xc8>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d102      	bne.n	8002b28 <USER_SPI_read+0x44>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	025b      	lsls	r3, r3, #9
 8002b26:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d111      	bne.n	8002b52 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	2011      	movs	r0, #17
 8002b32:	f7ff fe66 	bl	8002802 <send_cmd>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d129      	bne.n	8002b90 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b40:	68b8      	ldr	r0, [r7, #8]
 8002b42:	f7ff fe03 	bl	800274c <rcvr_datablock>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d021      	beq.n	8002b90 <USER_SPI_read+0xac>
			count = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	e01e      	b.n	8002b90 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	2012      	movs	r0, #18
 8002b56:	f7ff fe54 	bl	8002802 <send_cmd>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d117      	bne.n	8002b90 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b64:	68b8      	ldr	r0, [r7, #8]
 8002b66:	f7ff fdf1 	bl	800274c <rcvr_datablock>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <USER_SPI_read+0xa2>
				buff += 512;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b76:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ed      	bne.n	8002b60 <USER_SPI_read+0x7c>
 8002b84:	e000      	b.n	8002b88 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002b86:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002b88:	2100      	movs	r1, #0
 8002b8a:	200c      	movs	r0, #12
 8002b8c:	f7ff fe39 	bl	8002802 <send_cmd>
		}
	}
	despiselect();
 8002b90:	f7ff fdb4 	bl	80026fc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000058 	.word	0x20000058
 8002bac:	20000288 	.word	0x20000288

08002bb0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <USER_SPI_write+0x1c>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <USER_SPI_write+0x20>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	e063      	b.n	8002c98 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <USER_SPI_write+0xf0>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <USER_SPI_write+0x32>
 8002bde:	2303      	movs	r3, #3
 8002be0:	e05a      	b.n	8002c98 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <USER_SPI_write+0xf0>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <USER_SPI_write+0x44>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e051      	b.n	8002c98 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <USER_SPI_write+0xf4>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <USER_SPI_write+0x56>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	025b      	lsls	r3, r3, #9
 8002c04:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d110      	bne.n	8002c2e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	2018      	movs	r0, #24
 8002c10:	f7ff fdf7 	bl	8002802 <send_cmd>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d136      	bne.n	8002c88 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002c1a:	21fe      	movs	r1, #254	; 0xfe
 8002c1c:	68b8      	ldr	r0, [r7, #8]
 8002c1e:	f7ff fdbe 	bl	800279e <xmit_datablock>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d02f      	beq.n	8002c88 <USER_SPI_write+0xd8>
			count = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	e02c      	b.n	8002c88 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <USER_SPI_write+0xf4>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	f003 0306 	and.w	r3, r3, #6
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <USER_SPI_write+0x92>
 8002c3a:	6839      	ldr	r1, [r7, #0]
 8002c3c:	2097      	movs	r0, #151	; 0x97
 8002c3e:	f7ff fde0 	bl	8002802 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	2019      	movs	r0, #25
 8002c46:	f7ff fddc 	bl	8002802 <send_cmd>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d11b      	bne.n	8002c88 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002c50:	21fc      	movs	r1, #252	; 0xfc
 8002c52:	68b8      	ldr	r0, [r7, #8]
 8002c54:	f7ff fda3 	bl	800279e <xmit_datablock>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <USER_SPI_write+0xc4>
				buff += 512;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c64:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1ee      	bne.n	8002c50 <USER_SPI_write+0xa0>
 8002c72:	e000      	b.n	8002c76 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002c74:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002c76:	21fd      	movs	r1, #253	; 0xfd
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7ff fd90 	bl	800279e <xmit_datablock>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <USER_SPI_write+0xd8>
 8002c84:	2301      	movs	r3, #1
 8002c86:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002c88:	f7ff fd38 	bl	80026fc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	2300      	moveq	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000058 	.word	0x20000058
 8002ca4:	20000288 	.word	0x20000288

08002ca8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	603a      	str	r2, [r7, #0]
 8002cb2:	71fb      	strb	r3, [r7, #7]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <USER_SPI_ioctl+0x1a>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	e15a      	b.n	8002f78 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002cc2:	4baf      	ldr	r3, [pc, #700]	; (8002f80 <USER_SPI_ioctl+0x2d8>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <USER_SPI_ioctl+0x2c>
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e151      	b.n	8002f78 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002cda:	79bb      	ldrb	r3, [r7, #6]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	f200 8136 	bhi.w	8002f4e <USER_SPI_ioctl+0x2a6>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <USER_SPI_ioctl+0x40>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002cfd 	.word	0x08002cfd
 8002cec:	08002d11 	.word	0x08002d11
 8002cf0:	08002f4f 	.word	0x08002f4f
 8002cf4:	08002dbd 	.word	0x08002dbd
 8002cf8:	08002eb3 	.word	0x08002eb3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002cfc:	f7ff fd0c 	bl	8002718 <spiselect>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8127 	beq.w	8002f56 <USER_SPI_ioctl+0x2ae>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002d0e:	e122      	b.n	8002f56 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002d10:	2100      	movs	r1, #0
 8002d12:	2009      	movs	r0, #9
 8002d14:	f7ff fd75 	bl	8002802 <send_cmd>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 811d 	bne.w	8002f5a <USER_SPI_ioctl+0x2b2>
 8002d20:	f107 030c 	add.w	r3, r7, #12
 8002d24:	2110      	movs	r1, #16
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fd10 	bl	800274c <rcvr_datablock>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8113 	beq.w	8002f5a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002d34:	7b3b      	ldrb	r3, [r7, #12]
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d111      	bne.n	8002d62 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002d3e:	7d7b      	ldrb	r3, [r7, #21]
 8002d40:	461a      	mov	r2, r3
 8002d42:	7d3b      	ldrb	r3, [r7, #20]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	4413      	add	r3, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002d52:	4413      	add	r3, r2
 8002d54:	3301      	adds	r3, #1
 8002d56:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	029a      	lsls	r2, r3, #10
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e028      	b.n	8002db4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002d62:	7c7b      	ldrb	r3, [r7, #17]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	7dbb      	ldrb	r3, [r7, #22]
 8002d6c:	09db      	lsrs	r3, r3, #7
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	7d7b      	ldrb	r3, [r7, #21]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f003 0306 	and.w	r3, r3, #6
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	3302      	adds	r3, #2
 8002d86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002d8a:	7d3b      	ldrb	r3, [r7, #20]
 8002d8c:	099b      	lsrs	r3, r3, #6
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	441a      	add	r2, r3
 8002d98:	7cbb      	ldrb	r3, [r7, #18]
 8002d9a:	029b      	lsls	r3, r3, #10
 8002d9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002da0:	4413      	add	r3, r2
 8002da2:	3301      	adds	r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002da6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002daa:	3b09      	subs	r3, #9
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	409a      	lsls	r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002dba:	e0ce      	b.n	8002f5a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002dbc:	4b71      	ldr	r3, [pc, #452]	; (8002f84 <USER_SPI_ioctl+0x2dc>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d031      	beq.n	8002e2c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002dc8:	2100      	movs	r1, #0
 8002dca:	208d      	movs	r0, #141	; 0x8d
 8002dcc:	f7ff fd19 	bl	8002802 <send_cmd>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 80c3 	bne.w	8002f5e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002dd8:	20ff      	movs	r0, #255	; 0xff
 8002dda:	f7ff fc1f 	bl	800261c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002dde:	f107 030c 	add.w	r3, r7, #12
 8002de2:	2110      	movs	r1, #16
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fcb1 	bl	800274c <rcvr_datablock>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80b6 	beq.w	8002f5e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002df2:	2330      	movs	r3, #48	; 0x30
 8002df4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002df8:	e007      	b.n	8002e0a <USER_SPI_ioctl+0x162>
 8002dfa:	20ff      	movs	r0, #255	; 0xff
 8002dfc:	f7ff fc0e 	bl	800261c <xchg_spi>
 8002e00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e04:	3b01      	subs	r3, #1
 8002e06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002e0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f3      	bne.n	8002dfa <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002e12:	7dbb      	ldrb	r3, [r7, #22]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2310      	movs	r3, #16
 8002e1c:	fa03 f202 	lsl.w	r2, r3, r2
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002e2a:	e098      	b.n	8002f5e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2009      	movs	r0, #9
 8002e30:	f7ff fce7 	bl	8002802 <send_cmd>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 8091 	bne.w	8002f5e <USER_SPI_ioctl+0x2b6>
 8002e3c:	f107 030c 	add.w	r3, r7, #12
 8002e40:	2110      	movs	r1, #16
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fc82 	bl	800274c <rcvr_datablock>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8087 	beq.w	8002f5e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002e50:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <USER_SPI_ioctl+0x2dc>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d012      	beq.n	8002e82 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002e5c:	7dbb      	ldrb	r3, [r7, #22]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002e64:	7dfa      	ldrb	r2, [r7, #23]
 8002e66:	09d2      	lsrs	r2, r2, #7
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	7e7b      	ldrb	r3, [r7, #25]
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e013      	b.n	8002eaa <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002e82:	7dbb      	ldrb	r3, [r7, #22]
 8002e84:	109b      	asrs	r3, r3, #2
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	7dfa      	ldrb	r2, [r7, #23]
 8002e90:	00d2      	lsls	r2, r2, #3
 8002e92:	f002 0218 	and.w	r2, r2, #24
 8002e96:	7df9      	ldrb	r1, [r7, #23]
 8002e98:	0949      	lsrs	r1, r1, #5
 8002e9a:	b2c9      	uxtb	r1, r1
 8002e9c:	440a      	add	r2, r1
 8002e9e:	3201      	adds	r2, #1
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002eb0:	e055      	b.n	8002f5e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002eb2:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <USER_SPI_ioctl+0x2dc>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	f003 0306 	and.w	r3, r3, #6
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d051      	beq.n	8002f62 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002ebe:	f107 020c 	add.w	r2, r7, #12
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	210b      	movs	r1, #11
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff feee 	bl	8002ca8 <USER_SPI_ioctl>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d149      	bne.n	8002f66 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002ed2:	7b3b      	ldrb	r3, [r7, #12]
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <USER_SPI_ioctl+0x23e>
 8002edc:	7dbb      	ldrb	r3, [r7, #22]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d041      	beq.n	8002f6a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <USER_SPI_ioctl+0x2dc>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	025b      	lsls	r3, r3, #9
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	025b      	lsls	r3, r3, #9
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002f0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f10:	2020      	movs	r0, #32
 8002f12:	f7ff fc76 	bl	8002802 <send_cmd>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d128      	bne.n	8002f6e <USER_SPI_ioctl+0x2c6>
 8002f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f1e:	2021      	movs	r0, #33	; 0x21
 8002f20:	f7ff fc6f 	bl	8002802 <send_cmd>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d121      	bne.n	8002f6e <USER_SPI_ioctl+0x2c6>
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2026      	movs	r0, #38	; 0x26
 8002f2e:	f7ff fc68 	bl	8002802 <send_cmd>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11a      	bne.n	8002f6e <USER_SPI_ioctl+0x2c6>
 8002f38:	f247 5030 	movw	r0, #30000	; 0x7530
 8002f3c:	f7ff fbbb 	bl	80026b6 <wait_ready>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d013      	beq.n	8002f6e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002f46:	2300      	movs	r3, #0
 8002f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002f4c:	e00f      	b.n	8002f6e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002f4e:	2304      	movs	r3, #4
 8002f50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002f54:	e00c      	b.n	8002f70 <USER_SPI_ioctl+0x2c8>
		break;
 8002f56:	bf00      	nop
 8002f58:	e00a      	b.n	8002f70 <USER_SPI_ioctl+0x2c8>
		break;
 8002f5a:	bf00      	nop
 8002f5c:	e008      	b.n	8002f70 <USER_SPI_ioctl+0x2c8>
		break;
 8002f5e:	bf00      	nop
 8002f60:	e006      	b.n	8002f70 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002f62:	bf00      	nop
 8002f64:	e004      	b.n	8002f70 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002f66:	bf00      	nop
 8002f68:	e002      	b.n	8002f70 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002f6a:	bf00      	nop
 8002f6c:	e000      	b.n	8002f70 <USER_SPI_ioctl+0x2c8>
		break;
 8002f6e:	bf00      	nop
	}

	despiselect();
 8002f70:	f7ff fbc4 	bl	80026fc <despiselect>

	return res;
 8002f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3730      	adds	r7, #48	; 0x30
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000058 	.word	0x20000058
 8002f84:	20000288 	.word	0x20000288

08002f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f8c:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f8e:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f90:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f94:	e002      	b.n	8002f9c <LoopCopyDataInit>

08002f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f9a:	3304      	adds	r3, #4

08002f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa0:	d3f9      	bcc.n	8002f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fa4:	4c0b      	ldr	r4, [pc, #44]	; (8002fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fa8:	e001      	b.n	8002fae <LoopFillZerobss>

08002faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fac:	3204      	adds	r2, #4

08002fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb0:	d3fb      	bcc.n	8002faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fb2:	f7ff f97b 	bl	80022ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fb6:	f007 fa07 	bl	800a3c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fba:	f7fe fbe5 	bl	8001788 <main>
  bx  lr    
 8002fbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fc8:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8002fcc:	0800fef0 	.word	0x0800fef0
  ldr r2, =_sbss
 8002fd0:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8002fd4:	20000b28 	.word	0x20000b28

08002fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fd8:	e7fe      	b.n	8002fd8 <ADC_IRQHandler>
	...

08002fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_Init+0x40>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	; (800301c <HAL_Init+0x40>)
 8002fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_Init+0x40>)
 8002ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a07      	ldr	r2, [pc, #28]	; (800301c <HAL_Init+0x40>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003004:	2003      	movs	r0, #3
 8003006:	f000 fd57 	bl	8003ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800300a:	200f      	movs	r0, #15
 800300c:	f000 f808 	bl	8003020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003010:	f7ff f82a 	bl	8002068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00

08003020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_InitTick+0x54>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_InitTick+0x58>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003036:	fbb3 f3f1 	udiv	r3, r3, r1
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fd6f 	bl	8003b22 <HAL_SYSTICK_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e00e      	b.n	800306c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d80a      	bhi.n	800306a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003054:	2200      	movs	r2, #0
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	f000 fd37 	bl	8003ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003060:	4a06      	ldr	r2, [pc, #24]	; (800307c <HAL_InitTick+0x5c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000054 	.word	0x20000054
 8003078:	20000060 	.word	0x20000060
 800307c:	2000005c 	.word	0x2000005c

08003080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_IncTick+0x20>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_IncTick+0x24>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_IncTick+0x24>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000060 	.word	0x20000060
 80030a4:	200006ac 	.word	0x200006ac

080030a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_GetTick+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	200006ac 	.word	0x200006ac

080030c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff ffee 	bl	80030a8 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d005      	beq.n	80030e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_Delay+0x44>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030e6:	bf00      	nop
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8f7      	bhi.n	80030e8 <HAL_Delay+0x28>
  {
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000060 	.word	0x20000060

08003108 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e033      	b.n	8003186 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe f950 	bl	80013cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	d118      	bne.n	8003178 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800314e:	f023 0302 	bic.w	r3, r3, #2
 8003152:	f043 0202 	orr.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fa5e 	bl	800361c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f023 0303 	bic.w	r3, r3, #3
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
 8003176:	e001      	b.n	800317c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_Start_DMA+0x1e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e0e9      	b.n	8003382 <HAL_ADC_Start_DMA+0x1f2>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d018      	beq.n	80031f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031d4:	4b6d      	ldr	r3, [pc, #436]	; (800338c <HAL_ADC_Start_DMA+0x1fc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a6d      	ldr	r2, [pc, #436]	; (8003390 <HAL_ADC_Start_DMA+0x200>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	0c9a      	lsrs	r2, r3, #18
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031e8:	e002      	b.n	80031f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f9      	bne.n	80031ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003204:	d107      	bne.n	8003216 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003214:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	f040 80a1 	bne.w	8003368 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003250:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	d106      	bne.n	8003274 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f023 0206 	bic.w	r2, r3, #6
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	645a      	str	r2, [r3, #68]	; 0x44
 8003272:	e002      	b.n	800327a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003282:	4b44      	ldr	r3, [pc, #272]	; (8003394 <HAL_ADC_Start_DMA+0x204>)
 8003284:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	4a43      	ldr	r2, [pc, #268]	; (8003398 <HAL_ADC_Start_DMA+0x208>)
 800328c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	4a42      	ldr	r2, [pc, #264]	; (800339c <HAL_ADC_Start_DMA+0x20c>)
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	4a41      	ldr	r2, [pc, #260]	; (80033a0 <HAL_ADC_Start_DMA+0x210>)
 800329c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	334c      	adds	r3, #76	; 0x4c
 80032d2:	4619      	mov	r1, r3
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f000 fcde 	bl	8003c98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d12a      	bne.n	800333e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <HAL_ADC_Start_DMA+0x214>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d015      	beq.n	800331e <HAL_ADC_Start_DMA+0x18e>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <HAL_ADC_Start_DMA+0x218>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d105      	bne.n	8003308 <HAL_ADC_Start_DMA+0x178>
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_ADC_Start_DMA+0x204>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a27      	ldr	r2, [pc, #156]	; (80033ac <HAL_ADC_Start_DMA+0x21c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d136      	bne.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_ADC_Start_DMA+0x204>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d130      	bne.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d129      	bne.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	e020      	b.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_ADC_Start_DMA+0x214>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d11b      	bne.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d114      	bne.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	e00b      	b.n	8003380 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f043 0210 	orr.w	r2, r3, #16
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000054 	.word	0x20000054
 8003390:	431bde83 	.word	0x431bde83
 8003394:	40012300 	.word	0x40012300
 8003398:	08003815 	.word	0x08003815
 800339c:	080038cf 	.word	0x080038cf
 80033a0:	080038eb 	.word	0x080038eb
 80033a4:	40012000 	.word	0x40012000
 80033a8:	40012100 	.word	0x40012100
 80033ac:	40012200 	.word	0x40012200

080033b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x1c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e105      	b.n	8003600 <HAL_ADC_ConfigChannel+0x228>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b09      	cmp	r3, #9
 8003402:	d925      	bls.n	8003450 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68d9      	ldr	r1, [r3, #12]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	3b1e      	subs	r3, #30
 800341a:	2207      	movs	r2, #7
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43da      	mvns	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	400a      	ands	r2, r1
 8003428:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68d9      	ldr	r1, [r3, #12]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	4618      	mov	r0, r3
 800343c:	4603      	mov	r3, r0
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4403      	add	r3, r0
 8003442:	3b1e      	subs	r3, #30
 8003444:	409a      	lsls	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	e022      	b.n	8003496 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6919      	ldr	r1, [r3, #16]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	2207      	movs	r2, #7
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	400a      	ands	r2, r1
 8003472:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6919      	ldr	r1, [r3, #16]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	4618      	mov	r0, r3
 8003486:	4603      	mov	r3, r0
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4403      	add	r3, r0
 800348c:	409a      	lsls	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b06      	cmp	r3, #6
 800349c:	d824      	bhi.n	80034e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	3b05      	subs	r3, #5
 80034b0:	221f      	movs	r2, #31
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	400a      	ands	r2, r1
 80034be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	4618      	mov	r0, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	3b05      	subs	r3, #5
 80034da:	fa00 f203 	lsl.w	r2, r0, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34
 80034e6:	e04c      	b.n	8003582 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	d824      	bhi.n	800353a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	3b23      	subs	r3, #35	; 0x23
 8003502:	221f      	movs	r2, #31
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43da      	mvns	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	400a      	ands	r2, r1
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	4618      	mov	r0, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	3b23      	subs	r3, #35	; 0x23
 800352c:	fa00 f203 	lsl.w	r2, r0, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
 8003538:	e023      	b.n	8003582 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	3b41      	subs	r3, #65	; 0x41
 800354c:	221f      	movs	r2, #31
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	400a      	ands	r2, r1
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	4618      	mov	r0, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	3b41      	subs	r3, #65	; 0x41
 8003576:	fa00 f203 	lsl.w	r2, r0, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <HAL_ADC_ConfigChannel+0x234>)
 8003584:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_ADC_ConfigChannel+0x238>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x1cc>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b12      	cmp	r3, #18
 8003596:	d105      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_ADC_ConfigChannel+0x238>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d123      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x21e>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d003      	beq.n	80035be <HAL_ADC_ConfigChannel+0x1e6>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b11      	cmp	r3, #17
 80035bc:	d11b      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d111      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <HAL_ADC_ConfigChannel+0x23c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_ADC_ConfigChannel+0x240>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	0c9a      	lsrs	r2, r3, #18
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035e8:	e002      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f9      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	40012300 	.word	0x40012300
 8003610:	40012000 	.word	0x40012000
 8003614:	20000054 	.word	0x20000054
 8003618:	431bde83 	.word	0x431bde83

0800361c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003624:	4b79      	ldr	r3, [pc, #484]	; (800380c <ADC_Init+0x1f0>)
 8003626:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	021a      	lsls	r2, r3, #8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	4a58      	ldr	r2, [pc, #352]	; (8003810 <ADC_Init+0x1f4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6899      	ldr	r1, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	e00f      	b.n	800371a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003718:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0202 	bic.w	r2, r2, #2
 8003728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6899      	ldr	r1, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7e1b      	ldrb	r3, [r3, #24]
 8003734:	005a      	lsls	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003756:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003766:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6859      	ldr	r1, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	3b01      	subs	r3, #1
 8003774:	035a      	lsls	r2, r3, #13
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	e007      	b.n	8003790 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	051a      	lsls	r2, r3, #20
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6899      	ldr	r1, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037d2:	025a      	lsls	r2, r3, #9
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6899      	ldr	r1, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	029a      	lsls	r2, r3, #10
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40012300 	.word	0x40012300
 8003810:	0f000001 	.word	0x0f000001

08003814 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800382a:	2b00      	cmp	r3, #0
 800382c:	d13c      	bne.n	80038a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d12b      	bne.n	80038a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800384c:	2b00      	cmp	r3, #0
 800384e:	d127      	bne.n	80038a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800385a:	2b00      	cmp	r3, #0
 800385c:	d006      	beq.n	800386c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003868:	2b00      	cmp	r3, #0
 800386a:	d119      	bne.n	80038a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0220 	bic.w	r2, r2, #32
 800387a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f7fe fadf 	bl	8001e64 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038a6:	e00e      	b.n	80038c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7ff fd85 	bl	80033c4 <HAL_ADC_ErrorCallback>
}
 80038ba:	e004      	b.n	80038c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7ff fd67 	bl	80033b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2240      	movs	r2, #64	; 0x40
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff fd5a 	bl	80033c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <__NVIC_SetPriorityGrouping+0x44>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003934:	4013      	ands	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800394a:	4a04      	ldr	r2, [pc, #16]	; (800395c <__NVIC_SetPriorityGrouping+0x44>)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	60d3      	str	r3, [r2, #12]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <__NVIC_GetPriorityGrouping+0x18>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	f003 0307 	and.w	r3, r3, #7
}
 800396e:	4618      	mov	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	2b00      	cmp	r3, #0
 800398c:	db0b      	blt.n	80039a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	f003 021f 	and.w	r2, r3, #31
 8003994:	4907      	ldr	r1, [pc, #28]	; (80039b4 <__NVIC_EnableIRQ+0x38>)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2001      	movs	r0, #1
 800399e:	fa00 f202 	lsl.w	r2, r0, r2
 80039a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	e000e100 	.word	0xe000e100

080039b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	6039      	str	r1, [r7, #0]
 80039c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	db0a      	blt.n	80039e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	490c      	ldr	r1, [pc, #48]	; (8003a04 <__NVIC_SetPriority+0x4c>)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	0112      	lsls	r2, r2, #4
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	440b      	add	r3, r1
 80039dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039e0:	e00a      	b.n	80039f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	4908      	ldr	r1, [pc, #32]	; (8003a08 <__NVIC_SetPriority+0x50>)
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	3b04      	subs	r3, #4
 80039f0:	0112      	lsls	r2, r2, #4
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	440b      	add	r3, r1
 80039f6:	761a      	strb	r2, [r3, #24]
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	e000e100 	.word	0xe000e100
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	; 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f1c3 0307 	rsb	r3, r3, #7
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	bf28      	it	cs
 8003a2a:	2304      	movcs	r3, #4
 8003a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2b06      	cmp	r3, #6
 8003a34:	d902      	bls.n	8003a3c <NVIC_EncodePriority+0x30>
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3b03      	subs	r3, #3
 8003a3a:	e000      	b.n	8003a3e <NVIC_EncodePriority+0x32>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a40:	f04f 32ff 	mov.w	r2, #4294967295
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	401a      	ands	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a54:	f04f 31ff 	mov.w	r1, #4294967295
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	43d9      	mvns	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a64:	4313      	orrs	r3, r2
         );
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3724      	adds	r7, #36	; 0x24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a84:	d301      	bcc.n	8003a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a86:	2301      	movs	r3, #1
 8003a88:	e00f      	b.n	8003aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <SysTick_Config+0x40>)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a92:	210f      	movs	r1, #15
 8003a94:	f04f 30ff 	mov.w	r0, #4294967295
 8003a98:	f7ff ff8e 	bl	80039b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <SysTick_Config+0x40>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aa2:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <SysTick_Config+0x40>)
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	e000e010 	.word	0xe000e010

08003ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff ff29 	bl	8003918 <__NVIC_SetPriorityGrouping>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b086      	sub	sp, #24
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae0:	f7ff ff3e 	bl	8003960 <__NVIC_GetPriorityGrouping>
 8003ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	6978      	ldr	r0, [r7, #20]
 8003aec:	f7ff ff8e 	bl	8003a0c <NVIC_EncodePriority>
 8003af0:	4602      	mov	r2, r0
 8003af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af6:	4611      	mov	r1, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff5d 	bl	80039b8 <__NVIC_SetPriority>
}
 8003afe:	bf00      	nop
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff31 	bl	800397c <__NVIC_EnableIRQ>
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff ffa2 	bl	8003a74 <SysTick_Config>
 8003b30:	4603      	mov	r3, r0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b48:	f7ff faae 	bl	80030a8 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e099      	b.n	8003c8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b78:	e00f      	b.n	8003b9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b7a:	f7ff fa95 	bl	80030a8 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b05      	cmp	r3, #5
 8003b86:	d908      	bls.n	8003b9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2203      	movs	r2, #3
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e078      	b.n	8003c8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e8      	bne.n	8003b7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <HAL_DMA_Init+0x158>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d107      	bne.n	8003c04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0307 	bic.w	r3, r3, #7
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d117      	bne.n	8003c5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00e      	beq.n	8003c5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fa6f 	bl	8004124 <DMA_CheckFifoParam>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e016      	b.n	8003c8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa26 	bl	80040b8 <DMA_CalcBaseAndBitshift>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	223f      	movs	r2, #63	; 0x3f
 8003c76:	409a      	lsls	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	f010803f 	.word	0xf010803f

08003c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_DMA_Start_IT+0x26>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e040      	b.n	8003d40 <HAL_DMA_Start_IT+0xa8>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d12f      	bne.n	8003d32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f9b8 	bl	800405c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf0:	223f      	movs	r2, #63	; 0x3f
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0216 	orr.w	r2, r2, #22
 8003d06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0208 	orr.w	r2, r2, #8
 8003d1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e005      	b.n	8003d3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d54:	4b92      	ldr	r3, [pc, #584]	; (8003fa0 <HAL_DMA_IRQHandler+0x258>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a92      	ldr	r2, [pc, #584]	; (8003fa4 <HAL_DMA_IRQHandler+0x25c>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	0a9b      	lsrs	r3, r3, #10
 8003d60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d72:	2208      	movs	r2, #8
 8003d74:	409a      	lsls	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01a      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d013      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0204 	bic.w	r2, r2, #4
 8003d9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	2208      	movs	r2, #8
 8003da2:	409a      	lsls	r2, r3
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dac:	f043 0201 	orr.w	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db8:	2201      	movs	r2, #1
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d012      	beq.n	8003dea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	f043 0202 	orr.w	r2, r3, #2
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dee:	2204      	movs	r2, #4
 8003df0:	409a      	lsls	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d012      	beq.n	8003e20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00b      	beq.n	8003e20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	f043 0204 	orr.w	r2, r3, #4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e24:	2210      	movs	r2, #16
 8003e26:	409a      	lsls	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d043      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d03c      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	2210      	movs	r2, #16
 8003e44:	409a      	lsls	r2, r3
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d018      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d108      	bne.n	8003e78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d024      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4798      	blx	r3
 8003e76:	e01f      	b.n	8003eb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01b      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	4798      	blx	r3
 8003e88:	e016      	b.n	8003eb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d107      	bne.n	8003ea8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0208 	bic.w	r2, r2, #8
 8003ea6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 808e 	beq.w	8003fe6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8086 	beq.w	8003fe6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ede:	2220      	movs	r2, #32
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d136      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0216 	bic.w	r2, r2, #22
 8003f00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d103      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x1da>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0208 	bic.w	r2, r2, #8
 8003f30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f36:	223f      	movs	r2, #63	; 0x3f
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d07d      	beq.n	8004052 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
        }
        return;
 8003f5e:	e078      	b.n	8004052 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d01c      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d108      	bne.n	8003f8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d030      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4798      	blx	r3
 8003f8c:	e02b      	b.n	8003fe6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d027      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4798      	blx	r3
 8003f9e:	e022      	b.n	8003fe6 <HAL_DMA_IRQHandler+0x29e>
 8003fa0:	20000054 	.word	0x20000054
 8003fa4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10f      	bne.n	8003fd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0210 	bic.w	r2, r2, #16
 8003fc4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d032      	beq.n	8004054 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d022      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2205      	movs	r2, #5
 8003ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3301      	adds	r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	429a      	cmp	r2, r3
 800401c:	d307      	bcc.n	800402e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f2      	bne.n	8004012 <HAL_DMA_IRQHandler+0x2ca>
 800402c:	e000      	b.n	8004030 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800402e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
 8004050:	e000      	b.n	8004054 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004052:	bf00      	nop
    }
  }
}
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop

0800405c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004078:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d108      	bne.n	800409c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800409a:	e007      	b.n	80040ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	60da      	str	r2, [r3, #12]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	3b10      	subs	r3, #16
 80040c8:	4a14      	ldr	r2, [pc, #80]	; (800411c <DMA_CalcBaseAndBitshift+0x64>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040d2:	4a13      	ldr	r2, [pc, #76]	; (8004120 <DMA_CalcBaseAndBitshift+0x68>)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d909      	bls.n	80040fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	1d1a      	adds	r2, r3, #4
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	659a      	str	r2, [r3, #88]	; 0x58
 80040f8:	e007      	b.n	800410a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	aaaaaaab 	.word	0xaaaaaaab
 8004120:	0800f934 	.word	0x0800f934

08004124 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d11f      	bne.n	800417e <DMA_CheckFifoParam+0x5a>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d856      	bhi.n	80041f2 <DMA_CheckFifoParam+0xce>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <DMA_CheckFifoParam+0x28>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	0800415d 	.word	0x0800415d
 8004150:	0800416f 	.word	0x0800416f
 8004154:	0800415d 	.word	0x0800415d
 8004158:	080041f3 	.word	0x080041f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d046      	beq.n	80041f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800416c:	e043      	b.n	80041f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004176:	d140      	bne.n	80041fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417c:	e03d      	b.n	80041fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004186:	d121      	bne.n	80041cc <DMA_CheckFifoParam+0xa8>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d837      	bhi.n	80041fe <DMA_CheckFifoParam+0xda>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <DMA_CheckFifoParam+0x70>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041a5 	.word	0x080041a5
 8004198:	080041ab 	.word	0x080041ab
 800419c:	080041a5 	.word	0x080041a5
 80041a0:	080041bd 	.word	0x080041bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      break;
 80041a8:	e030      	b.n	800420c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d025      	beq.n	8004202 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ba:	e022      	b.n	8004202 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041c4:	d11f      	bne.n	8004206 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041ca:	e01c      	b.n	8004206 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d903      	bls.n	80041da <DMA_CheckFifoParam+0xb6>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d003      	beq.n	80041e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041d8:	e018      	b.n	800420c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
      break;
 80041de:	e015      	b.n	800420c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00e      	beq.n	800420a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      break;
 80041f0:	e00b      	b.n	800420a <DMA_CheckFifoParam+0xe6>
      break;
 80041f2:	bf00      	nop
 80041f4:	e00a      	b.n	800420c <DMA_CheckFifoParam+0xe8>
      break;
 80041f6:	bf00      	nop
 80041f8:	e008      	b.n	800420c <DMA_CheckFifoParam+0xe8>
      break;
 80041fa:	bf00      	nop
 80041fc:	e006      	b.n	800420c <DMA_CheckFifoParam+0xe8>
      break;
 80041fe:	bf00      	nop
 8004200:	e004      	b.n	800420c <DMA_CheckFifoParam+0xe8>
      break;
 8004202:	bf00      	nop
 8004204:	e002      	b.n	800420c <DMA_CheckFifoParam+0xe8>
      break;   
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <DMA_CheckFifoParam+0xe8>
      break;
 800420a:	bf00      	nop
    }
  } 
  
  return status; 
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop

0800421c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800422e:	2300      	movs	r3, #0
 8004230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	e16b      	b.n	8004510 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004238:	2201      	movs	r2, #1
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4013      	ands	r3, r2
 800424a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	429a      	cmp	r2, r3
 8004252:	f040 815a 	bne.w	800450a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b01      	cmp	r3, #1
 8004260:	d005      	beq.n	800426e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800426a:	2b02      	cmp	r3, #2
 800426c:	d130      	bne.n	80042d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	2203      	movs	r2, #3
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4313      	orrs	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042a4:	2201      	movs	r2, #1
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4013      	ands	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 0201 	and.w	r2, r3, #1
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d017      	beq.n	800430c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	2203      	movs	r2, #3
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4313      	orrs	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d123      	bne.n	8004360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	08da      	lsrs	r2, r3, #3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3208      	adds	r2, #8
 8004320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	220f      	movs	r2, #15
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	08da      	lsrs	r2, r3, #3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3208      	adds	r2, #8
 800435a:	69b9      	ldr	r1, [r7, #24]
 800435c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	2203      	movs	r2, #3
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	4013      	ands	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 0203 	and.w	r2, r3, #3
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4313      	orrs	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80b4 	beq.w	800450a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	4b60      	ldr	r3, [pc, #384]	; (8004528 <HAL_GPIO_Init+0x30c>)
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	4a5f      	ldr	r2, [pc, #380]	; (8004528 <HAL_GPIO_Init+0x30c>)
 80043ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b0:	6453      	str	r3, [r2, #68]	; 0x44
 80043b2:	4b5d      	ldr	r3, [pc, #372]	; (8004528 <HAL_GPIO_Init+0x30c>)
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043be:	4a5b      	ldr	r2, [pc, #364]	; (800452c <HAL_GPIO_Init+0x310>)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	089b      	lsrs	r3, r3, #2
 80043c4:	3302      	adds	r3, #2
 80043c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	220f      	movs	r2, #15
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a52      	ldr	r2, [pc, #328]	; (8004530 <HAL_GPIO_Init+0x314>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d02b      	beq.n	8004442 <HAL_GPIO_Init+0x226>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a51      	ldr	r2, [pc, #324]	; (8004534 <HAL_GPIO_Init+0x318>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d025      	beq.n	800443e <HAL_GPIO_Init+0x222>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a50      	ldr	r2, [pc, #320]	; (8004538 <HAL_GPIO_Init+0x31c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01f      	beq.n	800443a <HAL_GPIO_Init+0x21e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a4f      	ldr	r2, [pc, #316]	; (800453c <HAL_GPIO_Init+0x320>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d019      	beq.n	8004436 <HAL_GPIO_Init+0x21a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a4e      	ldr	r2, [pc, #312]	; (8004540 <HAL_GPIO_Init+0x324>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <HAL_GPIO_Init+0x216>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a4d      	ldr	r2, [pc, #308]	; (8004544 <HAL_GPIO_Init+0x328>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00d      	beq.n	800442e <HAL_GPIO_Init+0x212>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a4c      	ldr	r2, [pc, #304]	; (8004548 <HAL_GPIO_Init+0x32c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d007      	beq.n	800442a <HAL_GPIO_Init+0x20e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a4b      	ldr	r2, [pc, #300]	; (800454c <HAL_GPIO_Init+0x330>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d101      	bne.n	8004426 <HAL_GPIO_Init+0x20a>
 8004422:	2307      	movs	r3, #7
 8004424:	e00e      	b.n	8004444 <HAL_GPIO_Init+0x228>
 8004426:	2308      	movs	r3, #8
 8004428:	e00c      	b.n	8004444 <HAL_GPIO_Init+0x228>
 800442a:	2306      	movs	r3, #6
 800442c:	e00a      	b.n	8004444 <HAL_GPIO_Init+0x228>
 800442e:	2305      	movs	r3, #5
 8004430:	e008      	b.n	8004444 <HAL_GPIO_Init+0x228>
 8004432:	2304      	movs	r3, #4
 8004434:	e006      	b.n	8004444 <HAL_GPIO_Init+0x228>
 8004436:	2303      	movs	r3, #3
 8004438:	e004      	b.n	8004444 <HAL_GPIO_Init+0x228>
 800443a:	2302      	movs	r3, #2
 800443c:	e002      	b.n	8004444 <HAL_GPIO_Init+0x228>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_GPIO_Init+0x228>
 8004442:	2300      	movs	r3, #0
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	f002 0203 	and.w	r2, r2, #3
 800444a:	0092      	lsls	r2, r2, #2
 800444c:	4093      	lsls	r3, r2
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004454:	4935      	ldr	r1, [pc, #212]	; (800452c <HAL_GPIO_Init+0x310>)
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	3302      	adds	r3, #2
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004462:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <HAL_GPIO_Init+0x334>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004486:	4a32      	ldr	r2, [pc, #200]	; (8004550 <HAL_GPIO_Init+0x334>)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800448c:	4b30      	ldr	r3, [pc, #192]	; (8004550 <HAL_GPIO_Init+0x334>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044b0:	4a27      	ldr	r2, [pc, #156]	; (8004550 <HAL_GPIO_Init+0x334>)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044b6:	4b26      	ldr	r3, [pc, #152]	; (8004550 <HAL_GPIO_Init+0x334>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	43db      	mvns	r3, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044da:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <HAL_GPIO_Init+0x334>)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_GPIO_Init+0x334>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004504:	4a12      	ldr	r2, [pc, #72]	; (8004550 <HAL_GPIO_Init+0x334>)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	3301      	adds	r3, #1
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	f67f ae90 	bls.w	8004238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	3724      	adds	r7, #36	; 0x24
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800
 800452c:	40013800 	.word	0x40013800
 8004530:	40020000 	.word	0x40020000
 8004534:	40020400 	.word	0x40020400
 8004538:	40020800 	.word	0x40020800
 800453c:	40020c00 	.word	0x40020c00
 8004540:	40021000 	.word	0x40021000
 8004544:	40021400 	.word	0x40021400
 8004548:	40021800 	.word	0x40021800
 800454c:	40021c00 	.word	0x40021c00
 8004550:	40013c00 	.word	0x40013c00

08004554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	807b      	strh	r3, [r7, #2]
 8004560:	4613      	mov	r3, r2
 8004562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004564:	787b      	ldrb	r3, [r7, #1]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800456a:	887a      	ldrh	r2, [r7, #2]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004570:	e003      	b.n	800457a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004572:	887b      	ldrh	r3, [r7, #2]
 8004574:	041a      	lsls	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	619a      	str	r2, [r3, #24]
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e12b      	b.n	80047f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fd f86c 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	; 0x24
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045ec:	f001 fcdc 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 80045f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4a81      	ldr	r2, [pc, #516]	; (80047fc <HAL_I2C_Init+0x274>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d807      	bhi.n	800460c <HAL_I2C_Init+0x84>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a80      	ldr	r2, [pc, #512]	; (8004800 <HAL_I2C_Init+0x278>)
 8004600:	4293      	cmp	r3, r2
 8004602:	bf94      	ite	ls
 8004604:	2301      	movls	r3, #1
 8004606:	2300      	movhi	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e006      	b.n	800461a <HAL_I2C_Init+0x92>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a7d      	ldr	r2, [pc, #500]	; (8004804 <HAL_I2C_Init+0x27c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	bf94      	ite	ls
 8004614:	2301      	movls	r3, #1
 8004616:	2300      	movhi	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0e7      	b.n	80047f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4a78      	ldr	r2, [pc, #480]	; (8004808 <HAL_I2C_Init+0x280>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	0c9b      	lsrs	r3, r3, #18
 800462c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a6a      	ldr	r2, [pc, #424]	; (80047fc <HAL_I2C_Init+0x274>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d802      	bhi.n	800465c <HAL_I2C_Init+0xd4>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	3301      	adds	r3, #1
 800465a:	e009      	b.n	8004670 <HAL_I2C_Init+0xe8>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	4a69      	ldr	r2, [pc, #420]	; (800480c <HAL_I2C_Init+0x284>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	099b      	lsrs	r3, r3, #6
 800466e:	3301      	adds	r3, #1
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	430b      	orrs	r3, r1
 8004676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004682:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	495c      	ldr	r1, [pc, #368]	; (80047fc <HAL_I2C_Init+0x274>)
 800468c:	428b      	cmp	r3, r1
 800468e:	d819      	bhi.n	80046c4 <HAL_I2C_Init+0x13c>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1e59      	subs	r1, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	fbb1 f3f3 	udiv	r3, r1, r3
 800469e:	1c59      	adds	r1, r3, #1
 80046a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046a4:	400b      	ands	r3, r1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_I2C_Init+0x138>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1e59      	subs	r1, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046b8:	3301      	adds	r3, #1
 80046ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046be:	e051      	b.n	8004764 <HAL_I2C_Init+0x1dc>
 80046c0:	2304      	movs	r3, #4
 80046c2:	e04f      	b.n	8004764 <HAL_I2C_Init+0x1dc>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d111      	bne.n	80046f0 <HAL_I2C_Init+0x168>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1e58      	subs	r0, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6859      	ldr	r1, [r3, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	440b      	add	r3, r1
 80046da:	fbb0 f3f3 	udiv	r3, r0, r3
 80046de:	3301      	adds	r3, #1
 80046e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e012      	b.n	8004716 <HAL_I2C_Init+0x18e>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1e58      	subs	r0, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	0099      	lsls	r1, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	fbb0 f3f3 	udiv	r3, r0, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_I2C_Init+0x196>
 800471a:	2301      	movs	r3, #1
 800471c:	e022      	b.n	8004764 <HAL_I2C_Init+0x1dc>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10e      	bne.n	8004744 <HAL_I2C_Init+0x1bc>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1e58      	subs	r0, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	440b      	add	r3, r1
 8004734:	fbb0 f3f3 	udiv	r3, r0, r3
 8004738:	3301      	adds	r3, #1
 800473a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004742:	e00f      	b.n	8004764 <HAL_I2C_Init+0x1dc>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1e58      	subs	r0, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	0099      	lsls	r1, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	fbb0 f3f3 	udiv	r3, r0, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	6809      	ldr	r1, [r1, #0]
 8004768:	4313      	orrs	r3, r2
 800476a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6911      	ldr	r1, [r2, #16]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68d2      	ldr	r2, [r2, #12]
 800479e:	4311      	orrs	r1, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	430b      	orrs	r3, r1
 80047a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	000186a0 	.word	0x000186a0
 8004800:	001e847f 	.word	0x001e847f
 8004804:	003d08ff 	.word	0x003d08ff
 8004808:	431bde83 	.word	0x431bde83
 800480c:	10624dd3 	.word	0x10624dd3

08004810 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af02      	add	r7, sp, #8
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	461a      	mov	r2, r3
 800481c:	460b      	mov	r3, r1
 800481e:	817b      	strh	r3, [r7, #10]
 8004820:	4613      	mov	r3, r2
 8004822:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004824:	f7fe fc40 	bl	80030a8 <HAL_GetTick>
 8004828:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b20      	cmp	r3, #32
 8004834:	f040 80e0 	bne.w	80049f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2319      	movs	r3, #25
 800483e:	2201      	movs	r2, #1
 8004840:	4970      	ldr	r1, [pc, #448]	; (8004a04 <HAL_I2C_Master_Transmit+0x1f4>)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fd86 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
 8004850:	e0d3      	b.n	80049fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_I2C_Master_Transmit+0x50>
 800485c:	2302      	movs	r3, #2
 800485e:	e0cc      	b.n	80049fa <HAL_I2C_Master_Transmit+0x1ea>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b01      	cmp	r3, #1
 8004874:	d007      	beq.n	8004886 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004894:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2221      	movs	r2, #33	; 0x21
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2210      	movs	r2, #16
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	893a      	ldrh	r2, [r7, #8]
 80048b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a50      	ldr	r2, [pc, #320]	; (8004a08 <HAL_I2C_Master_Transmit+0x1f8>)
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048c8:	8979      	ldrh	r1, [r7, #10]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6a3a      	ldr	r2, [r7, #32]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fbf0 	bl	80050b4 <I2C_MasterRequestWrite>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e08d      	b.n	80049fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80048f4:	e066      	b.n	80049c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	6a39      	ldr	r1, [r7, #32]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fe00 	bl	8005500 <I2C_WaitOnTXEFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00d      	beq.n	8004922 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2b04      	cmp	r3, #4
 800490c:	d107      	bne.n	800491e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e06b      	b.n	80049fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	781a      	ldrb	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b04      	cmp	r3, #4
 800495e:	d11b      	bne.n	8004998 <HAL_I2C_Master_Transmit+0x188>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	2b00      	cmp	r3, #0
 8004966:	d017      	beq.n	8004998 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	6a39      	ldr	r1, [r7, #32]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fdf0 	bl	8005582 <I2C_WaitOnBTFFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d107      	bne.n	80049c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e01a      	b.n	80049fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d194      	bne.n	80048f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e000      	b.n	80049fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
  }
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	00100002 	.word	0x00100002
 8004a08:	ffff0000 	.word	0xffff0000

08004a0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08c      	sub	sp, #48	; 0x30
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	461a      	mov	r2, r3
 8004a18:	460b      	mov	r3, r1
 8004a1a:	817b      	strh	r3, [r7, #10]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a20:	f7fe fb42 	bl	80030a8 <HAL_GetTick>
 8004a24:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	f040 820b 	bne.w	8004e4a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	2319      	movs	r3, #25
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	497c      	ldr	r1, [pc, #496]	; (8004c30 <HAL_I2C_Master_Receive+0x224>)
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fc88 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e1fe      	b.n	8004e4c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_I2C_Master_Receive+0x50>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e1f7      	b.n	8004e4c <HAL_I2C_Master_Receive+0x440>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d007      	beq.n	8004a82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2222      	movs	r2, #34	; 0x22
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	893a      	ldrh	r2, [r7, #8]
 8004ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a5c      	ldr	r2, [pc, #368]	; (8004c34 <HAL_I2C_Master_Receive+0x228>)
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ac4:	8979      	ldrh	r1, [r7, #10]
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 fb74 	bl	80051b8 <I2C_MasterRequestRead>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e1b8      	b.n	8004e4c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d113      	bne.n	8004b0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	623b      	str	r3, [r7, #32]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	623b      	str	r3, [r7, #32]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e18c      	b.n	8004e24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d11b      	bne.n	8004b4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e16c      	b.n	8004e24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d11b      	bne.n	8004b8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b72:	2300      	movs	r3, #0
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	e14c      	b.n	8004e24 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bb0:	e138      	b.n	8004e24 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	f200 80f1 	bhi.w	8004d9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d123      	bne.n	8004c0c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fd1b 	bl	8005604 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e139      	b.n	8004e4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c0a:	e10b      	b.n	8004e24 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d14e      	bne.n	8004cb2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	4906      	ldr	r1, [pc, #24]	; (8004c38 <HAL_I2C_Master_Receive+0x22c>)
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fb98 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e10e      	b.n	8004e4c <HAL_I2C_Master_Receive+0x440>
 8004c2e:	bf00      	nop
 8004c30:	00100002 	.word	0x00100002
 8004c34:	ffff0000 	.word	0xffff0000
 8004c38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cb0:	e0b8      	b.n	8004e24 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	2200      	movs	r2, #0
 8004cba:	4966      	ldr	r1, [pc, #408]	; (8004e54 <HAL_I2C_Master_Receive+0x448>)
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fb49 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0bf      	b.n	8004e4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	2200      	movs	r2, #0
 8004d16:	494f      	ldr	r1, [pc, #316]	; (8004e54 <HAL_I2C_Master_Receive+0x448>)
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fb1b 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e091      	b.n	8004e4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d9c:	e042      	b.n	8004e24 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fc2e 	bl	8005604 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e04c      	b.n	8004e4c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d118      	bne.n	8004e24 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f aec2 	bne.w	8004bb2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e000      	b.n	8004e4c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e4a:	2302      	movs	r3, #2
  }
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3728      	adds	r7, #40	; 0x28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	00010004 	.word	0x00010004

08004e58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	460b      	mov	r3, r1
 8004e66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004e68:	f7fe f91e 	bl	80030a8 <HAL_GetTick>
 8004e6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	f040 8111 	bne.w	80050a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2319      	movs	r3, #25
 8004e86:	2201      	movs	r2, #1
 8004e88:	4988      	ldr	r1, [pc, #544]	; (80050ac <HAL_I2C_IsDeviceReady+0x254>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fa62 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004e96:	2302      	movs	r3, #2
 8004e98:	e104      	b.n	80050a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_I2C_IsDeviceReady+0x50>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e0fd      	b.n	80050a4 <HAL_I2C_IsDeviceReady+0x24c>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d007      	beq.n	8004ece <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004edc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2224      	movs	r2, #36	; 0x24
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a70      	ldr	r2, [pc, #448]	; (80050b0 <HAL_I2C_IsDeviceReady+0x258>)
 8004ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fa20 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f28:	d103      	bne.n	8004f32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e0b6      	b.n	80050a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f36:	897b      	ldrh	r3, [r7, #10]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f46:	f7fe f8af 	bl	80030a8 <HAL_GetTick>
 8004f4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	bf0c      	ite	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	2300      	movne	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f70:	bf0c      	ite	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	2300      	movne	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f7a:	e025      	b.n	8004fc8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f7c:	f7fe f894 	bl	80030a8 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d302      	bcc.n	8004f92 <HAL_I2C_IsDeviceReady+0x13a>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	22a0      	movs	r2, #160	; 0xa0
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2301      	moveq	r3, #1
 8004faa:	2300      	movne	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2ba0      	cmp	r3, #160	; 0xa0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_I2C_IsDeviceReady+0x188>
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <HAL_I2C_IsDeviceReady+0x188>
 8004fda:	7dbb      	ldrb	r3, [r7, #22]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0cd      	beq.n	8004f7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d129      	bne.n	800504a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005004:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2319      	movs	r3, #25
 8005022:	2201      	movs	r2, #1
 8005024:	4921      	ldr	r1, [pc, #132]	; (80050ac <HAL_I2C_IsDeviceReady+0x254>)
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f994 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e036      	b.n	80050a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	e02c      	b.n	80050a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005058:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005062:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2319      	movs	r3, #25
 800506a:	2201      	movs	r2, #1
 800506c:	490f      	ldr	r1, [pc, #60]	; (80050ac <HAL_I2C_IsDeviceReady+0x254>)
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f970 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e012      	b.n	80050a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	3301      	adds	r3, #1
 8005082:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	429a      	cmp	r2, r3
 800508a:	f4ff af32 	bcc.w	8004ef2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80050a2:	2302      	movs	r3, #2
  }
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3720      	adds	r7, #32
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	00100002 	.word	0x00100002
 80050b0:	ffff0000 	.word	0xffff0000

080050b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	607a      	str	r2, [r7, #4]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	460b      	mov	r3, r1
 80050c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d006      	beq.n	80050de <I2C_MasterRequestWrite+0x2a>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d003      	beq.n	80050de <I2C_MasterRequestWrite+0x2a>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050dc:	d108      	bne.n	80050f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	e00b      	b.n	8005108 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	2b12      	cmp	r3, #18
 80050f6:	d107      	bne.n	8005108 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005106:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f91d 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00d      	beq.n	800513c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512e:	d103      	bne.n	8005138 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e035      	b.n	80051a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005144:	d108      	bne.n	8005158 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005146:	897b      	ldrh	r3, [r7, #10]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005154:	611a      	str	r2, [r3, #16]
 8005156:	e01b      	b.n	8005190 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005158:	897b      	ldrh	r3, [r7, #10]
 800515a:	11db      	asrs	r3, r3, #7
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f003 0306 	and.w	r3, r3, #6
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f063 030f 	orn	r3, r3, #15
 8005168:	b2da      	uxtb	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	490e      	ldr	r1, [pc, #56]	; (80051b0 <I2C_MasterRequestWrite+0xfc>)
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 f943 	bl	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e010      	b.n	80051a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005186:	897b      	ldrh	r3, [r7, #10]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	4907      	ldr	r1, [pc, #28]	; (80051b4 <I2C_MasterRequestWrite+0x100>)
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f933 	bl	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	00010008 	.word	0x00010008
 80051b4:	00010002 	.word	0x00010002

080051b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	460b      	mov	r3, r1
 80051c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d006      	beq.n	80051f2 <I2C_MasterRequestRead+0x3a>
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d003      	beq.n	80051f2 <I2C_MasterRequestRead+0x3a>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051f0:	d108      	bne.n	8005204 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e00b      	b.n	800521c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	2b11      	cmp	r3, #17
 800520a:	d107      	bne.n	800521c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800521a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f893 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00d      	beq.n	8005250 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005242:	d103      	bne.n	800524c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800524a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e079      	b.n	8005344 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005258:	d108      	bne.n	800526c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800525a:	897b      	ldrh	r3, [r7, #10]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	b2da      	uxtb	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	611a      	str	r2, [r3, #16]
 800526a:	e05f      	b.n	800532c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800526c:	897b      	ldrh	r3, [r7, #10]
 800526e:	11db      	asrs	r3, r3, #7
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f003 0306 	and.w	r3, r3, #6
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f063 030f 	orn	r3, r3, #15
 800527c:	b2da      	uxtb	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4930      	ldr	r1, [pc, #192]	; (800534c <I2C_MasterRequestRead+0x194>)
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f8b9 	bl	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e054      	b.n	8005344 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800529a:	897b      	ldrh	r3, [r7, #10]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4929      	ldr	r1, [pc, #164]	; (8005350 <I2C_MasterRequestRead+0x198>)
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f8a9 	bl	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e044      	b.n	8005344 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f831 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00d      	beq.n	8005314 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005306:	d103      	bne.n	8005310 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800530e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e017      	b.n	8005344 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005314:	897b      	ldrh	r3, [r7, #10]
 8005316:	11db      	asrs	r3, r3, #7
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 0306 	and.w	r3, r3, #6
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f063 030e 	orn	r3, r3, #14
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4907      	ldr	r1, [pc, #28]	; (8005350 <I2C_MasterRequestRead+0x198>)
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f865 	bl	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	00010008 	.word	0x00010008
 8005350:	00010002 	.word	0x00010002

08005354 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005364:	e025      	b.n	80053b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d021      	beq.n	80053b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536e:	f7fd fe9b 	bl	80030a8 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d302      	bcc.n	8005384 <I2C_WaitOnFlagUntilTimeout+0x30>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d116      	bne.n	80053b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f043 0220 	orr.w	r2, r3, #32
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e023      	b.n	80053fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	0c1b      	lsrs	r3, r3, #16
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d10d      	bne.n	80053d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	43da      	mvns	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4013      	ands	r3, r2
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bf0c      	ite	eq
 80053ce:	2301      	moveq	r3, #1
 80053d0:	2300      	movne	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	e00c      	b.n	80053f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	43da      	mvns	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4013      	ands	r3, r2
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf0c      	ite	eq
 80053ea:	2301      	moveq	r3, #1
 80053ec:	2300      	movne	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d0b6      	beq.n	8005366 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005410:	e051      	b.n	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800541c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005420:	d123      	bne.n	800546a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005430:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800543a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f043 0204 	orr.w	r2, r3, #4
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e046      	b.n	80054f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d021      	beq.n	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005472:	f7fd fe19 	bl	80030a8 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d116      	bne.n	80054b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e020      	b.n	80054f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10c      	bne.n	80054da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	43da      	mvns	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bf14      	ite	ne
 80054d2:	2301      	movne	r3, #1
 80054d4:	2300      	moveq	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	e00b      	b.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	43da      	mvns	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d18d      	bne.n	8005412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800550c:	e02d      	b.n	800556a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f8ce 	bl	80056b0 <I2C_IsAcknowledgeFailed>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e02d      	b.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d021      	beq.n	800556a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7fd fdbf 	bl	80030a8 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d116      	bne.n	800556a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e007      	b.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d1ca      	bne.n	800550e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800558e:	e02d      	b.n	80055ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 f88d 	bl	80056b0 <I2C_IsAcknowledgeFailed>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e02d      	b.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d021      	beq.n	80055ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a8:	f7fd fd7e 	bl	80030a8 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d302      	bcc.n	80055be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d116      	bne.n	80055ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	f043 0220 	orr.w	r2, r3, #32
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e007      	b.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d1ca      	bne.n	8005590 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005610:	e042      	b.n	8005698 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b10      	cmp	r3, #16
 800561e:	d119      	bne.n	8005654 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0210 	mvn.w	r2, #16
 8005628:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e029      	b.n	80056a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005654:	f7fd fd28 	bl	80030a8 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	429a      	cmp	r2, r3
 8005662:	d302      	bcc.n	800566a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d116      	bne.n	8005698 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f043 0220 	orr.w	r2, r3, #32
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e007      	b.n	80056a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b40      	cmp	r3, #64	; 0x40
 80056a4:	d1b5      	bne.n	8005612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c6:	d11b      	bne.n	8005700 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	f043 0204 	orr.w	r2, r3, #4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
	...

08005710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e264      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d075      	beq.n	800581a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800572e:	4ba3      	ldr	r3, [pc, #652]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	2b04      	cmp	r3, #4
 8005738:	d00c      	beq.n	8005754 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800573a:	4ba0      	ldr	r3, [pc, #640]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005742:	2b08      	cmp	r3, #8
 8005744:	d112      	bne.n	800576c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005746:	4b9d      	ldr	r3, [pc, #628]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005752:	d10b      	bne.n	800576c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005754:	4b99      	ldr	r3, [pc, #612]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d05b      	beq.n	8005818 <HAL_RCC_OscConfig+0x108>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d157      	bne.n	8005818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e23f      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005774:	d106      	bne.n	8005784 <HAL_RCC_OscConfig+0x74>
 8005776:	4b91      	ldr	r3, [pc, #580]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a90      	ldr	r2, [pc, #576]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 800577c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	e01d      	b.n	80057c0 <HAL_RCC_OscConfig+0xb0>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800578c:	d10c      	bne.n	80057a8 <HAL_RCC_OscConfig+0x98>
 800578e:	4b8b      	ldr	r3, [pc, #556]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a8a      	ldr	r2, [pc, #552]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	4b88      	ldr	r3, [pc, #544]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a87      	ldr	r2, [pc, #540]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	e00b      	b.n	80057c0 <HAL_RCC_OscConfig+0xb0>
 80057a8:	4b84      	ldr	r3, [pc, #528]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a83      	ldr	r2, [pc, #524]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 80057ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	4b81      	ldr	r3, [pc, #516]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a80      	ldr	r2, [pc, #512]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 80057ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d013      	beq.n	80057f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c8:	f7fd fc6e 	bl	80030a8 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057d0:	f7fd fc6a 	bl	80030a8 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	; 0x64
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e204      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e2:	4b76      	ldr	r3, [pc, #472]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0xc0>
 80057ee:	e014      	b.n	800581a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f0:	f7fd fc5a 	bl	80030a8 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057f8:	f7fd fc56 	bl	80030a8 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b64      	cmp	r3, #100	; 0x64
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e1f0      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800580a:	4b6c      	ldr	r3, [pc, #432]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCC_OscConfig+0xe8>
 8005816:	e000      	b.n	800581a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d063      	beq.n	80058ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005826:	4b65      	ldr	r3, [pc, #404]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 030c 	and.w	r3, r3, #12
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00b      	beq.n	800584a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005832:	4b62      	ldr	r3, [pc, #392]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800583a:	2b08      	cmp	r3, #8
 800583c:	d11c      	bne.n	8005878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800583e:	4b5f      	ldr	r3, [pc, #380]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d116      	bne.n	8005878 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584a:	4b5c      	ldr	r3, [pc, #368]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_RCC_OscConfig+0x152>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d001      	beq.n	8005862 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e1c4      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005862:	4b56      	ldr	r3, [pc, #344]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	4952      	ldr	r1, [pc, #328]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005872:	4313      	orrs	r3, r2
 8005874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005876:	e03a      	b.n	80058ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d020      	beq.n	80058c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005880:	4b4f      	ldr	r3, [pc, #316]	; (80059c0 <HAL_RCC_OscConfig+0x2b0>)
 8005882:	2201      	movs	r2, #1
 8005884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fd fc0f 	bl	80030a8 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800588e:	f7fd fc0b 	bl	80030a8 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e1a5      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a0:	4b46      	ldr	r3, [pc, #280]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0f0      	beq.n	800588e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ac:	4b43      	ldr	r3, [pc, #268]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	4940      	ldr	r1, [pc, #256]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	600b      	str	r3, [r1, #0]
 80058c0:	e015      	b.n	80058ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058c2:	4b3f      	ldr	r3, [pc, #252]	; (80059c0 <HAL_RCC_OscConfig+0x2b0>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fd fbee 	bl	80030a8 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058d0:	f7fd fbea 	bl	80030a8 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e184      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e2:	4b36      	ldr	r3, [pc, #216]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d030      	beq.n	800595c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d016      	beq.n	8005930 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005902:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <HAL_RCC_OscConfig+0x2b4>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fd fbce 	bl	80030a8 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005910:	f7fd fbca 	bl	80030a8 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e164      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005922:	4b26      	ldr	r3, [pc, #152]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0f0      	beq.n	8005910 <HAL_RCC_OscConfig+0x200>
 800592e:	e015      	b.n	800595c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005930:	4b24      	ldr	r3, [pc, #144]	; (80059c4 <HAL_RCC_OscConfig+0x2b4>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005936:	f7fd fbb7 	bl	80030a8 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800593e:	f7fd fbb3 	bl	80030a8 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e14d      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005950:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f0      	bne.n	800593e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 80a0 	beq.w	8005aaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800596a:	2300      	movs	r3, #0
 800596c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10f      	bne.n	800599a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800597a:	2300      	movs	r3, #0
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	4a0e      	ldr	r2, [pc, #56]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 8005984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005988:	6413      	str	r3, [r2, #64]	; 0x40
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_RCC_OscConfig+0x2ac>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005996:	2301      	movs	r3, #1
 8005998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_RCC_OscConfig+0x2b8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d121      	bne.n	80059ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059a6:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <HAL_RCC_OscConfig+0x2b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a07      	ldr	r2, [pc, #28]	; (80059c8 <HAL_RCC_OscConfig+0x2b8>)
 80059ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059b2:	f7fd fb79 	bl	80030a8 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b8:	e011      	b.n	80059de <HAL_RCC_OscConfig+0x2ce>
 80059ba:	bf00      	nop
 80059bc:	40023800 	.word	0x40023800
 80059c0:	42470000 	.word	0x42470000
 80059c4:	42470e80 	.word	0x42470e80
 80059c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059cc:	f7fd fb6c 	bl	80030a8 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e106      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059de:	4b85      	ldr	r3, [pc, #532]	; (8005bf4 <HAL_RCC_OscConfig+0x4e4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d106      	bne.n	8005a00 <HAL_RCC_OscConfig+0x2f0>
 80059f2:	4b81      	ldr	r3, [pc, #516]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f6:	4a80      	ldr	r2, [pc, #512]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	6713      	str	r3, [r2, #112]	; 0x70
 80059fe:	e01c      	b.n	8005a3a <HAL_RCC_OscConfig+0x32a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b05      	cmp	r3, #5
 8005a06:	d10c      	bne.n	8005a22 <HAL_RCC_OscConfig+0x312>
 8005a08:	4b7b      	ldr	r3, [pc, #492]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0c:	4a7a      	ldr	r2, [pc, #488]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005a0e:	f043 0304 	orr.w	r3, r3, #4
 8005a12:	6713      	str	r3, [r2, #112]	; 0x70
 8005a14:	4b78      	ldr	r3, [pc, #480]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a18:	4a77      	ldr	r2, [pc, #476]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005a1a:	f043 0301 	orr.w	r3, r3, #1
 8005a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a20:	e00b      	b.n	8005a3a <HAL_RCC_OscConfig+0x32a>
 8005a22:	4b75      	ldr	r3, [pc, #468]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	4a74      	ldr	r2, [pc, #464]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a2e:	4b72      	ldr	r3, [pc, #456]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	4a71      	ldr	r2, [pc, #452]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005a34:	f023 0304 	bic.w	r3, r3, #4
 8005a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d015      	beq.n	8005a6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a42:	f7fd fb31 	bl	80030a8 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a48:	e00a      	b.n	8005a60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a4a:	f7fd fb2d 	bl	80030a8 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0c5      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a60:	4b65      	ldr	r3, [pc, #404]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0ee      	beq.n	8005a4a <HAL_RCC_OscConfig+0x33a>
 8005a6c:	e014      	b.n	8005a98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6e:	f7fd fb1b 	bl	80030a8 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a74:	e00a      	b.n	8005a8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a76:	f7fd fb17 	bl	80030a8 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e0af      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a8c:	4b5a      	ldr	r3, [pc, #360]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1ee      	bne.n	8005a76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d105      	bne.n	8005aaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a9e:	4b56      	ldr	r3, [pc, #344]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	4a55      	ldr	r2, [pc, #340]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 809b 	beq.w	8005bea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ab4:	4b50      	ldr	r3, [pc, #320]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 030c 	and.w	r3, r3, #12
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d05c      	beq.n	8005b7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d141      	bne.n	8005b4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac8:	4b4c      	ldr	r3, [pc, #304]	; (8005bfc <HAL_RCC_OscConfig+0x4ec>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ace:	f7fd faeb 	bl	80030a8 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad6:	f7fd fae7 	bl	80030a8 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e081      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae8:	4b43      	ldr	r3, [pc, #268]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1f0      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69da      	ldr	r2, [r3, #28]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	019b      	lsls	r3, r3, #6
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	085b      	lsrs	r3, r3, #1
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	041b      	lsls	r3, r3, #16
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b16:	061b      	lsls	r3, r3, #24
 8005b18:	4937      	ldr	r1, [pc, #220]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b1e:	4b37      	ldr	r3, [pc, #220]	; (8005bfc <HAL_RCC_OscConfig+0x4ec>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b24:	f7fd fac0 	bl	80030a8 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b2c:	f7fd fabc 	bl	80030a8 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e056      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b3e:	4b2e      	ldr	r3, [pc, #184]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0f0      	beq.n	8005b2c <HAL_RCC_OscConfig+0x41c>
 8005b4a:	e04e      	b.n	8005bea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b4c:	4b2b      	ldr	r3, [pc, #172]	; (8005bfc <HAL_RCC_OscConfig+0x4ec>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b52:	f7fd faa9 	bl	80030a8 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5a:	f7fd faa5 	bl	80030a8 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e03f      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6c:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1f0      	bne.n	8005b5a <HAL_RCC_OscConfig+0x44a>
 8005b78:	e037      	b.n	8005bea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e032      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b86:	4b1c      	ldr	r3, [pc, #112]	; (8005bf8 <HAL_RCC_OscConfig+0x4e8>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d028      	beq.n	8005be6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d121      	bne.n	8005be6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d11a      	bne.n	8005be6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bbc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d111      	bne.n	8005be6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d107      	bne.n	8005be6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d001      	beq.n	8005bea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40007000 	.word	0x40007000
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	42470060 	.word	0x42470060

08005c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0cc      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c14:	4b68      	ldr	r3, [pc, #416]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d90c      	bls.n	8005c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c22:	4b65      	ldr	r3, [pc, #404]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2a:	4b63      	ldr	r3, [pc, #396]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d001      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0b8      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d020      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c54:	4b59      	ldr	r3, [pc, #356]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	4a58      	ldr	r2, [pc, #352]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c6c:	4b53      	ldr	r3, [pc, #332]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4a52      	ldr	r2, [pc, #328]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c78:	4b50      	ldr	r3, [pc, #320]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	494d      	ldr	r1, [pc, #308]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d044      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9e:	4b47      	ldr	r3, [pc, #284]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d119      	bne.n	8005cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e07f      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d003      	beq.n	8005cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d107      	bne.n	8005cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cbe:	4b3f      	ldr	r3, [pc, #252]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e06f      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cce:	4b3b      	ldr	r3, [pc, #236]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e067      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cde:	4b37      	ldr	r3, [pc, #220]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f023 0203 	bic.w	r2, r3, #3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	4934      	ldr	r1, [pc, #208]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cf0:	f7fd f9da 	bl	80030a8 <HAL_GetTick>
 8005cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf6:	e00a      	b.n	8005d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf8:	f7fd f9d6 	bl	80030a8 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e04f      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0e:	4b2b      	ldr	r3, [pc, #172]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 020c 	and.w	r2, r3, #12
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d1eb      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d20:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d20c      	bcs.n	8005d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2e:	4b22      	ldr	r3, [pc, #136]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d36:	4b20      	ldr	r3, [pc, #128]	; (8005db8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d001      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e032      	b.n	8005dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d54:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4916      	ldr	r1, [pc, #88]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	490e      	ldr	r1, [pc, #56]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d86:	f000 f821 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	091b      	lsrs	r3, r3, #4
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	490a      	ldr	r1, [pc, #40]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d98:	5ccb      	ldrb	r3, [r1, r3]
 8005d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9e:	4a09      	ldr	r2, [pc, #36]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fd f93a 	bl	8003020 <HAL_InitTick>

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40023c00 	.word	0x40023c00
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	0800f91c 	.word	0x0800f91c
 8005dc4:	20000054 	.word	0x20000054
 8005dc8:	2000005c 	.word	0x2000005c

08005dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	607b      	str	r3, [r7, #4]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005de4:	4b67      	ldr	r3, [pc, #412]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 030c 	and.w	r3, r3, #12
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d00d      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0x40>
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	f200 80bd 	bhi.w	8005f70 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_RCC_GetSysClockFreq+0x34>
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d003      	beq.n	8005e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dfe:	e0b7      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e00:	4b61      	ldr	r3, [pc, #388]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e02:	60bb      	str	r3, [r7, #8]
       break;
 8005e04:	e0b7      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e06:	4b61      	ldr	r3, [pc, #388]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005e08:	60bb      	str	r3, [r7, #8]
      break;
 8005e0a:	e0b4      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e0c:	4b5d      	ldr	r3, [pc, #372]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e16:	4b5b      	ldr	r3, [pc, #364]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d04d      	beq.n	8005ebe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e22:	4b58      	ldr	r3, [pc, #352]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	099b      	lsrs	r3, r3, #6
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e32:	f04f 0100 	mov.w	r1, #0
 8005e36:	ea02 0800 	and.w	r8, r2, r0
 8005e3a:	ea03 0901 	and.w	r9, r3, r1
 8005e3e:	4640      	mov	r0, r8
 8005e40:	4649      	mov	r1, r9
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	014b      	lsls	r3, r1, #5
 8005e4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e50:	0142      	lsls	r2, r0, #5
 8005e52:	4610      	mov	r0, r2
 8005e54:	4619      	mov	r1, r3
 8005e56:	ebb0 0008 	subs.w	r0, r0, r8
 8005e5a:	eb61 0109 	sbc.w	r1, r1, r9
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	018b      	lsls	r3, r1, #6
 8005e68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e6c:	0182      	lsls	r2, r0, #6
 8005e6e:	1a12      	subs	r2, r2, r0
 8005e70:	eb63 0301 	sbc.w	r3, r3, r1
 8005e74:	f04f 0000 	mov.w	r0, #0
 8005e78:	f04f 0100 	mov.w	r1, #0
 8005e7c:	00d9      	lsls	r1, r3, #3
 8005e7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e82:	00d0      	lsls	r0, r2, #3
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	eb12 0208 	adds.w	r2, r2, r8
 8005e8c:	eb43 0309 	adc.w	r3, r3, r9
 8005e90:	f04f 0000 	mov.w	r0, #0
 8005e94:	f04f 0100 	mov.w	r1, #0
 8005e98:	0259      	lsls	r1, r3, #9
 8005e9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005e9e:	0250      	lsls	r0, r2, #9
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	f7fa feea 	bl	8000c88 <__aeabi_uldivmod>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4613      	mov	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e04a      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	099b      	lsrs	r3, r3, #6
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ece:	f04f 0100 	mov.w	r1, #0
 8005ed2:	ea02 0400 	and.w	r4, r2, r0
 8005ed6:	ea03 0501 	and.w	r5, r3, r1
 8005eda:	4620      	mov	r0, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	014b      	lsls	r3, r1, #5
 8005ee8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005eec:	0142      	lsls	r2, r0, #5
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	1b00      	subs	r0, r0, r4
 8005ef4:	eb61 0105 	sbc.w	r1, r1, r5
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	f04f 0300 	mov.w	r3, #0
 8005f00:	018b      	lsls	r3, r1, #6
 8005f02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f06:	0182      	lsls	r2, r0, #6
 8005f08:	1a12      	subs	r2, r2, r0
 8005f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f0e:	f04f 0000 	mov.w	r0, #0
 8005f12:	f04f 0100 	mov.w	r1, #0
 8005f16:	00d9      	lsls	r1, r3, #3
 8005f18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f1c:	00d0      	lsls	r0, r2, #3
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	1912      	adds	r2, r2, r4
 8005f24:	eb45 0303 	adc.w	r3, r5, r3
 8005f28:	f04f 0000 	mov.w	r0, #0
 8005f2c:	f04f 0100 	mov.w	r1, #0
 8005f30:	0299      	lsls	r1, r3, #10
 8005f32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f36:	0290      	lsls	r0, r2, #10
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	f7fa fe9e 	bl	8000c88 <__aeabi_uldivmod>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4613      	mov	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	3301      	adds	r3, #1
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	60bb      	str	r3, [r7, #8]
      break;
 8005f6e:	e002      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f70:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f72:	60bb      	str	r3, [r7, #8]
      break;
 8005f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f76:	68bb      	ldr	r3, [r7, #8]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f82:	bf00      	nop
 8005f84:	40023800 	.word	0x40023800
 8005f88:	00f42400 	.word	0x00f42400
 8005f8c:	007a1200 	.word	0x007a1200

08005f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f94:	4b03      	ldr	r3, [pc, #12]	; (8005fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f96:	681b      	ldr	r3, [r3, #0]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000054 	.word	0x20000054

08005fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fac:	f7ff fff0 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	0a9b      	lsrs	r3, r3, #10
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	4903      	ldr	r1, [pc, #12]	; (8005fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fbe:	5ccb      	ldrb	r3, [r1, r3]
 8005fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	0800f92c 	.word	0x0800f92c

08005fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fd4:	f7ff ffdc 	bl	8005f90 <HAL_RCC_GetHCLKFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	0b5b      	lsrs	r3, r3, #13
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	4903      	ldr	r1, [pc, #12]	; (8005ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	0800f92c 	.word	0x0800f92c

08005ff8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e07b      	b.n	8006102 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d108      	bne.n	8006024 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601a:	d009      	beq.n	8006030 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	61da      	str	r2, [r3, #28]
 8006022:	e005      	b.n	8006030 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fb ffc4 	bl	8001fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006066:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b4:	ea42 0103 	orr.w	r1, r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	0c1b      	lsrs	r3, r3, #16
 80060ce:	f003 0104 	and.w	r1, r3, #4
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	f003 0210 	and.w	r2, r3, #16
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b08c      	sub	sp, #48	; 0x30
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
 8006116:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006118:	2301      	movs	r3, #1
 800611a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x26>
 800612c:	2302      	movs	r3, #2
 800612e:	e18a      	b.n	8006446 <HAL_SPI_TransmitReceive+0x33c>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006138:	f7fc ffb6 	bl	80030a8 <HAL_GetTick>
 800613c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800614e:	887b      	ldrh	r3, [r7, #2]
 8006150:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006152:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006156:	2b01      	cmp	r3, #1
 8006158:	d00f      	beq.n	800617a <HAL_SPI_TransmitReceive+0x70>
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006160:	d107      	bne.n	8006172 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <HAL_SPI_TransmitReceive+0x68>
 800616a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800616e:	2b04      	cmp	r3, #4
 8006170:	d003      	beq.n	800617a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006172:	2302      	movs	r3, #2
 8006174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006178:	e15b      	b.n	8006432 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <HAL_SPI_TransmitReceive+0x82>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_SPI_TransmitReceive+0x82>
 8006186:	887b      	ldrh	r3, [r7, #2]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006192:	e14e      	b.n	8006432 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b04      	cmp	r3, #4
 800619e:	d003      	beq.n	80061a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2205      	movs	r2, #5
 80061a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	887a      	ldrh	r2, [r7, #2]
 80061b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	887a      	ldrh	r2, [r7, #2]
 80061be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	887a      	ldrh	r2, [r7, #2]
 80061ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	887a      	ldrh	r2, [r7, #2]
 80061d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	d007      	beq.n	80061fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006204:	d178      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <HAL_SPI_TransmitReceive+0x10a>
 800620e:	8b7b      	ldrh	r3, [r7, #26]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d166      	bne.n	80062e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	881a      	ldrh	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	1c9a      	adds	r2, r3, #2
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006238:	e053      	b.n	80062e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b02      	cmp	r3, #2
 8006246:	d11b      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x176>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d016      	beq.n	8006280 <HAL_SPI_TransmitReceive+0x176>
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d113      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625c:	881a      	ldrh	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	1c9a      	adds	r2, r3, #2
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b01      	cmp	r3, #1
 800628c:	d119      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0x1b8>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d014      	beq.n	80062c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	b292      	uxth	r2, r2
 80062a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	1c9a      	adds	r2, r3, #2
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062be:	2301      	movs	r3, #1
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062c2:	f7fc fef1 	bl	80030a8 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d807      	bhi.n	80062e2 <HAL_SPI_TransmitReceive+0x1d8>
 80062d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d8:	d003      	beq.n	80062e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062e0:	e0a7      	b.n	8006432 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1a6      	bne.n	800623a <HAL_SPI_TransmitReceive+0x130>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1a1      	bne.n	800623a <HAL_SPI_TransmitReceive+0x130>
 80062f6:	e07c      	b.n	80063f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_SPI_TransmitReceive+0x1fc>
 8006300:	8b7b      	ldrh	r3, [r7, #26]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d16b      	bne.n	80063de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	7812      	ldrb	r2, [r2, #0]
 8006312:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800632c:	e057      	b.n	80063de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b02      	cmp	r3, #2
 800633a:	d11c      	bne.n	8006376 <HAL_SPI_TransmitReceive+0x26c>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d017      	beq.n	8006376 <HAL_SPI_TransmitReceive+0x26c>
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d114      	bne.n	8006376 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	7812      	ldrb	r2, [r2, #0]
 8006358:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b01      	cmp	r3, #1
 8006382:	d119      	bne.n	80063b8 <HAL_SPI_TransmitReceive+0x2ae>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d014      	beq.n	80063b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063b4:	2301      	movs	r3, #1
 80063b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063b8:	f7fc fe76 	bl	80030a8 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d803      	bhi.n	80063d0 <HAL_SPI_TransmitReceive+0x2c6>
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ce:	d102      	bne.n	80063d6 <HAL_SPI_TransmitReceive+0x2cc>
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d103      	bne.n	80063de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063dc:	e029      	b.n	8006432 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1a2      	bne.n	800632e <HAL_SPI_TransmitReceive+0x224>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d19d      	bne.n	800632e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 f8b2 	bl	8006560 <SPI_EndRxTxTransaction>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d006      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800640e:	e010      	b.n	8006432 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10b      	bne.n	8006430 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	e000      	b.n	8006432 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006430:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006442:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006446:	4618      	mov	r0, r3
 8006448:	3730      	adds	r7, #48	; 0x30
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006460:	f7fc fe22 	bl	80030a8 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	4413      	add	r3, r2
 800646e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006470:	f7fc fe1a 	bl	80030a8 <HAL_GetTick>
 8006474:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006476:	4b39      	ldr	r3, [pc, #228]	; (800655c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	015b      	lsls	r3, r3, #5
 800647c:	0d1b      	lsrs	r3, r3, #20
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	fb02 f303 	mul.w	r3, r2, r3
 8006484:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006486:	e054      	b.n	8006532 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648e:	d050      	beq.n	8006532 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006490:	f7fc fe0a 	bl	80030a8 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	429a      	cmp	r2, r3
 800649e:	d902      	bls.n	80064a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d13d      	bne.n	8006522 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064be:	d111      	bne.n	80064e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c8:	d004      	beq.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d2:	d107      	bne.n	80064e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ec:	d10f      	bne.n	800650e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800650c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e017      	b.n	8006552 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	3b01      	subs	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4013      	ands	r3, r2
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	bf0c      	ite	eq
 8006542:	2301      	moveq	r3, #1
 8006544:	2300      	movne	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	461a      	mov	r2, r3
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	429a      	cmp	r2, r3
 800654e:	d19b      	bne.n	8006488 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20000054 	.word	0x20000054

08006560 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af02      	add	r7, sp, #8
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800656c:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <SPI_EndRxTxTransaction+0x7c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <SPI_EndRxTxTransaction+0x80>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	0d5b      	lsrs	r3, r3, #21
 8006578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800657c:	fb02 f303 	mul.w	r3, r2, r3
 8006580:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800658a:	d112      	bne.n	80065b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2200      	movs	r2, #0
 8006594:	2180      	movs	r1, #128	; 0x80
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7ff ff5a 	bl	8006450 <SPI_WaitFlagStateUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d016      	beq.n	80065d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a6:	f043 0220 	orr.w	r2, r3, #32
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e00f      	b.n	80065d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00a      	beq.n	80065ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c8:	2b80      	cmp	r3, #128	; 0x80
 80065ca:	d0f2      	beq.n	80065b2 <SPI_EndRxTxTransaction+0x52>
 80065cc:	e000      	b.n	80065d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80065ce:	bf00      	nop
  }

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000054 	.word	0x20000054
 80065e0:	165e9f81 	.word	0x165e9f81

080065e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e041      	b.n	800667a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fb ff0e 	bl	800242c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3304      	adds	r3, #4
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f000 fad8 	bl	8006bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e041      	b.n	8006718 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f839 	bl	8006720 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f000 fa89 	bl	8006bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <HAL_TIM_PWM_Start+0x24>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	bf14      	ite	ne
 8006750:	2301      	movne	r3, #1
 8006752:	2300      	moveq	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	e022      	b.n	800679e <HAL_TIM_PWM_Start+0x6a>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b04      	cmp	r3, #4
 800675c:	d109      	bne.n	8006772 <HAL_TIM_PWM_Start+0x3e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b01      	cmp	r3, #1
 8006768:	bf14      	ite	ne
 800676a:	2301      	movne	r3, #1
 800676c:	2300      	moveq	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	e015      	b.n	800679e <HAL_TIM_PWM_Start+0x6a>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d109      	bne.n	800678c <HAL_TIM_PWM_Start+0x58>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	bf14      	ite	ne
 8006784:	2301      	movne	r3, #1
 8006786:	2300      	moveq	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	e008      	b.n	800679e <HAL_TIM_PWM_Start+0x6a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b01      	cmp	r3, #1
 8006796:	bf14      	ite	ne
 8006798:	2301      	movne	r3, #1
 800679a:	2300      	moveq	r3, #0
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e07c      	b.n	80068a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d104      	bne.n	80067b6 <HAL_TIM_PWM_Start+0x82>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b4:	e013      	b.n	80067de <HAL_TIM_PWM_Start+0xaa>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d104      	bne.n	80067c6 <HAL_TIM_PWM_Start+0x92>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c4:	e00b      	b.n	80067de <HAL_TIM_PWM_Start+0xaa>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d104      	bne.n	80067d6 <HAL_TIM_PWM_Start+0xa2>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067d4:	e003      	b.n	80067de <HAL_TIM_PWM_Start+0xaa>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2202      	movs	r2, #2
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2201      	movs	r2, #1
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fce0 	bl	80071ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a2d      	ldr	r2, [pc, #180]	; (80068a8 <HAL_TIM_PWM_Start+0x174>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <HAL_TIM_PWM_Start+0xcc>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a2c      	ldr	r2, [pc, #176]	; (80068ac <HAL_TIM_PWM_Start+0x178>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d101      	bne.n	8006804 <HAL_TIM_PWM_Start+0xd0>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <HAL_TIM_PWM_Start+0xd2>
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a22      	ldr	r2, [pc, #136]	; (80068a8 <HAL_TIM_PWM_Start+0x174>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d022      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682c:	d01d      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1f      	ldr	r2, [pc, #124]	; (80068b0 <HAL_TIM_PWM_Start+0x17c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d018      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <HAL_TIM_PWM_Start+0x180>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1c      	ldr	r2, [pc, #112]	; (80068b8 <HAL_TIM_PWM_Start+0x184>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00e      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a16      	ldr	r2, [pc, #88]	; (80068ac <HAL_TIM_PWM_Start+0x178>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a18      	ldr	r2, [pc, #96]	; (80068bc <HAL_TIM_PWM_Start+0x188>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_TIM_PWM_Start+0x136>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <HAL_TIM_PWM_Start+0x18c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d111      	bne.n	800688e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b06      	cmp	r3, #6
 800687a:	d010      	beq.n	800689e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688c:	e007      	b.n	800689e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40010000 	.word	0x40010000
 80068ac:	40010400 	.word	0x40010400
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40001800 	.word	0x40001800

080068c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068de:	2302      	movs	r3, #2
 80068e0:	e0ae      	b.n	8006a40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b0c      	cmp	r3, #12
 80068ee:	f200 809f 	bhi.w	8006a30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068f2:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f8:	0800692d 	.word	0x0800692d
 80068fc:	08006a31 	.word	0x08006a31
 8006900:	08006a31 	.word	0x08006a31
 8006904:	08006a31 	.word	0x08006a31
 8006908:	0800696d 	.word	0x0800696d
 800690c:	08006a31 	.word	0x08006a31
 8006910:	08006a31 	.word	0x08006a31
 8006914:	08006a31 	.word	0x08006a31
 8006918:	080069af 	.word	0x080069af
 800691c:	08006a31 	.word	0x08006a31
 8006920:	08006a31 	.word	0x08006a31
 8006924:	08006a31 	.word	0x08006a31
 8006928:	080069ef 	.word	0x080069ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 f9f0 	bl	8006d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0208 	orr.w	r2, r2, #8
 8006946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0204 	bic.w	r2, r2, #4
 8006956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6999      	ldr	r1, [r3, #24]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	619a      	str	r2, [r3, #24]
      break;
 800696a:	e064      	b.n	8006a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fa40 	bl	8006df8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6999      	ldr	r1, [r3, #24]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	021a      	lsls	r2, r3, #8
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	619a      	str	r2, [r3, #24]
      break;
 80069ac:	e043      	b.n	8006a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fa95 	bl	8006ee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0208 	orr.w	r2, r2, #8
 80069c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69da      	ldr	r2, [r3, #28]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0204 	bic.w	r2, r2, #4
 80069d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69d9      	ldr	r1, [r3, #28]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	61da      	str	r2, [r3, #28]
      break;
 80069ec:	e023      	b.n	8006a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fae9 	bl	8006fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69d9      	ldr	r1, [r3, #28]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	021a      	lsls	r2, r3, #8
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	61da      	str	r2, [r3, #28]
      break;
 8006a2e:	e002      	b.n	8006a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	75fb      	strb	r3, [r7, #23]
      break;
 8006a34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIM_ConfigClockSource+0x1c>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e0b4      	b.n	8006bce <HAL_TIM_ConfigClockSource+0x186>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a9c:	d03e      	beq.n	8006b1c <HAL_TIM_ConfigClockSource+0xd4>
 8006a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa2:	f200 8087 	bhi.w	8006bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aaa:	f000 8086 	beq.w	8006bba <HAL_TIM_ConfigClockSource+0x172>
 8006aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab2:	d87f      	bhi.n	8006bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab4:	2b70      	cmp	r3, #112	; 0x70
 8006ab6:	d01a      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0xa6>
 8006ab8:	2b70      	cmp	r3, #112	; 0x70
 8006aba:	d87b      	bhi.n	8006bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006abc:	2b60      	cmp	r3, #96	; 0x60
 8006abe:	d050      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x11a>
 8006ac0:	2b60      	cmp	r3, #96	; 0x60
 8006ac2:	d877      	bhi.n	8006bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac4:	2b50      	cmp	r3, #80	; 0x50
 8006ac6:	d03c      	beq.n	8006b42 <HAL_TIM_ConfigClockSource+0xfa>
 8006ac8:	2b50      	cmp	r3, #80	; 0x50
 8006aca:	d873      	bhi.n	8006bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006acc:	2b40      	cmp	r3, #64	; 0x40
 8006ace:	d058      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0x13a>
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	d86f      	bhi.n	8006bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad4:	2b30      	cmp	r3, #48	; 0x30
 8006ad6:	d064      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8006ad8:	2b30      	cmp	r3, #48	; 0x30
 8006ada:	d86b      	bhi.n	8006bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d060      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d867      	bhi.n	8006bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d05c      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d05a      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8006aec:	e062      	b.n	8006bb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6899      	ldr	r1, [r3, #8]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f000 fb35 	bl	800716c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	609a      	str	r2, [r3, #8]
      break;
 8006b1a:	e04f      	b.n	8006bbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	6899      	ldr	r1, [r3, #8]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f000 fb1e 	bl	800716c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b3e:	609a      	str	r2, [r3, #8]
      break;
 8006b40:	e03c      	b.n	8006bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	6859      	ldr	r1, [r3, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f000 fa92 	bl	8007078 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2150      	movs	r1, #80	; 0x50
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 faeb 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006b60:	e02c      	b.n	8006bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6859      	ldr	r1, [r3, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f000 fab1 	bl	80070d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2160      	movs	r1, #96	; 0x60
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fadb 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006b80:	e01c      	b.n	8006bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6859      	ldr	r1, [r3, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f000 fa72 	bl	8007078 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2140      	movs	r1, #64	; 0x40
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 facb 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006ba0:	e00c      	b.n	8006bbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f000 fac2 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006bb2:	e003      	b.n	8006bbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb8:	e000      	b.n	8006bbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a40      	ldr	r2, [pc, #256]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf6:	d00f      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a3d      	ldr	r2, [pc, #244]	; (8006cf0 <TIM_Base_SetConfig+0x118>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00b      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a3c      	ldr	r2, [pc, #240]	; (8006cf4 <TIM_Base_SetConfig+0x11c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d007      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a3b      	ldr	r2, [pc, #236]	; (8006cf8 <TIM_Base_SetConfig+0x120>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a3a      	ldr	r2, [pc, #232]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d108      	bne.n	8006c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a2f      	ldr	r2, [pc, #188]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d02b      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c38:	d027      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a2c      	ldr	r2, [pc, #176]	; (8006cf0 <TIM_Base_SetConfig+0x118>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d023      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a2b      	ldr	r2, [pc, #172]	; (8006cf4 <TIM_Base_SetConfig+0x11c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d01f      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a2a      	ldr	r2, [pc, #168]	; (8006cf8 <TIM_Base_SetConfig+0x120>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01b      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a29      	ldr	r2, [pc, #164]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d017      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a28      	ldr	r2, [pc, #160]	; (8006d00 <TIM_Base_SetConfig+0x128>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d013      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a27      	ldr	r2, [pc, #156]	; (8006d04 <TIM_Base_SetConfig+0x12c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00f      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a26      	ldr	r2, [pc, #152]	; (8006d08 <TIM_Base_SetConfig+0x130>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00b      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a25      	ldr	r2, [pc, #148]	; (8006d0c <TIM_Base_SetConfig+0x134>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d007      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a24      	ldr	r2, [pc, #144]	; (8006d10 <TIM_Base_SetConfig+0x138>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d003      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a23      	ldr	r2, [pc, #140]	; (8006d14 <TIM_Base_SetConfig+0x13c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d108      	bne.n	8006c9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_Base_SetConfig+0xf8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d103      	bne.n	8006cd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	615a      	str	r2, [r3, #20]
}
 8006cde:	bf00      	nop
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00
 8006cfc:	40010400 	.word	0x40010400
 8006d00:	40014000 	.word	0x40014000
 8006d04:	40014400 	.word	0x40014400
 8006d08:	40014800 	.word	0x40014800
 8006d0c:	40001800 	.word	0x40001800
 8006d10:	40001c00 	.word	0x40001c00
 8006d14:	40002000 	.word	0x40002000

08006d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f023 0201 	bic.w	r2, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0303 	bic.w	r3, r3, #3
 8006d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 0302 	bic.w	r3, r3, #2
 8006d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a20      	ldr	r2, [pc, #128]	; (8006df0 <TIM_OC1_SetConfig+0xd8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d003      	beq.n	8006d7c <TIM_OC1_SetConfig+0x64>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a1f      	ldr	r2, [pc, #124]	; (8006df4 <TIM_OC1_SetConfig+0xdc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d10c      	bne.n	8006d96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f023 0308 	bic.w	r3, r3, #8
 8006d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f023 0304 	bic.w	r3, r3, #4
 8006d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a15      	ldr	r2, [pc, #84]	; (8006df0 <TIM_OC1_SetConfig+0xd8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d003      	beq.n	8006da6 <TIM_OC1_SetConfig+0x8e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a14      	ldr	r2, [pc, #80]	; (8006df4 <TIM_OC1_SetConfig+0xdc>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d111      	bne.n	8006dca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	621a      	str	r2, [r3, #32]
}
 8006de4:	bf00      	nop
 8006de6:	371c      	adds	r7, #28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	40010000 	.word	0x40010000
 8006df4:	40010400 	.word	0x40010400

08006df8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f023 0210 	bic.w	r2, r3, #16
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	021b      	lsls	r3, r3, #8
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f023 0320 	bic.w	r3, r3, #32
 8006e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a22      	ldr	r2, [pc, #136]	; (8006edc <TIM_OC2_SetConfig+0xe4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_OC2_SetConfig+0x68>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a21      	ldr	r2, [pc, #132]	; (8006ee0 <TIM_OC2_SetConfig+0xe8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d10d      	bne.n	8006e7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	011b      	lsls	r3, r3, #4
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a17      	ldr	r2, [pc, #92]	; (8006edc <TIM_OC2_SetConfig+0xe4>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d003      	beq.n	8006e8c <TIM_OC2_SetConfig+0x94>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a16      	ldr	r2, [pc, #88]	; (8006ee0 <TIM_OC2_SetConfig+0xe8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d113      	bne.n	8006eb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	621a      	str	r2, [r3, #32]
}
 8006ece:	bf00      	nop
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40010400 	.word	0x40010400

08006ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0303 	bic.w	r3, r3, #3
 8006f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a21      	ldr	r2, [pc, #132]	; (8006fc4 <TIM_OC3_SetConfig+0xe0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d003      	beq.n	8006f4a <TIM_OC3_SetConfig+0x66>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a20      	ldr	r2, [pc, #128]	; (8006fc8 <TIM_OC3_SetConfig+0xe4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d10d      	bne.n	8006f66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a16      	ldr	r2, [pc, #88]	; (8006fc4 <TIM_OC3_SetConfig+0xe0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <TIM_OC3_SetConfig+0x92>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a15      	ldr	r2, [pc, #84]	; (8006fc8 <TIM_OC3_SetConfig+0xe4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d113      	bne.n	8006f9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	621a      	str	r2, [r3, #32]
}
 8006fb8:	bf00      	nop
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	40010000 	.word	0x40010000
 8006fc8:	40010400 	.word	0x40010400

08006fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	031b      	lsls	r3, r3, #12
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a12      	ldr	r2, [pc, #72]	; (8007070 <TIM_OC4_SetConfig+0xa4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <TIM_OC4_SetConfig+0x68>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a11      	ldr	r2, [pc, #68]	; (8007074 <TIM_OC4_SetConfig+0xa8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d109      	bne.n	8007048 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800703a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	019b      	lsls	r3, r3, #6
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	4313      	orrs	r3, r2
 8007046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40010000 	.word	0x40010000
 8007074:	40010400 	.word	0x40010400

08007078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	f023 0201 	bic.w	r2, r3, #1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 030a 	bic.w	r3, r3, #10
 80070b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	621a      	str	r2, [r3, #32]
}
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b087      	sub	sp, #28
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0210 	bic.w	r2, r3, #16
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007100:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	031b      	lsls	r3, r3, #12
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007112:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	f043 0307 	orr.w	r3, r3, #7
 8007158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	609a      	str	r2, [r3, #8]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	021a      	lsls	r2, r3, #8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	431a      	orrs	r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4313      	orrs	r3, r2
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	609a      	str	r2, [r3, #8]
}
 80071a0:	bf00      	nop
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f003 031f 	and.w	r3, r3, #31
 80071be:	2201      	movs	r2, #1
 80071c0:	fa02 f303 	lsl.w	r3, r2, r3
 80071c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a1a      	ldr	r2, [r3, #32]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	43db      	mvns	r3, r3
 80071ce:	401a      	ands	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a1a      	ldr	r2, [r3, #32]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	fa01 f303 	lsl.w	r3, r1, r3
 80071e4:	431a      	orrs	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
	...

080071f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800720c:	2302      	movs	r3, #2
 800720e:	e05a      	b.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a21      	ldr	r2, [pc, #132]	; (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d022      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725c:	d01d      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1d      	ldr	r2, [pc, #116]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d018      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1b      	ldr	r2, [pc, #108]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1a      	ldr	r2, [pc, #104]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00e      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a18      	ldr	r2, [pc, #96]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d009      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a17      	ldr	r2, [pc, #92]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d004      	beq.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a15      	ldr	r2, [pc, #84]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d10c      	bne.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	40010000 	.word	0x40010000
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800
 80072e0:	40000c00 	.word	0x40000c00
 80072e4:	40010400 	.word	0x40010400
 80072e8:	40014000 	.word	0x40014000
 80072ec:	40001800 	.word	0x40001800

080072f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007308:	2302      	movs	r3, #2
 800730a:	e03d      	b.n	8007388 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	4313      	orrs	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4313      	orrs	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e03f      	b.n	8007426 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fb f8bc 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2224      	movs	r2, #36	; 0x24
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f9cb 	bl	8007774 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	695a      	ldr	r2, [r3, #20]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800740c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b08a      	sub	sp, #40	; 0x28
 8007432:	af02      	add	r7, sp, #8
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b20      	cmp	r3, #32
 800744c:	d17c      	bne.n	8007548 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <HAL_UART_Transmit+0x2c>
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e075      	b.n	800754a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_UART_Transmit+0x3e>
 8007468:	2302      	movs	r3, #2
 800746a:	e06e      	b.n	800754a <HAL_UART_Transmit+0x11c>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2221      	movs	r2, #33	; 0x21
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007482:	f7fb fe11 	bl	80030a8 <HAL_GetTick>
 8007486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	88fa      	ldrh	r2, [r7, #6]
 8007492:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749c:	d108      	bne.n	80074b0 <HAL_UART_Transmit+0x82>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d104      	bne.n	80074b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	e003      	b.n	80074b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074c0:	e02a      	b.n	8007518 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2200      	movs	r2, #0
 80074ca:	2180      	movs	r1, #128	; 0x80
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f8e2 	bl	8007696 <UART_WaitOnFlagUntilTimeout>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e036      	b.n	800754a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10b      	bne.n	80074fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	3302      	adds	r3, #2
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	e007      	b.n	800750a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	781a      	ldrb	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	3301      	adds	r3, #1
 8007508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1cf      	bne.n	80074c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2200      	movs	r2, #0
 800752a:	2140      	movs	r1, #64	; 0x40
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 f8b2 	bl	8007696 <UART_WaitOnFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e006      	b.n	800754a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	e000      	b.n	800754a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007548:	2302      	movs	r3, #2
  }
}
 800754a:	4618      	mov	r0, r3
 800754c:	3720      	adds	r7, #32
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b08a      	sub	sp, #40	; 0x28
 8007556:	af02      	add	r7, sp, #8
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	603b      	str	r3, [r7, #0]
 800755e:	4613      	mov	r3, r2
 8007560:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b20      	cmp	r3, #32
 8007570:	f040 808c 	bne.w	800768c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_UART_Receive+0x2e>
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e084      	b.n	800768e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_UART_Receive+0x40>
 800758e:	2302      	movs	r3, #2
 8007590:	e07d      	b.n	800768e <HAL_UART_Receive+0x13c>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2222      	movs	r2, #34	; 0x22
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075ae:	f7fb fd7b 	bl	80030a8 <HAL_GetTick>
 80075b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	88fa      	ldrh	r2, [r7, #6]
 80075b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	88fa      	ldrh	r2, [r7, #6]
 80075be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c8:	d108      	bne.n	80075dc <HAL_UART_Receive+0x8a>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d104      	bne.n	80075dc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	61bb      	str	r3, [r7, #24]
 80075da:	e003      	b.n	80075e4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80075ec:	e043      	b.n	8007676 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2200      	movs	r2, #0
 80075f6:	2120      	movs	r1, #32
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f84c 	bl	8007696 <UART_WaitOnFlagUntilTimeout>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e042      	b.n	800768e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10c      	bne.n	8007628 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	b29b      	uxth	r3, r3
 8007616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761a:	b29a      	uxth	r2, r3
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	3302      	adds	r3, #2
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	e01f      	b.n	8007668 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007630:	d007      	beq.n	8007642 <HAL_UART_Receive+0xf0>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10a      	bne.n	8007650 <HAL_UART_Receive+0xfe>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	b2da      	uxtb	r2, r3
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	e008      	b.n	8007662 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765c:	b2da      	uxtb	r2, r3
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	3301      	adds	r3, #1
 8007666:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1b6      	bne.n	80075ee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	e000      	b.n	800768e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800768c:	2302      	movs	r3, #2
  }
}
 800768e:	4618      	mov	r0, r3
 8007690:	3720      	adds	r7, #32
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b090      	sub	sp, #64	; 0x40
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	4613      	mov	r3, r2
 80076a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a6:	e050      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	d04c      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d007      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80076b6:	f7fb fcf7 	bl	80030a8 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d241      	bcs.n	800774a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	330c      	adds	r3, #12
 80076cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	330c      	adds	r3, #12
 80076e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076e6:	637a      	str	r2, [r7, #52]	; 0x34
 80076e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e5      	bne.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3314      	adds	r3, #20
 8007700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	613b      	str	r3, [r7, #16]
   return(result);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	63bb      	str	r3, [r7, #56]	; 0x38
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3314      	adds	r3, #20
 8007718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800771a:	623a      	str	r2, [r7, #32]
 800771c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	69f9      	ldr	r1, [r7, #28]
 8007720:	6a3a      	ldr	r2, [r7, #32]
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	61bb      	str	r3, [r7, #24]
   return(result);
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e5      	bne.n	80076fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2220      	movs	r2, #32
 8007732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2220      	movs	r2, #32
 800773a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e00f      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4013      	ands	r3, r2
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	429a      	cmp	r2, r3
 8007758:	bf0c      	ite	eq
 800775a:	2301      	moveq	r3, #1
 800775c:	2300      	movne	r3, #0
 800775e:	b2db      	uxtb	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	429a      	cmp	r2, r3
 8007766:	d09f      	beq.n	80076a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3740      	adds	r7, #64	; 0x40
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	b09f      	sub	sp, #124	; 0x7c
 800777a:	af00      	add	r7, sp, #0
 800777c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800777e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800778a:	68d9      	ldr	r1, [r3, #12]
 800778c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	ea40 0301 	orr.w	r3, r0, r1
 8007794:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007798:	689a      	ldr	r2, [r3, #8]
 800779a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	431a      	orrs	r2, r3
 80077a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80077ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80077b8:	f021 010c 	bic.w	r1, r1, #12
 80077bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077c2:	430b      	orrs	r3, r1
 80077c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077d2:	6999      	ldr	r1, [r3, #24]
 80077d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	ea40 0301 	orr.w	r3, r0, r1
 80077dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	4bc5      	ldr	r3, [pc, #788]	; (8007af8 <UART_SetConfig+0x384>)
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d004      	beq.n	80077f2 <UART_SetConfig+0x7e>
 80077e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	4bc3      	ldr	r3, [pc, #780]	; (8007afc <UART_SetConfig+0x388>)
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d103      	bne.n	80077fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077f2:	f7fe fbed 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 80077f6:	6778      	str	r0, [r7, #116]	; 0x74
 80077f8:	e002      	b.n	8007800 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077fa:	f7fe fbd5 	bl	8005fa8 <HAL_RCC_GetPCLK1Freq>
 80077fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007808:	f040 80b6 	bne.w	8007978 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800780c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800780e:	461c      	mov	r4, r3
 8007810:	f04f 0500 	mov.w	r5, #0
 8007814:	4622      	mov	r2, r4
 8007816:	462b      	mov	r3, r5
 8007818:	1891      	adds	r1, r2, r2
 800781a:	6439      	str	r1, [r7, #64]	; 0x40
 800781c:	415b      	adcs	r3, r3
 800781e:	647b      	str	r3, [r7, #68]	; 0x44
 8007820:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007824:	1912      	adds	r2, r2, r4
 8007826:	eb45 0303 	adc.w	r3, r5, r3
 800782a:	f04f 0000 	mov.w	r0, #0
 800782e:	f04f 0100 	mov.w	r1, #0
 8007832:	00d9      	lsls	r1, r3, #3
 8007834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007838:	00d0      	lsls	r0, r2, #3
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	1911      	adds	r1, r2, r4
 8007840:	6639      	str	r1, [r7, #96]	; 0x60
 8007842:	416b      	adcs	r3, r5
 8007844:	667b      	str	r3, [r7, #100]	; 0x64
 8007846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	461a      	mov	r2, r3
 800784c:	f04f 0300 	mov.w	r3, #0
 8007850:	1891      	adds	r1, r2, r2
 8007852:	63b9      	str	r1, [r7, #56]	; 0x38
 8007854:	415b      	adcs	r3, r3
 8007856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007858:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800785c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007860:	f7f9 fa12 	bl	8000c88 <__aeabi_uldivmod>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4ba5      	ldr	r3, [pc, #660]	; (8007b00 <UART_SetConfig+0x38c>)
 800786a:	fba3 2302 	umull	r2, r3, r3, r2
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	011e      	lsls	r6, r3, #4
 8007872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007874:	461c      	mov	r4, r3
 8007876:	f04f 0500 	mov.w	r5, #0
 800787a:	4622      	mov	r2, r4
 800787c:	462b      	mov	r3, r5
 800787e:	1891      	adds	r1, r2, r2
 8007880:	6339      	str	r1, [r7, #48]	; 0x30
 8007882:	415b      	adcs	r3, r3
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
 8007886:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800788a:	1912      	adds	r2, r2, r4
 800788c:	eb45 0303 	adc.w	r3, r5, r3
 8007890:	f04f 0000 	mov.w	r0, #0
 8007894:	f04f 0100 	mov.w	r1, #0
 8007898:	00d9      	lsls	r1, r3, #3
 800789a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800789e:	00d0      	lsls	r0, r2, #3
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	1911      	adds	r1, r2, r4
 80078a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80078a8:	416b      	adcs	r3, r5
 80078aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	461a      	mov	r2, r3
 80078b2:	f04f 0300 	mov.w	r3, #0
 80078b6:	1891      	adds	r1, r2, r2
 80078b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80078ba:	415b      	adcs	r3, r3
 80078bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80078c6:	f7f9 f9df 	bl	8000c88 <__aeabi_uldivmod>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4b8c      	ldr	r3, [pc, #560]	; (8007b00 <UART_SetConfig+0x38c>)
 80078d0:	fba3 1302 	umull	r1, r3, r3, r2
 80078d4:	095b      	lsrs	r3, r3, #5
 80078d6:	2164      	movs	r1, #100	; 0x64
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	3332      	adds	r3, #50	; 0x32
 80078e2:	4a87      	ldr	r2, [pc, #540]	; (8007b00 <UART_SetConfig+0x38c>)
 80078e4:	fba2 2303 	umull	r2, r3, r2, r3
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078f0:	441e      	add	r6, r3
 80078f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078f4:	4618      	mov	r0, r3
 80078f6:	f04f 0100 	mov.w	r1, #0
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	1894      	adds	r4, r2, r2
 8007900:	623c      	str	r4, [r7, #32]
 8007902:	415b      	adcs	r3, r3
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
 8007906:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800790a:	1812      	adds	r2, r2, r0
 800790c:	eb41 0303 	adc.w	r3, r1, r3
 8007910:	f04f 0400 	mov.w	r4, #0
 8007914:	f04f 0500 	mov.w	r5, #0
 8007918:	00dd      	lsls	r5, r3, #3
 800791a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800791e:	00d4      	lsls	r4, r2, #3
 8007920:	4622      	mov	r2, r4
 8007922:	462b      	mov	r3, r5
 8007924:	1814      	adds	r4, r2, r0
 8007926:	653c      	str	r4, [r7, #80]	; 0x50
 8007928:	414b      	adcs	r3, r1
 800792a:	657b      	str	r3, [r7, #84]	; 0x54
 800792c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	461a      	mov	r2, r3
 8007932:	f04f 0300 	mov.w	r3, #0
 8007936:	1891      	adds	r1, r2, r2
 8007938:	61b9      	str	r1, [r7, #24]
 800793a:	415b      	adcs	r3, r3
 800793c:	61fb      	str	r3, [r7, #28]
 800793e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007942:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007946:	f7f9 f99f 	bl	8000c88 <__aeabi_uldivmod>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4b6c      	ldr	r3, [pc, #432]	; (8007b00 <UART_SetConfig+0x38c>)
 8007950:	fba3 1302 	umull	r1, r3, r3, r2
 8007954:	095b      	lsrs	r3, r3, #5
 8007956:	2164      	movs	r1, #100	; 0x64
 8007958:	fb01 f303 	mul.w	r3, r1, r3
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	3332      	adds	r3, #50	; 0x32
 8007962:	4a67      	ldr	r2, [pc, #412]	; (8007b00 <UART_SetConfig+0x38c>)
 8007964:	fba2 2303 	umull	r2, r3, r2, r3
 8007968:	095b      	lsrs	r3, r3, #5
 800796a:	f003 0207 	and.w	r2, r3, #7
 800796e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4432      	add	r2, r6
 8007974:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007976:	e0b9      	b.n	8007aec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800797a:	461c      	mov	r4, r3
 800797c:	f04f 0500 	mov.w	r5, #0
 8007980:	4622      	mov	r2, r4
 8007982:	462b      	mov	r3, r5
 8007984:	1891      	adds	r1, r2, r2
 8007986:	6139      	str	r1, [r7, #16]
 8007988:	415b      	adcs	r3, r3
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007990:	1912      	adds	r2, r2, r4
 8007992:	eb45 0303 	adc.w	r3, r5, r3
 8007996:	f04f 0000 	mov.w	r0, #0
 800799a:	f04f 0100 	mov.w	r1, #0
 800799e:	00d9      	lsls	r1, r3, #3
 80079a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079a4:	00d0      	lsls	r0, r2, #3
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	eb12 0804 	adds.w	r8, r2, r4
 80079ae:	eb43 0905 	adc.w	r9, r3, r5
 80079b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f04f 0100 	mov.w	r1, #0
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	f04f 0300 	mov.w	r3, #0
 80079c4:	008b      	lsls	r3, r1, #2
 80079c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079ca:	0082      	lsls	r2, r0, #2
 80079cc:	4640      	mov	r0, r8
 80079ce:	4649      	mov	r1, r9
 80079d0:	f7f9 f95a 	bl	8000c88 <__aeabi_uldivmod>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4b49      	ldr	r3, [pc, #292]	; (8007b00 <UART_SetConfig+0x38c>)
 80079da:	fba3 2302 	umull	r2, r3, r3, r2
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	011e      	lsls	r6, r3, #4
 80079e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e4:	4618      	mov	r0, r3
 80079e6:	f04f 0100 	mov.w	r1, #0
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	1894      	adds	r4, r2, r2
 80079f0:	60bc      	str	r4, [r7, #8]
 80079f2:	415b      	adcs	r3, r3
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079fa:	1812      	adds	r2, r2, r0
 80079fc:	eb41 0303 	adc.w	r3, r1, r3
 8007a00:	f04f 0400 	mov.w	r4, #0
 8007a04:	f04f 0500 	mov.w	r5, #0
 8007a08:	00dd      	lsls	r5, r3, #3
 8007a0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a0e:	00d4      	lsls	r4, r2, #3
 8007a10:	4622      	mov	r2, r4
 8007a12:	462b      	mov	r3, r5
 8007a14:	1814      	adds	r4, r2, r0
 8007a16:	64bc      	str	r4, [r7, #72]	; 0x48
 8007a18:	414b      	adcs	r3, r1
 8007a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f04f 0100 	mov.w	r1, #0
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	008b      	lsls	r3, r1, #2
 8007a30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a34:	0082      	lsls	r2, r0, #2
 8007a36:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a3a:	f7f9 f925 	bl	8000c88 <__aeabi_uldivmod>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4b2f      	ldr	r3, [pc, #188]	; (8007b00 <UART_SetConfig+0x38c>)
 8007a44:	fba3 1302 	umull	r1, r3, r3, r2
 8007a48:	095b      	lsrs	r3, r3, #5
 8007a4a:	2164      	movs	r1, #100	; 0x64
 8007a4c:	fb01 f303 	mul.w	r3, r1, r3
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	3332      	adds	r3, #50	; 0x32
 8007a56:	4a2a      	ldr	r2, [pc, #168]	; (8007b00 <UART_SetConfig+0x38c>)
 8007a58:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5c:	095b      	lsrs	r3, r3, #5
 8007a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a62:	441e      	add	r6, r3
 8007a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a66:	4618      	mov	r0, r3
 8007a68:	f04f 0100 	mov.w	r1, #0
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	1894      	adds	r4, r2, r2
 8007a72:	603c      	str	r4, [r7, #0]
 8007a74:	415b      	adcs	r3, r3
 8007a76:	607b      	str	r3, [r7, #4]
 8007a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a7c:	1812      	adds	r2, r2, r0
 8007a7e:	eb41 0303 	adc.w	r3, r1, r3
 8007a82:	f04f 0400 	mov.w	r4, #0
 8007a86:	f04f 0500 	mov.w	r5, #0
 8007a8a:	00dd      	lsls	r5, r3, #3
 8007a8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a90:	00d4      	lsls	r4, r2, #3
 8007a92:	4622      	mov	r2, r4
 8007a94:	462b      	mov	r3, r5
 8007a96:	eb12 0a00 	adds.w	sl, r2, r0
 8007a9a:	eb43 0b01 	adc.w	fp, r3, r1
 8007a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f04f 0100 	mov.w	r1, #0
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	008b      	lsls	r3, r1, #2
 8007ab2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ab6:	0082      	lsls	r2, r0, #2
 8007ab8:	4650      	mov	r0, sl
 8007aba:	4659      	mov	r1, fp
 8007abc:	f7f9 f8e4 	bl	8000c88 <__aeabi_uldivmod>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4b0e      	ldr	r3, [pc, #56]	; (8007b00 <UART_SetConfig+0x38c>)
 8007ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8007aca:	095b      	lsrs	r3, r3, #5
 8007acc:	2164      	movs	r1, #100	; 0x64
 8007ace:	fb01 f303 	mul.w	r3, r1, r3
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	3332      	adds	r3, #50	; 0x32
 8007ad8:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <UART_SetConfig+0x38c>)
 8007ada:	fba2 2303 	umull	r2, r3, r2, r3
 8007ade:	095b      	lsrs	r3, r3, #5
 8007ae0:	f003 020f 	and.w	r2, r3, #15
 8007ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4432      	add	r2, r6
 8007aea:	609a      	str	r2, [r3, #8]
}
 8007aec:	bf00      	nop
 8007aee:	377c      	adds	r7, #124	; 0x7c
 8007af0:	46bd      	mov	sp, r7
 8007af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af6:	bf00      	nop
 8007af8:	40011000 	.word	0x40011000
 8007afc:	40011400 	.word	0x40011400
 8007b00:	51eb851f 	.word	0x51eb851f

08007b04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007b08:	4904      	ldr	r1, [pc, #16]	; (8007b1c <MX_FATFS_Init+0x18>)
 8007b0a:	4805      	ldr	r0, [pc, #20]	; (8007b20 <MX_FATFS_Init+0x1c>)
 8007b0c:	f002 fc46 	bl	800a39c <FATFS_LinkDriver>
 8007b10:	4603      	mov	r3, r0
 8007b12:	461a      	mov	r2, r3
 8007b14:	4b03      	ldr	r3, [pc, #12]	; (8007b24 <MX_FATFS_Init+0x20>)
 8007b16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b18:	bf00      	nop
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	200006b0 	.word	0x200006b0
 8007b20:	20000064 	.word	0x20000064
 8007b24:	200006b4 	.word	0x200006b4

08007b28 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007b2c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_initialize(pdrv);
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fa fecb 	bl	80028e0 <USER_SPI_initialize>
 8007b4a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_status(pdrv);
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fa ffa9 	bl	8002ab8 <USER_SPI_status>
 8007b66:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8007b80:	7bf8      	ldrb	r0, [r7, #15]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	f7fa ffac 	bl	8002ae4 <USER_SPI_read>
 8007b8c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8007ba6:	7bf8      	ldrb	r0, [r7, #15]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	f7fa ffff 	bl	8002bb0 <USER_SPI_write>
 8007bb2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	603a      	str	r2, [r7, #0]
 8007bc6:	71fb      	strb	r3, [r7, #7]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007bcc:	79b9      	ldrb	r1, [r7, #6]
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fb f868 	bl	8002ca8 <USER_SPI_ioctl>
 8007bd8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	4a08      	ldr	r2, [pc, #32]	; (8007c14 <disk_status+0x30>)
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	79fa      	ldrb	r2, [r7, #7]
 8007bfc:	4905      	ldr	r1, [pc, #20]	; (8007c14 <disk_status+0x30>)
 8007bfe:	440a      	add	r2, r1
 8007c00:	7a12      	ldrb	r2, [r2, #8]
 8007c02:	4610      	mov	r0, r2
 8007c04:	4798      	blx	r3
 8007c06:	4603      	mov	r3, r0
 8007c08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	200002b4 	.word	0x200002b4

08007c18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	4a0d      	ldr	r2, [pc, #52]	; (8007c60 <disk_initialize+0x48>)
 8007c2a:	5cd3      	ldrb	r3, [r2, r3]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d111      	bne.n	8007c54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007c30:	79fb      	ldrb	r3, [r7, #7]
 8007c32:	4a0b      	ldr	r2, [pc, #44]	; (8007c60 <disk_initialize+0x48>)
 8007c34:	2101      	movs	r1, #1
 8007c36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	4a09      	ldr	r2, [pc, #36]	; (8007c60 <disk_initialize+0x48>)
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	79fa      	ldrb	r2, [r7, #7]
 8007c46:	4906      	ldr	r1, [pc, #24]	; (8007c60 <disk_initialize+0x48>)
 8007c48:	440a      	add	r2, r1
 8007c4a:	7a12      	ldrb	r2, [r2, #8]
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	200002b4 	.word	0x200002b4

08007c64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007c64:	b590      	push	{r4, r7, lr}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	607a      	str	r2, [r7, #4]
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	4603      	mov	r3, r0
 8007c72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <disk_read+0x3c>)
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	689c      	ldr	r4, [r3, #8]
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	4a07      	ldr	r2, [pc, #28]	; (8007ca0 <disk_read+0x3c>)
 8007c84:	4413      	add	r3, r2
 8007c86:	7a18      	ldrb	r0, [r3, #8]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	47a0      	blx	r4
 8007c90:	4603      	mov	r3, r0
 8007c92:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	371c      	adds	r7, #28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd90      	pop	{r4, r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	200002b4 	.word	0x200002b4

08007ca4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007ca4:	b590      	push	{r4, r7, lr}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	4a0a      	ldr	r2, [pc, #40]	; (8007ce0 <disk_write+0x3c>)
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	68dc      	ldr	r4, [r3, #12]
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	4a07      	ldr	r2, [pc, #28]	; (8007ce0 <disk_write+0x3c>)
 8007cc4:	4413      	add	r3, r2
 8007cc6:	7a18      	ldrb	r0, [r3, #8]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	47a0      	blx	r4
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd90      	pop	{r4, r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	200002b4 	.word	0x200002b4

08007ce4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	603a      	str	r2, [r7, #0]
 8007cee:	71fb      	strb	r3, [r7, #7]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	4a09      	ldr	r2, [pc, #36]	; (8007d1c <disk_ioctl+0x38>)
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	79fa      	ldrb	r2, [r7, #7]
 8007d02:	4906      	ldr	r1, [pc, #24]	; (8007d1c <disk_ioctl+0x38>)
 8007d04:	440a      	add	r2, r1
 8007d06:	7a10      	ldrb	r0, [r2, #8]
 8007d08:	79b9      	ldrb	r1, [r7, #6]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	4798      	blx	r3
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]
  return res;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	200002b4 	.word	0x200002b4

08007d20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007d30:	89fb      	ldrh	r3, [r7, #14]
 8007d32:	021b      	lsls	r3, r3, #8
 8007d34:	b21a      	sxth	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	b21b      	sxth	r3, r3
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	b21b      	sxth	r3, r3
 8007d40:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007d42:	89fb      	ldrh	r3, [r7, #14]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3303      	adds	r3, #3
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	3202      	adds	r2, #2
 8007d68:	7812      	ldrb	r2, [r2, #0]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	3201      	adds	r2, #1
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	7812      	ldrb	r2, [r2, #0]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d88:	68fb      	ldr	r3, [r7, #12]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	887a      	ldrh	r2, [r7, #2]
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	887b      	ldrh	r3, [r7, #2]
 8007db0:	0a1b      	lsrs	r3, r3, #8
 8007db2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	607a      	str	r2, [r7, #4]
 8007dba:	887a      	ldrh	r2, [r7, #2]
 8007dbc:	b2d2      	uxtb	r2, r2
 8007dbe:	701a      	strb	r2, [r3, #0]
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	0a1b      	lsrs	r3, r3, #8
 8007de6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	0a1b      	lsrs	r3, r3, #8
 8007df8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	0a1b      	lsrs	r3, r3, #8
 8007e0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	607a      	str	r2, [r7, #4]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00d      	beq.n	8007e5a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	1c53      	adds	r3, r2, #1
 8007e42:	613b      	str	r3, [r7, #16]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	1c59      	adds	r1, r3, #1
 8007e48:	6179      	str	r1, [r7, #20]
 8007e4a:	7812      	ldrb	r2, [r2, #0]
 8007e4c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	607b      	str	r3, [r7, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f1      	bne.n	8007e3e <mem_cpy+0x1a>
	}
}
 8007e5a:	bf00      	nop
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007e66:	b480      	push	{r7}
 8007e68:	b087      	sub	sp, #28
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	617a      	str	r2, [r7, #20]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	b2d2      	uxtb	r2, r2
 8007e80:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	607b      	str	r3, [r7, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1f3      	bne.n	8007e76 <mem_set+0x10>
}
 8007e8e:	bf00      	nop
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007e9c:	b480      	push	{r7}
 8007e9e:	b089      	sub	sp, #36	; 0x24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	61fb      	str	r3, [r7, #28]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	61fa      	str	r2, [r7, #28]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	61ba      	str	r2, [r7, #24]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	1acb      	subs	r3, r1, r3
 8007ec8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	607b      	str	r3, [r7, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <mem_cmp+0x40>
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d0eb      	beq.n	8007eb4 <mem_cmp+0x18>

	return r;
 8007edc:	697b      	ldr	r3, [r7, #20]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3724      	adds	r7, #36	; 0x24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007ef4:	e002      	b.n	8007efc <chk_chr+0x12>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	607b      	str	r3, [r7, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <chk_chr+0x26>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d1f2      	bne.n	8007ef6 <chk_chr+0xc>
	return *str;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	781b      	ldrb	r3, [r3, #0]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60bb      	str	r3, [r7, #8]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	e029      	b.n	8007f88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007f34:	4a27      	ldr	r2, [pc, #156]	; (8007fd4 <chk_lock+0xb4>)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	4413      	add	r3, r2
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d01d      	beq.n	8007f7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f42:	4a24      	ldr	r2, [pc, #144]	; (8007fd4 <chk_lock+0xb4>)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	011b      	lsls	r3, r3, #4
 8007f48:	4413      	add	r3, r2
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d116      	bne.n	8007f82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007f54:	4a1f      	ldr	r2, [pc, #124]	; (8007fd4 <chk_lock+0xb4>)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	011b      	lsls	r3, r3, #4
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d10c      	bne.n	8007f82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f68:	4a1a      	ldr	r2, [pc, #104]	; (8007fd4 <chk_lock+0xb4>)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	011b      	lsls	r3, r3, #4
 8007f6e:	4413      	add	r3, r2
 8007f70:	3308      	adds	r3, #8
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d102      	bne.n	8007f82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f7c:	e007      	b.n	8007f8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3301      	adds	r3, #1
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d9d2      	bls.n	8007f34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d109      	bne.n	8007fa8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d102      	bne.n	8007fa0 <chk_lock+0x80>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d101      	bne.n	8007fa4 <chk_lock+0x84>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e010      	b.n	8007fc6 <chk_lock+0xa6>
 8007fa4:	2312      	movs	r3, #18
 8007fa6:	e00e      	b.n	8007fc6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d108      	bne.n	8007fc0 <chk_lock+0xa0>
 8007fae:	4a09      	ldr	r2, [pc, #36]	; (8007fd4 <chk_lock+0xb4>)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	4413      	add	r3, r2
 8007fb6:	330c      	adds	r3, #12
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fbe:	d101      	bne.n	8007fc4 <chk_lock+0xa4>
 8007fc0:	2310      	movs	r3, #16
 8007fc2:	e000      	b.n	8007fc6 <chk_lock+0xa6>
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	20000294 	.word	0x20000294

08007fd8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	607b      	str	r3, [r7, #4]
 8007fe2:	e002      	b.n	8007fea <enq_lock+0x12>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	607b      	str	r3, [r7, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d806      	bhi.n	8007ffe <enq_lock+0x26>
 8007ff0:	4a09      	ldr	r2, [pc, #36]	; (8008018 <enq_lock+0x40>)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	4413      	add	r3, r2
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1f2      	bne.n	8007fe4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b02      	cmp	r3, #2
 8008002:	bf14      	ite	ne
 8008004:	2301      	movne	r3, #1
 8008006:	2300      	moveq	r3, #0
 8008008:	b2db      	uxtb	r3, r3
}
 800800a:	4618      	mov	r0, r3
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	20000294 	.word	0x20000294

0800801c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	e01f      	b.n	800806c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800802c:	4a41      	ldr	r2, [pc, #260]	; (8008134 <inc_lock+0x118>)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	4413      	add	r3, r2
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d113      	bne.n	8008066 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800803e:	4a3d      	ldr	r2, [pc, #244]	; (8008134 <inc_lock+0x118>)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	4413      	add	r3, r2
 8008046:	3304      	adds	r3, #4
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800804e:	429a      	cmp	r2, r3
 8008050:	d109      	bne.n	8008066 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008052:	4a38      	ldr	r2, [pc, #224]	; (8008134 <inc_lock+0x118>)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	011b      	lsls	r3, r3, #4
 8008058:	4413      	add	r3, r2
 800805a:	3308      	adds	r3, #8
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008062:	429a      	cmp	r2, r3
 8008064:	d006      	beq.n	8008074 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3301      	adds	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d9dc      	bls.n	800802c <inc_lock+0x10>
 8008072:	e000      	b.n	8008076 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008074:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d132      	bne.n	80080e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	e002      	b.n	8008088 <inc_lock+0x6c>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d806      	bhi.n	800809c <inc_lock+0x80>
 800808e:	4a29      	ldr	r2, [pc, #164]	; (8008134 <inc_lock+0x118>)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	4413      	add	r3, r2
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f2      	bne.n	8008082 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d101      	bne.n	80080a6 <inc_lock+0x8a>
 80080a2:	2300      	movs	r3, #0
 80080a4:	e040      	b.n	8008128 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4922      	ldr	r1, [pc, #136]	; (8008134 <inc_lock+0x118>)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	440b      	add	r3, r1
 80080b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	491e      	ldr	r1, [pc, #120]	; (8008134 <inc_lock+0x118>)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	440b      	add	r3, r1
 80080c0:	3304      	adds	r3, #4
 80080c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	695a      	ldr	r2, [r3, #20]
 80080c8:	491a      	ldr	r1, [pc, #104]	; (8008134 <inc_lock+0x118>)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	011b      	lsls	r3, r3, #4
 80080ce:	440b      	add	r3, r1
 80080d0:	3308      	adds	r3, #8
 80080d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80080d4:	4a17      	ldr	r2, [pc, #92]	; (8008134 <inc_lock+0x118>)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	4413      	add	r3, r2
 80080dc:	330c      	adds	r3, #12
 80080de:	2200      	movs	r2, #0
 80080e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d009      	beq.n	80080fc <inc_lock+0xe0>
 80080e8:	4a12      	ldr	r2, [pc, #72]	; (8008134 <inc_lock+0x118>)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	4413      	add	r3, r2
 80080f0:	330c      	adds	r3, #12
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <inc_lock+0xe0>
 80080f8:	2300      	movs	r3, #0
 80080fa:	e015      	b.n	8008128 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d108      	bne.n	8008114 <inc_lock+0xf8>
 8008102:	4a0c      	ldr	r2, [pc, #48]	; (8008134 <inc_lock+0x118>)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	4413      	add	r3, r2
 800810a:	330c      	adds	r3, #12
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	3301      	adds	r3, #1
 8008110:	b29a      	uxth	r2, r3
 8008112:	e001      	b.n	8008118 <inc_lock+0xfc>
 8008114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008118:	4906      	ldr	r1, [pc, #24]	; (8008134 <inc_lock+0x118>)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	440b      	add	r3, r1
 8008120:	330c      	adds	r3, #12
 8008122:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
}
 8008128:	4618      	mov	r0, r3
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	20000294 	.word	0x20000294

08008138 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3b01      	subs	r3, #1
 8008144:	607b      	str	r3, [r7, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d825      	bhi.n	8008198 <dec_lock+0x60>
		n = Files[i].ctr;
 800814c:	4a17      	ldr	r2, [pc, #92]	; (80081ac <dec_lock+0x74>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	011b      	lsls	r3, r3, #4
 8008152:	4413      	add	r3, r2
 8008154:	330c      	adds	r3, #12
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800815a:	89fb      	ldrh	r3, [r7, #14]
 800815c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008160:	d101      	bne.n	8008166 <dec_lock+0x2e>
 8008162:	2300      	movs	r3, #0
 8008164:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008166:	89fb      	ldrh	r3, [r7, #14]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <dec_lock+0x3a>
 800816c:	89fb      	ldrh	r3, [r7, #14]
 800816e:	3b01      	subs	r3, #1
 8008170:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008172:	4a0e      	ldr	r2, [pc, #56]	; (80081ac <dec_lock+0x74>)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	011b      	lsls	r3, r3, #4
 8008178:	4413      	add	r3, r2
 800817a:	330c      	adds	r3, #12
 800817c:	89fa      	ldrh	r2, [r7, #14]
 800817e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008180:	89fb      	ldrh	r3, [r7, #14]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d105      	bne.n	8008192 <dec_lock+0x5a>
 8008186:	4a09      	ldr	r2, [pc, #36]	; (80081ac <dec_lock+0x74>)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	4413      	add	r3, r2
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	737b      	strb	r3, [r7, #13]
 8008196:	e001      	b.n	800819c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008198:	2302      	movs	r3, #2
 800819a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800819c:	7b7b      	ldrb	r3, [r7, #13]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000294 	.word	0x20000294

080081b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80081b8:	2300      	movs	r3, #0
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	e010      	b.n	80081e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80081be:	4a0d      	ldr	r2, [pc, #52]	; (80081f4 <clear_lock+0x44>)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	4413      	add	r3, r2
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d105      	bne.n	80081da <clear_lock+0x2a>
 80081ce:	4a09      	ldr	r2, [pc, #36]	; (80081f4 <clear_lock+0x44>)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	4413      	add	r3, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3301      	adds	r3, #1
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d9eb      	bls.n	80081be <clear_lock+0xe>
	}
}
 80081e6:	bf00      	nop
 80081e8:	bf00      	nop
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	20000294 	.word	0x20000294

080081f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	78db      	ldrb	r3, [r3, #3]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d034      	beq.n	8008276 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	7858      	ldrb	r0, [r3, #1]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800821c:	2301      	movs	r3, #1
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	f7ff fd40 	bl	8007ca4 <disk_write>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <sync_window+0x38>
			res = FR_DISK_ERR;
 800822a:	2301      	movs	r3, #1
 800822c:	73fb      	strb	r3, [r7, #15]
 800822e:	e022      	b.n	8008276 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	1ad2      	subs	r2, r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	429a      	cmp	r2, r3
 8008244:	d217      	bcs.n	8008276 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	789b      	ldrb	r3, [r3, #2]
 800824a:	613b      	str	r3, [r7, #16]
 800824c:	e010      	b.n	8008270 <sync_window+0x78>
					wsect += fs->fsize;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	4413      	add	r3, r2
 8008256:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	7858      	ldrb	r0, [r3, #1]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008262:	2301      	movs	r3, #1
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	f7ff fd1d 	bl	8007ca4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	3b01      	subs	r3, #1
 800826e:	613b      	str	r3, [r7, #16]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d8eb      	bhi.n	800824e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008276:	7bfb      	ldrb	r3, [r7, #15]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d01b      	beq.n	80082d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7ff ffad 	bl	80081f8 <sync_window>
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d113      	bne.n	80082d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	7858      	ldrb	r0, [r3, #1]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082b2:	2301      	movs	r3, #1
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	f7ff fcd5 	bl	8007c64 <disk_read>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80082c0:	f04f 33ff 	mov.w	r3, #4294967295
 80082c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff ff87 	bl	80081f8 <sync_window>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d158      	bne.n	80083a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d148      	bne.n	800838e <sync_fs+0xb2>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	791b      	ldrb	r3, [r3, #4]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d144      	bne.n	800838e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3330      	adds	r3, #48	; 0x30
 8008308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800830c:	2100      	movs	r1, #0
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff fda9 	bl	8007e66 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3330      	adds	r3, #48	; 0x30
 8008318:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800831c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008320:	4618      	mov	r0, r3
 8008322:	f7ff fd38 	bl	8007d96 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3330      	adds	r3, #48	; 0x30
 800832a:	4921      	ldr	r1, [pc, #132]	; (80083b0 <sync_fs+0xd4>)
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff fd4d 	bl	8007dcc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3330      	adds	r3, #48	; 0x30
 8008336:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800833a:	491e      	ldr	r1, [pc, #120]	; (80083b4 <sync_fs+0xd8>)
 800833c:	4618      	mov	r0, r3
 800833e:	f7ff fd45 	bl	8007dcc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3330      	adds	r3, #48	; 0x30
 8008346:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7ff fd3b 	bl	8007dcc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3330      	adds	r3, #48	; 0x30
 800835a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	4619      	mov	r1, r3
 8008364:	4610      	mov	r0, r2
 8008366:	f7ff fd31 	bl	8007dcc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7858      	ldrb	r0, [r3, #1]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008382:	2301      	movs	r3, #1
 8008384:	f7ff fc8e 	bl	8007ca4 <disk_write>
			fs->fsi_flag = 0;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	785b      	ldrb	r3, [r3, #1]
 8008392:	2200      	movs	r2, #0
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff fca4 	bl	8007ce4 <disk_ioctl>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <sync_fs+0xca>
 80083a2:	2301      	movs	r3, #1
 80083a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	41615252 	.word	0x41615252
 80083b4:	61417272 	.word	0x61417272

080083b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	3b02      	subs	r3, #2
 80083c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	3b02      	subs	r3, #2
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d301      	bcc.n	80083d8 <clust2sect+0x20>
 80083d4:	2300      	movs	r3, #0
 80083d6:	e008      	b.n	80083ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	895b      	ldrh	r3, [r3, #10]
 80083dc:	461a      	mov	r2, r3
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	fb03 f202 	mul.w	r2, r3, r2
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e8:	4413      	add	r3, r2
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b086      	sub	sp, #24
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d904      	bls.n	8008416 <get_fat+0x20>
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d302      	bcc.n	800841c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008416:	2301      	movs	r3, #1
 8008418:	617b      	str	r3, [r7, #20]
 800841a:	e08f      	b.n	800853c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800841c:	f04f 33ff 	mov.w	r3, #4294967295
 8008420:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b03      	cmp	r3, #3
 8008428:	d062      	beq.n	80084f0 <get_fat+0xfa>
 800842a:	2b03      	cmp	r3, #3
 800842c:	dc7c      	bgt.n	8008528 <get_fat+0x132>
 800842e:	2b01      	cmp	r3, #1
 8008430:	d002      	beq.n	8008438 <get_fat+0x42>
 8008432:	2b02      	cmp	r3, #2
 8008434:	d042      	beq.n	80084bc <get_fat+0xc6>
 8008436:	e077      	b.n	8008528 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	085b      	lsrs	r3, r3, #1
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4413      	add	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	6a1a      	ldr	r2, [r3, #32]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	0a5b      	lsrs	r3, r3, #9
 800844e:	4413      	add	r3, r2
 8008450:	4619      	mov	r1, r3
 8008452:	6938      	ldr	r0, [r7, #16]
 8008454:	f7ff ff14 	bl	8008280 <move_window>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d167      	bne.n	800852e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	60fa      	str	r2, [r7, #12]
 8008464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4413      	add	r3, r2
 800846c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008470:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	6a1a      	ldr	r2, [r3, #32]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	0a5b      	lsrs	r3, r3, #9
 800847a:	4413      	add	r3, r2
 800847c:	4619      	mov	r1, r3
 800847e:	6938      	ldr	r0, [r7, #16]
 8008480:	f7ff fefe 	bl	8008280 <move_window>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d153      	bne.n	8008532 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	4413      	add	r3, r2
 8008494:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	461a      	mov	r2, r3
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4313      	orrs	r3, r2
 80084a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <get_fat+0xbc>
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	091b      	lsrs	r3, r3, #4
 80084b0:	e002      	b.n	80084b8 <get_fat+0xc2>
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084b8:	617b      	str	r3, [r7, #20]
			break;
 80084ba:	e03f      	b.n	800853c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	6a1a      	ldr	r2, [r3, #32]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	0a1b      	lsrs	r3, r3, #8
 80084c4:	4413      	add	r3, r2
 80084c6:	4619      	mov	r1, r3
 80084c8:	6938      	ldr	r0, [r7, #16]
 80084ca:	f7ff fed9 	bl	8008280 <move_window>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d130      	bne.n	8008536 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80084e2:	4413      	add	r3, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff fc1b 	bl	8007d20 <ld_word>
 80084ea:	4603      	mov	r3, r0
 80084ec:	617b      	str	r3, [r7, #20]
			break;
 80084ee:	e025      	b.n	800853c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	6a1a      	ldr	r2, [r3, #32]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	09db      	lsrs	r3, r3, #7
 80084f8:	4413      	add	r3, r2
 80084fa:	4619      	mov	r1, r3
 80084fc:	6938      	ldr	r0, [r7, #16]
 80084fe:	f7ff febf 	bl	8008280 <move_window>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d118      	bne.n	800853a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008516:	4413      	add	r3, r2
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff fc19 	bl	8007d50 <ld_dword>
 800851e:	4603      	mov	r3, r0
 8008520:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008524:	617b      	str	r3, [r7, #20]
			break;
 8008526:	e009      	b.n	800853c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008528:	2301      	movs	r3, #1
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	e006      	b.n	800853c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800852e:	bf00      	nop
 8008530:	e004      	b.n	800853c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008532:	bf00      	nop
 8008534:	e002      	b.n	800853c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008536:	bf00      	nop
 8008538:	e000      	b.n	800853c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800853a:	bf00      	nop
		}
	}

	return val;
 800853c:	697b      	ldr	r3, [r7, #20]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008546:	b590      	push	{r4, r7, lr}
 8008548:	b089      	sub	sp, #36	; 0x24
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008552:	2302      	movs	r3, #2
 8008554:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b01      	cmp	r3, #1
 800855a:	f240 80d2 	bls.w	8008702 <put_fat+0x1bc>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	429a      	cmp	r2, r3
 8008566:	f080 80cc 	bcs.w	8008702 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b03      	cmp	r3, #3
 8008570:	f000 8096 	beq.w	80086a0 <put_fat+0x15a>
 8008574:	2b03      	cmp	r3, #3
 8008576:	f300 80cd 	bgt.w	8008714 <put_fat+0x1ce>
 800857a:	2b01      	cmp	r3, #1
 800857c:	d002      	beq.n	8008584 <put_fat+0x3e>
 800857e:	2b02      	cmp	r3, #2
 8008580:	d06e      	beq.n	8008660 <put_fat+0x11a>
 8008582:	e0c7      	b.n	8008714 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	61bb      	str	r3, [r7, #24]
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	085b      	lsrs	r3, r3, #1
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	4413      	add	r3, r2
 8008590:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6a1a      	ldr	r2, [r3, #32]
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	0a5b      	lsrs	r3, r3, #9
 800859a:	4413      	add	r3, r2
 800859c:	4619      	mov	r1, r3
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7ff fe6e 	bl	8008280 <move_window>
 80085a4:	4603      	mov	r3, r0
 80085a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085a8:	7ffb      	ldrb	r3, [r7, #31]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f040 80ab 	bne.w	8008706 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	1c59      	adds	r1, r3, #1
 80085ba:	61b9      	str	r1, [r7, #24]
 80085bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c0:	4413      	add	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00d      	beq.n	80085ea <put_fat+0xa4>
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	b25b      	sxtb	r3, r3
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	b25a      	sxtb	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	b25b      	sxtb	r3, r3
 80085e2:	4313      	orrs	r3, r2
 80085e4:	b25b      	sxtb	r3, r3
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	e001      	b.n	80085ee <put_fat+0xa8>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a1a      	ldr	r2, [r3, #32]
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	0a5b      	lsrs	r3, r3, #9
 8008600:	4413      	add	r3, r2
 8008602:	4619      	mov	r1, r3
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff fe3b 	bl	8008280 <move_window>
 800860a:	4603      	mov	r3, r0
 800860c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800860e:	7ffb      	ldrb	r3, [r7, #31]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d17a      	bne.n	800870a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008620:	4413      	add	r3, r2
 8008622:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <put_fat+0xf0>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	091b      	lsrs	r3, r3, #4
 8008632:	b2db      	uxtb	r3, r3
 8008634:	e00e      	b.n	8008654 <put_fat+0x10e>
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	b25b      	sxtb	r3, r3
 800863c:	f023 030f 	bic.w	r3, r3, #15
 8008640:	b25a      	sxtb	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	0a1b      	lsrs	r3, r3, #8
 8008646:	b25b      	sxtb	r3, r3
 8008648:	f003 030f 	and.w	r3, r3, #15
 800864c:	b25b      	sxtb	r3, r3
 800864e:	4313      	orrs	r3, r2
 8008650:	b25b      	sxtb	r3, r3
 8008652:	b2db      	uxtb	r3, r3
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2201      	movs	r2, #1
 800865c:	70da      	strb	r2, [r3, #3]
			break;
 800865e:	e059      	b.n	8008714 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a1a      	ldr	r2, [r3, #32]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	4413      	add	r3, r2
 800866a:	4619      	mov	r1, r3
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7ff fe07 	bl	8008280 <move_window>
 8008672:	4603      	mov	r3, r0
 8008674:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008676:	7ffb      	ldrb	r3, [r7, #31]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d148      	bne.n	800870e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800868a:	4413      	add	r3, r2
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	b292      	uxth	r2, r2
 8008690:	4611      	mov	r1, r2
 8008692:	4618      	mov	r0, r3
 8008694:	f7ff fb7f 	bl	8007d96 <st_word>
			fs->wflag = 1;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	70da      	strb	r2, [r3, #3]
			break;
 800869e:	e039      	b.n	8008714 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a1a      	ldr	r2, [r3, #32]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	09db      	lsrs	r3, r3, #7
 80086a8:	4413      	add	r3, r2
 80086aa:	4619      	mov	r1, r3
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff fde7 	bl	8008280 <move_window>
 80086b2:	4603      	mov	r3, r0
 80086b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086b6:	7ffb      	ldrb	r3, [r7, #31]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d12a      	bne.n	8008712 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086d0:	4413      	add	r3, r2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fb3c 	bl	8007d50 <ld_dword>
 80086d8:	4603      	mov	r3, r0
 80086da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80086de:	4323      	orrs	r3, r4
 80086e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086f0:	4413      	add	r3, r2
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fb69 	bl	8007dcc <st_dword>
			fs->wflag = 1;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	70da      	strb	r2, [r3, #3]
			break;
 8008700:	e008      	b.n	8008714 <put_fat+0x1ce>
		}
	}
 8008702:	bf00      	nop
 8008704:	e006      	b.n	8008714 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008706:	bf00      	nop
 8008708:	e004      	b.n	8008714 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800870a:	bf00      	nop
 800870c:	e002      	b.n	8008714 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800870e:	bf00      	nop
 8008710:	e000      	b.n	8008714 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008712:	bf00      	nop
	return res;
 8008714:	7ffb      	ldrb	r3, [r7, #31]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3724      	adds	r7, #36	; 0x24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd90      	pop	{r4, r7, pc}

0800871e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b088      	sub	sp, #32
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d904      	bls.n	8008744 <remove_chain+0x26>
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	429a      	cmp	r2, r3
 8008742:	d301      	bcc.n	8008748 <remove_chain+0x2a>
 8008744:	2302      	movs	r3, #2
 8008746:	e04b      	b.n	80087e0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00c      	beq.n	8008768 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800874e:	f04f 32ff 	mov.w	r2, #4294967295
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	69b8      	ldr	r0, [r7, #24]
 8008756:	f7ff fef6 	bl	8008546 <put_fat>
 800875a:	4603      	mov	r3, r0
 800875c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800875e:	7ffb      	ldrb	r3, [r7, #31]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <remove_chain+0x4a>
 8008764:	7ffb      	ldrb	r3, [r7, #31]
 8008766:	e03b      	b.n	80087e0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f7ff fe43 	bl	80083f6 <get_fat>
 8008770:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d031      	beq.n	80087dc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d101      	bne.n	8008782 <remove_chain+0x64>
 800877e:	2302      	movs	r3, #2
 8008780:	e02e      	b.n	80087e0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008788:	d101      	bne.n	800878e <remove_chain+0x70>
 800878a:	2301      	movs	r3, #1
 800878c:	e028      	b.n	80087e0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800878e:	2200      	movs	r2, #0
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	69b8      	ldr	r0, [r7, #24]
 8008794:	f7ff fed7 	bl	8008546 <put_fat>
 8008798:	4603      	mov	r3, r0
 800879a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800879c:	7ffb      	ldrb	r3, [r7, #31]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <remove_chain+0x88>
 80087a2:	7ffb      	ldrb	r3, [r7, #31]
 80087a4:	e01c      	b.n	80087e0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	691a      	ldr	r2, [r3, #16]
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	3b02      	subs	r3, #2
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d20b      	bcs.n	80087cc <remove_chain+0xae>
			fs->free_clst++;
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	791b      	ldrb	r3, [r3, #4]
 80087c2:	f043 0301 	orr.w	r3, r3, #1
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	695b      	ldr	r3, [r3, #20]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d3c6      	bcc.n	8008768 <remove_chain+0x4a>
 80087da:	e000      	b.n	80087de <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80087dc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3720      	adds	r7, #32
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10d      	bne.n	800881a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d004      	beq.n	8008814 <create_chain+0x2c>
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	429a      	cmp	r2, r3
 8008812:	d31b      	bcc.n	800884c <create_chain+0x64>
 8008814:	2301      	movs	r3, #1
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	e018      	b.n	800884c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff fdea 	bl	80083f6 <get_fat>
 8008822:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d801      	bhi.n	800882e <create_chain+0x46>
 800882a:	2301      	movs	r3, #1
 800882c:	e070      	b.n	8008910 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008834:	d101      	bne.n	800883a <create_chain+0x52>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	e06a      	b.n	8008910 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	429a      	cmp	r2, r3
 8008842:	d201      	bcs.n	8008848 <create_chain+0x60>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	e063      	b.n	8008910 <create_chain+0x128>
		scl = clst;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	3301      	adds	r3, #1
 8008854:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	429a      	cmp	r2, r3
 800885e:	d307      	bcc.n	8008870 <create_chain+0x88>
				ncl = 2;
 8008860:	2302      	movs	r3, #2
 8008862:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008864:	69fa      	ldr	r2, [r7, #28]
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	429a      	cmp	r2, r3
 800886a:	d901      	bls.n	8008870 <create_chain+0x88>
 800886c:	2300      	movs	r3, #0
 800886e:	e04f      	b.n	8008910 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008870:	69f9      	ldr	r1, [r7, #28]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fdbf 	bl	80083f6 <get_fat>
 8008878:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00e      	beq.n	800889e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d003      	beq.n	800888e <create_chain+0xa6>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888c:	d101      	bne.n	8008892 <create_chain+0xaa>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	e03e      	b.n	8008910 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008892:	69fa      	ldr	r2, [r7, #28]
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	429a      	cmp	r2, r3
 8008898:	d1da      	bne.n	8008850 <create_chain+0x68>
 800889a:	2300      	movs	r3, #0
 800889c:	e038      	b.n	8008910 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800889e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80088a0:	f04f 32ff 	mov.w	r2, #4294967295
 80088a4:	69f9      	ldr	r1, [r7, #28]
 80088a6:	6938      	ldr	r0, [r7, #16]
 80088a8:	f7ff fe4d 	bl	8008546 <put_fat>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d109      	bne.n	80088ca <create_chain+0xe2>
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d006      	beq.n	80088ca <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6938      	ldr	r0, [r7, #16]
 80088c2:	f7ff fe40 	bl	8008546 <put_fat>
 80088c6:	4603      	mov	r3, r0
 80088c8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d116      	bne.n	80088fe <create_chain+0x116>
		fs->last_clst = ncl;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	69fa      	ldr	r2, [r7, #28]
 80088d4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	691a      	ldr	r2, [r3, #16]
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	3b02      	subs	r3, #2
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d804      	bhi.n	80088ee <create_chain+0x106>
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	1e5a      	subs	r2, r3, #1
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	791b      	ldrb	r3, [r3, #4]
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	711a      	strb	r2, [r3, #4]
 80088fc:	e007      	b.n	800890e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d102      	bne.n	800890a <create_chain+0x122>
 8008904:	f04f 33ff 	mov.w	r3, #4294967295
 8008908:	e000      	b.n	800890c <create_chain+0x124>
 800890a:	2301      	movs	r3, #1
 800890c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800890e:	69fb      	ldr	r3, [r7, #28]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	3304      	adds	r3, #4
 800892e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	0a5b      	lsrs	r3, r3, #9
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	8952      	ldrh	r2, [r2, #10]
 8008938:	fbb3 f3f2 	udiv	r3, r3, r2
 800893c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	1d1a      	adds	r2, r3, #4
 8008942:	613a      	str	r2, [r7, #16]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <clmt_clust+0x3a>
 800894e:	2300      	movs	r3, #0
 8008950:	e010      	b.n	8008974 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	429a      	cmp	r2, r3
 8008958:	d307      	bcc.n	800896a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	3304      	adds	r3, #4
 8008966:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008968:	e7e9      	b.n	800893e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800896a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	4413      	add	r3, r2
}
 8008974:	4618      	mov	r0, r3
 8008976:	371c      	adds	r7, #28
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008996:	d204      	bcs.n	80089a2 <dir_sdi+0x22>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f003 031f 	and.w	r3, r3, #31
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80089a2:	2302      	movs	r3, #2
 80089a4:	e063      	b.n	8008a6e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d106      	bne.n	80089c6 <dir_sdi+0x46>
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d902      	bls.n	80089c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10c      	bne.n	80089e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	095b      	lsrs	r3, r3, #5
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	8912      	ldrh	r2, [r2, #8]
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d301      	bcc.n	80089dc <dir_sdi+0x5c>
 80089d8:	2302      	movs	r3, #2
 80089da:	e048      	b.n	8008a6e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	61da      	str	r2, [r3, #28]
 80089e4:	e029      	b.n	8008a3a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	895b      	ldrh	r3, [r3, #10]
 80089ea:	025b      	lsls	r3, r3, #9
 80089ec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80089ee:	e019      	b.n	8008a24 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6979      	ldr	r1, [r7, #20]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff fcfe 	bl	80083f6 <get_fat>
 80089fa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a02:	d101      	bne.n	8008a08 <dir_sdi+0x88>
 8008a04:	2301      	movs	r3, #1
 8008a06:	e032      	b.n	8008a6e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d904      	bls.n	8008a18 <dir_sdi+0x98>
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d301      	bcc.n	8008a1c <dir_sdi+0x9c>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e028      	b.n	8008a6e <dir_sdi+0xee>
			ofs -= csz;
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d2e1      	bcs.n	80089f0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008a2c:	6979      	ldr	r1, [r7, #20]
 8008a2e:	6938      	ldr	r0, [r7, #16]
 8008a30:	f7ff fcc2 	bl	80083b8 <clust2sect>
 8008a34:	4602      	mov	r2, r0
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <dir_sdi+0xcc>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e010      	b.n	8008a6e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	69da      	ldr	r2, [r3, #28]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	0a5b      	lsrs	r3, r3, #9
 8008a54:	441a      	add	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a66:	441a      	add	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b086      	sub	sp, #24
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	3320      	adds	r3, #32
 8008a8c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <dir_next+0x28>
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a9c:	d301      	bcc.n	8008aa2 <dir_next+0x2c>
 8008a9e:	2304      	movs	r3, #4
 8008aa0:	e0aa      	b.n	8008bf8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f040 8098 	bne.w	8008bde <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10b      	bne.n	8008ad8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	095b      	lsrs	r3, r3, #5
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	8912      	ldrh	r2, [r2, #8]
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	f0c0 8088 	bcc.w	8008bde <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	61da      	str	r2, [r3, #28]
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	e08f      	b.n	8008bf8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	0a5b      	lsrs	r3, r3, #9
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	8952      	ldrh	r2, [r2, #10]
 8008ae0:	3a01      	subs	r2, #1
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d17a      	bne.n	8008bde <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	4619      	mov	r1, r3
 8008af0:	4610      	mov	r0, r2
 8008af2:	f7ff fc80 	bl	80083f6 <get_fat>
 8008af6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d801      	bhi.n	8008b02 <dir_next+0x8c>
 8008afe:	2302      	movs	r3, #2
 8008b00:	e07a      	b.n	8008bf8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b08:	d101      	bne.n	8008b0e <dir_next+0x98>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e074      	b.n	8008bf8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d358      	bcc.n	8008bca <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d104      	bne.n	8008b28 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	61da      	str	r2, [r3, #28]
 8008b24:	2304      	movs	r3, #4
 8008b26:	e067      	b.n	8008bf8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4610      	mov	r0, r2
 8008b32:	f7ff fe59 	bl	80087e8 <create_chain>
 8008b36:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <dir_next+0xcc>
 8008b3e:	2307      	movs	r3, #7
 8008b40:	e05a      	b.n	8008bf8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d101      	bne.n	8008b4c <dir_next+0xd6>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	e055      	b.n	8008bf8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b52:	d101      	bne.n	8008b58 <dir_next+0xe2>
 8008b54:	2301      	movs	r3, #1
 8008b56:	e04f      	b.n	8008bf8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7ff fb4d 	bl	80081f8 <sync_window>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <dir_next+0xf2>
 8008b64:	2301      	movs	r3, #1
 8008b66:	e047      	b.n	8008bf8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3330      	adds	r3, #48	; 0x30
 8008b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff f977 	bl	8007e66 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008b78:	2300      	movs	r3, #0
 8008b7a:	613b      	str	r3, [r7, #16]
 8008b7c:	6979      	ldr	r1, [r7, #20]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7ff fc1a 	bl	80083b8 <clust2sect>
 8008b84:	4602      	mov	r2, r0
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b8a:	e012      	b.n	8008bb2 <dir_next+0x13c>
						fs->wflag = 1;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f7ff fb30 	bl	80081f8 <sync_window>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <dir_next+0x12c>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e02a      	b.n	8008bf8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	613b      	str	r3, [r7, #16]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	895b      	ldrh	r3, [r3, #10]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d3e6      	bcc.n	8008b8c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	1ad2      	subs	r2, r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008bd0:	6979      	ldr	r1, [r7, #20]
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7ff fbf0 	bl	80083b8 <clust2sect>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf0:	441a      	add	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008c10:	2100      	movs	r1, #0
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7ff feb4 	bl	8008980 <dir_sdi>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c1c:	7dfb      	ldrb	r3, [r7, #23]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d12b      	bne.n	8008c7a <dir_alloc+0x7a>
		n = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f7ff fb27 	bl	8008280 <move_window>
 8008c32:	4603      	mov	r3, r0
 8008c34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d11d      	bne.n	8008c78 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2be5      	cmp	r3, #229	; 0xe5
 8008c44:	d004      	beq.n	8008c50 <dir_alloc+0x50>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d107      	bne.n	8008c60 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	3301      	adds	r3, #1
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d102      	bne.n	8008c64 <dir_alloc+0x64>
 8008c5e:	e00c      	b.n	8008c7a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008c60:	2300      	movs	r3, #0
 8008c62:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008c64:	2101      	movs	r1, #1
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff ff05 	bl	8008a76 <dir_next>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0d7      	beq.n	8008c26 <dir_alloc+0x26>
 8008c76:	e000      	b.n	8008c7a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008c78:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	d101      	bne.n	8008c84 <dir_alloc+0x84>
 8008c80:	2307      	movs	r3, #7
 8008c82:	75fb      	strb	r3, [r7, #23]
	return res;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	331a      	adds	r3, #26
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7ff f83f 	bl	8007d20 <ld_word>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d109      	bne.n	8008cc2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	3314      	adds	r3, #20
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff f834 	bl	8007d20 <ld_word>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	041b      	lsls	r3, r3, #16
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	331a      	adds	r3, #26
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	b292      	uxth	r2, r2
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff f857 	bl	8007d96 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d109      	bne.n	8008d04 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f103 0214 	add.w	r2, r3, #20
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	0c1b      	lsrs	r3, r3, #16
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	f7ff f849 	bl	8007d96 <st_word>
	}
}
 8008d04:	bf00      	nop
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7ff fe2f 	bl	8008980 <dir_sdi>
 8008d22:	4603      	mov	r3, r0
 8008d24:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <dir_find+0x24>
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	e03e      	b.n	8008dae <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	4619      	mov	r1, r3
 8008d36:	6938      	ldr	r0, [r7, #16]
 8008d38:	f7ff faa2 	bl	8008280 <move_window>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d12f      	bne.n	8008da6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d102      	bne.n	8008d5a <dir_find+0x4e>
 8008d54:	2304      	movs	r3, #4
 8008d56:	75fb      	strb	r3, [r7, #23]
 8008d58:	e028      	b.n	8008dac <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	330b      	adds	r3, #11
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	330b      	adds	r3, #11
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	f003 0308 	and.w	r3, r3, #8
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <dir_find+0x86>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a18      	ldr	r0, [r3, #32]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3324      	adds	r3, #36	; 0x24
 8008d84:	220b      	movs	r2, #11
 8008d86:	4619      	mov	r1, r3
 8008d88:	f7ff f888 	bl	8007e9c <mem_cmp>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00b      	beq.n	8008daa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008d92:	2100      	movs	r1, #0
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff fe6e 	bl	8008a76 <dir_next>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0c5      	beq.n	8008d30 <dir_find+0x24>
 8008da4:	e002      	b.n	8008dac <dir_find+0xa0>
		if (res != FR_OK) break;
 8008da6:	bf00      	nop
 8008da8:	e000      	b.n	8008dac <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008daa:	bf00      	nop

	return res;
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff ff1a 	bl	8008c00 <dir_alloc>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d11c      	bne.n	8008e10 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	68b8      	ldr	r0, [r7, #8]
 8008dde:	f7ff fa4f 	bl	8008280 <move_window>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d111      	bne.n	8008e10 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	2220      	movs	r2, #32
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff f836 	bl	8007e66 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a18      	ldr	r0, [r3, #32]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3324      	adds	r3, #36	; 0x24
 8008e02:	220b      	movs	r2, #11
 8008e04:	4619      	mov	r1, r3
 8008e06:	f7ff f80d 	bl	8007e24 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3324      	adds	r3, #36	; 0x24
 8008e30:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008e32:	220b      	movs	r2, #11
 8008e34:	2120      	movs	r1, #32
 8008e36:	68b8      	ldr	r0, [r7, #8]
 8008e38:	f7ff f815 	bl	8007e66 <mem_set>
	si = i = 0; ni = 8;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	613b      	str	r3, [r7, #16]
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	61fb      	str	r3, [r7, #28]
 8008e44:	2308      	movs	r3, #8
 8008e46:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	61fa      	str	r2, [r7, #28]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	4413      	add	r3, r2
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008e56:	7efb      	ldrb	r3, [r7, #27]
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	d94e      	bls.n	8008efa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008e5c:	7efb      	ldrb	r3, [r7, #27]
 8008e5e:	2b2f      	cmp	r3, #47	; 0x2f
 8008e60:	d006      	beq.n	8008e70 <create_name+0x54>
 8008e62:	7efb      	ldrb	r3, [r7, #27]
 8008e64:	2b5c      	cmp	r3, #92	; 0x5c
 8008e66:	d110      	bne.n	8008e8a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008e68:	e002      	b.n	8008e70 <create_name+0x54>
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	61fb      	str	r3, [r7, #28]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	4413      	add	r3, r2
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	2b2f      	cmp	r3, #47	; 0x2f
 8008e7a:	d0f6      	beq.n	8008e6a <create_name+0x4e>
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	4413      	add	r3, r2
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2b5c      	cmp	r3, #92	; 0x5c
 8008e86:	d0f0      	beq.n	8008e6a <create_name+0x4e>
			break;
 8008e88:	e038      	b.n	8008efc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008e8a:	7efb      	ldrb	r3, [r7, #27]
 8008e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e8e:	d003      	beq.n	8008e98 <create_name+0x7c>
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d30c      	bcc.n	8008eb2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2b0b      	cmp	r3, #11
 8008e9c:	d002      	beq.n	8008ea4 <create_name+0x88>
 8008e9e:	7efb      	ldrb	r3, [r7, #27]
 8008ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ea2:	d001      	beq.n	8008ea8 <create_name+0x8c>
 8008ea4:	2306      	movs	r3, #6
 8008ea6:	e044      	b.n	8008f32 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008ea8:	2308      	movs	r3, #8
 8008eaa:	613b      	str	r3, [r7, #16]
 8008eac:	230b      	movs	r3, #11
 8008eae:	617b      	str	r3, [r7, #20]
			continue;
 8008eb0:	e022      	b.n	8008ef8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008eb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da04      	bge.n	8008ec4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008eba:	7efb      	ldrb	r3, [r7, #27]
 8008ebc:	3b80      	subs	r3, #128	; 0x80
 8008ebe:	4a1f      	ldr	r2, [pc, #124]	; (8008f3c <create_name+0x120>)
 8008ec0:	5cd3      	ldrb	r3, [r2, r3]
 8008ec2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008ec4:	7efb      	ldrb	r3, [r7, #27]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	481d      	ldr	r0, [pc, #116]	; (8008f40 <create_name+0x124>)
 8008eca:	f7ff f80e 	bl	8007eea <chk_chr>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <create_name+0xbc>
 8008ed4:	2306      	movs	r3, #6
 8008ed6:	e02c      	b.n	8008f32 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008ed8:	7efb      	ldrb	r3, [r7, #27]
 8008eda:	2b60      	cmp	r3, #96	; 0x60
 8008edc:	d905      	bls.n	8008eea <create_name+0xce>
 8008ede:	7efb      	ldrb	r3, [r7, #27]
 8008ee0:	2b7a      	cmp	r3, #122	; 0x7a
 8008ee2:	d802      	bhi.n	8008eea <create_name+0xce>
 8008ee4:	7efb      	ldrb	r3, [r7, #27]
 8008ee6:	3b20      	subs	r3, #32
 8008ee8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	613a      	str	r2, [r7, #16]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	7efa      	ldrb	r2, [r7, #27]
 8008ef6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008ef8:	e7a6      	b.n	8008e48 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008efa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	441a      	add	r2, r3
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <create_name+0xf4>
 8008f0c:	2306      	movs	r3, #6
 8008f0e:	e010      	b.n	8008f32 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2be5      	cmp	r3, #229	; 0xe5
 8008f16:	d102      	bne.n	8008f1e <create_name+0x102>
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2205      	movs	r2, #5
 8008f1c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008f1e:	7efb      	ldrb	r3, [r7, #27]
 8008f20:	2b20      	cmp	r3, #32
 8008f22:	d801      	bhi.n	8008f28 <create_name+0x10c>
 8008f24:	2204      	movs	r2, #4
 8008f26:	e000      	b.n	8008f2a <create_name+0x10e>
 8008f28:	2200      	movs	r2, #0
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	330b      	adds	r3, #11
 8008f2e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008f30:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3720      	adds	r7, #32
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	0800f93c 	.word	0x0800f93c
 8008f40:	0800f8cc 	.word	0x0800f8cc

08008f44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008f58:	e002      	b.n	8008f60 <follow_path+0x1c>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b2f      	cmp	r3, #47	; 0x2f
 8008f66:	d0f8      	beq.n	8008f5a <follow_path+0x16>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b5c      	cmp	r3, #92	; 0x5c
 8008f6e:	d0f4      	beq.n	8008f5a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	2200      	movs	r2, #0
 8008f74:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b1f      	cmp	r3, #31
 8008f7c:	d80a      	bhi.n	8008f94 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2280      	movs	r2, #128	; 0x80
 8008f82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008f86:	2100      	movs	r1, #0
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff fcf9 	bl	8008980 <dir_sdi>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	75fb      	strb	r3, [r7, #23]
 8008f92:	e043      	b.n	800901c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f94:	463b      	mov	r3, r7
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff ff3f 	bl	8008e1c <create_name>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d134      	bne.n	8009012 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff feaf 	bl	8008d0c <dir_find>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008fb8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00a      	beq.n	8008fd6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d127      	bne.n	8009016 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008fc6:	7afb      	ldrb	r3, [r7, #11]
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d122      	bne.n	8009016 <follow_path+0xd2>
 8008fd0:	2305      	movs	r3, #5
 8008fd2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008fd4:	e01f      	b.n	8009016 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008fd6:	7afb      	ldrb	r3, [r7, #11]
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d11c      	bne.n	800901a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	799b      	ldrb	r3, [r3, #6]
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d102      	bne.n	8008ff2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008fec:	2305      	movs	r3, #5
 8008fee:	75fb      	strb	r3, [r7, #23]
 8008ff0:	e014      	b.n	800901c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009000:	4413      	add	r3, r2
 8009002:	4619      	mov	r1, r3
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f7ff fe42 	bl	8008c8e <ld_clust>
 800900a:	4602      	mov	r2, r0
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009010:	e7c0      	b.n	8008f94 <follow_path+0x50>
			if (res != FR_OK) break;
 8009012:	bf00      	nop
 8009014:	e002      	b.n	800901c <follow_path+0xd8>
				break;
 8009016:	bf00      	nop
 8009018:	e000      	b.n	800901c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800901a:	bf00      	nop
			}
		}
	}

	return res;
 800901c:	7dfb      	ldrb	r3, [r7, #23]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009026:	b480      	push	{r7}
 8009028:	b087      	sub	sp, #28
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800902e:	f04f 33ff 	mov.w	r3, #4294967295
 8009032:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d031      	beq.n	80090a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	e002      	b.n	800904a <get_ldnumber+0x24>
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	3301      	adds	r3, #1
 8009048:	617b      	str	r3, [r7, #20]
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b20      	cmp	r3, #32
 8009050:	d903      	bls.n	800905a <get_ldnumber+0x34>
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b3a      	cmp	r3, #58	; 0x3a
 8009058:	d1f4      	bne.n	8009044 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b3a      	cmp	r3, #58	; 0x3a
 8009060:	d11c      	bne.n	800909c <get_ldnumber+0x76>
			tp = *path;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	60fa      	str	r2, [r7, #12]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	3b30      	subs	r3, #48	; 0x30
 8009072:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b09      	cmp	r3, #9
 8009078:	d80e      	bhi.n	8009098 <get_ldnumber+0x72>
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	429a      	cmp	r2, r3
 8009080:	d10a      	bne.n	8009098 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d107      	bne.n	8009098 <get_ldnumber+0x72>
					vol = (int)i;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	3301      	adds	r3, #1
 8009090:	617b      	str	r3, [r7, #20]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	e002      	b.n	80090a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800909c:	2300      	movs	r3, #0
 800909e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80090a0:	693b      	ldr	r3, [r7, #16]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
	...

080090b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	70da      	strb	r2, [r3, #3]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f04f 32ff 	mov.w	r2, #4294967295
 80090c6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff f8d8 	bl	8008280 <move_window>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <check_fs+0x2a>
 80090d6:	2304      	movs	r3, #4
 80090d8:	e038      	b.n	800914c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3330      	adds	r3, #48	; 0x30
 80090de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fe1c 	bl	8007d20 <ld_word>
 80090e8:	4603      	mov	r3, r0
 80090ea:	461a      	mov	r2, r3
 80090ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d001      	beq.n	80090f8 <check_fs+0x48>
 80090f4:	2303      	movs	r3, #3
 80090f6:	e029      	b.n	800914c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090fe:	2be9      	cmp	r3, #233	; 0xe9
 8009100:	d009      	beq.n	8009116 <check_fs+0x66>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009108:	2beb      	cmp	r3, #235	; 0xeb
 800910a:	d11e      	bne.n	800914a <check_fs+0x9a>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009112:	2b90      	cmp	r3, #144	; 0x90
 8009114:	d119      	bne.n	800914a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	3330      	adds	r3, #48	; 0x30
 800911a:	3336      	adds	r3, #54	; 0x36
 800911c:	4618      	mov	r0, r3
 800911e:	f7fe fe17 	bl	8007d50 <ld_dword>
 8009122:	4603      	mov	r3, r0
 8009124:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009128:	4a0a      	ldr	r2, [pc, #40]	; (8009154 <check_fs+0xa4>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d101      	bne.n	8009132 <check_fs+0x82>
 800912e:	2300      	movs	r3, #0
 8009130:	e00c      	b.n	800914c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3330      	adds	r3, #48	; 0x30
 8009136:	3352      	adds	r3, #82	; 0x52
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe fe09 	bl	8007d50 <ld_dword>
 800913e:	4603      	mov	r3, r0
 8009140:	4a05      	ldr	r2, [pc, #20]	; (8009158 <check_fs+0xa8>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d101      	bne.n	800914a <check_fs+0x9a>
 8009146:	2300      	movs	r3, #0
 8009148:	e000      	b.n	800914c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800914a:	2302      	movs	r3, #2
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	00544146 	.word	0x00544146
 8009158:	33544146 	.word	0x33544146

0800915c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b096      	sub	sp, #88	; 0x58
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	4613      	mov	r3, r2
 8009168:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7ff ff58 	bl	8009026 <get_ldnumber>
 8009176:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917a:	2b00      	cmp	r3, #0
 800917c:	da01      	bge.n	8009182 <find_volume+0x26>
 800917e:	230b      	movs	r3, #11
 8009180:	e22e      	b.n	80095e0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009182:	4aa8      	ldr	r2, [pc, #672]	; (8009424 <find_volume+0x2c8>)
 8009184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800918a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <find_volume+0x3a>
 8009192:	230c      	movs	r3, #12
 8009194:	e224      	b.n	80095e0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800919a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	f023 0301 	bic.w	r3, r3, #1
 80091a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01a      	beq.n	80091e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	785b      	ldrb	r3, [r3, #1]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fe fd17 	bl	8007be4 <disk_status>
 80091b6:	4603      	mov	r3, r0
 80091b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80091bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10c      	bne.n	80091e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d007      	beq.n	80091de <find_volume+0x82>
 80091ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091d2:	f003 0304 	and.w	r3, r3, #4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80091da:	230a      	movs	r3, #10
 80091dc:	e200      	b.n	80095e0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80091de:	2300      	movs	r3, #0
 80091e0:	e1fe      	b.n	80095e0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e4:	2200      	movs	r2, #0
 80091e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80091e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	785b      	ldrb	r3, [r3, #1]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fe fd0f 	bl	8007c18 <disk_initialize>
 80091fa:	4603      	mov	r3, r0
 80091fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009200:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009204:	f003 0301 	and.w	r3, r3, #1
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800920c:	2303      	movs	r3, #3
 800920e:	e1e7      	b.n	80095e0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d007      	beq.n	8009226 <find_volume+0xca>
 8009216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800921a:	f003 0304 	and.w	r3, r3, #4
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009222:	230a      	movs	r3, #10
 8009224:	e1dc      	b.n	80095e0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800922a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800922c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800922e:	f7ff ff3f 	bl	80090b0 <check_fs>
 8009232:	4603      	mov	r3, r0
 8009234:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800923c:	2b02      	cmp	r3, #2
 800923e:	d14b      	bne.n	80092d8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009240:	2300      	movs	r3, #0
 8009242:	643b      	str	r3, [r7, #64]	; 0x40
 8009244:	e01f      	b.n	8009286 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800924c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009254:	4413      	add	r3, r2
 8009256:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	3304      	adds	r3, #4
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d006      	beq.n	8009270 <find_volume+0x114>
 8009262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009264:	3308      	adds	r3, #8
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fd72 	bl	8007d50 <ld_dword>
 800926c:	4602      	mov	r2, r0
 800926e:	e000      	b.n	8009272 <find_volume+0x116>
 8009270:	2200      	movs	r2, #0
 8009272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800927a:	440b      	add	r3, r1
 800927c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009282:	3301      	adds	r3, #1
 8009284:	643b      	str	r3, [r7, #64]	; 0x40
 8009286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009288:	2b03      	cmp	r3, #3
 800928a:	d9dc      	bls.n	8009246 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800928c:	2300      	movs	r3, #0
 800928e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <find_volume+0x140>
 8009296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009298:	3b01      	subs	r3, #1
 800929a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800929c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80092a4:	4413      	add	r3, r2
 80092a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80092aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80092ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d005      	beq.n	80092be <find_volume+0x162>
 80092b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092b6:	f7ff fefb 	bl	80090b0 <check_fs>
 80092ba:	4603      	mov	r3, r0
 80092bc:	e000      	b.n	80092c0 <find_volume+0x164>
 80092be:	2303      	movs	r3, #3
 80092c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80092c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d905      	bls.n	80092d8 <find_volume+0x17c>
 80092cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ce:	3301      	adds	r3, #1
 80092d0:	643b      	str	r3, [r7, #64]	; 0x40
 80092d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d9e1      	bls.n	800929c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80092d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092dc:	2b04      	cmp	r3, #4
 80092de:	d101      	bne.n	80092e4 <find_volume+0x188>
 80092e0:	2301      	movs	r3, #1
 80092e2:	e17d      	b.n	80095e0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80092e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d901      	bls.n	80092f0 <find_volume+0x194>
 80092ec:	230d      	movs	r3, #13
 80092ee:	e177      	b.n	80095e0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	3330      	adds	r3, #48	; 0x30
 80092f4:	330b      	adds	r3, #11
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe fd12 	bl	8007d20 <ld_word>
 80092fc:	4603      	mov	r3, r0
 80092fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009302:	d001      	beq.n	8009308 <find_volume+0x1ac>
 8009304:	230d      	movs	r3, #13
 8009306:	e16b      	b.n	80095e0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	3330      	adds	r3, #48	; 0x30
 800930c:	3316      	adds	r3, #22
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe fd06 	bl	8007d20 <ld_word>
 8009314:	4603      	mov	r3, r0
 8009316:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800931a:	2b00      	cmp	r3, #0
 800931c:	d106      	bne.n	800932c <find_volume+0x1d0>
 800931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009320:	3330      	adds	r3, #48	; 0x30
 8009322:	3324      	adds	r3, #36	; 0x24
 8009324:	4618      	mov	r0, r3
 8009326:	f7fe fd13 	bl	8007d50 <ld_dword>
 800932a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800932c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009330:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009334:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	789b      	ldrb	r3, [r3, #2]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d005      	beq.n	8009350 <find_volume+0x1f4>
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	789b      	ldrb	r3, [r3, #2]
 8009348:	2b02      	cmp	r3, #2
 800934a:	d001      	beq.n	8009350 <find_volume+0x1f4>
 800934c:	230d      	movs	r3, #13
 800934e:	e147      	b.n	80095e0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009352:	789b      	ldrb	r3, [r3, #2]
 8009354:	461a      	mov	r2, r3
 8009356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009358:	fb02 f303 	mul.w	r3, r2, r3
 800935c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009364:	b29a      	uxth	r2, r3
 8009366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009368:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	895b      	ldrh	r3, [r3, #10]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d008      	beq.n	8009384 <find_volume+0x228>
 8009372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009374:	895b      	ldrh	r3, [r3, #10]
 8009376:	461a      	mov	r2, r3
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	895b      	ldrh	r3, [r3, #10]
 800937c:	3b01      	subs	r3, #1
 800937e:	4013      	ands	r3, r2
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <find_volume+0x22c>
 8009384:	230d      	movs	r3, #13
 8009386:	e12b      	b.n	80095e0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938a:	3330      	adds	r3, #48	; 0x30
 800938c:	3311      	adds	r3, #17
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe fcc6 	bl	8007d20 <ld_word>
 8009394:	4603      	mov	r3, r0
 8009396:	461a      	mov	r2, r3
 8009398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800939c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939e:	891b      	ldrh	r3, [r3, #8]
 80093a0:	f003 030f 	and.w	r3, r3, #15
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <find_volume+0x252>
 80093aa:	230d      	movs	r3, #13
 80093ac:	e118      	b.n	80095e0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80093ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b0:	3330      	adds	r3, #48	; 0x30
 80093b2:	3313      	adds	r3, #19
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fcb3 	bl	8007d20 <ld_word>
 80093ba:	4603      	mov	r3, r0
 80093bc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80093be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d106      	bne.n	80093d2 <find_volume+0x276>
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	3330      	adds	r3, #48	; 0x30
 80093c8:	3320      	adds	r3, #32
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fcc0 	bl	8007d50 <ld_dword>
 80093d0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	3330      	adds	r3, #48	; 0x30
 80093d6:	330e      	adds	r3, #14
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fe fca1 	bl	8007d20 <ld_word>
 80093de:	4603      	mov	r3, r0
 80093e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80093e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <find_volume+0x290>
 80093e8:	230d      	movs	r3, #13
 80093ea:	e0f9      	b.n	80095e0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80093ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f0:	4413      	add	r3, r2
 80093f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093f4:	8912      	ldrh	r2, [r2, #8]
 80093f6:	0912      	lsrs	r2, r2, #4
 80093f8:	b292      	uxth	r2, r2
 80093fa:	4413      	add	r3, r2
 80093fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80093fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009402:	429a      	cmp	r2, r3
 8009404:	d201      	bcs.n	800940a <find_volume+0x2ae>
 8009406:	230d      	movs	r3, #13
 8009408:	e0ea      	b.n	80095e0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800940a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009412:	8952      	ldrh	r2, [r2, #10]
 8009414:	fbb3 f3f2 	udiv	r3, r3, r2
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800941a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941c:	2b00      	cmp	r3, #0
 800941e:	d103      	bne.n	8009428 <find_volume+0x2cc>
 8009420:	230d      	movs	r3, #13
 8009422:	e0dd      	b.n	80095e0 <find_volume+0x484>
 8009424:	2000028c 	.word	0x2000028c
		fmt = FS_FAT32;
 8009428:	2303      	movs	r3, #3
 800942a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009430:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009434:	4293      	cmp	r3, r2
 8009436:	d802      	bhi.n	800943e <find_volume+0x2e2>
 8009438:	2302      	movs	r3, #2
 800943a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009440:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009444:	4293      	cmp	r3, r2
 8009446:	d802      	bhi.n	800944e <find_volume+0x2f2>
 8009448:	2301      	movs	r3, #1
 800944a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	1c9a      	adds	r2, r3, #2
 8009452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009454:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009458:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800945a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800945c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800945e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009460:	441a      	add	r2, r3
 8009462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009464:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009466:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	441a      	add	r2, r3
 800946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009470:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009474:	2b03      	cmp	r3, #3
 8009476:	d11e      	bne.n	80094b6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	3330      	adds	r3, #48	; 0x30
 800947c:	332a      	adds	r3, #42	; 0x2a
 800947e:	4618      	mov	r0, r3
 8009480:	f7fe fc4e 	bl	8007d20 <ld_word>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <find_volume+0x332>
 800948a:	230d      	movs	r3, #13
 800948c:	e0a8      	b.n	80095e0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800948e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009490:	891b      	ldrh	r3, [r3, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <find_volume+0x33e>
 8009496:	230d      	movs	r3, #13
 8009498:	e0a2      	b.n	80095e0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	3330      	adds	r3, #48	; 0x30
 800949e:	332c      	adds	r3, #44	; 0x2c
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fc55 	bl	8007d50 <ld_dword>
 80094a6:	4602      	mov	r2, r0
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80094ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	647b      	str	r3, [r7, #68]	; 0x44
 80094b4:	e01f      	b.n	80094f6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	891b      	ldrh	r3, [r3, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <find_volume+0x366>
 80094be:	230d      	movs	r3, #13
 80094c0:	e08e      	b.n	80095e0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	6a1a      	ldr	r2, [r3, #32]
 80094c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094c8:	441a      	add	r2, r3
 80094ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094cc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80094ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d103      	bne.n	80094de <find_volume+0x382>
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	e00a      	b.n	80094f4 <find_volume+0x398>
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	695a      	ldr	r2, [r3, #20]
 80094e2:	4613      	mov	r3, r2
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	4413      	add	r3, r2
 80094e8:	085a      	lsrs	r2, r3, #1
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80094f4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	699a      	ldr	r2, [r3, #24]
 80094fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009500:	0a5b      	lsrs	r3, r3, #9
 8009502:	429a      	cmp	r2, r3
 8009504:	d201      	bcs.n	800950a <find_volume+0x3ae>
 8009506:	230d      	movs	r3, #13
 8009508:	e06a      	b.n	80095e0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	f04f 32ff 	mov.w	r2, #4294967295
 8009510:	611a      	str	r2, [r3, #16]
 8009512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009514:	691a      	ldr	r2, [r3, #16]
 8009516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009518:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951c:	2280      	movs	r2, #128	; 0x80
 800951e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009520:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009524:	2b03      	cmp	r3, #3
 8009526:	d149      	bne.n	80095bc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	3330      	adds	r3, #48	; 0x30
 800952c:	3330      	adds	r3, #48	; 0x30
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fbf6 	bl	8007d20 <ld_word>
 8009534:	4603      	mov	r3, r0
 8009536:	2b01      	cmp	r3, #1
 8009538:	d140      	bne.n	80095bc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800953a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800953c:	3301      	adds	r3, #1
 800953e:	4619      	mov	r1, r3
 8009540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009542:	f7fe fe9d 	bl	8008280 <move_window>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d137      	bne.n	80095bc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954e:	2200      	movs	r2, #0
 8009550:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009554:	3330      	adds	r3, #48	; 0x30
 8009556:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fbe0 	bl	8007d20 <ld_word>
 8009560:	4603      	mov	r3, r0
 8009562:	461a      	mov	r2, r3
 8009564:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009568:	429a      	cmp	r2, r3
 800956a:	d127      	bne.n	80095bc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	3330      	adds	r3, #48	; 0x30
 8009570:	4618      	mov	r0, r3
 8009572:	f7fe fbed 	bl	8007d50 <ld_dword>
 8009576:	4603      	mov	r3, r0
 8009578:	4a1b      	ldr	r2, [pc, #108]	; (80095e8 <find_volume+0x48c>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d11e      	bne.n	80095bc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	3330      	adds	r3, #48	; 0x30
 8009582:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe fbe2 	bl	8007d50 <ld_dword>
 800958c:	4603      	mov	r3, r0
 800958e:	4a17      	ldr	r2, [pc, #92]	; (80095ec <find_volume+0x490>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d113      	bne.n	80095bc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	3330      	adds	r3, #48	; 0x30
 8009598:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe fbd7 	bl	8007d50 <ld_dword>
 80095a2:	4602      	mov	r2, r0
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	3330      	adds	r3, #48	; 0x30
 80095ac:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fe fbcd 	bl	8007d50 <ld_dword>
 80095b6:	4602      	mov	r2, r0
 80095b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ba:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80095c2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80095c4:	4b0a      	ldr	r3, [pc, #40]	; (80095f0 <find_volume+0x494>)
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	3301      	adds	r3, #1
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	4b08      	ldr	r3, [pc, #32]	; (80095f0 <find_volume+0x494>)
 80095ce:	801a      	strh	r2, [r3, #0]
 80095d0:	4b07      	ldr	r3, [pc, #28]	; (80095f0 <find_volume+0x494>)
 80095d2:	881a      	ldrh	r2, [r3, #0]
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80095d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095da:	f7fe fde9 	bl	80081b0 <clear_lock>
#endif
	return FR_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3758      	adds	r7, #88	; 0x58
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	41615252 	.word	0x41615252
 80095ec:	61417272 	.word	0x61417272
 80095f0:	20000290 	.word	0x20000290

080095f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80095fe:	2309      	movs	r3, #9
 8009600:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01c      	beq.n	8009642 <validate+0x4e>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d018      	beq.n	8009642 <validate+0x4e>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d013      	beq.n	8009642 <validate+0x4e>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	889a      	ldrh	r2, [r3, #4]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	88db      	ldrh	r3, [r3, #6]
 8009624:	429a      	cmp	r2, r3
 8009626:	d10c      	bne.n	8009642 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	785b      	ldrb	r3, [r3, #1]
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe fad8 	bl	8007be4 <disk_status>
 8009634:	4603      	mov	r3, r0
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <validate+0x4e>
			res = FR_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d102      	bne.n	800964e <validate+0x5a>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	e000      	b.n	8009650 <validate+0x5c>
 800964e:	2300      	movs	r3, #0
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	6013      	str	r3, [r2, #0]
	return res;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b088      	sub	sp, #32
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4613      	mov	r3, r2
 800966c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009672:	f107 0310 	add.w	r3, r7, #16
 8009676:	4618      	mov	r0, r3
 8009678:	f7ff fcd5 	bl	8009026 <get_ldnumber>
 800967c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	2b00      	cmp	r3, #0
 8009682:	da01      	bge.n	8009688 <f_mount+0x28>
 8009684:	230b      	movs	r3, #11
 8009686:	e02b      	b.n	80096e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009688:	4a17      	ldr	r2, [pc, #92]	; (80096e8 <f_mount+0x88>)
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009690:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d005      	beq.n	80096a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009698:	69b8      	ldr	r0, [r7, #24]
 800969a:	f7fe fd89 	bl	80081b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	2200      	movs	r2, #0
 80096a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	490d      	ldr	r1, [pc, #52]	; (80096e8 <f_mount+0x88>)
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <f_mount+0x66>
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d001      	beq.n	80096ca <f_mount+0x6a>
 80096c6:	2300      	movs	r3, #0
 80096c8:	e00a      	b.n	80096e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80096ca:	f107 010c 	add.w	r1, r7, #12
 80096ce:	f107 0308 	add.w	r3, r7, #8
 80096d2:	2200      	movs	r2, #0
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7ff fd41 	bl	800915c <find_volume>
 80096da:	4603      	mov	r3, r0
 80096dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80096de:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	2000028c 	.word	0x2000028c

080096ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b098      	sub	sp, #96	; 0x60
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	4613      	mov	r3, r2
 80096f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <f_open+0x18>
 8009700:	2309      	movs	r3, #9
 8009702:	e1ad      	b.n	8009a60 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800970a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800970c:	79fa      	ldrb	r2, [r7, #7]
 800970e:	f107 0110 	add.w	r1, r7, #16
 8009712:	f107 0308 	add.w	r3, r7, #8
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff fd20 	bl	800915c <find_volume>
 800971c:	4603      	mov	r3, r0
 800971e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009726:	2b00      	cmp	r3, #0
 8009728:	f040 8191 	bne.w	8009a4e <f_open+0x362>
		dj.obj.fs = fs;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	f107 0314 	add.w	r3, r7, #20
 8009736:	4611      	mov	r1, r2
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fc03 	bl	8008f44 <follow_path>
 800973e:	4603      	mov	r3, r0
 8009740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009748:	2b00      	cmp	r3, #0
 800974a:	d11a      	bne.n	8009782 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800974c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009750:	b25b      	sxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	da03      	bge.n	800975e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009756:	2306      	movs	r3, #6
 8009758:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800975c:	e011      	b.n	8009782 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	f023 0301 	bic.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	bf14      	ite	ne
 8009768:	2301      	movne	r3, #1
 800976a:	2300      	moveq	r3, #0
 800976c:	b2db      	uxtb	r3, r3
 800976e:	461a      	mov	r2, r3
 8009770:	f107 0314 	add.w	r3, r7, #20
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fbd2 	bl	8007f20 <chk_lock>
 800977c:	4603      	mov	r3, r0
 800977e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009782:	79fb      	ldrb	r3, [r7, #7]
 8009784:	f003 031c 	and.w	r3, r3, #28
 8009788:	2b00      	cmp	r3, #0
 800978a:	d07f      	beq.n	800988c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800978c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009790:	2b00      	cmp	r3, #0
 8009792:	d017      	beq.n	80097c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009798:	2b04      	cmp	r3, #4
 800979a:	d10e      	bne.n	80097ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800979c:	f7fe fc1c 	bl	8007fd8 <enq_lock>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d006      	beq.n	80097b4 <f_open+0xc8>
 80097a6:	f107 0314 	add.w	r3, r7, #20
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fb03 	bl	8008db6 <dir_register>
 80097b0:	4603      	mov	r3, r0
 80097b2:	e000      	b.n	80097b6 <f_open+0xca>
 80097b4:	2312      	movs	r3, #18
 80097b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	f043 0308 	orr.w	r3, r3, #8
 80097c0:	71fb      	strb	r3, [r7, #7]
 80097c2:	e010      	b.n	80097e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80097c4:	7ebb      	ldrb	r3, [r7, #26]
 80097c6:	f003 0311 	and.w	r3, r3, #17
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <f_open+0xea>
					res = FR_DENIED;
 80097ce:	2307      	movs	r3, #7
 80097d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80097d4:	e007      	b.n	80097e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <f_open+0xfa>
 80097e0:	2308      	movs	r3, #8
 80097e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80097e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d168      	bne.n	80098c0 <f_open+0x1d4>
 80097ee:	79fb      	ldrb	r3, [r7, #7]
 80097f0:	f003 0308 	and.w	r3, r3, #8
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d063      	beq.n	80098c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80097f8:	f7fe f996 	bl	8007b28 <get_fattime>
 80097fc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80097fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009800:	330e      	adds	r3, #14
 8009802:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe fae1 	bl	8007dcc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800980a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980c:	3316      	adds	r3, #22
 800980e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fadb 	bl	8007dcc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009818:	330b      	adds	r3, #11
 800981a:	2220      	movs	r2, #32
 800981c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff fa32 	bl	8008c8e <ld_clust>
 800982a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009830:	2200      	movs	r2, #0
 8009832:	4618      	mov	r0, r3
 8009834:	f7ff fa4a 	bl	8008ccc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983a:	331c      	adds	r3, #28
 800983c:	2100      	movs	r1, #0
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fac4 	bl	8007dcc <st_dword>
					fs->wflag = 1;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	2201      	movs	r2, #1
 8009848:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800984a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984c:	2b00      	cmp	r3, #0
 800984e:	d037      	beq.n	80098c0 <f_open+0x1d4>
						dw = fs->winsect;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009856:	f107 0314 	add.w	r3, r7, #20
 800985a:	2200      	movs	r2, #0
 800985c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe ff5d 	bl	800871e <remove_chain>
 8009864:	4603      	mov	r3, r0
 8009866:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800986a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800986e:	2b00      	cmp	r3, #0
 8009870:	d126      	bne.n	80098c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009876:	4618      	mov	r0, r3
 8009878:	f7fe fd02 	bl	8008280 <move_window>
 800987c:	4603      	mov	r3, r0
 800987e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009886:	3a01      	subs	r2, #1
 8009888:	60da      	str	r2, [r3, #12]
 800988a:	e019      	b.n	80098c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800988c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009890:	2b00      	cmp	r3, #0
 8009892:	d115      	bne.n	80098c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009894:	7ebb      	ldrb	r3, [r7, #26]
 8009896:	f003 0310 	and.w	r3, r3, #16
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800989e:	2304      	movs	r3, #4
 80098a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80098a4:	e00c      	b.n	80098c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d007      	beq.n	80098c0 <f_open+0x1d4>
 80098b0:	7ebb      	ldrb	r3, [r7, #26]
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <f_open+0x1d4>
						res = FR_DENIED;
 80098ba:	2307      	movs	r3, #7
 80098bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80098c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d128      	bne.n	800991a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	f003 0308 	and.w	r3, r3, #8
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80098d2:	79fb      	ldrb	r3, [r7, #7]
 80098d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80098e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80098e8:	79fb      	ldrb	r3, [r7, #7]
 80098ea:	f023 0301 	bic.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bf14      	ite	ne
 80098f2:	2301      	movne	r3, #1
 80098f4:	2300      	moveq	r3, #0
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	461a      	mov	r2, r3
 80098fa:	f107 0314 	add.w	r3, r7, #20
 80098fe:	4611      	mov	r1, r2
 8009900:	4618      	mov	r0, r3
 8009902:	f7fe fb8b 	bl	800801c <inc_lock>
 8009906:	4602      	mov	r2, r0
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d102      	bne.n	800991a <f_open+0x22e>
 8009914:	2302      	movs	r3, #2
 8009916:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800991a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800991e:	2b00      	cmp	r3, #0
 8009920:	f040 8095 	bne.w	8009a4e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f7ff f9af 	bl	8008c8e <ld_clust>
 8009930:	4602      	mov	r2, r0
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009938:	331c      	adds	r3, #28
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe fa08 	bl	8007d50 <ld_dword>
 8009940:	4602      	mov	r2, r0
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	88da      	ldrh	r2, [r3, #6]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	79fa      	ldrb	r2, [r7, #7]
 800995e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3330      	adds	r3, #48	; 0x30
 8009976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800997a:	2100      	movs	r1, #0
 800997c:	4618      	mov	r0, r3
 800997e:	f7fe fa72 	bl	8007e66 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	f003 0320 	and.w	r3, r3, #32
 8009988:	2b00      	cmp	r3, #0
 800998a:	d060      	beq.n	8009a4e <f_open+0x362>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d05c      	beq.n	8009a4e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	895b      	ldrh	r3, [r3, #10]
 80099a0:	025b      	lsls	r3, r3, #9
 80099a2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	657b      	str	r3, [r7, #84]	; 0x54
 80099b0:	e016      	b.n	80099e0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fd1d 	bl	80083f6 <get_fat>
 80099bc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80099be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d802      	bhi.n	80099ca <f_open+0x2de>
 80099c4:	2302      	movs	r3, #2
 80099c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80099ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d0:	d102      	bne.n	80099d8 <f_open+0x2ec>
 80099d2:	2301      	movs	r3, #1
 80099d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	657b      	str	r3, [r7, #84]	; 0x54
 80099e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d103      	bne.n	80099f0 <f_open+0x304>
 80099e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d8e0      	bhi.n	80099b2 <f_open+0x2c6>
				}
				fp->clust = clst;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80099f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d127      	bne.n	8009a4e <f_open+0x362>
 80099fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d022      	beq.n	8009a4e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe fcd3 	bl	80083b8 <clust2sect>
 8009a12:	6478      	str	r0, [r7, #68]	; 0x44
 8009a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d103      	bne.n	8009a22 <f_open+0x336>
						res = FR_INT_ERR;
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a20:	e015      	b.n	8009a4e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a24:	0a5a      	lsrs	r2, r3, #9
 8009a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a28:	441a      	add	r2, r3
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	7858      	ldrb	r0, [r3, #1]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6a1a      	ldr	r2, [r3, #32]
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	f7fe f911 	bl	8007c64 <disk_read>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <f_open+0x362>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009a4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <f_open+0x370>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009a5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3760      	adds	r7, #96	; 0x60
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08e      	sub	sp, #56	; 0x38
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f107 0214 	add.w	r2, r7, #20
 8009a86:	4611      	mov	r1, r2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7ff fdb3 	bl	80095f4 <validate>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009a94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d107      	bne.n	8009aac <f_read+0x44>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	7d5b      	ldrb	r3, [r3, #21]
 8009aa0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009aa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <f_read+0x4a>
 8009aac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ab0:	e115      	b.n	8009cde <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	7d1b      	ldrb	r3, [r3, #20]
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <f_read+0x5a>
 8009abe:	2307      	movs	r3, #7
 8009ac0:	e10d      	b.n	8009cde <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68da      	ldr	r2, [r3, #12]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	f240 80fe 	bls.w	8009cd4 <f_read+0x26c>
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009adc:	e0fa      	b.n	8009cd4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f040 80c6 	bne.w	8009c78 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	0a5b      	lsrs	r3, r3, #9
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	8952      	ldrh	r2, [r2, #10]
 8009af6:	3a01      	subs	r2, #1
 8009af8:	4013      	ands	r3, r2
 8009afa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d12f      	bne.n	8009b62 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d103      	bne.n	8009b12 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8009b10:	e013      	b.n	8009b3a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d007      	beq.n	8009b2a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f7fe fef9 	bl	8008918 <clmt_clust>
 8009b26:	6338      	str	r0, [r7, #48]	; 0x30
 8009b28:	e007      	b.n	8009b3a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	4619      	mov	r1, r3
 8009b32:	4610      	mov	r0, r2
 8009b34:	f7fe fc5f 	bl	80083f6 <get_fat>
 8009b38:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d804      	bhi.n	8009b4a <f_read+0xe2>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2202      	movs	r2, #2
 8009b44:	755a      	strb	r2, [r3, #21]
 8009b46:	2302      	movs	r3, #2
 8009b48:	e0c9      	b.n	8009cde <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b50:	d104      	bne.n	8009b5c <f_read+0xf4>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2201      	movs	r2, #1
 8009b56:	755a      	strb	r2, [r3, #21]
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e0c0      	b.n	8009cde <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b60:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	f7fe fc24 	bl	80083b8 <clust2sect>
 8009b70:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d104      	bne.n	8009b82 <f_read+0x11a>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	755a      	strb	r2, [r3, #21]
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e0ad      	b.n	8009cde <f_read+0x276>
			sect += csect;
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	4413      	add	r3, r2
 8009b88:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	0a5b      	lsrs	r3, r3, #9
 8009b8e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d039      	beq.n	8009c0a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b96:	69fa      	ldr	r2, [r7, #28]
 8009b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9a:	4413      	add	r3, r2
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	8952      	ldrh	r2, [r2, #10]
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d905      	bls.n	8009bb0 <f_read+0x148>
					cc = fs->csize - csect;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	895b      	ldrh	r3, [r3, #10]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	7858      	ldrb	r0, [r3, #1]
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bba:	f7fe f853 	bl	8007c64 <disk_read>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d004      	beq.n	8009bce <f_read+0x166>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	755a      	strb	r2, [r3, #21]
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e087      	b.n	8009cde <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	7d1b      	ldrb	r3, [r3, #20]
 8009bd2:	b25b      	sxtb	r3, r3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	da14      	bge.n	8009c02 <f_read+0x19a>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a1a      	ldr	r2, [r3, #32]
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d90d      	bls.n	8009c02 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6a1a      	ldr	r2, [r3, #32]
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	025b      	lsls	r3, r3, #9
 8009bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf2:	18d0      	adds	r0, r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3330      	adds	r3, #48	; 0x30
 8009bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	f7fe f911 	bl	8007e24 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	025b      	lsls	r3, r3, #9
 8009c06:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009c08:	e050      	b.n	8009cac <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	69ba      	ldr	r2, [r7, #24]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d02e      	beq.n	8009c72 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	7d1b      	ldrb	r3, [r3, #20]
 8009c18:	b25b      	sxtb	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	da18      	bge.n	8009c50 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	7858      	ldrb	r0, [r3, #1]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6a1a      	ldr	r2, [r3, #32]
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f7fe f839 	bl	8007ca4 <disk_write>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d004      	beq.n	8009c42 <f_read+0x1da>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	755a      	strb	r2, [r3, #21]
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e04d      	b.n	8009cde <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	7d1b      	ldrb	r3, [r3, #20]
 8009c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	7858      	ldrb	r0, [r3, #1]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	69ba      	ldr	r2, [r7, #24]
 8009c5e:	f7fe f801 	bl	8007c64 <disk_read>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d004      	beq.n	8009c72 <f_read+0x20a>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	755a      	strb	r2, [r3, #21]
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e035      	b.n	8009cde <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c80:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009c84:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d901      	bls.n	8009c92 <f_read+0x22a>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca0:	4413      	add	r3, r2
 8009ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ca8:	f7fe f8bc 	bl	8007e24 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb0:	4413      	add	r3, r2
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	699a      	ldr	r2, [r3, #24]
 8009cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cba:	441a      	add	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	619a      	str	r2, [r3, #24]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc6:	441a      	add	r2, r3
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f47f af01 	bne.w	8009ade <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3738      	adds	r7, #56	; 0x38
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b08c      	sub	sp, #48	; 0x30
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	60f8      	str	r0, [r7, #12]
 8009cee:	60b9      	str	r1, [r7, #8]
 8009cf0:	607a      	str	r2, [r7, #4]
 8009cf2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f107 0210 	add.w	r2, r7, #16
 8009d04:	4611      	mov	r1, r2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7ff fc74 	bl	80095f4 <validate>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009d12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d107      	bne.n	8009d2a <f_write+0x44>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	7d5b      	ldrb	r3, [r3, #21]
 8009d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <f_write+0x4a>
 8009d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d2e:	e14b      	b.n	8009fc8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	7d1b      	ldrb	r3, [r3, #20]
 8009d34:	f003 0302 	and.w	r3, r3, #2
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <f_write+0x5a>
 8009d3c:	2307      	movs	r3, #7
 8009d3e:	e143      	b.n	8009fc8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	699a      	ldr	r2, [r3, #24]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	441a      	add	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	f080 812d 	bcs.w	8009fac <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	43db      	mvns	r3, r3
 8009d58:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009d5a:	e127      	b.n	8009fac <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f040 80e3 	bne.w	8009f30 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	0a5b      	lsrs	r3, r3, #9
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	8952      	ldrh	r2, [r2, #10]
 8009d74:	3a01      	subs	r2, #1
 8009d76:	4013      	ands	r3, r2
 8009d78:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d143      	bne.n	8009e08 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10c      	bne.n	8009da2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d11a      	bne.n	8009dca <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2100      	movs	r1, #0
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe fd25 	bl	80087e8 <create_chain>
 8009d9e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009da0:	e013      	b.n	8009dca <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d007      	beq.n	8009dba <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	4619      	mov	r1, r3
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7fe fdb1 	bl	8008918 <clmt_clust>
 8009db6:	62b8      	str	r0, [r7, #40]	; 0x28
 8009db8:	e007      	b.n	8009dca <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	f7fe fd10 	bl	80087e8 <create_chain>
 8009dc8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f000 80f2 	beq.w	8009fb6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d104      	bne.n	8009de2 <f_write+0xfc>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	755a      	strb	r2, [r3, #21]
 8009dde:	2302      	movs	r3, #2
 8009de0:	e0f2      	b.n	8009fc8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de8:	d104      	bne.n	8009df4 <f_write+0x10e>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2201      	movs	r2, #1
 8009dee:	755a      	strb	r2, [r3, #21]
 8009df0:	2301      	movs	r3, #1
 8009df2:	e0e9      	b.n	8009fc8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d102      	bne.n	8009e08 <f_write+0x122>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e06:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	7d1b      	ldrb	r3, [r3, #20]
 8009e0c:	b25b      	sxtb	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	da18      	bge.n	8009e44 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	7858      	ldrb	r0, [r3, #1]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6a1a      	ldr	r2, [r3, #32]
 8009e20:	2301      	movs	r3, #1
 8009e22:	f7fd ff3f 	bl	8007ca4 <disk_write>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d004      	beq.n	8009e36 <f_write+0x150>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	755a      	strb	r2, [r3, #21]
 8009e32:	2301      	movs	r3, #1
 8009e34:	e0c8      	b.n	8009fc8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	7d1b      	ldrb	r3, [r3, #20]
 8009e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	f7fe fab3 	bl	80083b8 <clust2sect>
 8009e52:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d104      	bne.n	8009e64 <f_write+0x17e>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	755a      	strb	r2, [r3, #21]
 8009e60:	2302      	movs	r3, #2
 8009e62:	e0b1      	b.n	8009fc8 <f_write+0x2e2>
			sect += csect;
 8009e64:	697a      	ldr	r2, [r7, #20]
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	4413      	add	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	0a5b      	lsrs	r3, r3, #9
 8009e70:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d03c      	beq.n	8009ef2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e78:	69ba      	ldr	r2, [r7, #24]
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	8952      	ldrh	r2, [r2, #10]
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d905      	bls.n	8009e92 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	895b      	ldrh	r3, [r3, #10]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	7858      	ldrb	r0, [r3, #1]
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	69f9      	ldr	r1, [r7, #28]
 8009e9c:	f7fd ff02 	bl	8007ca4 <disk_write>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d004      	beq.n	8009eb0 <f_write+0x1ca>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	755a      	strb	r2, [r3, #21]
 8009eac:	2301      	movs	r3, #1
 8009eae:	e08b      	b.n	8009fc8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a1a      	ldr	r2, [r3, #32]
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	6a3a      	ldr	r2, [r7, #32]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d915      	bls.n	8009eea <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6a1a      	ldr	r2, [r3, #32]
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	025b      	lsls	r3, r3, #9
 8009ece:	69fa      	ldr	r2, [r7, #28]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	f7fd ffa4 	bl	8007e24 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	7d1b      	ldrb	r3, [r3, #20]
 8009ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee4:	b2da      	uxtb	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	025b      	lsls	r3, r3, #9
 8009eee:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009ef0:	e03f      	b.n	8009f72 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d016      	beq.n	8009f2a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	699a      	ldr	r2, [r3, #24]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d210      	bcs.n	8009f2a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	7858      	ldrb	r0, [r3, #1]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f12:	2301      	movs	r3, #1
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	f7fd fea5 	bl	8007c64 <disk_read>
 8009f1a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d004      	beq.n	8009f2a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2201      	movs	r2, #1
 8009f24:	755a      	strb	r2, [r3, #21]
 8009f26:	2301      	movs	r3, #1
 8009f28:	e04e      	b.n	8009fc8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009f3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d901      	bls.n	8009f4a <f_write+0x264>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f58:	4413      	add	r3, r2
 8009f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f5c:	69f9      	ldr	r1, [r7, #28]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fd ff60 	bl	8007e24 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	7d1b      	ldrb	r3, [r3, #20]
 8009f68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009f72:	69fa      	ldr	r2, [r7, #28]
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	4413      	add	r3, r2
 8009f78:	61fb      	str	r3, [r7, #28]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	699a      	ldr	r2, [r3, #24]
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	441a      	add	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	619a      	str	r2, [r3, #24]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	68da      	ldr	r2, [r3, #12]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	bf38      	it	cc
 8009f92:	461a      	movcc	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	60da      	str	r2, [r3, #12]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	441a      	add	r2, r3
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f47f aed4 	bne.w	8009d5c <f_write+0x76>
 8009fb4:	e000      	b.n	8009fb8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009fb6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	7d1b      	ldrb	r3, [r3, #20]
 8009fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3730      	adds	r7, #48	; 0x30
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f107 0208 	add.w	r2, r7, #8
 8009fde:	4611      	mov	r1, r2
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff fb07 	bl	80095f4 <validate>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d168      	bne.n	800a0c2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	7d1b      	ldrb	r3, [r3, #20]
 8009ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d062      	beq.n	800a0c2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	7d1b      	ldrb	r3, [r3, #20]
 800a000:	b25b      	sxtb	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	da15      	bge.n	800a032 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	7858      	ldrb	r0, [r3, #1]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a1a      	ldr	r2, [r3, #32]
 800a014:	2301      	movs	r3, #1
 800a016:	f7fd fe45 	bl	8007ca4 <disk_write>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <f_sync+0x54>
 800a020:	2301      	movs	r3, #1
 800a022:	e04f      	b.n	800a0c4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	7d1b      	ldrb	r3, [r3, #20]
 800a028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a032:	f7fd fd79 	bl	8007b28 <get_fattime>
 800a036:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03e:	4619      	mov	r1, r3
 800a040:	4610      	mov	r0, r2
 800a042:	f7fe f91d 	bl	8008280 <move_window>
 800a046:	4603      	mov	r3, r0
 800a048:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d138      	bne.n	800a0c2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a054:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	330b      	adds	r3, #11
 800a05a:	781a      	ldrb	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	330b      	adds	r3, #11
 800a060:	f042 0220 	orr.w	r2, r2, #32
 800a064:	b2d2      	uxtb	r2, r2
 800a066:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6818      	ldr	r0, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	461a      	mov	r2, r3
 800a072:	68f9      	ldr	r1, [r7, #12]
 800a074:	f7fe fe2a 	bl	8008ccc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f103 021c 	add.w	r2, r3, #28
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	4619      	mov	r1, r3
 800a084:	4610      	mov	r0, r2
 800a086:	f7fd fea1 	bl	8007dcc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3316      	adds	r3, #22
 800a08e:	6939      	ldr	r1, [r7, #16]
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd fe9b 	bl	8007dcc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3312      	adds	r3, #18
 800a09a:	2100      	movs	r1, #0
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fd fe7a 	bl	8007d96 <st_word>
					fs->wflag = 1;
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe f916 	bl	80082dc <sync_fs>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	7d1b      	ldrb	r3, [r3, #20]
 800a0b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f7ff ff7b 	bl	8009fd0 <f_sync>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d118      	bne.n	800a116 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f107 0208 	add.w	r2, r7, #8
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff fa81 	bl	80095f4 <validate>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10c      	bne.n	800a116 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	4618      	mov	r0, r3
 800a102:	f7fe f819 	bl	8008138 <dec_lock>
 800a106:	4603      	mov	r3, r0
 800a108:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d102      	bne.n	800a116 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a116:	7bfb      	ldrb	r3, [r7, #15]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b092      	sub	sp, #72	; 0x48
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a12c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a130:	f107 030c 	add.w	r3, r7, #12
 800a134:	2200      	movs	r2, #0
 800a136:	4618      	mov	r0, r3
 800a138:	f7ff f810 	bl	800915c <find_volume>
 800a13c:	4603      	mov	r3, r0
 800a13e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a142:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a146:	2b00      	cmp	r3, #0
 800a148:	f040 8099 	bne.w	800a27e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a14c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	691a      	ldr	r2, [r3, #16]
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	3b02      	subs	r3, #2
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d804      	bhi.n	800a16a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	e089      	b.n	800a27e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d128      	bne.n	800a1c8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a176:	2302      	movs	r3, #2
 800a178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a17e:	f107 0314 	add.w	r3, r7, #20
 800a182:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a184:	4618      	mov	r0, r3
 800a186:	f7fe f936 	bl	80083f6 <get_fat>
 800a18a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a192:	d103      	bne.n	800a19c <f_getfree+0x7c>
 800a194:	2301      	movs	r3, #1
 800a196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a19a:	e063      	b.n	800a264 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d103      	bne.n	800a1aa <f_getfree+0x8a>
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a1a8:	e05c      	b.n	800a264 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d102      	bne.n	800a1b6 <f_getfree+0x96>
 800a1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d3db      	bcc.n	800a17e <f_getfree+0x5e>
 800a1c6:	e04d      	b.n	800a264 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a1d8:	2300      	movs	r3, #0
 800a1da:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d113      	bne.n	800a20a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a1e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	63ba      	str	r2, [r7, #56]	; 0x38
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	f7fe f848 	bl	8008280 <move_window>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a1f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d131      	bne.n	800a262 <f_getfree+0x142>
							p = fs->win;
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	3330      	adds	r3, #48	; 0x30
 800a202:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a204:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a208:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d10f      	bne.n	800a232 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a214:	f7fd fd84 	bl	8007d20 <ld_word>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d102      	bne.n	800a224 <f_getfree+0x104>
 800a21e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a220:	3301      	adds	r3, #1
 800a222:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	3302      	adds	r3, #2
 800a228:	633b      	str	r3, [r7, #48]	; 0x30
 800a22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a22c:	3b02      	subs	r3, #2
 800a22e:	637b      	str	r3, [r7, #52]	; 0x34
 800a230:	e010      	b.n	800a254 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a234:	f7fd fd8c 	bl	8007d50 <ld_dword>
 800a238:	4603      	mov	r3, r0
 800a23a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d102      	bne.n	800a248 <f_getfree+0x128>
 800a242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a244:	3301      	adds	r3, #1
 800a246:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24a:	3304      	adds	r3, #4
 800a24c:	633b      	str	r3, [r7, #48]	; 0x30
 800a24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a250:	3b04      	subs	r3, #4
 800a252:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a256:	3b01      	subs	r3, #1
 800a258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1bd      	bne.n	800a1dc <f_getfree+0xbc>
 800a260:	e000      	b.n	800a264 <f_getfree+0x144>
							if (res != FR_OK) break;
 800a262:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a268:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a26e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	791a      	ldrb	r2, [r3, #4]
 800a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a276:	f042 0201 	orr.w	r2, r2, #1
 800a27a:	b2d2      	uxtb	r2, r2
 800a27c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a27e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a282:	4618      	mov	r0, r3
 800a284:	3748      	adds	r7, #72	; 0x48
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b088      	sub	sp, #32
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	60b9      	str	r1, [r7, #8]
 800a294:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a29e:	e01b      	b.n	800a2d8 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a2a0:	f107 0310 	add.w	r3, r7, #16
 800a2a4:	f107 0114 	add.w	r1, r7, #20
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7ff fbdc 	bl	8009a68 <f_read>
		if (rc != 1) break;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d116      	bne.n	800a2e4 <f_gets+0x5a>
		c = s[0];
 800a2b6:	7d3b      	ldrb	r3, [r7, #20]
 800a2b8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a2ba:	7dfb      	ldrb	r3, [r7, #23]
 800a2bc:	2b0d      	cmp	r3, #13
 800a2be:	d100      	bne.n	800a2c2 <f_gets+0x38>
 800a2c0:	e00a      	b.n	800a2d8 <f_gets+0x4e>
		*p++ = c;
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	61ba      	str	r2, [r7, #24]
 800a2c8:	7dfa      	ldrb	r2, [r7, #23]
 800a2ca:	701a      	strb	r2, [r3, #0]
		n++;
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
 800a2d4:	2b0a      	cmp	r3, #10
 800a2d6:	d007      	beq.n	800a2e8 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	dbde      	blt.n	800a2a0 <f_gets+0x16>
 800a2e2:	e002      	b.n	800a2ea <f_gets+0x60>
		if (rc != 1) break;
 800a2e4:	bf00      	nop
 800a2e6:	e000      	b.n	800a2ea <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a2e8:	bf00      	nop
	}
	*p = 0;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <f_gets+0x70>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	e000      	b.n	800a2fc <f_gets+0x72>
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3720      	adds	r7, #32
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	4613      	mov	r3, r2
 800a310:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a312:	2301      	movs	r3, #1
 800a314:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a31a:	4b1f      	ldr	r3, [pc, #124]	; (800a398 <FATFS_LinkDriverEx+0x94>)
 800a31c:	7a5b      	ldrb	r3, [r3, #9]
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	2b00      	cmp	r3, #0
 800a322:	d131      	bne.n	800a388 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a324:	4b1c      	ldr	r3, [pc, #112]	; (800a398 <FATFS_LinkDriverEx+0x94>)
 800a326:	7a5b      	ldrb	r3, [r3, #9]
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	461a      	mov	r2, r3
 800a32c:	4b1a      	ldr	r3, [pc, #104]	; (800a398 <FATFS_LinkDriverEx+0x94>)
 800a32e:	2100      	movs	r1, #0
 800a330:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a332:	4b19      	ldr	r3, [pc, #100]	; (800a398 <FATFS_LinkDriverEx+0x94>)
 800a334:	7a5b      	ldrb	r3, [r3, #9]
 800a336:	b2db      	uxtb	r3, r3
 800a338:	4a17      	ldr	r2, [pc, #92]	; (800a398 <FATFS_LinkDriverEx+0x94>)
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a342:	4b15      	ldr	r3, [pc, #84]	; (800a398 <FATFS_LinkDriverEx+0x94>)
 800a344:	7a5b      	ldrb	r3, [r3, #9]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	461a      	mov	r2, r3
 800a34a:	4b13      	ldr	r3, [pc, #76]	; (800a398 <FATFS_LinkDriverEx+0x94>)
 800a34c:	4413      	add	r3, r2
 800a34e:	79fa      	ldrb	r2, [r7, #7]
 800a350:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a352:	4b11      	ldr	r3, [pc, #68]	; (800a398 <FATFS_LinkDriverEx+0x94>)
 800a354:	7a5b      	ldrb	r3, [r3, #9]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	1c5a      	adds	r2, r3, #1
 800a35a:	b2d1      	uxtb	r1, r2
 800a35c:	4a0e      	ldr	r2, [pc, #56]	; (800a398 <FATFS_LinkDriverEx+0x94>)
 800a35e:	7251      	strb	r1, [r2, #9]
 800a360:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a362:	7dbb      	ldrb	r3, [r7, #22]
 800a364:	3330      	adds	r3, #48	; 0x30
 800a366:	b2da      	uxtb	r2, r3
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	3301      	adds	r3, #1
 800a370:	223a      	movs	r2, #58	; 0x3a
 800a372:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	3302      	adds	r3, #2
 800a378:	222f      	movs	r2, #47	; 0x2f
 800a37a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	3303      	adds	r3, #3
 800a380:	2200      	movs	r2, #0
 800a382:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a384:	2300      	movs	r3, #0
 800a386:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a388:	7dfb      	ldrb	r3, [r7, #23]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	371c      	adds	r7, #28
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	200002b4 	.word	0x200002b4

0800a39c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff ffaa 	bl	800a304 <FATFS_LinkDriverEx>
 800a3b0:	4603      	mov	r3, r0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <__errno>:
 800a3bc:	4b01      	ldr	r3, [pc, #4]	; (800a3c4 <__errno+0x8>)
 800a3be:	6818      	ldr	r0, [r3, #0]
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	20000078 	.word	0x20000078

0800a3c8 <__libc_init_array>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	4d0d      	ldr	r5, [pc, #52]	; (800a400 <__libc_init_array+0x38>)
 800a3cc:	4c0d      	ldr	r4, [pc, #52]	; (800a404 <__libc_init_array+0x3c>)
 800a3ce:	1b64      	subs	r4, r4, r5
 800a3d0:	10a4      	asrs	r4, r4, #2
 800a3d2:	2600      	movs	r6, #0
 800a3d4:	42a6      	cmp	r6, r4
 800a3d6:	d109      	bne.n	800a3ec <__libc_init_array+0x24>
 800a3d8:	4d0b      	ldr	r5, [pc, #44]	; (800a408 <__libc_init_array+0x40>)
 800a3da:	4c0c      	ldr	r4, [pc, #48]	; (800a40c <__libc_init_array+0x44>)
 800a3dc:	f005 f91a 	bl	800f614 <_init>
 800a3e0:	1b64      	subs	r4, r4, r5
 800a3e2:	10a4      	asrs	r4, r4, #2
 800a3e4:	2600      	movs	r6, #0
 800a3e6:	42a6      	cmp	r6, r4
 800a3e8:	d105      	bne.n	800a3f6 <__libc_init_array+0x2e>
 800a3ea:	bd70      	pop	{r4, r5, r6, pc}
 800a3ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3f0:	4798      	blx	r3
 800a3f2:	3601      	adds	r6, #1
 800a3f4:	e7ee      	b.n	800a3d4 <__libc_init_array+0xc>
 800a3f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3fa:	4798      	blx	r3
 800a3fc:	3601      	adds	r6, #1
 800a3fe:	e7f2      	b.n	800a3e6 <__libc_init_array+0x1e>
 800a400:	0800fee8 	.word	0x0800fee8
 800a404:	0800fee8 	.word	0x0800fee8
 800a408:	0800fee8 	.word	0x0800fee8
 800a40c:	0800feec 	.word	0x0800feec

0800a410 <memset>:
 800a410:	4402      	add	r2, r0
 800a412:	4603      	mov	r3, r0
 800a414:	4293      	cmp	r3, r2
 800a416:	d100      	bne.n	800a41a <memset+0xa>
 800a418:	4770      	bx	lr
 800a41a:	f803 1b01 	strb.w	r1, [r3], #1
 800a41e:	e7f9      	b.n	800a414 <memset+0x4>

0800a420 <__cvt>:
 800a420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a424:	ec55 4b10 	vmov	r4, r5, d0
 800a428:	2d00      	cmp	r5, #0
 800a42a:	460e      	mov	r6, r1
 800a42c:	4619      	mov	r1, r3
 800a42e:	462b      	mov	r3, r5
 800a430:	bfbb      	ittet	lt
 800a432:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a436:	461d      	movlt	r5, r3
 800a438:	2300      	movge	r3, #0
 800a43a:	232d      	movlt	r3, #45	; 0x2d
 800a43c:	700b      	strb	r3, [r1, #0]
 800a43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a440:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a444:	4691      	mov	r9, r2
 800a446:	f023 0820 	bic.w	r8, r3, #32
 800a44a:	bfbc      	itt	lt
 800a44c:	4622      	movlt	r2, r4
 800a44e:	4614      	movlt	r4, r2
 800a450:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a454:	d005      	beq.n	800a462 <__cvt+0x42>
 800a456:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a45a:	d100      	bne.n	800a45e <__cvt+0x3e>
 800a45c:	3601      	adds	r6, #1
 800a45e:	2102      	movs	r1, #2
 800a460:	e000      	b.n	800a464 <__cvt+0x44>
 800a462:	2103      	movs	r1, #3
 800a464:	ab03      	add	r3, sp, #12
 800a466:	9301      	str	r3, [sp, #4]
 800a468:	ab02      	add	r3, sp, #8
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	ec45 4b10 	vmov	d0, r4, r5
 800a470:	4653      	mov	r3, sl
 800a472:	4632      	mov	r2, r6
 800a474:	f001 fefc 	bl	800c270 <_dtoa_r>
 800a478:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a47c:	4607      	mov	r7, r0
 800a47e:	d102      	bne.n	800a486 <__cvt+0x66>
 800a480:	f019 0f01 	tst.w	r9, #1
 800a484:	d022      	beq.n	800a4cc <__cvt+0xac>
 800a486:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a48a:	eb07 0906 	add.w	r9, r7, r6
 800a48e:	d110      	bne.n	800a4b2 <__cvt+0x92>
 800a490:	783b      	ldrb	r3, [r7, #0]
 800a492:	2b30      	cmp	r3, #48	; 0x30
 800a494:	d10a      	bne.n	800a4ac <__cvt+0x8c>
 800a496:	2200      	movs	r2, #0
 800a498:	2300      	movs	r3, #0
 800a49a:	4620      	mov	r0, r4
 800a49c:	4629      	mov	r1, r5
 800a49e:	f7f6 fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4a2:	b918      	cbnz	r0, 800a4ac <__cvt+0x8c>
 800a4a4:	f1c6 0601 	rsb	r6, r6, #1
 800a4a8:	f8ca 6000 	str.w	r6, [sl]
 800a4ac:	f8da 3000 	ldr.w	r3, [sl]
 800a4b0:	4499      	add	r9, r3
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f7f6 fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4be:	b108      	cbz	r0, 800a4c4 <__cvt+0xa4>
 800a4c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4c4:	2230      	movs	r2, #48	; 0x30
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	454b      	cmp	r3, r9
 800a4ca:	d307      	bcc.n	800a4dc <__cvt+0xbc>
 800a4cc:	9b03      	ldr	r3, [sp, #12]
 800a4ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4d0:	1bdb      	subs	r3, r3, r7
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	b004      	add	sp, #16
 800a4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4dc:	1c59      	adds	r1, r3, #1
 800a4de:	9103      	str	r1, [sp, #12]
 800a4e0:	701a      	strb	r2, [r3, #0]
 800a4e2:	e7f0      	b.n	800a4c6 <__cvt+0xa6>

0800a4e4 <__exponent>:
 800a4e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2900      	cmp	r1, #0
 800a4ea:	bfb8      	it	lt
 800a4ec:	4249      	neglt	r1, r1
 800a4ee:	f803 2b02 	strb.w	r2, [r3], #2
 800a4f2:	bfb4      	ite	lt
 800a4f4:	222d      	movlt	r2, #45	; 0x2d
 800a4f6:	222b      	movge	r2, #43	; 0x2b
 800a4f8:	2909      	cmp	r1, #9
 800a4fa:	7042      	strb	r2, [r0, #1]
 800a4fc:	dd2a      	ble.n	800a554 <__exponent+0x70>
 800a4fe:	f10d 0407 	add.w	r4, sp, #7
 800a502:	46a4      	mov	ip, r4
 800a504:	270a      	movs	r7, #10
 800a506:	46a6      	mov	lr, r4
 800a508:	460a      	mov	r2, r1
 800a50a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a50e:	fb07 1516 	mls	r5, r7, r6, r1
 800a512:	3530      	adds	r5, #48	; 0x30
 800a514:	2a63      	cmp	r2, #99	; 0x63
 800a516:	f104 34ff 	add.w	r4, r4, #4294967295
 800a51a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a51e:	4631      	mov	r1, r6
 800a520:	dcf1      	bgt.n	800a506 <__exponent+0x22>
 800a522:	3130      	adds	r1, #48	; 0x30
 800a524:	f1ae 0502 	sub.w	r5, lr, #2
 800a528:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a52c:	1c44      	adds	r4, r0, #1
 800a52e:	4629      	mov	r1, r5
 800a530:	4561      	cmp	r1, ip
 800a532:	d30a      	bcc.n	800a54a <__exponent+0x66>
 800a534:	f10d 0209 	add.w	r2, sp, #9
 800a538:	eba2 020e 	sub.w	r2, r2, lr
 800a53c:	4565      	cmp	r5, ip
 800a53e:	bf88      	it	hi
 800a540:	2200      	movhi	r2, #0
 800a542:	4413      	add	r3, r2
 800a544:	1a18      	subs	r0, r3, r0
 800a546:	b003      	add	sp, #12
 800a548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a54e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a552:	e7ed      	b.n	800a530 <__exponent+0x4c>
 800a554:	2330      	movs	r3, #48	; 0x30
 800a556:	3130      	adds	r1, #48	; 0x30
 800a558:	7083      	strb	r3, [r0, #2]
 800a55a:	70c1      	strb	r1, [r0, #3]
 800a55c:	1d03      	adds	r3, r0, #4
 800a55e:	e7f1      	b.n	800a544 <__exponent+0x60>

0800a560 <_printf_float>:
 800a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	ed2d 8b02 	vpush	{d8}
 800a568:	b08d      	sub	sp, #52	; 0x34
 800a56a:	460c      	mov	r4, r1
 800a56c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a570:	4616      	mov	r6, r2
 800a572:	461f      	mov	r7, r3
 800a574:	4605      	mov	r5, r0
 800a576:	f002 ffe9 	bl	800d54c <_localeconv_r>
 800a57a:	f8d0 a000 	ldr.w	sl, [r0]
 800a57e:	4650      	mov	r0, sl
 800a580:	f7f5 fe26 	bl	80001d0 <strlen>
 800a584:	2300      	movs	r3, #0
 800a586:	930a      	str	r3, [sp, #40]	; 0x28
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	9305      	str	r3, [sp, #20]
 800a58c:	f8d8 3000 	ldr.w	r3, [r8]
 800a590:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a594:	3307      	adds	r3, #7
 800a596:	f023 0307 	bic.w	r3, r3, #7
 800a59a:	f103 0208 	add.w	r2, r3, #8
 800a59e:	f8c8 2000 	str.w	r2, [r8]
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a5aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a5ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5b2:	9307      	str	r3, [sp, #28]
 800a5b4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5b8:	ee08 0a10 	vmov	s16, r0
 800a5bc:	4b9f      	ldr	r3, [pc, #636]	; (800a83c <_printf_float+0x2dc>)
 800a5be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c6:	f7f6 fab1 	bl	8000b2c <__aeabi_dcmpun>
 800a5ca:	bb88      	cbnz	r0, 800a630 <_printf_float+0xd0>
 800a5cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5d0:	4b9a      	ldr	r3, [pc, #616]	; (800a83c <_printf_float+0x2dc>)
 800a5d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d6:	f7f6 fa8b 	bl	8000af0 <__aeabi_dcmple>
 800a5da:	bb48      	cbnz	r0, 800a630 <_printf_float+0xd0>
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2300      	movs	r3, #0
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	f7f6 fa7a 	bl	8000adc <__aeabi_dcmplt>
 800a5e8:	b110      	cbz	r0, 800a5f0 <_printf_float+0x90>
 800a5ea:	232d      	movs	r3, #45	; 0x2d
 800a5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5f0:	4b93      	ldr	r3, [pc, #588]	; (800a840 <_printf_float+0x2e0>)
 800a5f2:	4894      	ldr	r0, [pc, #592]	; (800a844 <_printf_float+0x2e4>)
 800a5f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a5f8:	bf94      	ite	ls
 800a5fa:	4698      	movls	r8, r3
 800a5fc:	4680      	movhi	r8, r0
 800a5fe:	2303      	movs	r3, #3
 800a600:	6123      	str	r3, [r4, #16]
 800a602:	9b05      	ldr	r3, [sp, #20]
 800a604:	f023 0204 	bic.w	r2, r3, #4
 800a608:	6022      	str	r2, [r4, #0]
 800a60a:	f04f 0900 	mov.w	r9, #0
 800a60e:	9700      	str	r7, [sp, #0]
 800a610:	4633      	mov	r3, r6
 800a612:	aa0b      	add	r2, sp, #44	; 0x2c
 800a614:	4621      	mov	r1, r4
 800a616:	4628      	mov	r0, r5
 800a618:	f000 f9d8 	bl	800a9cc <_printf_common>
 800a61c:	3001      	adds	r0, #1
 800a61e:	f040 8090 	bne.w	800a742 <_printf_float+0x1e2>
 800a622:	f04f 30ff 	mov.w	r0, #4294967295
 800a626:	b00d      	add	sp, #52	; 0x34
 800a628:	ecbd 8b02 	vpop	{d8}
 800a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a630:	4642      	mov	r2, r8
 800a632:	464b      	mov	r3, r9
 800a634:	4640      	mov	r0, r8
 800a636:	4649      	mov	r1, r9
 800a638:	f7f6 fa78 	bl	8000b2c <__aeabi_dcmpun>
 800a63c:	b140      	cbz	r0, 800a650 <_printf_float+0xf0>
 800a63e:	464b      	mov	r3, r9
 800a640:	2b00      	cmp	r3, #0
 800a642:	bfbc      	itt	lt
 800a644:	232d      	movlt	r3, #45	; 0x2d
 800a646:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a64a:	487f      	ldr	r0, [pc, #508]	; (800a848 <_printf_float+0x2e8>)
 800a64c:	4b7f      	ldr	r3, [pc, #508]	; (800a84c <_printf_float+0x2ec>)
 800a64e:	e7d1      	b.n	800a5f4 <_printf_float+0x94>
 800a650:	6863      	ldr	r3, [r4, #4]
 800a652:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a656:	9206      	str	r2, [sp, #24]
 800a658:	1c5a      	adds	r2, r3, #1
 800a65a:	d13f      	bne.n	800a6dc <_printf_float+0x17c>
 800a65c:	2306      	movs	r3, #6
 800a65e:	6063      	str	r3, [r4, #4]
 800a660:	9b05      	ldr	r3, [sp, #20]
 800a662:	6861      	ldr	r1, [r4, #4]
 800a664:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a668:	2300      	movs	r3, #0
 800a66a:	9303      	str	r3, [sp, #12]
 800a66c:	ab0a      	add	r3, sp, #40	; 0x28
 800a66e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a672:	ab09      	add	r3, sp, #36	; 0x24
 800a674:	ec49 8b10 	vmov	d0, r8, r9
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	6022      	str	r2, [r4, #0]
 800a67c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a680:	4628      	mov	r0, r5
 800a682:	f7ff fecd 	bl	800a420 <__cvt>
 800a686:	9b06      	ldr	r3, [sp, #24]
 800a688:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a68a:	2b47      	cmp	r3, #71	; 0x47
 800a68c:	4680      	mov	r8, r0
 800a68e:	d108      	bne.n	800a6a2 <_printf_float+0x142>
 800a690:	1cc8      	adds	r0, r1, #3
 800a692:	db02      	blt.n	800a69a <_printf_float+0x13a>
 800a694:	6863      	ldr	r3, [r4, #4]
 800a696:	4299      	cmp	r1, r3
 800a698:	dd41      	ble.n	800a71e <_printf_float+0x1be>
 800a69a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a69e:	fa5f fb8b 	uxtb.w	fp, fp
 800a6a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6a6:	d820      	bhi.n	800a6ea <_printf_float+0x18a>
 800a6a8:	3901      	subs	r1, #1
 800a6aa:	465a      	mov	r2, fp
 800a6ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6b0:	9109      	str	r1, [sp, #36]	; 0x24
 800a6b2:	f7ff ff17 	bl	800a4e4 <__exponent>
 800a6b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6b8:	1813      	adds	r3, r2, r0
 800a6ba:	2a01      	cmp	r2, #1
 800a6bc:	4681      	mov	r9, r0
 800a6be:	6123      	str	r3, [r4, #16]
 800a6c0:	dc02      	bgt.n	800a6c8 <_printf_float+0x168>
 800a6c2:	6822      	ldr	r2, [r4, #0]
 800a6c4:	07d2      	lsls	r2, r2, #31
 800a6c6:	d501      	bpl.n	800a6cc <_printf_float+0x16c>
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	6123      	str	r3, [r4, #16]
 800a6cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d09c      	beq.n	800a60e <_printf_float+0xae>
 800a6d4:	232d      	movs	r3, #45	; 0x2d
 800a6d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6da:	e798      	b.n	800a60e <_printf_float+0xae>
 800a6dc:	9a06      	ldr	r2, [sp, #24]
 800a6de:	2a47      	cmp	r2, #71	; 0x47
 800a6e0:	d1be      	bne.n	800a660 <_printf_float+0x100>
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1bc      	bne.n	800a660 <_printf_float+0x100>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e7b9      	b.n	800a65e <_printf_float+0xfe>
 800a6ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a6ee:	d118      	bne.n	800a722 <_printf_float+0x1c2>
 800a6f0:	2900      	cmp	r1, #0
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	dd0b      	ble.n	800a70e <_printf_float+0x1ae>
 800a6f6:	6121      	str	r1, [r4, #16]
 800a6f8:	b913      	cbnz	r3, 800a700 <_printf_float+0x1a0>
 800a6fa:	6822      	ldr	r2, [r4, #0]
 800a6fc:	07d0      	lsls	r0, r2, #31
 800a6fe:	d502      	bpl.n	800a706 <_printf_float+0x1a6>
 800a700:	3301      	adds	r3, #1
 800a702:	440b      	add	r3, r1
 800a704:	6123      	str	r3, [r4, #16]
 800a706:	65a1      	str	r1, [r4, #88]	; 0x58
 800a708:	f04f 0900 	mov.w	r9, #0
 800a70c:	e7de      	b.n	800a6cc <_printf_float+0x16c>
 800a70e:	b913      	cbnz	r3, 800a716 <_printf_float+0x1b6>
 800a710:	6822      	ldr	r2, [r4, #0]
 800a712:	07d2      	lsls	r2, r2, #31
 800a714:	d501      	bpl.n	800a71a <_printf_float+0x1ba>
 800a716:	3302      	adds	r3, #2
 800a718:	e7f4      	b.n	800a704 <_printf_float+0x1a4>
 800a71a:	2301      	movs	r3, #1
 800a71c:	e7f2      	b.n	800a704 <_printf_float+0x1a4>
 800a71e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a724:	4299      	cmp	r1, r3
 800a726:	db05      	blt.n	800a734 <_printf_float+0x1d4>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	6121      	str	r1, [r4, #16]
 800a72c:	07d8      	lsls	r0, r3, #31
 800a72e:	d5ea      	bpl.n	800a706 <_printf_float+0x1a6>
 800a730:	1c4b      	adds	r3, r1, #1
 800a732:	e7e7      	b.n	800a704 <_printf_float+0x1a4>
 800a734:	2900      	cmp	r1, #0
 800a736:	bfd4      	ite	le
 800a738:	f1c1 0202 	rsble	r2, r1, #2
 800a73c:	2201      	movgt	r2, #1
 800a73e:	4413      	add	r3, r2
 800a740:	e7e0      	b.n	800a704 <_printf_float+0x1a4>
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	055a      	lsls	r2, r3, #21
 800a746:	d407      	bmi.n	800a758 <_printf_float+0x1f8>
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	4642      	mov	r2, r8
 800a74c:	4631      	mov	r1, r6
 800a74e:	4628      	mov	r0, r5
 800a750:	47b8      	blx	r7
 800a752:	3001      	adds	r0, #1
 800a754:	d12c      	bne.n	800a7b0 <_printf_float+0x250>
 800a756:	e764      	b.n	800a622 <_printf_float+0xc2>
 800a758:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a75c:	f240 80e0 	bls.w	800a920 <_printf_float+0x3c0>
 800a760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a764:	2200      	movs	r2, #0
 800a766:	2300      	movs	r3, #0
 800a768:	f7f6 f9ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d034      	beq.n	800a7da <_printf_float+0x27a>
 800a770:	4a37      	ldr	r2, [pc, #220]	; (800a850 <_printf_float+0x2f0>)
 800a772:	2301      	movs	r3, #1
 800a774:	4631      	mov	r1, r6
 800a776:	4628      	mov	r0, r5
 800a778:	47b8      	blx	r7
 800a77a:	3001      	adds	r0, #1
 800a77c:	f43f af51 	beq.w	800a622 <_printf_float+0xc2>
 800a780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a784:	429a      	cmp	r2, r3
 800a786:	db02      	blt.n	800a78e <_printf_float+0x22e>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	07d8      	lsls	r0, r3, #31
 800a78c:	d510      	bpl.n	800a7b0 <_printf_float+0x250>
 800a78e:	ee18 3a10 	vmov	r3, s16
 800a792:	4652      	mov	r2, sl
 800a794:	4631      	mov	r1, r6
 800a796:	4628      	mov	r0, r5
 800a798:	47b8      	blx	r7
 800a79a:	3001      	adds	r0, #1
 800a79c:	f43f af41 	beq.w	800a622 <_printf_float+0xc2>
 800a7a0:	f04f 0800 	mov.w	r8, #0
 800a7a4:	f104 091a 	add.w	r9, r4, #26
 800a7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	4543      	cmp	r3, r8
 800a7ae:	dc09      	bgt.n	800a7c4 <_printf_float+0x264>
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	079b      	lsls	r3, r3, #30
 800a7b4:	f100 8105 	bmi.w	800a9c2 <_printf_float+0x462>
 800a7b8:	68e0      	ldr	r0, [r4, #12]
 800a7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7bc:	4298      	cmp	r0, r3
 800a7be:	bfb8      	it	lt
 800a7c0:	4618      	movlt	r0, r3
 800a7c2:	e730      	b.n	800a626 <_printf_float+0xc6>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	464a      	mov	r2, r9
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	47b8      	blx	r7
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	f43f af27 	beq.w	800a622 <_printf_float+0xc2>
 800a7d4:	f108 0801 	add.w	r8, r8, #1
 800a7d8:	e7e6      	b.n	800a7a8 <_printf_float+0x248>
 800a7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	dc39      	bgt.n	800a854 <_printf_float+0x2f4>
 800a7e0:	4a1b      	ldr	r2, [pc, #108]	; (800a850 <_printf_float+0x2f0>)
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	47b8      	blx	r7
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	f43f af19 	beq.w	800a622 <_printf_float+0xc2>
 800a7f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	d102      	bne.n	800a7fe <_printf_float+0x29e>
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	07d9      	lsls	r1, r3, #31
 800a7fc:	d5d8      	bpl.n	800a7b0 <_printf_float+0x250>
 800a7fe:	ee18 3a10 	vmov	r3, s16
 800a802:	4652      	mov	r2, sl
 800a804:	4631      	mov	r1, r6
 800a806:	4628      	mov	r0, r5
 800a808:	47b8      	blx	r7
 800a80a:	3001      	adds	r0, #1
 800a80c:	f43f af09 	beq.w	800a622 <_printf_float+0xc2>
 800a810:	f04f 0900 	mov.w	r9, #0
 800a814:	f104 0a1a 	add.w	sl, r4, #26
 800a818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a81a:	425b      	negs	r3, r3
 800a81c:	454b      	cmp	r3, r9
 800a81e:	dc01      	bgt.n	800a824 <_printf_float+0x2c4>
 800a820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a822:	e792      	b.n	800a74a <_printf_float+0x1ea>
 800a824:	2301      	movs	r3, #1
 800a826:	4652      	mov	r2, sl
 800a828:	4631      	mov	r1, r6
 800a82a:	4628      	mov	r0, r5
 800a82c:	47b8      	blx	r7
 800a82e:	3001      	adds	r0, #1
 800a830:	f43f aef7 	beq.w	800a622 <_printf_float+0xc2>
 800a834:	f109 0901 	add.w	r9, r9, #1
 800a838:	e7ee      	b.n	800a818 <_printf_float+0x2b8>
 800a83a:	bf00      	nop
 800a83c:	7fefffff 	.word	0x7fefffff
 800a840:	0800f9c0 	.word	0x0800f9c0
 800a844:	0800f9c4 	.word	0x0800f9c4
 800a848:	0800f9cc 	.word	0x0800f9cc
 800a84c:	0800f9c8 	.word	0x0800f9c8
 800a850:	0800fe69 	.word	0x0800fe69
 800a854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a858:	429a      	cmp	r2, r3
 800a85a:	bfa8      	it	ge
 800a85c:	461a      	movge	r2, r3
 800a85e:	2a00      	cmp	r2, #0
 800a860:	4691      	mov	r9, r2
 800a862:	dc37      	bgt.n	800a8d4 <_printf_float+0x374>
 800a864:	f04f 0b00 	mov.w	fp, #0
 800a868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a86c:	f104 021a 	add.w	r2, r4, #26
 800a870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a872:	9305      	str	r3, [sp, #20]
 800a874:	eba3 0309 	sub.w	r3, r3, r9
 800a878:	455b      	cmp	r3, fp
 800a87a:	dc33      	bgt.n	800a8e4 <_printf_float+0x384>
 800a87c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a880:	429a      	cmp	r2, r3
 800a882:	db3b      	blt.n	800a8fc <_printf_float+0x39c>
 800a884:	6823      	ldr	r3, [r4, #0]
 800a886:	07da      	lsls	r2, r3, #31
 800a888:	d438      	bmi.n	800a8fc <_printf_float+0x39c>
 800a88a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a88c:	9b05      	ldr	r3, [sp, #20]
 800a88e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	eba2 0901 	sub.w	r9, r2, r1
 800a896:	4599      	cmp	r9, r3
 800a898:	bfa8      	it	ge
 800a89a:	4699      	movge	r9, r3
 800a89c:	f1b9 0f00 	cmp.w	r9, #0
 800a8a0:	dc35      	bgt.n	800a90e <_printf_float+0x3ae>
 800a8a2:	f04f 0800 	mov.w	r8, #0
 800a8a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8aa:	f104 0a1a 	add.w	sl, r4, #26
 800a8ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8b2:	1a9b      	subs	r3, r3, r2
 800a8b4:	eba3 0309 	sub.w	r3, r3, r9
 800a8b8:	4543      	cmp	r3, r8
 800a8ba:	f77f af79 	ble.w	800a7b0 <_printf_float+0x250>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4652      	mov	r2, sl
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	47b8      	blx	r7
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	f43f aeaa 	beq.w	800a622 <_printf_float+0xc2>
 800a8ce:	f108 0801 	add.w	r8, r8, #1
 800a8d2:	e7ec      	b.n	800a8ae <_printf_float+0x34e>
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	4642      	mov	r2, r8
 800a8da:	4628      	mov	r0, r5
 800a8dc:	47b8      	blx	r7
 800a8de:	3001      	adds	r0, #1
 800a8e0:	d1c0      	bne.n	800a864 <_printf_float+0x304>
 800a8e2:	e69e      	b.n	800a622 <_printf_float+0xc2>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	9205      	str	r2, [sp, #20]
 800a8ec:	47b8      	blx	r7
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	f43f ae97 	beq.w	800a622 <_printf_float+0xc2>
 800a8f4:	9a05      	ldr	r2, [sp, #20]
 800a8f6:	f10b 0b01 	add.w	fp, fp, #1
 800a8fa:	e7b9      	b.n	800a870 <_printf_float+0x310>
 800a8fc:	ee18 3a10 	vmov	r3, s16
 800a900:	4652      	mov	r2, sl
 800a902:	4631      	mov	r1, r6
 800a904:	4628      	mov	r0, r5
 800a906:	47b8      	blx	r7
 800a908:	3001      	adds	r0, #1
 800a90a:	d1be      	bne.n	800a88a <_printf_float+0x32a>
 800a90c:	e689      	b.n	800a622 <_printf_float+0xc2>
 800a90e:	9a05      	ldr	r2, [sp, #20]
 800a910:	464b      	mov	r3, r9
 800a912:	4442      	add	r2, r8
 800a914:	4631      	mov	r1, r6
 800a916:	4628      	mov	r0, r5
 800a918:	47b8      	blx	r7
 800a91a:	3001      	adds	r0, #1
 800a91c:	d1c1      	bne.n	800a8a2 <_printf_float+0x342>
 800a91e:	e680      	b.n	800a622 <_printf_float+0xc2>
 800a920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a922:	2a01      	cmp	r2, #1
 800a924:	dc01      	bgt.n	800a92a <_printf_float+0x3ca>
 800a926:	07db      	lsls	r3, r3, #31
 800a928:	d538      	bpl.n	800a99c <_printf_float+0x43c>
 800a92a:	2301      	movs	r3, #1
 800a92c:	4642      	mov	r2, r8
 800a92e:	4631      	mov	r1, r6
 800a930:	4628      	mov	r0, r5
 800a932:	47b8      	blx	r7
 800a934:	3001      	adds	r0, #1
 800a936:	f43f ae74 	beq.w	800a622 <_printf_float+0xc2>
 800a93a:	ee18 3a10 	vmov	r3, s16
 800a93e:	4652      	mov	r2, sl
 800a940:	4631      	mov	r1, r6
 800a942:	4628      	mov	r0, r5
 800a944:	47b8      	blx	r7
 800a946:	3001      	adds	r0, #1
 800a948:	f43f ae6b 	beq.w	800a622 <_printf_float+0xc2>
 800a94c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a950:	2200      	movs	r2, #0
 800a952:	2300      	movs	r3, #0
 800a954:	f7f6 f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a958:	b9d8      	cbnz	r0, 800a992 <_printf_float+0x432>
 800a95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a95c:	f108 0201 	add.w	r2, r8, #1
 800a960:	3b01      	subs	r3, #1
 800a962:	4631      	mov	r1, r6
 800a964:	4628      	mov	r0, r5
 800a966:	47b8      	blx	r7
 800a968:	3001      	adds	r0, #1
 800a96a:	d10e      	bne.n	800a98a <_printf_float+0x42a>
 800a96c:	e659      	b.n	800a622 <_printf_float+0xc2>
 800a96e:	2301      	movs	r3, #1
 800a970:	4652      	mov	r2, sl
 800a972:	4631      	mov	r1, r6
 800a974:	4628      	mov	r0, r5
 800a976:	47b8      	blx	r7
 800a978:	3001      	adds	r0, #1
 800a97a:	f43f ae52 	beq.w	800a622 <_printf_float+0xc2>
 800a97e:	f108 0801 	add.w	r8, r8, #1
 800a982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a984:	3b01      	subs	r3, #1
 800a986:	4543      	cmp	r3, r8
 800a988:	dcf1      	bgt.n	800a96e <_printf_float+0x40e>
 800a98a:	464b      	mov	r3, r9
 800a98c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a990:	e6dc      	b.n	800a74c <_printf_float+0x1ec>
 800a992:	f04f 0800 	mov.w	r8, #0
 800a996:	f104 0a1a 	add.w	sl, r4, #26
 800a99a:	e7f2      	b.n	800a982 <_printf_float+0x422>
 800a99c:	2301      	movs	r3, #1
 800a99e:	4642      	mov	r2, r8
 800a9a0:	e7df      	b.n	800a962 <_printf_float+0x402>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	464a      	mov	r2, r9
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	47b8      	blx	r7
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	f43f ae38 	beq.w	800a622 <_printf_float+0xc2>
 800a9b2:	f108 0801 	add.w	r8, r8, #1
 800a9b6:	68e3      	ldr	r3, [r4, #12]
 800a9b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9ba:	1a5b      	subs	r3, r3, r1
 800a9bc:	4543      	cmp	r3, r8
 800a9be:	dcf0      	bgt.n	800a9a2 <_printf_float+0x442>
 800a9c0:	e6fa      	b.n	800a7b8 <_printf_float+0x258>
 800a9c2:	f04f 0800 	mov.w	r8, #0
 800a9c6:	f104 0919 	add.w	r9, r4, #25
 800a9ca:	e7f4      	b.n	800a9b6 <_printf_float+0x456>

0800a9cc <_printf_common>:
 800a9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d0:	4616      	mov	r6, r2
 800a9d2:	4699      	mov	r9, r3
 800a9d4:	688a      	ldr	r2, [r1, #8]
 800a9d6:	690b      	ldr	r3, [r1, #16]
 800a9d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	bfb8      	it	lt
 800a9e0:	4613      	movlt	r3, r2
 800a9e2:	6033      	str	r3, [r6, #0]
 800a9e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9e8:	4607      	mov	r7, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	b10a      	cbz	r2, 800a9f2 <_printf_common+0x26>
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	6033      	str	r3, [r6, #0]
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	0699      	lsls	r1, r3, #26
 800a9f6:	bf42      	ittt	mi
 800a9f8:	6833      	ldrmi	r3, [r6, #0]
 800a9fa:	3302      	addmi	r3, #2
 800a9fc:	6033      	strmi	r3, [r6, #0]
 800a9fe:	6825      	ldr	r5, [r4, #0]
 800aa00:	f015 0506 	ands.w	r5, r5, #6
 800aa04:	d106      	bne.n	800aa14 <_printf_common+0x48>
 800aa06:	f104 0a19 	add.w	sl, r4, #25
 800aa0a:	68e3      	ldr	r3, [r4, #12]
 800aa0c:	6832      	ldr	r2, [r6, #0]
 800aa0e:	1a9b      	subs	r3, r3, r2
 800aa10:	42ab      	cmp	r3, r5
 800aa12:	dc26      	bgt.n	800aa62 <_printf_common+0x96>
 800aa14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa18:	1e13      	subs	r3, r2, #0
 800aa1a:	6822      	ldr	r2, [r4, #0]
 800aa1c:	bf18      	it	ne
 800aa1e:	2301      	movne	r3, #1
 800aa20:	0692      	lsls	r2, r2, #26
 800aa22:	d42b      	bmi.n	800aa7c <_printf_common+0xb0>
 800aa24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa28:	4649      	mov	r1, r9
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	47c0      	blx	r8
 800aa2e:	3001      	adds	r0, #1
 800aa30:	d01e      	beq.n	800aa70 <_printf_common+0xa4>
 800aa32:	6823      	ldr	r3, [r4, #0]
 800aa34:	68e5      	ldr	r5, [r4, #12]
 800aa36:	6832      	ldr	r2, [r6, #0]
 800aa38:	f003 0306 	and.w	r3, r3, #6
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	bf08      	it	eq
 800aa40:	1aad      	subeq	r5, r5, r2
 800aa42:	68a3      	ldr	r3, [r4, #8]
 800aa44:	6922      	ldr	r2, [r4, #16]
 800aa46:	bf0c      	ite	eq
 800aa48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa4c:	2500      	movne	r5, #0
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	bfc4      	itt	gt
 800aa52:	1a9b      	subgt	r3, r3, r2
 800aa54:	18ed      	addgt	r5, r5, r3
 800aa56:	2600      	movs	r6, #0
 800aa58:	341a      	adds	r4, #26
 800aa5a:	42b5      	cmp	r5, r6
 800aa5c:	d11a      	bne.n	800aa94 <_printf_common+0xc8>
 800aa5e:	2000      	movs	r0, #0
 800aa60:	e008      	b.n	800aa74 <_printf_common+0xa8>
 800aa62:	2301      	movs	r3, #1
 800aa64:	4652      	mov	r2, sl
 800aa66:	4649      	mov	r1, r9
 800aa68:	4638      	mov	r0, r7
 800aa6a:	47c0      	blx	r8
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d103      	bne.n	800aa78 <_printf_common+0xac>
 800aa70:	f04f 30ff 	mov.w	r0, #4294967295
 800aa74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa78:	3501      	adds	r5, #1
 800aa7a:	e7c6      	b.n	800aa0a <_printf_common+0x3e>
 800aa7c:	18e1      	adds	r1, r4, r3
 800aa7e:	1c5a      	adds	r2, r3, #1
 800aa80:	2030      	movs	r0, #48	; 0x30
 800aa82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa86:	4422      	add	r2, r4
 800aa88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa90:	3302      	adds	r3, #2
 800aa92:	e7c7      	b.n	800aa24 <_printf_common+0x58>
 800aa94:	2301      	movs	r3, #1
 800aa96:	4622      	mov	r2, r4
 800aa98:	4649      	mov	r1, r9
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	47c0      	blx	r8
 800aa9e:	3001      	adds	r0, #1
 800aaa0:	d0e6      	beq.n	800aa70 <_printf_common+0xa4>
 800aaa2:	3601      	adds	r6, #1
 800aaa4:	e7d9      	b.n	800aa5a <_printf_common+0x8e>
	...

0800aaa8 <_printf_i>:
 800aaa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaac:	460c      	mov	r4, r1
 800aaae:	4691      	mov	r9, r2
 800aab0:	7e27      	ldrb	r7, [r4, #24]
 800aab2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aab4:	2f78      	cmp	r7, #120	; 0x78
 800aab6:	4680      	mov	r8, r0
 800aab8:	469a      	mov	sl, r3
 800aaba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aabe:	d807      	bhi.n	800aad0 <_printf_i+0x28>
 800aac0:	2f62      	cmp	r7, #98	; 0x62
 800aac2:	d80a      	bhi.n	800aada <_printf_i+0x32>
 800aac4:	2f00      	cmp	r7, #0
 800aac6:	f000 80d8 	beq.w	800ac7a <_printf_i+0x1d2>
 800aaca:	2f58      	cmp	r7, #88	; 0x58
 800aacc:	f000 80a3 	beq.w	800ac16 <_printf_i+0x16e>
 800aad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aad8:	e03a      	b.n	800ab50 <_printf_i+0xa8>
 800aada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aade:	2b15      	cmp	r3, #21
 800aae0:	d8f6      	bhi.n	800aad0 <_printf_i+0x28>
 800aae2:	a001      	add	r0, pc, #4	; (adr r0, 800aae8 <_printf_i+0x40>)
 800aae4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aae8:	0800ab41 	.word	0x0800ab41
 800aaec:	0800ab55 	.word	0x0800ab55
 800aaf0:	0800aad1 	.word	0x0800aad1
 800aaf4:	0800aad1 	.word	0x0800aad1
 800aaf8:	0800aad1 	.word	0x0800aad1
 800aafc:	0800aad1 	.word	0x0800aad1
 800ab00:	0800ab55 	.word	0x0800ab55
 800ab04:	0800aad1 	.word	0x0800aad1
 800ab08:	0800aad1 	.word	0x0800aad1
 800ab0c:	0800aad1 	.word	0x0800aad1
 800ab10:	0800aad1 	.word	0x0800aad1
 800ab14:	0800ac61 	.word	0x0800ac61
 800ab18:	0800ab85 	.word	0x0800ab85
 800ab1c:	0800ac43 	.word	0x0800ac43
 800ab20:	0800aad1 	.word	0x0800aad1
 800ab24:	0800aad1 	.word	0x0800aad1
 800ab28:	0800ac83 	.word	0x0800ac83
 800ab2c:	0800aad1 	.word	0x0800aad1
 800ab30:	0800ab85 	.word	0x0800ab85
 800ab34:	0800aad1 	.word	0x0800aad1
 800ab38:	0800aad1 	.word	0x0800aad1
 800ab3c:	0800ac4b 	.word	0x0800ac4b
 800ab40:	680b      	ldr	r3, [r1, #0]
 800ab42:	1d1a      	adds	r2, r3, #4
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	600a      	str	r2, [r1, #0]
 800ab48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab50:	2301      	movs	r3, #1
 800ab52:	e0a3      	b.n	800ac9c <_printf_i+0x1f4>
 800ab54:	6825      	ldr	r5, [r4, #0]
 800ab56:	6808      	ldr	r0, [r1, #0]
 800ab58:	062e      	lsls	r6, r5, #24
 800ab5a:	f100 0304 	add.w	r3, r0, #4
 800ab5e:	d50a      	bpl.n	800ab76 <_printf_i+0xce>
 800ab60:	6805      	ldr	r5, [r0, #0]
 800ab62:	600b      	str	r3, [r1, #0]
 800ab64:	2d00      	cmp	r5, #0
 800ab66:	da03      	bge.n	800ab70 <_printf_i+0xc8>
 800ab68:	232d      	movs	r3, #45	; 0x2d
 800ab6a:	426d      	negs	r5, r5
 800ab6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab70:	485e      	ldr	r0, [pc, #376]	; (800acec <_printf_i+0x244>)
 800ab72:	230a      	movs	r3, #10
 800ab74:	e019      	b.n	800abaa <_printf_i+0x102>
 800ab76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab7a:	6805      	ldr	r5, [r0, #0]
 800ab7c:	600b      	str	r3, [r1, #0]
 800ab7e:	bf18      	it	ne
 800ab80:	b22d      	sxthne	r5, r5
 800ab82:	e7ef      	b.n	800ab64 <_printf_i+0xbc>
 800ab84:	680b      	ldr	r3, [r1, #0]
 800ab86:	6825      	ldr	r5, [r4, #0]
 800ab88:	1d18      	adds	r0, r3, #4
 800ab8a:	6008      	str	r0, [r1, #0]
 800ab8c:	0628      	lsls	r0, r5, #24
 800ab8e:	d501      	bpl.n	800ab94 <_printf_i+0xec>
 800ab90:	681d      	ldr	r5, [r3, #0]
 800ab92:	e002      	b.n	800ab9a <_printf_i+0xf2>
 800ab94:	0669      	lsls	r1, r5, #25
 800ab96:	d5fb      	bpl.n	800ab90 <_printf_i+0xe8>
 800ab98:	881d      	ldrh	r5, [r3, #0]
 800ab9a:	4854      	ldr	r0, [pc, #336]	; (800acec <_printf_i+0x244>)
 800ab9c:	2f6f      	cmp	r7, #111	; 0x6f
 800ab9e:	bf0c      	ite	eq
 800aba0:	2308      	moveq	r3, #8
 800aba2:	230a      	movne	r3, #10
 800aba4:	2100      	movs	r1, #0
 800aba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abaa:	6866      	ldr	r6, [r4, #4]
 800abac:	60a6      	str	r6, [r4, #8]
 800abae:	2e00      	cmp	r6, #0
 800abb0:	bfa2      	ittt	ge
 800abb2:	6821      	ldrge	r1, [r4, #0]
 800abb4:	f021 0104 	bicge.w	r1, r1, #4
 800abb8:	6021      	strge	r1, [r4, #0]
 800abba:	b90d      	cbnz	r5, 800abc0 <_printf_i+0x118>
 800abbc:	2e00      	cmp	r6, #0
 800abbe:	d04d      	beq.n	800ac5c <_printf_i+0x1b4>
 800abc0:	4616      	mov	r6, r2
 800abc2:	fbb5 f1f3 	udiv	r1, r5, r3
 800abc6:	fb03 5711 	mls	r7, r3, r1, r5
 800abca:	5dc7      	ldrb	r7, [r0, r7]
 800abcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abd0:	462f      	mov	r7, r5
 800abd2:	42bb      	cmp	r3, r7
 800abd4:	460d      	mov	r5, r1
 800abd6:	d9f4      	bls.n	800abc2 <_printf_i+0x11a>
 800abd8:	2b08      	cmp	r3, #8
 800abda:	d10b      	bne.n	800abf4 <_printf_i+0x14c>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	07df      	lsls	r7, r3, #31
 800abe0:	d508      	bpl.n	800abf4 <_printf_i+0x14c>
 800abe2:	6923      	ldr	r3, [r4, #16]
 800abe4:	6861      	ldr	r1, [r4, #4]
 800abe6:	4299      	cmp	r1, r3
 800abe8:	bfde      	ittt	le
 800abea:	2330      	movle	r3, #48	; 0x30
 800abec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abf4:	1b92      	subs	r2, r2, r6
 800abf6:	6122      	str	r2, [r4, #16]
 800abf8:	f8cd a000 	str.w	sl, [sp]
 800abfc:	464b      	mov	r3, r9
 800abfe:	aa03      	add	r2, sp, #12
 800ac00:	4621      	mov	r1, r4
 800ac02:	4640      	mov	r0, r8
 800ac04:	f7ff fee2 	bl	800a9cc <_printf_common>
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d14c      	bne.n	800aca6 <_printf_i+0x1fe>
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	b004      	add	sp, #16
 800ac12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac16:	4835      	ldr	r0, [pc, #212]	; (800acec <_printf_i+0x244>)
 800ac18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	680e      	ldr	r6, [r1, #0]
 800ac20:	061f      	lsls	r7, r3, #24
 800ac22:	f856 5b04 	ldr.w	r5, [r6], #4
 800ac26:	600e      	str	r6, [r1, #0]
 800ac28:	d514      	bpl.n	800ac54 <_printf_i+0x1ac>
 800ac2a:	07d9      	lsls	r1, r3, #31
 800ac2c:	bf44      	itt	mi
 800ac2e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac32:	6023      	strmi	r3, [r4, #0]
 800ac34:	b91d      	cbnz	r5, 800ac3e <_printf_i+0x196>
 800ac36:	6823      	ldr	r3, [r4, #0]
 800ac38:	f023 0320 	bic.w	r3, r3, #32
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	2310      	movs	r3, #16
 800ac40:	e7b0      	b.n	800aba4 <_printf_i+0xfc>
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	f043 0320 	orr.w	r3, r3, #32
 800ac48:	6023      	str	r3, [r4, #0]
 800ac4a:	2378      	movs	r3, #120	; 0x78
 800ac4c:	4828      	ldr	r0, [pc, #160]	; (800acf0 <_printf_i+0x248>)
 800ac4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac52:	e7e3      	b.n	800ac1c <_printf_i+0x174>
 800ac54:	065e      	lsls	r6, r3, #25
 800ac56:	bf48      	it	mi
 800ac58:	b2ad      	uxthmi	r5, r5
 800ac5a:	e7e6      	b.n	800ac2a <_printf_i+0x182>
 800ac5c:	4616      	mov	r6, r2
 800ac5e:	e7bb      	b.n	800abd8 <_printf_i+0x130>
 800ac60:	680b      	ldr	r3, [r1, #0]
 800ac62:	6826      	ldr	r6, [r4, #0]
 800ac64:	6960      	ldr	r0, [r4, #20]
 800ac66:	1d1d      	adds	r5, r3, #4
 800ac68:	600d      	str	r5, [r1, #0]
 800ac6a:	0635      	lsls	r5, r6, #24
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	d501      	bpl.n	800ac74 <_printf_i+0x1cc>
 800ac70:	6018      	str	r0, [r3, #0]
 800ac72:	e002      	b.n	800ac7a <_printf_i+0x1d2>
 800ac74:	0671      	lsls	r1, r6, #25
 800ac76:	d5fb      	bpl.n	800ac70 <_printf_i+0x1c8>
 800ac78:	8018      	strh	r0, [r3, #0]
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	6123      	str	r3, [r4, #16]
 800ac7e:	4616      	mov	r6, r2
 800ac80:	e7ba      	b.n	800abf8 <_printf_i+0x150>
 800ac82:	680b      	ldr	r3, [r1, #0]
 800ac84:	1d1a      	adds	r2, r3, #4
 800ac86:	600a      	str	r2, [r1, #0]
 800ac88:	681e      	ldr	r6, [r3, #0]
 800ac8a:	6862      	ldr	r2, [r4, #4]
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f7f5 faa6 	bl	80001e0 <memchr>
 800ac94:	b108      	cbz	r0, 800ac9a <_printf_i+0x1f2>
 800ac96:	1b80      	subs	r0, r0, r6
 800ac98:	6060      	str	r0, [r4, #4]
 800ac9a:	6863      	ldr	r3, [r4, #4]
 800ac9c:	6123      	str	r3, [r4, #16]
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aca4:	e7a8      	b.n	800abf8 <_printf_i+0x150>
 800aca6:	6923      	ldr	r3, [r4, #16]
 800aca8:	4632      	mov	r2, r6
 800acaa:	4649      	mov	r1, r9
 800acac:	4640      	mov	r0, r8
 800acae:	47d0      	blx	sl
 800acb0:	3001      	adds	r0, #1
 800acb2:	d0ab      	beq.n	800ac0c <_printf_i+0x164>
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	079b      	lsls	r3, r3, #30
 800acb8:	d413      	bmi.n	800ace2 <_printf_i+0x23a>
 800acba:	68e0      	ldr	r0, [r4, #12]
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	4298      	cmp	r0, r3
 800acc0:	bfb8      	it	lt
 800acc2:	4618      	movlt	r0, r3
 800acc4:	e7a4      	b.n	800ac10 <_printf_i+0x168>
 800acc6:	2301      	movs	r3, #1
 800acc8:	4632      	mov	r2, r6
 800acca:	4649      	mov	r1, r9
 800accc:	4640      	mov	r0, r8
 800acce:	47d0      	blx	sl
 800acd0:	3001      	adds	r0, #1
 800acd2:	d09b      	beq.n	800ac0c <_printf_i+0x164>
 800acd4:	3501      	adds	r5, #1
 800acd6:	68e3      	ldr	r3, [r4, #12]
 800acd8:	9903      	ldr	r1, [sp, #12]
 800acda:	1a5b      	subs	r3, r3, r1
 800acdc:	42ab      	cmp	r3, r5
 800acde:	dcf2      	bgt.n	800acc6 <_printf_i+0x21e>
 800ace0:	e7eb      	b.n	800acba <_printf_i+0x212>
 800ace2:	2500      	movs	r5, #0
 800ace4:	f104 0619 	add.w	r6, r4, #25
 800ace8:	e7f5      	b.n	800acd6 <_printf_i+0x22e>
 800acea:	bf00      	nop
 800acec:	0800f9d0 	.word	0x0800f9d0
 800acf0:	0800f9e1 	.word	0x0800f9e1

0800acf4 <_scanf_float>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	b087      	sub	sp, #28
 800acfa:	4617      	mov	r7, r2
 800acfc:	9303      	str	r3, [sp, #12]
 800acfe:	688b      	ldr	r3, [r1, #8]
 800ad00:	1e5a      	subs	r2, r3, #1
 800ad02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ad06:	bf83      	ittte	hi
 800ad08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ad0c:	195b      	addhi	r3, r3, r5
 800ad0e:	9302      	strhi	r3, [sp, #8]
 800ad10:	2300      	movls	r3, #0
 800ad12:	bf86      	itte	hi
 800ad14:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ad18:	608b      	strhi	r3, [r1, #8]
 800ad1a:	9302      	strls	r3, [sp, #8]
 800ad1c:	680b      	ldr	r3, [r1, #0]
 800ad1e:	468b      	mov	fp, r1
 800ad20:	2500      	movs	r5, #0
 800ad22:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ad26:	f84b 3b1c 	str.w	r3, [fp], #28
 800ad2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ad2e:	4680      	mov	r8, r0
 800ad30:	460c      	mov	r4, r1
 800ad32:	465e      	mov	r6, fp
 800ad34:	46aa      	mov	sl, r5
 800ad36:	46a9      	mov	r9, r5
 800ad38:	9501      	str	r5, [sp, #4]
 800ad3a:	68a2      	ldr	r2, [r4, #8]
 800ad3c:	b152      	cbz	r2, 800ad54 <_scanf_float+0x60>
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	2b4e      	cmp	r3, #78	; 0x4e
 800ad44:	d864      	bhi.n	800ae10 <_scanf_float+0x11c>
 800ad46:	2b40      	cmp	r3, #64	; 0x40
 800ad48:	d83c      	bhi.n	800adc4 <_scanf_float+0xd0>
 800ad4a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ad4e:	b2c8      	uxtb	r0, r1
 800ad50:	280e      	cmp	r0, #14
 800ad52:	d93a      	bls.n	800adca <_scanf_float+0xd6>
 800ad54:	f1b9 0f00 	cmp.w	r9, #0
 800ad58:	d003      	beq.n	800ad62 <_scanf_float+0x6e>
 800ad5a:	6823      	ldr	r3, [r4, #0]
 800ad5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad66:	f1ba 0f01 	cmp.w	sl, #1
 800ad6a:	f200 8113 	bhi.w	800af94 <_scanf_float+0x2a0>
 800ad6e:	455e      	cmp	r6, fp
 800ad70:	f200 8105 	bhi.w	800af7e <_scanf_float+0x28a>
 800ad74:	2501      	movs	r5, #1
 800ad76:	4628      	mov	r0, r5
 800ad78:	b007      	add	sp, #28
 800ad7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ad82:	2a0d      	cmp	r2, #13
 800ad84:	d8e6      	bhi.n	800ad54 <_scanf_float+0x60>
 800ad86:	a101      	add	r1, pc, #4	; (adr r1, 800ad8c <_scanf_float+0x98>)
 800ad88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad8c:	0800aecb 	.word	0x0800aecb
 800ad90:	0800ad55 	.word	0x0800ad55
 800ad94:	0800ad55 	.word	0x0800ad55
 800ad98:	0800ad55 	.word	0x0800ad55
 800ad9c:	0800af2b 	.word	0x0800af2b
 800ada0:	0800af03 	.word	0x0800af03
 800ada4:	0800ad55 	.word	0x0800ad55
 800ada8:	0800ad55 	.word	0x0800ad55
 800adac:	0800aed9 	.word	0x0800aed9
 800adb0:	0800ad55 	.word	0x0800ad55
 800adb4:	0800ad55 	.word	0x0800ad55
 800adb8:	0800ad55 	.word	0x0800ad55
 800adbc:	0800ad55 	.word	0x0800ad55
 800adc0:	0800ae91 	.word	0x0800ae91
 800adc4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800adc8:	e7db      	b.n	800ad82 <_scanf_float+0x8e>
 800adca:	290e      	cmp	r1, #14
 800adcc:	d8c2      	bhi.n	800ad54 <_scanf_float+0x60>
 800adce:	a001      	add	r0, pc, #4	; (adr r0, 800add4 <_scanf_float+0xe0>)
 800add0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800add4:	0800ae83 	.word	0x0800ae83
 800add8:	0800ad55 	.word	0x0800ad55
 800addc:	0800ae83 	.word	0x0800ae83
 800ade0:	0800af17 	.word	0x0800af17
 800ade4:	0800ad55 	.word	0x0800ad55
 800ade8:	0800ae31 	.word	0x0800ae31
 800adec:	0800ae6d 	.word	0x0800ae6d
 800adf0:	0800ae6d 	.word	0x0800ae6d
 800adf4:	0800ae6d 	.word	0x0800ae6d
 800adf8:	0800ae6d 	.word	0x0800ae6d
 800adfc:	0800ae6d 	.word	0x0800ae6d
 800ae00:	0800ae6d 	.word	0x0800ae6d
 800ae04:	0800ae6d 	.word	0x0800ae6d
 800ae08:	0800ae6d 	.word	0x0800ae6d
 800ae0c:	0800ae6d 	.word	0x0800ae6d
 800ae10:	2b6e      	cmp	r3, #110	; 0x6e
 800ae12:	d809      	bhi.n	800ae28 <_scanf_float+0x134>
 800ae14:	2b60      	cmp	r3, #96	; 0x60
 800ae16:	d8b2      	bhi.n	800ad7e <_scanf_float+0x8a>
 800ae18:	2b54      	cmp	r3, #84	; 0x54
 800ae1a:	d077      	beq.n	800af0c <_scanf_float+0x218>
 800ae1c:	2b59      	cmp	r3, #89	; 0x59
 800ae1e:	d199      	bne.n	800ad54 <_scanf_float+0x60>
 800ae20:	2d07      	cmp	r5, #7
 800ae22:	d197      	bne.n	800ad54 <_scanf_float+0x60>
 800ae24:	2508      	movs	r5, #8
 800ae26:	e029      	b.n	800ae7c <_scanf_float+0x188>
 800ae28:	2b74      	cmp	r3, #116	; 0x74
 800ae2a:	d06f      	beq.n	800af0c <_scanf_float+0x218>
 800ae2c:	2b79      	cmp	r3, #121	; 0x79
 800ae2e:	e7f6      	b.n	800ae1e <_scanf_float+0x12a>
 800ae30:	6821      	ldr	r1, [r4, #0]
 800ae32:	05c8      	lsls	r0, r1, #23
 800ae34:	d51a      	bpl.n	800ae6c <_scanf_float+0x178>
 800ae36:	9b02      	ldr	r3, [sp, #8]
 800ae38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ae3c:	6021      	str	r1, [r4, #0]
 800ae3e:	f109 0901 	add.w	r9, r9, #1
 800ae42:	b11b      	cbz	r3, 800ae4c <_scanf_float+0x158>
 800ae44:	3b01      	subs	r3, #1
 800ae46:	3201      	adds	r2, #1
 800ae48:	9302      	str	r3, [sp, #8]
 800ae4a:	60a2      	str	r2, [r4, #8]
 800ae4c:	68a3      	ldr	r3, [r4, #8]
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	60a3      	str	r3, [r4, #8]
 800ae52:	6923      	ldr	r3, [r4, #16]
 800ae54:	3301      	adds	r3, #1
 800ae56:	6123      	str	r3, [r4, #16]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	607b      	str	r3, [r7, #4]
 800ae60:	f340 8084 	ble.w	800af6c <_scanf_float+0x278>
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	3301      	adds	r3, #1
 800ae68:	603b      	str	r3, [r7, #0]
 800ae6a:	e766      	b.n	800ad3a <_scanf_float+0x46>
 800ae6c:	eb1a 0f05 	cmn.w	sl, r5
 800ae70:	f47f af70 	bne.w	800ad54 <_scanf_float+0x60>
 800ae74:	6822      	ldr	r2, [r4, #0]
 800ae76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ae7a:	6022      	str	r2, [r4, #0]
 800ae7c:	f806 3b01 	strb.w	r3, [r6], #1
 800ae80:	e7e4      	b.n	800ae4c <_scanf_float+0x158>
 800ae82:	6822      	ldr	r2, [r4, #0]
 800ae84:	0610      	lsls	r0, r2, #24
 800ae86:	f57f af65 	bpl.w	800ad54 <_scanf_float+0x60>
 800ae8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae8e:	e7f4      	b.n	800ae7a <_scanf_float+0x186>
 800ae90:	f1ba 0f00 	cmp.w	sl, #0
 800ae94:	d10e      	bne.n	800aeb4 <_scanf_float+0x1c0>
 800ae96:	f1b9 0f00 	cmp.w	r9, #0
 800ae9a:	d10e      	bne.n	800aeba <_scanf_float+0x1c6>
 800ae9c:	6822      	ldr	r2, [r4, #0]
 800ae9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aea2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aea6:	d108      	bne.n	800aeba <_scanf_float+0x1c6>
 800aea8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aeac:	6022      	str	r2, [r4, #0]
 800aeae:	f04f 0a01 	mov.w	sl, #1
 800aeb2:	e7e3      	b.n	800ae7c <_scanf_float+0x188>
 800aeb4:	f1ba 0f02 	cmp.w	sl, #2
 800aeb8:	d055      	beq.n	800af66 <_scanf_float+0x272>
 800aeba:	2d01      	cmp	r5, #1
 800aebc:	d002      	beq.n	800aec4 <_scanf_float+0x1d0>
 800aebe:	2d04      	cmp	r5, #4
 800aec0:	f47f af48 	bne.w	800ad54 <_scanf_float+0x60>
 800aec4:	3501      	adds	r5, #1
 800aec6:	b2ed      	uxtb	r5, r5
 800aec8:	e7d8      	b.n	800ae7c <_scanf_float+0x188>
 800aeca:	f1ba 0f01 	cmp.w	sl, #1
 800aece:	f47f af41 	bne.w	800ad54 <_scanf_float+0x60>
 800aed2:	f04f 0a02 	mov.w	sl, #2
 800aed6:	e7d1      	b.n	800ae7c <_scanf_float+0x188>
 800aed8:	b97d      	cbnz	r5, 800aefa <_scanf_float+0x206>
 800aeda:	f1b9 0f00 	cmp.w	r9, #0
 800aede:	f47f af3c 	bne.w	800ad5a <_scanf_float+0x66>
 800aee2:	6822      	ldr	r2, [r4, #0]
 800aee4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aee8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aeec:	f47f af39 	bne.w	800ad62 <_scanf_float+0x6e>
 800aef0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aef4:	6022      	str	r2, [r4, #0]
 800aef6:	2501      	movs	r5, #1
 800aef8:	e7c0      	b.n	800ae7c <_scanf_float+0x188>
 800aefa:	2d03      	cmp	r5, #3
 800aefc:	d0e2      	beq.n	800aec4 <_scanf_float+0x1d0>
 800aefe:	2d05      	cmp	r5, #5
 800af00:	e7de      	b.n	800aec0 <_scanf_float+0x1cc>
 800af02:	2d02      	cmp	r5, #2
 800af04:	f47f af26 	bne.w	800ad54 <_scanf_float+0x60>
 800af08:	2503      	movs	r5, #3
 800af0a:	e7b7      	b.n	800ae7c <_scanf_float+0x188>
 800af0c:	2d06      	cmp	r5, #6
 800af0e:	f47f af21 	bne.w	800ad54 <_scanf_float+0x60>
 800af12:	2507      	movs	r5, #7
 800af14:	e7b2      	b.n	800ae7c <_scanf_float+0x188>
 800af16:	6822      	ldr	r2, [r4, #0]
 800af18:	0591      	lsls	r1, r2, #22
 800af1a:	f57f af1b 	bpl.w	800ad54 <_scanf_float+0x60>
 800af1e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800af22:	6022      	str	r2, [r4, #0]
 800af24:	f8cd 9004 	str.w	r9, [sp, #4]
 800af28:	e7a8      	b.n	800ae7c <_scanf_float+0x188>
 800af2a:	6822      	ldr	r2, [r4, #0]
 800af2c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800af30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800af34:	d006      	beq.n	800af44 <_scanf_float+0x250>
 800af36:	0550      	lsls	r0, r2, #21
 800af38:	f57f af0c 	bpl.w	800ad54 <_scanf_float+0x60>
 800af3c:	f1b9 0f00 	cmp.w	r9, #0
 800af40:	f43f af0f 	beq.w	800ad62 <_scanf_float+0x6e>
 800af44:	0591      	lsls	r1, r2, #22
 800af46:	bf58      	it	pl
 800af48:	9901      	ldrpl	r1, [sp, #4]
 800af4a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af4e:	bf58      	it	pl
 800af50:	eba9 0101 	subpl.w	r1, r9, r1
 800af54:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800af58:	bf58      	it	pl
 800af5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800af5e:	6022      	str	r2, [r4, #0]
 800af60:	f04f 0900 	mov.w	r9, #0
 800af64:	e78a      	b.n	800ae7c <_scanf_float+0x188>
 800af66:	f04f 0a03 	mov.w	sl, #3
 800af6a:	e787      	b.n	800ae7c <_scanf_float+0x188>
 800af6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af70:	4639      	mov	r1, r7
 800af72:	4640      	mov	r0, r8
 800af74:	4798      	blx	r3
 800af76:	2800      	cmp	r0, #0
 800af78:	f43f aedf 	beq.w	800ad3a <_scanf_float+0x46>
 800af7c:	e6ea      	b.n	800ad54 <_scanf_float+0x60>
 800af7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af86:	463a      	mov	r2, r7
 800af88:	4640      	mov	r0, r8
 800af8a:	4798      	blx	r3
 800af8c:	6923      	ldr	r3, [r4, #16]
 800af8e:	3b01      	subs	r3, #1
 800af90:	6123      	str	r3, [r4, #16]
 800af92:	e6ec      	b.n	800ad6e <_scanf_float+0x7a>
 800af94:	1e6b      	subs	r3, r5, #1
 800af96:	2b06      	cmp	r3, #6
 800af98:	d825      	bhi.n	800afe6 <_scanf_float+0x2f2>
 800af9a:	2d02      	cmp	r5, #2
 800af9c:	d836      	bhi.n	800b00c <_scanf_float+0x318>
 800af9e:	455e      	cmp	r6, fp
 800afa0:	f67f aee8 	bls.w	800ad74 <_scanf_float+0x80>
 800afa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afa8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afac:	463a      	mov	r2, r7
 800afae:	4640      	mov	r0, r8
 800afb0:	4798      	blx	r3
 800afb2:	6923      	ldr	r3, [r4, #16]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	6123      	str	r3, [r4, #16]
 800afb8:	e7f1      	b.n	800af9e <_scanf_float+0x2aa>
 800afba:	9802      	ldr	r0, [sp, #8]
 800afbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afc0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800afc4:	9002      	str	r0, [sp, #8]
 800afc6:	463a      	mov	r2, r7
 800afc8:	4640      	mov	r0, r8
 800afca:	4798      	blx	r3
 800afcc:	6923      	ldr	r3, [r4, #16]
 800afce:	3b01      	subs	r3, #1
 800afd0:	6123      	str	r3, [r4, #16]
 800afd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afd6:	fa5f fa8a 	uxtb.w	sl, sl
 800afda:	f1ba 0f02 	cmp.w	sl, #2
 800afde:	d1ec      	bne.n	800afba <_scanf_float+0x2c6>
 800afe0:	3d03      	subs	r5, #3
 800afe2:	b2ed      	uxtb	r5, r5
 800afe4:	1b76      	subs	r6, r6, r5
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	05da      	lsls	r2, r3, #23
 800afea:	d52f      	bpl.n	800b04c <_scanf_float+0x358>
 800afec:	055b      	lsls	r3, r3, #21
 800afee:	d510      	bpl.n	800b012 <_scanf_float+0x31e>
 800aff0:	455e      	cmp	r6, fp
 800aff2:	f67f aebf 	bls.w	800ad74 <_scanf_float+0x80>
 800aff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800affa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800affe:	463a      	mov	r2, r7
 800b000:	4640      	mov	r0, r8
 800b002:	4798      	blx	r3
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	3b01      	subs	r3, #1
 800b008:	6123      	str	r3, [r4, #16]
 800b00a:	e7f1      	b.n	800aff0 <_scanf_float+0x2fc>
 800b00c:	46aa      	mov	sl, r5
 800b00e:	9602      	str	r6, [sp, #8]
 800b010:	e7df      	b.n	800afd2 <_scanf_float+0x2de>
 800b012:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b016:	6923      	ldr	r3, [r4, #16]
 800b018:	2965      	cmp	r1, #101	; 0x65
 800b01a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b01e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b022:	6123      	str	r3, [r4, #16]
 800b024:	d00c      	beq.n	800b040 <_scanf_float+0x34c>
 800b026:	2945      	cmp	r1, #69	; 0x45
 800b028:	d00a      	beq.n	800b040 <_scanf_float+0x34c>
 800b02a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b02e:	463a      	mov	r2, r7
 800b030:	4640      	mov	r0, r8
 800b032:	4798      	blx	r3
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b03a:	3b01      	subs	r3, #1
 800b03c:	1eb5      	subs	r5, r6, #2
 800b03e:	6123      	str	r3, [r4, #16]
 800b040:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b044:	463a      	mov	r2, r7
 800b046:	4640      	mov	r0, r8
 800b048:	4798      	blx	r3
 800b04a:	462e      	mov	r6, r5
 800b04c:	6825      	ldr	r5, [r4, #0]
 800b04e:	f015 0510 	ands.w	r5, r5, #16
 800b052:	d158      	bne.n	800b106 <_scanf_float+0x412>
 800b054:	7035      	strb	r5, [r6, #0]
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b05c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b060:	d11c      	bne.n	800b09c <_scanf_float+0x3a8>
 800b062:	9b01      	ldr	r3, [sp, #4]
 800b064:	454b      	cmp	r3, r9
 800b066:	eba3 0209 	sub.w	r2, r3, r9
 800b06a:	d124      	bne.n	800b0b6 <_scanf_float+0x3c2>
 800b06c:	2200      	movs	r2, #0
 800b06e:	4659      	mov	r1, fp
 800b070:	4640      	mov	r0, r8
 800b072:	f000 ff0f 	bl	800be94 <_strtod_r>
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	6821      	ldr	r1, [r4, #0]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f011 0f02 	tst.w	r1, #2
 800b080:	ec57 6b10 	vmov	r6, r7, d0
 800b084:	f103 0204 	add.w	r2, r3, #4
 800b088:	d020      	beq.n	800b0cc <_scanf_float+0x3d8>
 800b08a:	9903      	ldr	r1, [sp, #12]
 800b08c:	600a      	str	r2, [r1, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	e9c3 6700 	strd	r6, r7, [r3]
 800b094:	68e3      	ldr	r3, [r4, #12]
 800b096:	3301      	adds	r3, #1
 800b098:	60e3      	str	r3, [r4, #12]
 800b09a:	e66c      	b.n	800ad76 <_scanf_float+0x82>
 800b09c:	9b04      	ldr	r3, [sp, #16]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0e4      	beq.n	800b06c <_scanf_float+0x378>
 800b0a2:	9905      	ldr	r1, [sp, #20]
 800b0a4:	230a      	movs	r3, #10
 800b0a6:	462a      	mov	r2, r5
 800b0a8:	3101      	adds	r1, #1
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	f000 ffd8 	bl	800c060 <_strtol_r>
 800b0b0:	9b04      	ldr	r3, [sp, #16]
 800b0b2:	9e05      	ldr	r6, [sp, #20]
 800b0b4:	1ac2      	subs	r2, r0, r3
 800b0b6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b0ba:	429e      	cmp	r6, r3
 800b0bc:	bf28      	it	cs
 800b0be:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b0c2:	4912      	ldr	r1, [pc, #72]	; (800b10c <_scanf_float+0x418>)
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f000 f82b 	bl	800b120 <siprintf>
 800b0ca:	e7cf      	b.n	800b06c <_scanf_float+0x378>
 800b0cc:	f011 0f04 	tst.w	r1, #4
 800b0d0:	9903      	ldr	r1, [sp, #12]
 800b0d2:	600a      	str	r2, [r1, #0]
 800b0d4:	d1db      	bne.n	800b08e <_scanf_float+0x39a>
 800b0d6:	f8d3 8000 	ldr.w	r8, [r3]
 800b0da:	ee10 2a10 	vmov	r2, s0
 800b0de:	ee10 0a10 	vmov	r0, s0
 800b0e2:	463b      	mov	r3, r7
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	f7f5 fd21 	bl	8000b2c <__aeabi_dcmpun>
 800b0ea:	b128      	cbz	r0, 800b0f8 <_scanf_float+0x404>
 800b0ec:	4808      	ldr	r0, [pc, #32]	; (800b110 <_scanf_float+0x41c>)
 800b0ee:	f000 f811 	bl	800b114 <nanf>
 800b0f2:	ed88 0a00 	vstr	s0, [r8]
 800b0f6:	e7cd      	b.n	800b094 <_scanf_float+0x3a0>
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	4639      	mov	r1, r7
 800b0fc:	f7f5 fd74 	bl	8000be8 <__aeabi_d2f>
 800b100:	f8c8 0000 	str.w	r0, [r8]
 800b104:	e7c6      	b.n	800b094 <_scanf_float+0x3a0>
 800b106:	2500      	movs	r5, #0
 800b108:	e635      	b.n	800ad76 <_scanf_float+0x82>
 800b10a:	bf00      	nop
 800b10c:	0800f9f2 	.word	0x0800f9f2
 800b110:	0800fafb 	.word	0x0800fafb

0800b114 <nanf>:
 800b114:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b11c <nanf+0x8>
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	7fc00000 	.word	0x7fc00000

0800b120 <siprintf>:
 800b120:	b40e      	push	{r1, r2, r3}
 800b122:	b500      	push	{lr}
 800b124:	b09c      	sub	sp, #112	; 0x70
 800b126:	ab1d      	add	r3, sp, #116	; 0x74
 800b128:	9002      	str	r0, [sp, #8]
 800b12a:	9006      	str	r0, [sp, #24]
 800b12c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b130:	4809      	ldr	r0, [pc, #36]	; (800b158 <siprintf+0x38>)
 800b132:	9107      	str	r1, [sp, #28]
 800b134:	9104      	str	r1, [sp, #16]
 800b136:	4909      	ldr	r1, [pc, #36]	; (800b15c <siprintf+0x3c>)
 800b138:	f853 2b04 	ldr.w	r2, [r3], #4
 800b13c:	9105      	str	r1, [sp, #20]
 800b13e:	6800      	ldr	r0, [r0, #0]
 800b140:	9301      	str	r3, [sp, #4]
 800b142:	a902      	add	r1, sp, #8
 800b144:	f003 f810 	bl	800e168 <_svfiprintf_r>
 800b148:	9b02      	ldr	r3, [sp, #8]
 800b14a:	2200      	movs	r2, #0
 800b14c:	701a      	strb	r2, [r3, #0]
 800b14e:	b01c      	add	sp, #112	; 0x70
 800b150:	f85d eb04 	ldr.w	lr, [sp], #4
 800b154:	b003      	add	sp, #12
 800b156:	4770      	bx	lr
 800b158:	20000078 	.word	0x20000078
 800b15c:	ffff0208 	.word	0xffff0208

0800b160 <siscanf>:
 800b160:	b40e      	push	{r1, r2, r3}
 800b162:	b510      	push	{r4, lr}
 800b164:	b09f      	sub	sp, #124	; 0x7c
 800b166:	ac21      	add	r4, sp, #132	; 0x84
 800b168:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b16c:	f854 2b04 	ldr.w	r2, [r4], #4
 800b170:	9201      	str	r2, [sp, #4]
 800b172:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b176:	9004      	str	r0, [sp, #16]
 800b178:	9008      	str	r0, [sp, #32]
 800b17a:	f7f5 f829 	bl	80001d0 <strlen>
 800b17e:	4b0c      	ldr	r3, [pc, #48]	; (800b1b0 <siscanf+0x50>)
 800b180:	9005      	str	r0, [sp, #20]
 800b182:	9009      	str	r0, [sp, #36]	; 0x24
 800b184:	930d      	str	r3, [sp, #52]	; 0x34
 800b186:	480b      	ldr	r0, [pc, #44]	; (800b1b4 <siscanf+0x54>)
 800b188:	9a01      	ldr	r2, [sp, #4]
 800b18a:	6800      	ldr	r0, [r0, #0]
 800b18c:	9403      	str	r4, [sp, #12]
 800b18e:	2300      	movs	r3, #0
 800b190:	9311      	str	r3, [sp, #68]	; 0x44
 800b192:	9316      	str	r3, [sp, #88]	; 0x58
 800b194:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b198:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b19c:	a904      	add	r1, sp, #16
 800b19e:	4623      	mov	r3, r4
 800b1a0:	f003 f93c 	bl	800e41c <__ssvfiscanf_r>
 800b1a4:	b01f      	add	sp, #124	; 0x7c
 800b1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1aa:	b003      	add	sp, #12
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	0800b1db 	.word	0x0800b1db
 800b1b4:	20000078 	.word	0x20000078

0800b1b8 <__sread>:
 800b1b8:	b510      	push	{r4, lr}
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c0:	f003 fd4a 	bl	800ec58 <_read_r>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	bfab      	itete	ge
 800b1c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b1cc:	181b      	addge	r3, r3, r0
 800b1ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1d2:	bfac      	ite	ge
 800b1d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1d6:	81a3      	strhlt	r3, [r4, #12]
 800b1d8:	bd10      	pop	{r4, pc}

0800b1da <__seofread>:
 800b1da:	2000      	movs	r0, #0
 800b1dc:	4770      	bx	lr

0800b1de <__swrite>:
 800b1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e2:	461f      	mov	r7, r3
 800b1e4:	898b      	ldrh	r3, [r1, #12]
 800b1e6:	05db      	lsls	r3, r3, #23
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	4616      	mov	r6, r2
 800b1ee:	d505      	bpl.n	800b1fc <__swrite+0x1e>
 800b1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f002 f9ac 	bl	800d554 <_lseek_r>
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b206:	81a3      	strh	r3, [r4, #12]
 800b208:	4632      	mov	r2, r6
 800b20a:	463b      	mov	r3, r7
 800b20c:	4628      	mov	r0, r5
 800b20e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b212:	f000 bf61 	b.w	800c0d8 <_write_r>

0800b216 <__sseek>:
 800b216:	b510      	push	{r4, lr}
 800b218:	460c      	mov	r4, r1
 800b21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b21e:	f002 f999 	bl	800d554 <_lseek_r>
 800b222:	1c43      	adds	r3, r0, #1
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	bf15      	itete	ne
 800b228:	6560      	strne	r0, [r4, #84]	; 0x54
 800b22a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b22e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b232:	81a3      	strheq	r3, [r4, #12]
 800b234:	bf18      	it	ne
 800b236:	81a3      	strhne	r3, [r4, #12]
 800b238:	bd10      	pop	{r4, pc}

0800b23a <__sclose>:
 800b23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23e:	f000 bf7b 	b.w	800c138 <_close_r>

0800b242 <sulp>:
 800b242:	b570      	push	{r4, r5, r6, lr}
 800b244:	4604      	mov	r4, r0
 800b246:	460d      	mov	r5, r1
 800b248:	ec45 4b10 	vmov	d0, r4, r5
 800b24c:	4616      	mov	r6, r2
 800b24e:	f002 fd27 	bl	800dca0 <__ulp>
 800b252:	ec51 0b10 	vmov	r0, r1, d0
 800b256:	b17e      	cbz	r6, 800b278 <sulp+0x36>
 800b258:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b25c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b260:	2b00      	cmp	r3, #0
 800b262:	dd09      	ble.n	800b278 <sulp+0x36>
 800b264:	051b      	lsls	r3, r3, #20
 800b266:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b26a:	2400      	movs	r4, #0
 800b26c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b270:	4622      	mov	r2, r4
 800b272:	462b      	mov	r3, r5
 800b274:	f7f5 f9c0 	bl	80005f8 <__aeabi_dmul>
 800b278:	bd70      	pop	{r4, r5, r6, pc}
 800b27a:	0000      	movs	r0, r0
 800b27c:	0000      	movs	r0, r0
	...

0800b280 <_strtod_l>:
 800b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	b0a3      	sub	sp, #140	; 0x8c
 800b286:	461f      	mov	r7, r3
 800b288:	2300      	movs	r3, #0
 800b28a:	931e      	str	r3, [sp, #120]	; 0x78
 800b28c:	4ba4      	ldr	r3, [pc, #656]	; (800b520 <_strtod_l+0x2a0>)
 800b28e:	9219      	str	r2, [sp, #100]	; 0x64
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	9307      	str	r3, [sp, #28]
 800b294:	4604      	mov	r4, r0
 800b296:	4618      	mov	r0, r3
 800b298:	4688      	mov	r8, r1
 800b29a:	f7f4 ff99 	bl	80001d0 <strlen>
 800b29e:	f04f 0a00 	mov.w	sl, #0
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	f04f 0b00 	mov.w	fp, #0
 800b2a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b2ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2ae:	781a      	ldrb	r2, [r3, #0]
 800b2b0:	2a2b      	cmp	r2, #43	; 0x2b
 800b2b2:	d04c      	beq.n	800b34e <_strtod_l+0xce>
 800b2b4:	d839      	bhi.n	800b32a <_strtod_l+0xaa>
 800b2b6:	2a0d      	cmp	r2, #13
 800b2b8:	d832      	bhi.n	800b320 <_strtod_l+0xa0>
 800b2ba:	2a08      	cmp	r2, #8
 800b2bc:	d832      	bhi.n	800b324 <_strtod_l+0xa4>
 800b2be:	2a00      	cmp	r2, #0
 800b2c0:	d03c      	beq.n	800b33c <_strtod_l+0xbc>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	930e      	str	r3, [sp, #56]	; 0x38
 800b2c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b2c8:	7833      	ldrb	r3, [r6, #0]
 800b2ca:	2b30      	cmp	r3, #48	; 0x30
 800b2cc:	f040 80b4 	bne.w	800b438 <_strtod_l+0x1b8>
 800b2d0:	7873      	ldrb	r3, [r6, #1]
 800b2d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2d6:	2b58      	cmp	r3, #88	; 0x58
 800b2d8:	d16c      	bne.n	800b3b4 <_strtod_l+0x134>
 800b2da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	ab1e      	add	r3, sp, #120	; 0x78
 800b2e0:	9702      	str	r7, [sp, #8]
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	4a8f      	ldr	r2, [pc, #572]	; (800b524 <_strtod_l+0x2a4>)
 800b2e6:	ab1f      	add	r3, sp, #124	; 0x7c
 800b2e8:	a91d      	add	r1, sp, #116	; 0x74
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f001 fe26 	bl	800cf3c <__gethex>
 800b2f0:	f010 0707 	ands.w	r7, r0, #7
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	d005      	beq.n	800b304 <_strtod_l+0x84>
 800b2f8:	2f06      	cmp	r7, #6
 800b2fa:	d12a      	bne.n	800b352 <_strtod_l+0xd2>
 800b2fc:	3601      	adds	r6, #1
 800b2fe:	2300      	movs	r3, #0
 800b300:	961d      	str	r6, [sp, #116]	; 0x74
 800b302:	930e      	str	r3, [sp, #56]	; 0x38
 800b304:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b306:	2b00      	cmp	r3, #0
 800b308:	f040 8596 	bne.w	800be38 <_strtod_l+0xbb8>
 800b30c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b30e:	b1db      	cbz	r3, 800b348 <_strtod_l+0xc8>
 800b310:	4652      	mov	r2, sl
 800b312:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b316:	ec43 2b10 	vmov	d0, r2, r3
 800b31a:	b023      	add	sp, #140	; 0x8c
 800b31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b320:	2a20      	cmp	r2, #32
 800b322:	d1ce      	bne.n	800b2c2 <_strtod_l+0x42>
 800b324:	3301      	adds	r3, #1
 800b326:	931d      	str	r3, [sp, #116]	; 0x74
 800b328:	e7c0      	b.n	800b2ac <_strtod_l+0x2c>
 800b32a:	2a2d      	cmp	r2, #45	; 0x2d
 800b32c:	d1c9      	bne.n	800b2c2 <_strtod_l+0x42>
 800b32e:	2201      	movs	r2, #1
 800b330:	920e      	str	r2, [sp, #56]	; 0x38
 800b332:	1c5a      	adds	r2, r3, #1
 800b334:	921d      	str	r2, [sp, #116]	; 0x74
 800b336:	785b      	ldrb	r3, [r3, #1]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1c4      	bne.n	800b2c6 <_strtod_l+0x46>
 800b33c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b33e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b342:	2b00      	cmp	r3, #0
 800b344:	f040 8576 	bne.w	800be34 <_strtod_l+0xbb4>
 800b348:	4652      	mov	r2, sl
 800b34a:	465b      	mov	r3, fp
 800b34c:	e7e3      	b.n	800b316 <_strtod_l+0x96>
 800b34e:	2200      	movs	r2, #0
 800b350:	e7ee      	b.n	800b330 <_strtod_l+0xb0>
 800b352:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b354:	b13a      	cbz	r2, 800b366 <_strtod_l+0xe6>
 800b356:	2135      	movs	r1, #53	; 0x35
 800b358:	a820      	add	r0, sp, #128	; 0x80
 800b35a:	f002 fdac 	bl	800deb6 <__copybits>
 800b35e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b360:	4620      	mov	r0, r4
 800b362:	f002 f971 	bl	800d648 <_Bfree>
 800b366:	3f01      	subs	r7, #1
 800b368:	2f05      	cmp	r7, #5
 800b36a:	d807      	bhi.n	800b37c <_strtod_l+0xfc>
 800b36c:	e8df f007 	tbb	[pc, r7]
 800b370:	1d180b0e 	.word	0x1d180b0e
 800b374:	030e      	.short	0x030e
 800b376:	f04f 0b00 	mov.w	fp, #0
 800b37a:	46da      	mov	sl, fp
 800b37c:	0728      	lsls	r0, r5, #28
 800b37e:	d5c1      	bpl.n	800b304 <_strtod_l+0x84>
 800b380:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b384:	e7be      	b.n	800b304 <_strtod_l+0x84>
 800b386:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b38a:	e7f7      	b.n	800b37c <_strtod_l+0xfc>
 800b38c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b390:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b392:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b396:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b39a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b39e:	e7ed      	b.n	800b37c <_strtod_l+0xfc>
 800b3a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b528 <_strtod_l+0x2a8>
 800b3a4:	f04f 0a00 	mov.w	sl, #0
 800b3a8:	e7e8      	b.n	800b37c <_strtod_l+0xfc>
 800b3aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b3ae:	f04f 3aff 	mov.w	sl, #4294967295
 800b3b2:	e7e3      	b.n	800b37c <_strtod_l+0xfc>
 800b3b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	921d      	str	r2, [sp, #116]	; 0x74
 800b3ba:	785b      	ldrb	r3, [r3, #1]
 800b3bc:	2b30      	cmp	r3, #48	; 0x30
 800b3be:	d0f9      	beq.n	800b3b4 <_strtod_l+0x134>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d09f      	beq.n	800b304 <_strtod_l+0x84>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	f04f 0900 	mov.w	r9, #0
 800b3ca:	9304      	str	r3, [sp, #16]
 800b3cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b3d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b3d4:	464f      	mov	r7, r9
 800b3d6:	220a      	movs	r2, #10
 800b3d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b3da:	7806      	ldrb	r6, [r0, #0]
 800b3dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b3e0:	b2d9      	uxtb	r1, r3
 800b3e2:	2909      	cmp	r1, #9
 800b3e4:	d92a      	bls.n	800b43c <_strtod_l+0x1bc>
 800b3e6:	9907      	ldr	r1, [sp, #28]
 800b3e8:	462a      	mov	r2, r5
 800b3ea:	f003 fc9b 	bl	800ed24 <strncmp>
 800b3ee:	b398      	cbz	r0, 800b458 <_strtod_l+0x1d8>
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	4633      	mov	r3, r6
 800b3f4:	463d      	mov	r5, r7
 800b3f6:	9007      	str	r0, [sp, #28]
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	2b65      	cmp	r3, #101	; 0x65
 800b3fc:	d001      	beq.n	800b402 <_strtod_l+0x182>
 800b3fe:	2b45      	cmp	r3, #69	; 0x45
 800b400:	d118      	bne.n	800b434 <_strtod_l+0x1b4>
 800b402:	b91d      	cbnz	r5, 800b40c <_strtod_l+0x18c>
 800b404:	9b04      	ldr	r3, [sp, #16]
 800b406:	4303      	orrs	r3, r0
 800b408:	d098      	beq.n	800b33c <_strtod_l+0xbc>
 800b40a:	2500      	movs	r5, #0
 800b40c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b410:	f108 0301 	add.w	r3, r8, #1
 800b414:	931d      	str	r3, [sp, #116]	; 0x74
 800b416:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b41a:	2b2b      	cmp	r3, #43	; 0x2b
 800b41c:	d075      	beq.n	800b50a <_strtod_l+0x28a>
 800b41e:	2b2d      	cmp	r3, #45	; 0x2d
 800b420:	d07b      	beq.n	800b51a <_strtod_l+0x29a>
 800b422:	f04f 0c00 	mov.w	ip, #0
 800b426:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b42a:	2909      	cmp	r1, #9
 800b42c:	f240 8082 	bls.w	800b534 <_strtod_l+0x2b4>
 800b430:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b434:	2600      	movs	r6, #0
 800b436:	e09d      	b.n	800b574 <_strtod_l+0x2f4>
 800b438:	2300      	movs	r3, #0
 800b43a:	e7c4      	b.n	800b3c6 <_strtod_l+0x146>
 800b43c:	2f08      	cmp	r7, #8
 800b43e:	bfd8      	it	le
 800b440:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b442:	f100 0001 	add.w	r0, r0, #1
 800b446:	bfda      	itte	le
 800b448:	fb02 3301 	mlale	r3, r2, r1, r3
 800b44c:	9309      	strle	r3, [sp, #36]	; 0x24
 800b44e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b452:	3701      	adds	r7, #1
 800b454:	901d      	str	r0, [sp, #116]	; 0x74
 800b456:	e7bf      	b.n	800b3d8 <_strtod_l+0x158>
 800b458:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b45a:	195a      	adds	r2, r3, r5
 800b45c:	921d      	str	r2, [sp, #116]	; 0x74
 800b45e:	5d5b      	ldrb	r3, [r3, r5]
 800b460:	2f00      	cmp	r7, #0
 800b462:	d037      	beq.n	800b4d4 <_strtod_l+0x254>
 800b464:	9007      	str	r0, [sp, #28]
 800b466:	463d      	mov	r5, r7
 800b468:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b46c:	2a09      	cmp	r2, #9
 800b46e:	d912      	bls.n	800b496 <_strtod_l+0x216>
 800b470:	2201      	movs	r2, #1
 800b472:	e7c2      	b.n	800b3fa <_strtod_l+0x17a>
 800b474:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	921d      	str	r2, [sp, #116]	; 0x74
 800b47a:	785b      	ldrb	r3, [r3, #1]
 800b47c:	3001      	adds	r0, #1
 800b47e:	2b30      	cmp	r3, #48	; 0x30
 800b480:	d0f8      	beq.n	800b474 <_strtod_l+0x1f4>
 800b482:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b486:	2a08      	cmp	r2, #8
 800b488:	f200 84db 	bhi.w	800be42 <_strtod_l+0xbc2>
 800b48c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b48e:	9007      	str	r0, [sp, #28]
 800b490:	2000      	movs	r0, #0
 800b492:	920a      	str	r2, [sp, #40]	; 0x28
 800b494:	4605      	mov	r5, r0
 800b496:	3b30      	subs	r3, #48	; 0x30
 800b498:	f100 0201 	add.w	r2, r0, #1
 800b49c:	d014      	beq.n	800b4c8 <_strtod_l+0x248>
 800b49e:	9907      	ldr	r1, [sp, #28]
 800b4a0:	4411      	add	r1, r2
 800b4a2:	9107      	str	r1, [sp, #28]
 800b4a4:	462a      	mov	r2, r5
 800b4a6:	eb00 0e05 	add.w	lr, r0, r5
 800b4aa:	210a      	movs	r1, #10
 800b4ac:	4572      	cmp	r2, lr
 800b4ae:	d113      	bne.n	800b4d8 <_strtod_l+0x258>
 800b4b0:	182a      	adds	r2, r5, r0
 800b4b2:	2a08      	cmp	r2, #8
 800b4b4:	f105 0501 	add.w	r5, r5, #1
 800b4b8:	4405      	add	r5, r0
 800b4ba:	dc1c      	bgt.n	800b4f6 <_strtod_l+0x276>
 800b4bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4be:	220a      	movs	r2, #10
 800b4c0:	fb02 3301 	mla	r3, r2, r1, r3
 800b4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4ca:	1c59      	adds	r1, r3, #1
 800b4cc:	911d      	str	r1, [sp, #116]	; 0x74
 800b4ce:	785b      	ldrb	r3, [r3, #1]
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	e7c9      	b.n	800b468 <_strtod_l+0x1e8>
 800b4d4:	4638      	mov	r0, r7
 800b4d6:	e7d2      	b.n	800b47e <_strtod_l+0x1fe>
 800b4d8:	2a08      	cmp	r2, #8
 800b4da:	dc04      	bgt.n	800b4e6 <_strtod_l+0x266>
 800b4dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b4de:	434e      	muls	r6, r1
 800b4e0:	9609      	str	r6, [sp, #36]	; 0x24
 800b4e2:	3201      	adds	r2, #1
 800b4e4:	e7e2      	b.n	800b4ac <_strtod_l+0x22c>
 800b4e6:	f102 0c01 	add.w	ip, r2, #1
 800b4ea:	f1bc 0f10 	cmp.w	ip, #16
 800b4ee:	bfd8      	it	le
 800b4f0:	fb01 f909 	mulle.w	r9, r1, r9
 800b4f4:	e7f5      	b.n	800b4e2 <_strtod_l+0x262>
 800b4f6:	2d10      	cmp	r5, #16
 800b4f8:	bfdc      	itt	le
 800b4fa:	220a      	movle	r2, #10
 800b4fc:	fb02 3909 	mlale	r9, r2, r9, r3
 800b500:	e7e1      	b.n	800b4c6 <_strtod_l+0x246>
 800b502:	2300      	movs	r3, #0
 800b504:	9307      	str	r3, [sp, #28]
 800b506:	2201      	movs	r2, #1
 800b508:	e77c      	b.n	800b404 <_strtod_l+0x184>
 800b50a:	f04f 0c00 	mov.w	ip, #0
 800b50e:	f108 0302 	add.w	r3, r8, #2
 800b512:	931d      	str	r3, [sp, #116]	; 0x74
 800b514:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b518:	e785      	b.n	800b426 <_strtod_l+0x1a6>
 800b51a:	f04f 0c01 	mov.w	ip, #1
 800b51e:	e7f6      	b.n	800b50e <_strtod_l+0x28e>
 800b520:	0800fce4 	.word	0x0800fce4
 800b524:	0800f9f8 	.word	0x0800f9f8
 800b528:	7ff00000 	.word	0x7ff00000
 800b52c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b52e:	1c59      	adds	r1, r3, #1
 800b530:	911d      	str	r1, [sp, #116]	; 0x74
 800b532:	785b      	ldrb	r3, [r3, #1]
 800b534:	2b30      	cmp	r3, #48	; 0x30
 800b536:	d0f9      	beq.n	800b52c <_strtod_l+0x2ac>
 800b538:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b53c:	2908      	cmp	r1, #8
 800b53e:	f63f af79 	bhi.w	800b434 <_strtod_l+0x1b4>
 800b542:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b546:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b548:	9308      	str	r3, [sp, #32]
 800b54a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b54c:	1c59      	adds	r1, r3, #1
 800b54e:	911d      	str	r1, [sp, #116]	; 0x74
 800b550:	785b      	ldrb	r3, [r3, #1]
 800b552:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b556:	2e09      	cmp	r6, #9
 800b558:	d937      	bls.n	800b5ca <_strtod_l+0x34a>
 800b55a:	9e08      	ldr	r6, [sp, #32]
 800b55c:	1b89      	subs	r1, r1, r6
 800b55e:	2908      	cmp	r1, #8
 800b560:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b564:	dc02      	bgt.n	800b56c <_strtod_l+0x2ec>
 800b566:	4576      	cmp	r6, lr
 800b568:	bfa8      	it	ge
 800b56a:	4676      	movge	r6, lr
 800b56c:	f1bc 0f00 	cmp.w	ip, #0
 800b570:	d000      	beq.n	800b574 <_strtod_l+0x2f4>
 800b572:	4276      	negs	r6, r6
 800b574:	2d00      	cmp	r5, #0
 800b576:	d14f      	bne.n	800b618 <_strtod_l+0x398>
 800b578:	9904      	ldr	r1, [sp, #16]
 800b57a:	4301      	orrs	r1, r0
 800b57c:	f47f aec2 	bne.w	800b304 <_strtod_l+0x84>
 800b580:	2a00      	cmp	r2, #0
 800b582:	f47f aedb 	bne.w	800b33c <_strtod_l+0xbc>
 800b586:	2b69      	cmp	r3, #105	; 0x69
 800b588:	d027      	beq.n	800b5da <_strtod_l+0x35a>
 800b58a:	dc24      	bgt.n	800b5d6 <_strtod_l+0x356>
 800b58c:	2b49      	cmp	r3, #73	; 0x49
 800b58e:	d024      	beq.n	800b5da <_strtod_l+0x35a>
 800b590:	2b4e      	cmp	r3, #78	; 0x4e
 800b592:	f47f aed3 	bne.w	800b33c <_strtod_l+0xbc>
 800b596:	499e      	ldr	r1, [pc, #632]	; (800b810 <_strtod_l+0x590>)
 800b598:	a81d      	add	r0, sp, #116	; 0x74
 800b59a:	f001 ff27 	bl	800d3ec <__match>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f43f aecc 	beq.w	800b33c <_strtod_l+0xbc>
 800b5a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	2b28      	cmp	r3, #40	; 0x28
 800b5aa:	d12d      	bne.n	800b608 <_strtod_l+0x388>
 800b5ac:	4999      	ldr	r1, [pc, #612]	; (800b814 <_strtod_l+0x594>)
 800b5ae:	aa20      	add	r2, sp, #128	; 0x80
 800b5b0:	a81d      	add	r0, sp, #116	; 0x74
 800b5b2:	f001 ff2f 	bl	800d414 <__hexnan>
 800b5b6:	2805      	cmp	r0, #5
 800b5b8:	d126      	bne.n	800b608 <_strtod_l+0x388>
 800b5ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5bc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b5c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b5c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b5c8:	e69c      	b.n	800b304 <_strtod_l+0x84>
 800b5ca:	210a      	movs	r1, #10
 800b5cc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b5d0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b5d4:	e7b9      	b.n	800b54a <_strtod_l+0x2ca>
 800b5d6:	2b6e      	cmp	r3, #110	; 0x6e
 800b5d8:	e7db      	b.n	800b592 <_strtod_l+0x312>
 800b5da:	498f      	ldr	r1, [pc, #572]	; (800b818 <_strtod_l+0x598>)
 800b5dc:	a81d      	add	r0, sp, #116	; 0x74
 800b5de:	f001 ff05 	bl	800d3ec <__match>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	f43f aeaa 	beq.w	800b33c <_strtod_l+0xbc>
 800b5e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b5ea:	498c      	ldr	r1, [pc, #560]	; (800b81c <_strtod_l+0x59c>)
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	a81d      	add	r0, sp, #116	; 0x74
 800b5f0:	931d      	str	r3, [sp, #116]	; 0x74
 800b5f2:	f001 fefb 	bl	800d3ec <__match>
 800b5f6:	b910      	cbnz	r0, 800b5fe <_strtod_l+0x37e>
 800b5f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	931d      	str	r3, [sp, #116]	; 0x74
 800b5fe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b82c <_strtod_l+0x5ac>
 800b602:	f04f 0a00 	mov.w	sl, #0
 800b606:	e67d      	b.n	800b304 <_strtod_l+0x84>
 800b608:	4885      	ldr	r0, [pc, #532]	; (800b820 <_strtod_l+0x5a0>)
 800b60a:	f003 fb39 	bl	800ec80 <nan>
 800b60e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b612:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b616:	e675      	b.n	800b304 <_strtod_l+0x84>
 800b618:	9b07      	ldr	r3, [sp, #28]
 800b61a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b61c:	1af3      	subs	r3, r6, r3
 800b61e:	2f00      	cmp	r7, #0
 800b620:	bf08      	it	eq
 800b622:	462f      	moveq	r7, r5
 800b624:	2d10      	cmp	r5, #16
 800b626:	9308      	str	r3, [sp, #32]
 800b628:	46a8      	mov	r8, r5
 800b62a:	bfa8      	it	ge
 800b62c:	f04f 0810 	movge.w	r8, #16
 800b630:	f7f4 ff68 	bl	8000504 <__aeabi_ui2d>
 800b634:	2d09      	cmp	r5, #9
 800b636:	4682      	mov	sl, r0
 800b638:	468b      	mov	fp, r1
 800b63a:	dd13      	ble.n	800b664 <_strtod_l+0x3e4>
 800b63c:	4b79      	ldr	r3, [pc, #484]	; (800b824 <_strtod_l+0x5a4>)
 800b63e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b642:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b646:	f7f4 ffd7 	bl	80005f8 <__aeabi_dmul>
 800b64a:	4682      	mov	sl, r0
 800b64c:	4648      	mov	r0, r9
 800b64e:	468b      	mov	fp, r1
 800b650:	f7f4 ff58 	bl	8000504 <__aeabi_ui2d>
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	4650      	mov	r0, sl
 800b65a:	4659      	mov	r1, fp
 800b65c:	f7f4 fe16 	bl	800028c <__adddf3>
 800b660:	4682      	mov	sl, r0
 800b662:	468b      	mov	fp, r1
 800b664:	2d0f      	cmp	r5, #15
 800b666:	dc38      	bgt.n	800b6da <_strtod_l+0x45a>
 800b668:	9b08      	ldr	r3, [sp, #32]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f43f ae4a 	beq.w	800b304 <_strtod_l+0x84>
 800b670:	dd24      	ble.n	800b6bc <_strtod_l+0x43c>
 800b672:	2b16      	cmp	r3, #22
 800b674:	dc0b      	bgt.n	800b68e <_strtod_l+0x40e>
 800b676:	4d6b      	ldr	r5, [pc, #428]	; (800b824 <_strtod_l+0x5a4>)
 800b678:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b67c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b680:	4652      	mov	r2, sl
 800b682:	465b      	mov	r3, fp
 800b684:	f7f4 ffb8 	bl	80005f8 <__aeabi_dmul>
 800b688:	4682      	mov	sl, r0
 800b68a:	468b      	mov	fp, r1
 800b68c:	e63a      	b.n	800b304 <_strtod_l+0x84>
 800b68e:	9a08      	ldr	r2, [sp, #32]
 800b690:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b694:	4293      	cmp	r3, r2
 800b696:	db20      	blt.n	800b6da <_strtod_l+0x45a>
 800b698:	4c62      	ldr	r4, [pc, #392]	; (800b824 <_strtod_l+0x5a4>)
 800b69a:	f1c5 050f 	rsb	r5, r5, #15
 800b69e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b6a2:	4652      	mov	r2, sl
 800b6a4:	465b      	mov	r3, fp
 800b6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6aa:	f7f4 ffa5 	bl	80005f8 <__aeabi_dmul>
 800b6ae:	9b08      	ldr	r3, [sp, #32]
 800b6b0:	1b5d      	subs	r5, r3, r5
 800b6b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b6b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b6ba:	e7e3      	b.n	800b684 <_strtod_l+0x404>
 800b6bc:	9b08      	ldr	r3, [sp, #32]
 800b6be:	3316      	adds	r3, #22
 800b6c0:	db0b      	blt.n	800b6da <_strtod_l+0x45a>
 800b6c2:	9b07      	ldr	r3, [sp, #28]
 800b6c4:	4a57      	ldr	r2, [pc, #348]	; (800b824 <_strtod_l+0x5a4>)
 800b6c6:	1b9e      	subs	r6, r3, r6
 800b6c8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b6cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b6d0:	4650      	mov	r0, sl
 800b6d2:	4659      	mov	r1, fp
 800b6d4:	f7f5 f8ba 	bl	800084c <__aeabi_ddiv>
 800b6d8:	e7d6      	b.n	800b688 <_strtod_l+0x408>
 800b6da:	9b08      	ldr	r3, [sp, #32]
 800b6dc:	eba5 0808 	sub.w	r8, r5, r8
 800b6e0:	4498      	add	r8, r3
 800b6e2:	f1b8 0f00 	cmp.w	r8, #0
 800b6e6:	dd71      	ble.n	800b7cc <_strtod_l+0x54c>
 800b6e8:	f018 030f 	ands.w	r3, r8, #15
 800b6ec:	d00a      	beq.n	800b704 <_strtod_l+0x484>
 800b6ee:	494d      	ldr	r1, [pc, #308]	; (800b824 <_strtod_l+0x5a4>)
 800b6f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6f4:	4652      	mov	r2, sl
 800b6f6:	465b      	mov	r3, fp
 800b6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6fc:	f7f4 ff7c 	bl	80005f8 <__aeabi_dmul>
 800b700:	4682      	mov	sl, r0
 800b702:	468b      	mov	fp, r1
 800b704:	f038 080f 	bics.w	r8, r8, #15
 800b708:	d04d      	beq.n	800b7a6 <_strtod_l+0x526>
 800b70a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b70e:	dd22      	ble.n	800b756 <_strtod_l+0x4d6>
 800b710:	2500      	movs	r5, #0
 800b712:	462e      	mov	r6, r5
 800b714:	9509      	str	r5, [sp, #36]	; 0x24
 800b716:	9507      	str	r5, [sp, #28]
 800b718:	2322      	movs	r3, #34	; 0x22
 800b71a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b82c <_strtod_l+0x5ac>
 800b71e:	6023      	str	r3, [r4, #0]
 800b720:	f04f 0a00 	mov.w	sl, #0
 800b724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b726:	2b00      	cmp	r3, #0
 800b728:	f43f adec 	beq.w	800b304 <_strtod_l+0x84>
 800b72c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b72e:	4620      	mov	r0, r4
 800b730:	f001 ff8a 	bl	800d648 <_Bfree>
 800b734:	9907      	ldr	r1, [sp, #28]
 800b736:	4620      	mov	r0, r4
 800b738:	f001 ff86 	bl	800d648 <_Bfree>
 800b73c:	4631      	mov	r1, r6
 800b73e:	4620      	mov	r0, r4
 800b740:	f001 ff82 	bl	800d648 <_Bfree>
 800b744:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b746:	4620      	mov	r0, r4
 800b748:	f001 ff7e 	bl	800d648 <_Bfree>
 800b74c:	4629      	mov	r1, r5
 800b74e:	4620      	mov	r0, r4
 800b750:	f001 ff7a 	bl	800d648 <_Bfree>
 800b754:	e5d6      	b.n	800b304 <_strtod_l+0x84>
 800b756:	2300      	movs	r3, #0
 800b758:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b75c:	4650      	mov	r0, sl
 800b75e:	4659      	mov	r1, fp
 800b760:	4699      	mov	r9, r3
 800b762:	f1b8 0f01 	cmp.w	r8, #1
 800b766:	dc21      	bgt.n	800b7ac <_strtod_l+0x52c>
 800b768:	b10b      	cbz	r3, 800b76e <_strtod_l+0x4ee>
 800b76a:	4682      	mov	sl, r0
 800b76c:	468b      	mov	fp, r1
 800b76e:	4b2e      	ldr	r3, [pc, #184]	; (800b828 <_strtod_l+0x5a8>)
 800b770:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b774:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b778:	4652      	mov	r2, sl
 800b77a:	465b      	mov	r3, fp
 800b77c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b780:	f7f4 ff3a 	bl	80005f8 <__aeabi_dmul>
 800b784:	4b29      	ldr	r3, [pc, #164]	; (800b82c <_strtod_l+0x5ac>)
 800b786:	460a      	mov	r2, r1
 800b788:	400b      	ands	r3, r1
 800b78a:	4929      	ldr	r1, [pc, #164]	; (800b830 <_strtod_l+0x5b0>)
 800b78c:	428b      	cmp	r3, r1
 800b78e:	4682      	mov	sl, r0
 800b790:	d8be      	bhi.n	800b710 <_strtod_l+0x490>
 800b792:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b796:	428b      	cmp	r3, r1
 800b798:	bf86      	itte	hi
 800b79a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b834 <_strtod_l+0x5b4>
 800b79e:	f04f 3aff 	movhi.w	sl, #4294967295
 800b7a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9304      	str	r3, [sp, #16]
 800b7aa:	e081      	b.n	800b8b0 <_strtod_l+0x630>
 800b7ac:	f018 0f01 	tst.w	r8, #1
 800b7b0:	d007      	beq.n	800b7c2 <_strtod_l+0x542>
 800b7b2:	4b1d      	ldr	r3, [pc, #116]	; (800b828 <_strtod_l+0x5a8>)
 800b7b4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	f7f4 ff1c 	bl	80005f8 <__aeabi_dmul>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	f109 0901 	add.w	r9, r9, #1
 800b7c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b7ca:	e7ca      	b.n	800b762 <_strtod_l+0x4e2>
 800b7cc:	d0eb      	beq.n	800b7a6 <_strtod_l+0x526>
 800b7ce:	f1c8 0800 	rsb	r8, r8, #0
 800b7d2:	f018 020f 	ands.w	r2, r8, #15
 800b7d6:	d00a      	beq.n	800b7ee <_strtod_l+0x56e>
 800b7d8:	4b12      	ldr	r3, [pc, #72]	; (800b824 <_strtod_l+0x5a4>)
 800b7da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7de:	4650      	mov	r0, sl
 800b7e0:	4659      	mov	r1, fp
 800b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e6:	f7f5 f831 	bl	800084c <__aeabi_ddiv>
 800b7ea:	4682      	mov	sl, r0
 800b7ec:	468b      	mov	fp, r1
 800b7ee:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b7f2:	d0d8      	beq.n	800b7a6 <_strtod_l+0x526>
 800b7f4:	f1b8 0f1f 	cmp.w	r8, #31
 800b7f8:	dd1e      	ble.n	800b838 <_strtod_l+0x5b8>
 800b7fa:	2500      	movs	r5, #0
 800b7fc:	462e      	mov	r6, r5
 800b7fe:	9509      	str	r5, [sp, #36]	; 0x24
 800b800:	9507      	str	r5, [sp, #28]
 800b802:	2322      	movs	r3, #34	; 0x22
 800b804:	f04f 0a00 	mov.w	sl, #0
 800b808:	f04f 0b00 	mov.w	fp, #0
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	e789      	b.n	800b724 <_strtod_l+0x4a4>
 800b810:	0800f9cd 	.word	0x0800f9cd
 800b814:	0800fa0c 	.word	0x0800fa0c
 800b818:	0800f9c5 	.word	0x0800f9c5
 800b81c:	0800fc00 	.word	0x0800fc00
 800b820:	0800fafb 	.word	0x0800fafb
 800b824:	0800fd80 	.word	0x0800fd80
 800b828:	0800fd58 	.word	0x0800fd58
 800b82c:	7ff00000 	.word	0x7ff00000
 800b830:	7ca00000 	.word	0x7ca00000
 800b834:	7fefffff 	.word	0x7fefffff
 800b838:	f018 0310 	ands.w	r3, r8, #16
 800b83c:	bf18      	it	ne
 800b83e:	236a      	movne	r3, #106	; 0x6a
 800b840:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800bbf8 <_strtod_l+0x978>
 800b844:	9304      	str	r3, [sp, #16]
 800b846:	4650      	mov	r0, sl
 800b848:	4659      	mov	r1, fp
 800b84a:	2300      	movs	r3, #0
 800b84c:	f018 0f01 	tst.w	r8, #1
 800b850:	d004      	beq.n	800b85c <_strtod_l+0x5dc>
 800b852:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b856:	f7f4 fecf 	bl	80005f8 <__aeabi_dmul>
 800b85a:	2301      	movs	r3, #1
 800b85c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b860:	f109 0908 	add.w	r9, r9, #8
 800b864:	d1f2      	bne.n	800b84c <_strtod_l+0x5cc>
 800b866:	b10b      	cbz	r3, 800b86c <_strtod_l+0x5ec>
 800b868:	4682      	mov	sl, r0
 800b86a:	468b      	mov	fp, r1
 800b86c:	9b04      	ldr	r3, [sp, #16]
 800b86e:	b1bb      	cbz	r3, 800b8a0 <_strtod_l+0x620>
 800b870:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b874:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b878:	2b00      	cmp	r3, #0
 800b87a:	4659      	mov	r1, fp
 800b87c:	dd10      	ble.n	800b8a0 <_strtod_l+0x620>
 800b87e:	2b1f      	cmp	r3, #31
 800b880:	f340 8128 	ble.w	800bad4 <_strtod_l+0x854>
 800b884:	2b34      	cmp	r3, #52	; 0x34
 800b886:	bfde      	ittt	le
 800b888:	3b20      	suble	r3, #32
 800b88a:	f04f 32ff 	movle.w	r2, #4294967295
 800b88e:	fa02 f303 	lslle.w	r3, r2, r3
 800b892:	f04f 0a00 	mov.w	sl, #0
 800b896:	bfcc      	ite	gt
 800b898:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b89c:	ea03 0b01 	andle.w	fp, r3, r1
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	4650      	mov	r0, sl
 800b8a6:	4659      	mov	r1, fp
 800b8a8:	f7f5 f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d1a4      	bne.n	800b7fa <_strtod_l+0x57a>
 800b8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b8b6:	462b      	mov	r3, r5
 800b8b8:	463a      	mov	r2, r7
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f001 ff30 	bl	800d720 <__s2b>
 800b8c0:	9009      	str	r0, [sp, #36]	; 0x24
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	f43f af24 	beq.w	800b710 <_strtod_l+0x490>
 800b8c8:	9b07      	ldr	r3, [sp, #28]
 800b8ca:	1b9e      	subs	r6, r3, r6
 800b8cc:	9b08      	ldr	r3, [sp, #32]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bfb4      	ite	lt
 800b8d2:	4633      	movlt	r3, r6
 800b8d4:	2300      	movge	r3, #0
 800b8d6:	9310      	str	r3, [sp, #64]	; 0x40
 800b8d8:	9b08      	ldr	r3, [sp, #32]
 800b8da:	2500      	movs	r5, #0
 800b8dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b8e0:	9318      	str	r3, [sp, #96]	; 0x60
 800b8e2:	462e      	mov	r6, r5
 800b8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	6859      	ldr	r1, [r3, #4]
 800b8ea:	f001 fe6d 	bl	800d5c8 <_Balloc>
 800b8ee:	9007      	str	r0, [sp, #28]
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	f43f af11 	beq.w	800b718 <_strtod_l+0x498>
 800b8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8f8:	691a      	ldr	r2, [r3, #16]
 800b8fa:	3202      	adds	r2, #2
 800b8fc:	f103 010c 	add.w	r1, r3, #12
 800b900:	0092      	lsls	r2, r2, #2
 800b902:	300c      	adds	r0, #12
 800b904:	f001 fe52 	bl	800d5ac <memcpy>
 800b908:	ec4b ab10 	vmov	d0, sl, fp
 800b90c:	aa20      	add	r2, sp, #128	; 0x80
 800b90e:	a91f      	add	r1, sp, #124	; 0x7c
 800b910:	4620      	mov	r0, r4
 800b912:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b916:	f002 fa3f 	bl	800dd98 <__d2b>
 800b91a:	901e      	str	r0, [sp, #120]	; 0x78
 800b91c:	2800      	cmp	r0, #0
 800b91e:	f43f aefb 	beq.w	800b718 <_strtod_l+0x498>
 800b922:	2101      	movs	r1, #1
 800b924:	4620      	mov	r0, r4
 800b926:	f001 ff95 	bl	800d854 <__i2b>
 800b92a:	4606      	mov	r6, r0
 800b92c:	2800      	cmp	r0, #0
 800b92e:	f43f aef3 	beq.w	800b718 <_strtod_l+0x498>
 800b932:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b934:	9904      	ldr	r1, [sp, #16]
 800b936:	2b00      	cmp	r3, #0
 800b938:	bfab      	itete	ge
 800b93a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b93c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b93e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b940:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b944:	bfac      	ite	ge
 800b946:	eb03 0902 	addge.w	r9, r3, r2
 800b94a:	1ad7      	sublt	r7, r2, r3
 800b94c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b94e:	eba3 0801 	sub.w	r8, r3, r1
 800b952:	4490      	add	r8, r2
 800b954:	4ba3      	ldr	r3, [pc, #652]	; (800bbe4 <_strtod_l+0x964>)
 800b956:	f108 38ff 	add.w	r8, r8, #4294967295
 800b95a:	4598      	cmp	r8, r3
 800b95c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b960:	f280 80cc 	bge.w	800bafc <_strtod_l+0x87c>
 800b964:	eba3 0308 	sub.w	r3, r3, r8
 800b968:	2b1f      	cmp	r3, #31
 800b96a:	eba2 0203 	sub.w	r2, r2, r3
 800b96e:	f04f 0101 	mov.w	r1, #1
 800b972:	f300 80b6 	bgt.w	800bae2 <_strtod_l+0x862>
 800b976:	fa01 f303 	lsl.w	r3, r1, r3
 800b97a:	9311      	str	r3, [sp, #68]	; 0x44
 800b97c:	2300      	movs	r3, #0
 800b97e:	930c      	str	r3, [sp, #48]	; 0x30
 800b980:	eb09 0802 	add.w	r8, r9, r2
 800b984:	9b04      	ldr	r3, [sp, #16]
 800b986:	45c1      	cmp	r9, r8
 800b988:	4417      	add	r7, r2
 800b98a:	441f      	add	r7, r3
 800b98c:	464b      	mov	r3, r9
 800b98e:	bfa8      	it	ge
 800b990:	4643      	movge	r3, r8
 800b992:	42bb      	cmp	r3, r7
 800b994:	bfa8      	it	ge
 800b996:	463b      	movge	r3, r7
 800b998:	2b00      	cmp	r3, #0
 800b99a:	bfc2      	ittt	gt
 800b99c:	eba8 0803 	subgt.w	r8, r8, r3
 800b9a0:	1aff      	subgt	r7, r7, r3
 800b9a2:	eba9 0903 	subgt.w	r9, r9, r3
 800b9a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	dd17      	ble.n	800b9dc <_strtod_l+0x75c>
 800b9ac:	4631      	mov	r1, r6
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f002 f80b 	bl	800d9cc <__pow5mult>
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	f43f aead 	beq.w	800b718 <_strtod_l+0x498>
 800b9be:	4601      	mov	r1, r0
 800b9c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f001 ff5c 	bl	800d880 <__multiply>
 800b9c8:	900f      	str	r0, [sp, #60]	; 0x3c
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	f43f aea4 	beq.w	800b718 <_strtod_l+0x498>
 800b9d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f001 fe38 	bl	800d648 <_Bfree>
 800b9d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9da:	931e      	str	r3, [sp, #120]	; 0x78
 800b9dc:	f1b8 0f00 	cmp.w	r8, #0
 800b9e0:	f300 8091 	bgt.w	800bb06 <_strtod_l+0x886>
 800b9e4:	9b08      	ldr	r3, [sp, #32]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	dd08      	ble.n	800b9fc <_strtod_l+0x77c>
 800b9ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b9ec:	9907      	ldr	r1, [sp, #28]
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f001 ffec 	bl	800d9cc <__pow5mult>
 800b9f4:	9007      	str	r0, [sp, #28]
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	f43f ae8e 	beq.w	800b718 <_strtod_l+0x498>
 800b9fc:	2f00      	cmp	r7, #0
 800b9fe:	dd08      	ble.n	800ba12 <_strtod_l+0x792>
 800ba00:	9907      	ldr	r1, [sp, #28]
 800ba02:	463a      	mov	r2, r7
 800ba04:	4620      	mov	r0, r4
 800ba06:	f002 f83b 	bl	800da80 <__lshift>
 800ba0a:	9007      	str	r0, [sp, #28]
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	f43f ae83 	beq.w	800b718 <_strtod_l+0x498>
 800ba12:	f1b9 0f00 	cmp.w	r9, #0
 800ba16:	dd08      	ble.n	800ba2a <_strtod_l+0x7aa>
 800ba18:	4631      	mov	r1, r6
 800ba1a:	464a      	mov	r2, r9
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f002 f82f 	bl	800da80 <__lshift>
 800ba22:	4606      	mov	r6, r0
 800ba24:	2800      	cmp	r0, #0
 800ba26:	f43f ae77 	beq.w	800b718 <_strtod_l+0x498>
 800ba2a:	9a07      	ldr	r2, [sp, #28]
 800ba2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f002 f8ae 	bl	800db90 <__mdiff>
 800ba34:	4605      	mov	r5, r0
 800ba36:	2800      	cmp	r0, #0
 800ba38:	f43f ae6e 	beq.w	800b718 <_strtod_l+0x498>
 800ba3c:	68c3      	ldr	r3, [r0, #12]
 800ba3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba40:	2300      	movs	r3, #0
 800ba42:	60c3      	str	r3, [r0, #12]
 800ba44:	4631      	mov	r1, r6
 800ba46:	f002 f887 	bl	800db58 <__mcmp>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	da65      	bge.n	800bb1a <_strtod_l+0x89a>
 800ba4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba50:	ea53 030a 	orrs.w	r3, r3, sl
 800ba54:	f040 8087 	bne.w	800bb66 <_strtod_l+0x8e6>
 800ba58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f040 8082 	bne.w	800bb66 <_strtod_l+0x8e6>
 800ba62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba66:	0d1b      	lsrs	r3, r3, #20
 800ba68:	051b      	lsls	r3, r3, #20
 800ba6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ba6e:	d97a      	bls.n	800bb66 <_strtod_l+0x8e6>
 800ba70:	696b      	ldr	r3, [r5, #20]
 800ba72:	b913      	cbnz	r3, 800ba7a <_strtod_l+0x7fa>
 800ba74:	692b      	ldr	r3, [r5, #16]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	dd75      	ble.n	800bb66 <_strtod_l+0x8e6>
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f001 fffe 	bl	800da80 <__lshift>
 800ba84:	4631      	mov	r1, r6
 800ba86:	4605      	mov	r5, r0
 800ba88:	f002 f866 	bl	800db58 <__mcmp>
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	dd6a      	ble.n	800bb66 <_strtod_l+0x8e6>
 800ba90:	9904      	ldr	r1, [sp, #16]
 800ba92:	4a55      	ldr	r2, [pc, #340]	; (800bbe8 <_strtod_l+0x968>)
 800ba94:	465b      	mov	r3, fp
 800ba96:	2900      	cmp	r1, #0
 800ba98:	f000 8085 	beq.w	800bba6 <_strtod_l+0x926>
 800ba9c:	ea02 010b 	and.w	r1, r2, fp
 800baa0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800baa4:	dc7f      	bgt.n	800bba6 <_strtod_l+0x926>
 800baa6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800baaa:	f77f aeaa 	ble.w	800b802 <_strtod_l+0x582>
 800baae:	4a4f      	ldr	r2, [pc, #316]	; (800bbec <_strtod_l+0x96c>)
 800bab0:	2300      	movs	r3, #0
 800bab2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800bab6:	4650      	mov	r0, sl
 800bab8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800babc:	4659      	mov	r1, fp
 800babe:	f7f4 fd9b 	bl	80005f8 <__aeabi_dmul>
 800bac2:	460b      	mov	r3, r1
 800bac4:	4303      	orrs	r3, r0
 800bac6:	bf08      	it	eq
 800bac8:	2322      	moveq	r3, #34	; 0x22
 800baca:	4682      	mov	sl, r0
 800bacc:	468b      	mov	fp, r1
 800bace:	bf08      	it	eq
 800bad0:	6023      	streq	r3, [r4, #0]
 800bad2:	e62b      	b.n	800b72c <_strtod_l+0x4ac>
 800bad4:	f04f 32ff 	mov.w	r2, #4294967295
 800bad8:	fa02 f303 	lsl.w	r3, r2, r3
 800badc:	ea03 0a0a 	and.w	sl, r3, sl
 800bae0:	e6de      	b.n	800b8a0 <_strtod_l+0x620>
 800bae2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bae6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800baea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800baee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800baf2:	fa01 f308 	lsl.w	r3, r1, r8
 800baf6:	930c      	str	r3, [sp, #48]	; 0x30
 800baf8:	9111      	str	r1, [sp, #68]	; 0x44
 800bafa:	e741      	b.n	800b980 <_strtod_l+0x700>
 800bafc:	2300      	movs	r3, #0
 800bafe:	930c      	str	r3, [sp, #48]	; 0x30
 800bb00:	2301      	movs	r3, #1
 800bb02:	9311      	str	r3, [sp, #68]	; 0x44
 800bb04:	e73c      	b.n	800b980 <_strtod_l+0x700>
 800bb06:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bb08:	4642      	mov	r2, r8
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f001 ffb8 	bl	800da80 <__lshift>
 800bb10:	901e      	str	r0, [sp, #120]	; 0x78
 800bb12:	2800      	cmp	r0, #0
 800bb14:	f47f af66 	bne.w	800b9e4 <_strtod_l+0x764>
 800bb18:	e5fe      	b.n	800b718 <_strtod_l+0x498>
 800bb1a:	465f      	mov	r7, fp
 800bb1c:	d16e      	bne.n	800bbfc <_strtod_l+0x97c>
 800bb1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb24:	b342      	cbz	r2, 800bb78 <_strtod_l+0x8f8>
 800bb26:	4a32      	ldr	r2, [pc, #200]	; (800bbf0 <_strtod_l+0x970>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d128      	bne.n	800bb7e <_strtod_l+0x8fe>
 800bb2c:	9b04      	ldr	r3, [sp, #16]
 800bb2e:	4650      	mov	r0, sl
 800bb30:	b1eb      	cbz	r3, 800bb6e <_strtod_l+0x8ee>
 800bb32:	4a2d      	ldr	r2, [pc, #180]	; (800bbe8 <_strtod_l+0x968>)
 800bb34:	403a      	ands	r2, r7
 800bb36:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bb3a:	f04f 31ff 	mov.w	r1, #4294967295
 800bb3e:	d819      	bhi.n	800bb74 <_strtod_l+0x8f4>
 800bb40:	0d12      	lsrs	r2, r2, #20
 800bb42:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bb46:	fa01 f303 	lsl.w	r3, r1, r3
 800bb4a:	4298      	cmp	r0, r3
 800bb4c:	d117      	bne.n	800bb7e <_strtod_l+0x8fe>
 800bb4e:	4b29      	ldr	r3, [pc, #164]	; (800bbf4 <_strtod_l+0x974>)
 800bb50:	429f      	cmp	r7, r3
 800bb52:	d102      	bne.n	800bb5a <_strtod_l+0x8da>
 800bb54:	3001      	adds	r0, #1
 800bb56:	f43f addf 	beq.w	800b718 <_strtod_l+0x498>
 800bb5a:	4b23      	ldr	r3, [pc, #140]	; (800bbe8 <_strtod_l+0x968>)
 800bb5c:	403b      	ands	r3, r7
 800bb5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bb62:	f04f 0a00 	mov.w	sl, #0
 800bb66:	9b04      	ldr	r3, [sp, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1a0      	bne.n	800baae <_strtod_l+0x82e>
 800bb6c:	e5de      	b.n	800b72c <_strtod_l+0x4ac>
 800bb6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb72:	e7ea      	b.n	800bb4a <_strtod_l+0x8ca>
 800bb74:	460b      	mov	r3, r1
 800bb76:	e7e8      	b.n	800bb4a <_strtod_l+0x8ca>
 800bb78:	ea53 030a 	orrs.w	r3, r3, sl
 800bb7c:	d088      	beq.n	800ba90 <_strtod_l+0x810>
 800bb7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb80:	b1db      	cbz	r3, 800bbba <_strtod_l+0x93a>
 800bb82:	423b      	tst	r3, r7
 800bb84:	d0ef      	beq.n	800bb66 <_strtod_l+0x8e6>
 800bb86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb88:	9a04      	ldr	r2, [sp, #16]
 800bb8a:	4650      	mov	r0, sl
 800bb8c:	4659      	mov	r1, fp
 800bb8e:	b1c3      	cbz	r3, 800bbc2 <_strtod_l+0x942>
 800bb90:	f7ff fb57 	bl	800b242 <sulp>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb9c:	f7f4 fb76 	bl	800028c <__adddf3>
 800bba0:	4682      	mov	sl, r0
 800bba2:	468b      	mov	fp, r1
 800bba4:	e7df      	b.n	800bb66 <_strtod_l+0x8e6>
 800bba6:	4013      	ands	r3, r2
 800bba8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bbac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bbb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bbb4:	f04f 3aff 	mov.w	sl, #4294967295
 800bbb8:	e7d5      	b.n	800bb66 <_strtod_l+0x8e6>
 800bbba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbbc:	ea13 0f0a 	tst.w	r3, sl
 800bbc0:	e7e0      	b.n	800bb84 <_strtod_l+0x904>
 800bbc2:	f7ff fb3e 	bl	800b242 <sulp>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bbce:	f7f4 fb5b 	bl	8000288 <__aeabi_dsub>
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4682      	mov	sl, r0
 800bbd8:	468b      	mov	fp, r1
 800bbda:	f7f4 ff75 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d0c1      	beq.n	800bb66 <_strtod_l+0x8e6>
 800bbe2:	e60e      	b.n	800b802 <_strtod_l+0x582>
 800bbe4:	fffffc02 	.word	0xfffffc02
 800bbe8:	7ff00000 	.word	0x7ff00000
 800bbec:	39500000 	.word	0x39500000
 800bbf0:	000fffff 	.word	0x000fffff
 800bbf4:	7fefffff 	.word	0x7fefffff
 800bbf8:	0800fa20 	.word	0x0800fa20
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	4628      	mov	r0, r5
 800bc00:	f002 f926 	bl	800de50 <__ratio>
 800bc04:	ec59 8b10 	vmov	r8, r9, d0
 800bc08:	ee10 0a10 	vmov	r0, s0
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc12:	4649      	mov	r1, r9
 800bc14:	f7f4 ff6c 	bl	8000af0 <__aeabi_dcmple>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d07c      	beq.n	800bd16 <_strtod_l+0xa96>
 800bc1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d04c      	beq.n	800bcbc <_strtod_l+0xa3c>
 800bc22:	4b95      	ldr	r3, [pc, #596]	; (800be78 <_strtod_l+0xbf8>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bc2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800be78 <_strtod_l+0xbf8>
 800bc2e:	f04f 0800 	mov.w	r8, #0
 800bc32:	4b92      	ldr	r3, [pc, #584]	; (800be7c <_strtod_l+0xbfc>)
 800bc34:	403b      	ands	r3, r7
 800bc36:	9311      	str	r3, [sp, #68]	; 0x44
 800bc38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc3a:	4b91      	ldr	r3, [pc, #580]	; (800be80 <_strtod_l+0xc00>)
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	f040 80b2 	bne.w	800bda6 <_strtod_l+0xb26>
 800bc42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc4a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bc4e:	ec4b ab10 	vmov	d0, sl, fp
 800bc52:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800bc56:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc5a:	f002 f821 	bl	800dca0 <__ulp>
 800bc5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc62:	ec53 2b10 	vmov	r2, r3, d0
 800bc66:	f7f4 fcc7 	bl	80005f8 <__aeabi_dmul>
 800bc6a:	4652      	mov	r2, sl
 800bc6c:	465b      	mov	r3, fp
 800bc6e:	f7f4 fb0d 	bl	800028c <__adddf3>
 800bc72:	460b      	mov	r3, r1
 800bc74:	4981      	ldr	r1, [pc, #516]	; (800be7c <_strtod_l+0xbfc>)
 800bc76:	4a83      	ldr	r2, [pc, #524]	; (800be84 <_strtod_l+0xc04>)
 800bc78:	4019      	ands	r1, r3
 800bc7a:	4291      	cmp	r1, r2
 800bc7c:	4682      	mov	sl, r0
 800bc7e:	d95e      	bls.n	800bd3e <_strtod_l+0xabe>
 800bc80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc82:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d103      	bne.n	800bc92 <_strtod_l+0xa12>
 800bc8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	f43f ad43 	beq.w	800b718 <_strtod_l+0x498>
 800bc92:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800be90 <_strtod_l+0xc10>
 800bc96:	f04f 3aff 	mov.w	sl, #4294967295
 800bc9a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f001 fcd3 	bl	800d648 <_Bfree>
 800bca2:	9907      	ldr	r1, [sp, #28]
 800bca4:	4620      	mov	r0, r4
 800bca6:	f001 fccf 	bl	800d648 <_Bfree>
 800bcaa:	4631      	mov	r1, r6
 800bcac:	4620      	mov	r0, r4
 800bcae:	f001 fccb 	bl	800d648 <_Bfree>
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f001 fcc7 	bl	800d648 <_Bfree>
 800bcba:	e613      	b.n	800b8e4 <_strtod_l+0x664>
 800bcbc:	f1ba 0f00 	cmp.w	sl, #0
 800bcc0:	d11b      	bne.n	800bcfa <_strtod_l+0xa7a>
 800bcc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcc6:	b9f3      	cbnz	r3, 800bd06 <_strtod_l+0xa86>
 800bcc8:	4b6b      	ldr	r3, [pc, #428]	; (800be78 <_strtod_l+0xbf8>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	4640      	mov	r0, r8
 800bcce:	4649      	mov	r1, r9
 800bcd0:	f7f4 ff04 	bl	8000adc <__aeabi_dcmplt>
 800bcd4:	b9d0      	cbnz	r0, 800bd0c <_strtod_l+0xa8c>
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	4649      	mov	r1, r9
 800bcda:	4b6b      	ldr	r3, [pc, #428]	; (800be88 <_strtod_l+0xc08>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f7f4 fc8b 	bl	80005f8 <__aeabi_dmul>
 800bce2:	4680      	mov	r8, r0
 800bce4:	4689      	mov	r9, r1
 800bce6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bcea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800bcee:	931b      	str	r3, [sp, #108]	; 0x6c
 800bcf0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800bcf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bcf8:	e79b      	b.n	800bc32 <_strtod_l+0x9b2>
 800bcfa:	f1ba 0f01 	cmp.w	sl, #1
 800bcfe:	d102      	bne.n	800bd06 <_strtod_l+0xa86>
 800bd00:	2f00      	cmp	r7, #0
 800bd02:	f43f ad7e 	beq.w	800b802 <_strtod_l+0x582>
 800bd06:	4b61      	ldr	r3, [pc, #388]	; (800be8c <_strtod_l+0xc0c>)
 800bd08:	2200      	movs	r2, #0
 800bd0a:	e78c      	b.n	800bc26 <_strtod_l+0x9a6>
 800bd0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800be88 <_strtod_l+0xc08>
 800bd10:	f04f 0800 	mov.w	r8, #0
 800bd14:	e7e7      	b.n	800bce6 <_strtod_l+0xa66>
 800bd16:	4b5c      	ldr	r3, [pc, #368]	; (800be88 <_strtod_l+0xc08>)
 800bd18:	4640      	mov	r0, r8
 800bd1a:	4649      	mov	r1, r9
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f7f4 fc6b 	bl	80005f8 <__aeabi_dmul>
 800bd22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd24:	4680      	mov	r8, r0
 800bd26:	4689      	mov	r9, r1
 800bd28:	b933      	cbnz	r3, 800bd38 <_strtod_l+0xab8>
 800bd2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd2e:	9012      	str	r0, [sp, #72]	; 0x48
 800bd30:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd32:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bd36:	e7dd      	b.n	800bcf4 <_strtod_l+0xa74>
 800bd38:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800bd3c:	e7f9      	b.n	800bd32 <_strtod_l+0xab2>
 800bd3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bd42:	9b04      	ldr	r3, [sp, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1a8      	bne.n	800bc9a <_strtod_l+0xa1a>
 800bd48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd4e:	0d1b      	lsrs	r3, r3, #20
 800bd50:	051b      	lsls	r3, r3, #20
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d1a1      	bne.n	800bc9a <_strtod_l+0xa1a>
 800bd56:	4640      	mov	r0, r8
 800bd58:	4649      	mov	r1, r9
 800bd5a:	f7f4 ffad 	bl	8000cb8 <__aeabi_d2lz>
 800bd5e:	f7f4 fc1d 	bl	800059c <__aeabi_l2d>
 800bd62:	4602      	mov	r2, r0
 800bd64:	460b      	mov	r3, r1
 800bd66:	4640      	mov	r0, r8
 800bd68:	4649      	mov	r1, r9
 800bd6a:	f7f4 fa8d 	bl	8000288 <__aeabi_dsub>
 800bd6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd74:	ea43 030a 	orr.w	r3, r3, sl
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	4680      	mov	r8, r0
 800bd7c:	4689      	mov	r9, r1
 800bd7e:	d053      	beq.n	800be28 <_strtod_l+0xba8>
 800bd80:	a335      	add	r3, pc, #212	; (adr r3, 800be58 <_strtod_l+0xbd8>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 fea9 	bl	8000adc <__aeabi_dcmplt>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	f47f acce 	bne.w	800b72c <_strtod_l+0x4ac>
 800bd90:	a333      	add	r3, pc, #204	; (adr r3, 800be60 <_strtod_l+0xbe0>)
 800bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd96:	4640      	mov	r0, r8
 800bd98:	4649      	mov	r1, r9
 800bd9a:	f7f4 febd 	bl	8000b18 <__aeabi_dcmpgt>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	f43f af7b 	beq.w	800bc9a <_strtod_l+0xa1a>
 800bda4:	e4c2      	b.n	800b72c <_strtod_l+0x4ac>
 800bda6:	9b04      	ldr	r3, [sp, #16]
 800bda8:	b333      	cbz	r3, 800bdf8 <_strtod_l+0xb78>
 800bdaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bdb0:	d822      	bhi.n	800bdf8 <_strtod_l+0xb78>
 800bdb2:	a32d      	add	r3, pc, #180	; (adr r3, 800be68 <_strtod_l+0xbe8>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	4640      	mov	r0, r8
 800bdba:	4649      	mov	r1, r9
 800bdbc:	f7f4 fe98 	bl	8000af0 <__aeabi_dcmple>
 800bdc0:	b1a0      	cbz	r0, 800bdec <_strtod_l+0xb6c>
 800bdc2:	4649      	mov	r1, r9
 800bdc4:	4640      	mov	r0, r8
 800bdc6:	f7f4 feef 	bl	8000ba8 <__aeabi_d2uiz>
 800bdca:	2801      	cmp	r0, #1
 800bdcc:	bf38      	it	cc
 800bdce:	2001      	movcc	r0, #1
 800bdd0:	f7f4 fb98 	bl	8000504 <__aeabi_ui2d>
 800bdd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdd6:	4680      	mov	r8, r0
 800bdd8:	4689      	mov	r9, r1
 800bdda:	bb13      	cbnz	r3, 800be22 <_strtod_l+0xba2>
 800bddc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bde0:	9014      	str	r0, [sp, #80]	; 0x50
 800bde2:	9315      	str	r3, [sp, #84]	; 0x54
 800bde4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bde8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bdec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bdf0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bdf4:	1a9b      	subs	r3, r3, r2
 800bdf6:	930d      	str	r3, [sp, #52]	; 0x34
 800bdf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bdfc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800be00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be04:	f001 ff4c 	bl	800dca0 <__ulp>
 800be08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be0c:	ec53 2b10 	vmov	r2, r3, d0
 800be10:	f7f4 fbf2 	bl	80005f8 <__aeabi_dmul>
 800be14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800be18:	f7f4 fa38 	bl	800028c <__adddf3>
 800be1c:	4682      	mov	sl, r0
 800be1e:	468b      	mov	fp, r1
 800be20:	e78f      	b.n	800bd42 <_strtod_l+0xac2>
 800be22:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800be26:	e7dd      	b.n	800bde4 <_strtod_l+0xb64>
 800be28:	a311      	add	r3, pc, #68	; (adr r3, 800be70 <_strtod_l+0xbf0>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	f7f4 fe55 	bl	8000adc <__aeabi_dcmplt>
 800be32:	e7b4      	b.n	800bd9e <_strtod_l+0xb1e>
 800be34:	2300      	movs	r3, #0
 800be36:	930e      	str	r3, [sp, #56]	; 0x38
 800be38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800be3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be3c:	6013      	str	r3, [r2, #0]
 800be3e:	f7ff ba65 	b.w	800b30c <_strtod_l+0x8c>
 800be42:	2b65      	cmp	r3, #101	; 0x65
 800be44:	f43f ab5d 	beq.w	800b502 <_strtod_l+0x282>
 800be48:	2b45      	cmp	r3, #69	; 0x45
 800be4a:	f43f ab5a 	beq.w	800b502 <_strtod_l+0x282>
 800be4e:	2201      	movs	r2, #1
 800be50:	f7ff bb92 	b.w	800b578 <_strtod_l+0x2f8>
 800be54:	f3af 8000 	nop.w
 800be58:	94a03595 	.word	0x94a03595
 800be5c:	3fdfffff 	.word	0x3fdfffff
 800be60:	35afe535 	.word	0x35afe535
 800be64:	3fe00000 	.word	0x3fe00000
 800be68:	ffc00000 	.word	0xffc00000
 800be6c:	41dfffff 	.word	0x41dfffff
 800be70:	94a03595 	.word	0x94a03595
 800be74:	3fcfffff 	.word	0x3fcfffff
 800be78:	3ff00000 	.word	0x3ff00000
 800be7c:	7ff00000 	.word	0x7ff00000
 800be80:	7fe00000 	.word	0x7fe00000
 800be84:	7c9fffff 	.word	0x7c9fffff
 800be88:	3fe00000 	.word	0x3fe00000
 800be8c:	bff00000 	.word	0xbff00000
 800be90:	7fefffff 	.word	0x7fefffff

0800be94 <_strtod_r>:
 800be94:	4b01      	ldr	r3, [pc, #4]	; (800be9c <_strtod_r+0x8>)
 800be96:	f7ff b9f3 	b.w	800b280 <_strtod_l>
 800be9a:	bf00      	nop
 800be9c:	200000e0 	.word	0x200000e0

0800bea0 <strtok>:
 800bea0:	4b16      	ldr	r3, [pc, #88]	; (800befc <strtok+0x5c>)
 800bea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bea4:	681e      	ldr	r6, [r3, #0]
 800bea6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800bea8:	4605      	mov	r5, r0
 800beaa:	b9fc      	cbnz	r4, 800beec <strtok+0x4c>
 800beac:	2050      	movs	r0, #80	; 0x50
 800beae:	9101      	str	r1, [sp, #4]
 800beb0:	f001 fb62 	bl	800d578 <malloc>
 800beb4:	9901      	ldr	r1, [sp, #4]
 800beb6:	65b0      	str	r0, [r6, #88]	; 0x58
 800beb8:	4602      	mov	r2, r0
 800beba:	b920      	cbnz	r0, 800bec6 <strtok+0x26>
 800bebc:	4b10      	ldr	r3, [pc, #64]	; (800bf00 <strtok+0x60>)
 800bebe:	4811      	ldr	r0, [pc, #68]	; (800bf04 <strtok+0x64>)
 800bec0:	2157      	movs	r1, #87	; 0x57
 800bec2:	f000 f91b 	bl	800c0fc <__assert_func>
 800bec6:	e9c0 4400 	strd	r4, r4, [r0]
 800beca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bece:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bed2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bed6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800beda:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bede:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800bee2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bee6:	6184      	str	r4, [r0, #24]
 800bee8:	7704      	strb	r4, [r0, #28]
 800beea:	6244      	str	r4, [r0, #36]	; 0x24
 800beec:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800beee:	2301      	movs	r3, #1
 800bef0:	4628      	mov	r0, r5
 800bef2:	b002      	add	sp, #8
 800bef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bef8:	f000 b806 	b.w	800bf08 <__strtok_r>
 800befc:	20000078 	.word	0x20000078
 800bf00:	0800fa48 	.word	0x0800fa48
 800bf04:	0800fa5f 	.word	0x0800fa5f

0800bf08 <__strtok_r>:
 800bf08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf0a:	b908      	cbnz	r0, 800bf10 <__strtok_r+0x8>
 800bf0c:	6810      	ldr	r0, [r2, #0]
 800bf0e:	b188      	cbz	r0, 800bf34 <__strtok_r+0x2c>
 800bf10:	4604      	mov	r4, r0
 800bf12:	4620      	mov	r0, r4
 800bf14:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bf18:	460f      	mov	r7, r1
 800bf1a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bf1e:	b91e      	cbnz	r6, 800bf28 <__strtok_r+0x20>
 800bf20:	b965      	cbnz	r5, 800bf3c <__strtok_r+0x34>
 800bf22:	6015      	str	r5, [r2, #0]
 800bf24:	4628      	mov	r0, r5
 800bf26:	e005      	b.n	800bf34 <__strtok_r+0x2c>
 800bf28:	42b5      	cmp	r5, r6
 800bf2a:	d1f6      	bne.n	800bf1a <__strtok_r+0x12>
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1f0      	bne.n	800bf12 <__strtok_r+0xa>
 800bf30:	6014      	str	r4, [r2, #0]
 800bf32:	7003      	strb	r3, [r0, #0]
 800bf34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf36:	461c      	mov	r4, r3
 800bf38:	e00c      	b.n	800bf54 <__strtok_r+0x4c>
 800bf3a:	b915      	cbnz	r5, 800bf42 <__strtok_r+0x3a>
 800bf3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf40:	460e      	mov	r6, r1
 800bf42:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bf46:	42ab      	cmp	r3, r5
 800bf48:	d1f7      	bne.n	800bf3a <__strtok_r+0x32>
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d0f3      	beq.n	800bf36 <__strtok_r+0x2e>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bf54:	6014      	str	r4, [r2, #0]
 800bf56:	e7ed      	b.n	800bf34 <__strtok_r+0x2c>

0800bf58 <_strtol_l.isra.0>:
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf5e:	d001      	beq.n	800bf64 <_strtol_l.isra.0+0xc>
 800bf60:	2b24      	cmp	r3, #36	; 0x24
 800bf62:	d906      	bls.n	800bf72 <_strtol_l.isra.0+0x1a>
 800bf64:	f7fe fa2a 	bl	800a3bc <__errno>
 800bf68:	2316      	movs	r3, #22
 800bf6a:	6003      	str	r3, [r0, #0]
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf72:	4f3a      	ldr	r7, [pc, #232]	; (800c05c <_strtol_l.isra.0+0x104>)
 800bf74:	468e      	mov	lr, r1
 800bf76:	4676      	mov	r6, lr
 800bf78:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bf7c:	5de5      	ldrb	r5, [r4, r7]
 800bf7e:	f015 0508 	ands.w	r5, r5, #8
 800bf82:	d1f8      	bne.n	800bf76 <_strtol_l.isra.0+0x1e>
 800bf84:	2c2d      	cmp	r4, #45	; 0x2d
 800bf86:	d134      	bne.n	800bff2 <_strtol_l.isra.0+0x9a>
 800bf88:	f89e 4000 	ldrb.w	r4, [lr]
 800bf8c:	f04f 0801 	mov.w	r8, #1
 800bf90:	f106 0e02 	add.w	lr, r6, #2
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d05c      	beq.n	800c052 <_strtol_l.isra.0+0xfa>
 800bf98:	2b10      	cmp	r3, #16
 800bf9a:	d10c      	bne.n	800bfb6 <_strtol_l.isra.0+0x5e>
 800bf9c:	2c30      	cmp	r4, #48	; 0x30
 800bf9e:	d10a      	bne.n	800bfb6 <_strtol_l.isra.0+0x5e>
 800bfa0:	f89e 4000 	ldrb.w	r4, [lr]
 800bfa4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bfa8:	2c58      	cmp	r4, #88	; 0x58
 800bfaa:	d14d      	bne.n	800c048 <_strtol_l.isra.0+0xf0>
 800bfac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800bfb0:	2310      	movs	r3, #16
 800bfb2:	f10e 0e02 	add.w	lr, lr, #2
 800bfb6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800bfba:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bfbe:	2600      	movs	r6, #0
 800bfc0:	fbbc f9f3 	udiv	r9, ip, r3
 800bfc4:	4635      	mov	r5, r6
 800bfc6:	fb03 ca19 	mls	sl, r3, r9, ip
 800bfca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bfce:	2f09      	cmp	r7, #9
 800bfd0:	d818      	bhi.n	800c004 <_strtol_l.isra.0+0xac>
 800bfd2:	463c      	mov	r4, r7
 800bfd4:	42a3      	cmp	r3, r4
 800bfd6:	dd24      	ble.n	800c022 <_strtol_l.isra.0+0xca>
 800bfd8:	2e00      	cmp	r6, #0
 800bfda:	db1f      	blt.n	800c01c <_strtol_l.isra.0+0xc4>
 800bfdc:	45a9      	cmp	r9, r5
 800bfde:	d31d      	bcc.n	800c01c <_strtol_l.isra.0+0xc4>
 800bfe0:	d101      	bne.n	800bfe6 <_strtol_l.isra.0+0x8e>
 800bfe2:	45a2      	cmp	sl, r4
 800bfe4:	db1a      	blt.n	800c01c <_strtol_l.isra.0+0xc4>
 800bfe6:	fb05 4503 	mla	r5, r5, r3, r4
 800bfea:	2601      	movs	r6, #1
 800bfec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bff0:	e7eb      	b.n	800bfca <_strtol_l.isra.0+0x72>
 800bff2:	2c2b      	cmp	r4, #43	; 0x2b
 800bff4:	bf08      	it	eq
 800bff6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800bffa:	46a8      	mov	r8, r5
 800bffc:	bf08      	it	eq
 800bffe:	f106 0e02 	addeq.w	lr, r6, #2
 800c002:	e7c7      	b.n	800bf94 <_strtol_l.isra.0+0x3c>
 800c004:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c008:	2f19      	cmp	r7, #25
 800c00a:	d801      	bhi.n	800c010 <_strtol_l.isra.0+0xb8>
 800c00c:	3c37      	subs	r4, #55	; 0x37
 800c00e:	e7e1      	b.n	800bfd4 <_strtol_l.isra.0+0x7c>
 800c010:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c014:	2f19      	cmp	r7, #25
 800c016:	d804      	bhi.n	800c022 <_strtol_l.isra.0+0xca>
 800c018:	3c57      	subs	r4, #87	; 0x57
 800c01a:	e7db      	b.n	800bfd4 <_strtol_l.isra.0+0x7c>
 800c01c:	f04f 36ff 	mov.w	r6, #4294967295
 800c020:	e7e4      	b.n	800bfec <_strtol_l.isra.0+0x94>
 800c022:	2e00      	cmp	r6, #0
 800c024:	da05      	bge.n	800c032 <_strtol_l.isra.0+0xda>
 800c026:	2322      	movs	r3, #34	; 0x22
 800c028:	6003      	str	r3, [r0, #0]
 800c02a:	4665      	mov	r5, ip
 800c02c:	b942      	cbnz	r2, 800c040 <_strtol_l.isra.0+0xe8>
 800c02e:	4628      	mov	r0, r5
 800c030:	e79d      	b.n	800bf6e <_strtol_l.isra.0+0x16>
 800c032:	f1b8 0f00 	cmp.w	r8, #0
 800c036:	d000      	beq.n	800c03a <_strtol_l.isra.0+0xe2>
 800c038:	426d      	negs	r5, r5
 800c03a:	2a00      	cmp	r2, #0
 800c03c:	d0f7      	beq.n	800c02e <_strtol_l.isra.0+0xd6>
 800c03e:	b10e      	cbz	r6, 800c044 <_strtol_l.isra.0+0xec>
 800c040:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c044:	6011      	str	r1, [r2, #0]
 800c046:	e7f2      	b.n	800c02e <_strtol_l.isra.0+0xd6>
 800c048:	2430      	movs	r4, #48	; 0x30
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1b3      	bne.n	800bfb6 <_strtol_l.isra.0+0x5e>
 800c04e:	2308      	movs	r3, #8
 800c050:	e7b1      	b.n	800bfb6 <_strtol_l.isra.0+0x5e>
 800c052:	2c30      	cmp	r4, #48	; 0x30
 800c054:	d0a4      	beq.n	800bfa0 <_strtol_l.isra.0+0x48>
 800c056:	230a      	movs	r3, #10
 800c058:	e7ad      	b.n	800bfb6 <_strtol_l.isra.0+0x5e>
 800c05a:	bf00      	nop
 800c05c:	0800fafd 	.word	0x0800fafd

0800c060 <_strtol_r>:
 800c060:	f7ff bf7a 	b.w	800bf58 <_strtol_l.isra.0>

0800c064 <_vsniprintf_r>:
 800c064:	b530      	push	{r4, r5, lr}
 800c066:	1e14      	subs	r4, r2, #0
 800c068:	4605      	mov	r5, r0
 800c06a:	b09b      	sub	sp, #108	; 0x6c
 800c06c:	4618      	mov	r0, r3
 800c06e:	da05      	bge.n	800c07c <_vsniprintf_r+0x18>
 800c070:	238b      	movs	r3, #139	; 0x8b
 800c072:	602b      	str	r3, [r5, #0]
 800c074:	f04f 30ff 	mov.w	r0, #4294967295
 800c078:	b01b      	add	sp, #108	; 0x6c
 800c07a:	bd30      	pop	{r4, r5, pc}
 800c07c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c080:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c084:	bf14      	ite	ne
 800c086:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c08a:	4623      	moveq	r3, r4
 800c08c:	9302      	str	r3, [sp, #8]
 800c08e:	9305      	str	r3, [sp, #20]
 800c090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c094:	9100      	str	r1, [sp, #0]
 800c096:	9104      	str	r1, [sp, #16]
 800c098:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c09c:	4602      	mov	r2, r0
 800c09e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c0a0:	4669      	mov	r1, sp
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f002 f860 	bl	800e168 <_svfiprintf_r>
 800c0a8:	1c43      	adds	r3, r0, #1
 800c0aa:	bfbc      	itt	lt
 800c0ac:	238b      	movlt	r3, #139	; 0x8b
 800c0ae:	602b      	strlt	r3, [r5, #0]
 800c0b0:	2c00      	cmp	r4, #0
 800c0b2:	d0e1      	beq.n	800c078 <_vsniprintf_r+0x14>
 800c0b4:	9b00      	ldr	r3, [sp, #0]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	701a      	strb	r2, [r3, #0]
 800c0ba:	e7dd      	b.n	800c078 <_vsniprintf_r+0x14>

0800c0bc <vsniprintf>:
 800c0bc:	b507      	push	{r0, r1, r2, lr}
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	460a      	mov	r2, r1
 800c0c4:	4601      	mov	r1, r0
 800c0c6:	4803      	ldr	r0, [pc, #12]	; (800c0d4 <vsniprintf+0x18>)
 800c0c8:	6800      	ldr	r0, [r0, #0]
 800c0ca:	f7ff ffcb 	bl	800c064 <_vsniprintf_r>
 800c0ce:	b003      	add	sp, #12
 800c0d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0d4:	20000078 	.word	0x20000078

0800c0d8 <_write_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4d07      	ldr	r5, [pc, #28]	; (800c0f8 <_write_r+0x20>)
 800c0dc:	4604      	mov	r4, r0
 800c0de:	4608      	mov	r0, r1
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	602a      	str	r2, [r5, #0]
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f7f6 f859 	bl	800219e <_write>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	d102      	bne.n	800c0f6 <_write_r+0x1e>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	b103      	cbz	r3, 800c0f6 <_write_r+0x1e>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	20000b18 	.word	0x20000b18

0800c0fc <__assert_func>:
 800c0fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0fe:	4614      	mov	r4, r2
 800c100:	461a      	mov	r2, r3
 800c102:	4b09      	ldr	r3, [pc, #36]	; (800c128 <__assert_func+0x2c>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4605      	mov	r5, r0
 800c108:	68d8      	ldr	r0, [r3, #12]
 800c10a:	b14c      	cbz	r4, 800c120 <__assert_func+0x24>
 800c10c:	4b07      	ldr	r3, [pc, #28]	; (800c12c <__assert_func+0x30>)
 800c10e:	9100      	str	r1, [sp, #0]
 800c110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c114:	4906      	ldr	r1, [pc, #24]	; (800c130 <__assert_func+0x34>)
 800c116:	462b      	mov	r3, r5
 800c118:	f000 fe96 	bl	800ce48 <fiprintf>
 800c11c:	f002 ff9a 	bl	800f054 <abort>
 800c120:	4b04      	ldr	r3, [pc, #16]	; (800c134 <__assert_func+0x38>)
 800c122:	461c      	mov	r4, r3
 800c124:	e7f3      	b.n	800c10e <__assert_func+0x12>
 800c126:	bf00      	nop
 800c128:	20000078 	.word	0x20000078
 800c12c:	0800fac0 	.word	0x0800fac0
 800c130:	0800facd 	.word	0x0800facd
 800c134:	0800fafb 	.word	0x0800fafb

0800c138 <_close_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d06      	ldr	r5, [pc, #24]	; (800c154 <_close_r+0x1c>)
 800c13c:	2300      	movs	r3, #0
 800c13e:	4604      	mov	r4, r0
 800c140:	4608      	mov	r0, r1
 800c142:	602b      	str	r3, [r5, #0]
 800c144:	f7f6 f847 	bl	80021d6 <_close>
 800c148:	1c43      	adds	r3, r0, #1
 800c14a:	d102      	bne.n	800c152 <_close_r+0x1a>
 800c14c:	682b      	ldr	r3, [r5, #0]
 800c14e:	b103      	cbz	r3, 800c152 <_close_r+0x1a>
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	bd38      	pop	{r3, r4, r5, pc}
 800c154:	20000b18 	.word	0x20000b18

0800c158 <quorem>:
 800c158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	6903      	ldr	r3, [r0, #16]
 800c15e:	690c      	ldr	r4, [r1, #16]
 800c160:	42a3      	cmp	r3, r4
 800c162:	4607      	mov	r7, r0
 800c164:	f2c0 8081 	blt.w	800c26a <quorem+0x112>
 800c168:	3c01      	subs	r4, #1
 800c16a:	f101 0814 	add.w	r8, r1, #20
 800c16e:	f100 0514 	add.w	r5, r0, #20
 800c172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c17c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c180:	3301      	adds	r3, #1
 800c182:	429a      	cmp	r2, r3
 800c184:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c188:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c18c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c190:	d331      	bcc.n	800c1f6 <quorem+0x9e>
 800c192:	f04f 0e00 	mov.w	lr, #0
 800c196:	4640      	mov	r0, r8
 800c198:	46ac      	mov	ip, r5
 800c19a:	46f2      	mov	sl, lr
 800c19c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1a0:	b293      	uxth	r3, r2
 800c1a2:	fb06 e303 	mla	r3, r6, r3, lr
 800c1a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	ebaa 0303 	sub.w	r3, sl, r3
 800c1b0:	0c12      	lsrs	r2, r2, #16
 800c1b2:	f8dc a000 	ldr.w	sl, [ip]
 800c1b6:	fb06 e202 	mla	r2, r6, r2, lr
 800c1ba:	fa13 f38a 	uxtah	r3, r3, sl
 800c1be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c1c2:	fa1f fa82 	uxth.w	sl, r2
 800c1c6:	f8dc 2000 	ldr.w	r2, [ip]
 800c1ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c1ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1d8:	4581      	cmp	r9, r0
 800c1da:	f84c 3b04 	str.w	r3, [ip], #4
 800c1de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c1e2:	d2db      	bcs.n	800c19c <quorem+0x44>
 800c1e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c1e8:	b92b      	cbnz	r3, 800c1f6 <quorem+0x9e>
 800c1ea:	9b01      	ldr	r3, [sp, #4]
 800c1ec:	3b04      	subs	r3, #4
 800c1ee:	429d      	cmp	r5, r3
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	d32e      	bcc.n	800c252 <quorem+0xfa>
 800c1f4:	613c      	str	r4, [r7, #16]
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	f001 fcae 	bl	800db58 <__mcmp>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	db24      	blt.n	800c24a <quorem+0xf2>
 800c200:	3601      	adds	r6, #1
 800c202:	4628      	mov	r0, r5
 800c204:	f04f 0c00 	mov.w	ip, #0
 800c208:	f858 2b04 	ldr.w	r2, [r8], #4
 800c20c:	f8d0 e000 	ldr.w	lr, [r0]
 800c210:	b293      	uxth	r3, r2
 800c212:	ebac 0303 	sub.w	r3, ip, r3
 800c216:	0c12      	lsrs	r2, r2, #16
 800c218:	fa13 f38e 	uxtah	r3, r3, lr
 800c21c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c224:	b29b      	uxth	r3, r3
 800c226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c22a:	45c1      	cmp	r9, r8
 800c22c:	f840 3b04 	str.w	r3, [r0], #4
 800c230:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c234:	d2e8      	bcs.n	800c208 <quorem+0xb0>
 800c236:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c23a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c23e:	b922      	cbnz	r2, 800c24a <quorem+0xf2>
 800c240:	3b04      	subs	r3, #4
 800c242:	429d      	cmp	r5, r3
 800c244:	461a      	mov	r2, r3
 800c246:	d30a      	bcc.n	800c25e <quorem+0x106>
 800c248:	613c      	str	r4, [r7, #16]
 800c24a:	4630      	mov	r0, r6
 800c24c:	b003      	add	sp, #12
 800c24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c252:	6812      	ldr	r2, [r2, #0]
 800c254:	3b04      	subs	r3, #4
 800c256:	2a00      	cmp	r2, #0
 800c258:	d1cc      	bne.n	800c1f4 <quorem+0x9c>
 800c25a:	3c01      	subs	r4, #1
 800c25c:	e7c7      	b.n	800c1ee <quorem+0x96>
 800c25e:	6812      	ldr	r2, [r2, #0]
 800c260:	3b04      	subs	r3, #4
 800c262:	2a00      	cmp	r2, #0
 800c264:	d1f0      	bne.n	800c248 <quorem+0xf0>
 800c266:	3c01      	subs	r4, #1
 800c268:	e7eb      	b.n	800c242 <quorem+0xea>
 800c26a:	2000      	movs	r0, #0
 800c26c:	e7ee      	b.n	800c24c <quorem+0xf4>
	...

0800c270 <_dtoa_r>:
 800c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	ed2d 8b02 	vpush	{d8}
 800c278:	ec57 6b10 	vmov	r6, r7, d0
 800c27c:	b095      	sub	sp, #84	; 0x54
 800c27e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c280:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c284:	9105      	str	r1, [sp, #20]
 800c286:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c28a:	4604      	mov	r4, r0
 800c28c:	9209      	str	r2, [sp, #36]	; 0x24
 800c28e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c290:	b975      	cbnz	r5, 800c2b0 <_dtoa_r+0x40>
 800c292:	2010      	movs	r0, #16
 800c294:	f001 f970 	bl	800d578 <malloc>
 800c298:	4602      	mov	r2, r0
 800c29a:	6260      	str	r0, [r4, #36]	; 0x24
 800c29c:	b920      	cbnz	r0, 800c2a8 <_dtoa_r+0x38>
 800c29e:	4bb2      	ldr	r3, [pc, #712]	; (800c568 <_dtoa_r+0x2f8>)
 800c2a0:	21ea      	movs	r1, #234	; 0xea
 800c2a2:	48b2      	ldr	r0, [pc, #712]	; (800c56c <_dtoa_r+0x2fc>)
 800c2a4:	f7ff ff2a 	bl	800c0fc <__assert_func>
 800c2a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2ac:	6005      	str	r5, [r0, #0]
 800c2ae:	60c5      	str	r5, [r0, #12]
 800c2b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2b2:	6819      	ldr	r1, [r3, #0]
 800c2b4:	b151      	cbz	r1, 800c2cc <_dtoa_r+0x5c>
 800c2b6:	685a      	ldr	r2, [r3, #4]
 800c2b8:	604a      	str	r2, [r1, #4]
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	4093      	lsls	r3, r2
 800c2be:	608b      	str	r3, [r1, #8]
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f001 f9c1 	bl	800d648 <_Bfree>
 800c2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	601a      	str	r2, [r3, #0]
 800c2cc:	1e3b      	subs	r3, r7, #0
 800c2ce:	bfb9      	ittee	lt
 800c2d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c2d4:	9303      	strlt	r3, [sp, #12]
 800c2d6:	2300      	movge	r3, #0
 800c2d8:	f8c8 3000 	strge.w	r3, [r8]
 800c2dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c2e0:	4ba3      	ldr	r3, [pc, #652]	; (800c570 <_dtoa_r+0x300>)
 800c2e2:	bfbc      	itt	lt
 800c2e4:	2201      	movlt	r2, #1
 800c2e6:	f8c8 2000 	strlt.w	r2, [r8]
 800c2ea:	ea33 0309 	bics.w	r3, r3, r9
 800c2ee:	d11b      	bne.n	800c328 <_dtoa_r+0xb8>
 800c2f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c2f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c2f6:	6013      	str	r3, [r2, #0]
 800c2f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2fc:	4333      	orrs	r3, r6
 800c2fe:	f000 857a 	beq.w	800cdf6 <_dtoa_r+0xb86>
 800c302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c304:	b963      	cbnz	r3, 800c320 <_dtoa_r+0xb0>
 800c306:	4b9b      	ldr	r3, [pc, #620]	; (800c574 <_dtoa_r+0x304>)
 800c308:	e024      	b.n	800c354 <_dtoa_r+0xe4>
 800c30a:	4b9b      	ldr	r3, [pc, #620]	; (800c578 <_dtoa_r+0x308>)
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	3308      	adds	r3, #8
 800c310:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c312:	6013      	str	r3, [r2, #0]
 800c314:	9800      	ldr	r0, [sp, #0]
 800c316:	b015      	add	sp, #84	; 0x54
 800c318:	ecbd 8b02 	vpop	{d8}
 800c31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c320:	4b94      	ldr	r3, [pc, #592]	; (800c574 <_dtoa_r+0x304>)
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	3303      	adds	r3, #3
 800c326:	e7f3      	b.n	800c310 <_dtoa_r+0xa0>
 800c328:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c32c:	2200      	movs	r2, #0
 800c32e:	ec51 0b17 	vmov	r0, r1, d7
 800c332:	2300      	movs	r3, #0
 800c334:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c338:	f7f4 fbc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c33c:	4680      	mov	r8, r0
 800c33e:	b158      	cbz	r0, 800c358 <_dtoa_r+0xe8>
 800c340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c342:	2301      	movs	r3, #1
 800c344:	6013      	str	r3, [r2, #0]
 800c346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f000 8551 	beq.w	800cdf0 <_dtoa_r+0xb80>
 800c34e:	488b      	ldr	r0, [pc, #556]	; (800c57c <_dtoa_r+0x30c>)
 800c350:	6018      	str	r0, [r3, #0]
 800c352:	1e43      	subs	r3, r0, #1
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	e7dd      	b.n	800c314 <_dtoa_r+0xa4>
 800c358:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c35c:	aa12      	add	r2, sp, #72	; 0x48
 800c35e:	a913      	add	r1, sp, #76	; 0x4c
 800c360:	4620      	mov	r0, r4
 800c362:	f001 fd19 	bl	800dd98 <__d2b>
 800c366:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c36a:	4683      	mov	fp, r0
 800c36c:	2d00      	cmp	r5, #0
 800c36e:	d07c      	beq.n	800c46a <_dtoa_r+0x1fa>
 800c370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c372:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c37a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c37e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c382:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c38a:	4b7d      	ldr	r3, [pc, #500]	; (800c580 <_dtoa_r+0x310>)
 800c38c:	2200      	movs	r2, #0
 800c38e:	4630      	mov	r0, r6
 800c390:	4639      	mov	r1, r7
 800c392:	f7f3 ff79 	bl	8000288 <__aeabi_dsub>
 800c396:	a36e      	add	r3, pc, #440	; (adr r3, 800c550 <_dtoa_r+0x2e0>)
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	f7f4 f92c 	bl	80005f8 <__aeabi_dmul>
 800c3a0:	a36d      	add	r3, pc, #436	; (adr r3, 800c558 <_dtoa_r+0x2e8>)
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	f7f3 ff71 	bl	800028c <__adddf3>
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	460f      	mov	r7, r1
 800c3b0:	f7f4 f8b8 	bl	8000524 <__aeabi_i2d>
 800c3b4:	a36a      	add	r3, pc, #424	; (adr r3, 800c560 <_dtoa_r+0x2f0>)
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	f7f4 f91d 	bl	80005f8 <__aeabi_dmul>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	4639      	mov	r1, r7
 800c3c6:	f7f3 ff61 	bl	800028c <__adddf3>
 800c3ca:	4606      	mov	r6, r0
 800c3cc:	460f      	mov	r7, r1
 800c3ce:	f7f4 fbc3 	bl	8000b58 <__aeabi_d2iz>
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	4682      	mov	sl, r0
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	f7f4 fb7e 	bl	8000adc <__aeabi_dcmplt>
 800c3e0:	b148      	cbz	r0, 800c3f6 <_dtoa_r+0x186>
 800c3e2:	4650      	mov	r0, sl
 800c3e4:	f7f4 f89e 	bl	8000524 <__aeabi_i2d>
 800c3e8:	4632      	mov	r2, r6
 800c3ea:	463b      	mov	r3, r7
 800c3ec:	f7f4 fb6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3f0:	b908      	cbnz	r0, 800c3f6 <_dtoa_r+0x186>
 800c3f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3f6:	f1ba 0f16 	cmp.w	sl, #22
 800c3fa:	d854      	bhi.n	800c4a6 <_dtoa_r+0x236>
 800c3fc:	4b61      	ldr	r3, [pc, #388]	; (800c584 <_dtoa_r+0x314>)
 800c3fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c40a:	f7f4 fb67 	bl	8000adc <__aeabi_dcmplt>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d04b      	beq.n	800c4aa <_dtoa_r+0x23a>
 800c412:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c416:	2300      	movs	r3, #0
 800c418:	930e      	str	r3, [sp, #56]	; 0x38
 800c41a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c41c:	1b5d      	subs	r5, r3, r5
 800c41e:	1e6b      	subs	r3, r5, #1
 800c420:	9304      	str	r3, [sp, #16]
 800c422:	bf43      	ittte	mi
 800c424:	2300      	movmi	r3, #0
 800c426:	f1c5 0801 	rsbmi	r8, r5, #1
 800c42a:	9304      	strmi	r3, [sp, #16]
 800c42c:	f04f 0800 	movpl.w	r8, #0
 800c430:	f1ba 0f00 	cmp.w	sl, #0
 800c434:	db3b      	blt.n	800c4ae <_dtoa_r+0x23e>
 800c436:	9b04      	ldr	r3, [sp, #16]
 800c438:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c43c:	4453      	add	r3, sl
 800c43e:	9304      	str	r3, [sp, #16]
 800c440:	2300      	movs	r3, #0
 800c442:	9306      	str	r3, [sp, #24]
 800c444:	9b05      	ldr	r3, [sp, #20]
 800c446:	2b09      	cmp	r3, #9
 800c448:	d869      	bhi.n	800c51e <_dtoa_r+0x2ae>
 800c44a:	2b05      	cmp	r3, #5
 800c44c:	bfc4      	itt	gt
 800c44e:	3b04      	subgt	r3, #4
 800c450:	9305      	strgt	r3, [sp, #20]
 800c452:	9b05      	ldr	r3, [sp, #20]
 800c454:	f1a3 0302 	sub.w	r3, r3, #2
 800c458:	bfcc      	ite	gt
 800c45a:	2500      	movgt	r5, #0
 800c45c:	2501      	movle	r5, #1
 800c45e:	2b03      	cmp	r3, #3
 800c460:	d869      	bhi.n	800c536 <_dtoa_r+0x2c6>
 800c462:	e8df f003 	tbb	[pc, r3]
 800c466:	4e2c      	.short	0x4e2c
 800c468:	5a4c      	.short	0x5a4c
 800c46a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c46e:	441d      	add	r5, r3
 800c470:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c474:	2b20      	cmp	r3, #32
 800c476:	bfc1      	itttt	gt
 800c478:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c47c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c480:	fa09 f303 	lslgt.w	r3, r9, r3
 800c484:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c488:	bfda      	itte	le
 800c48a:	f1c3 0320 	rsble	r3, r3, #32
 800c48e:	fa06 f003 	lslle.w	r0, r6, r3
 800c492:	4318      	orrgt	r0, r3
 800c494:	f7f4 f836 	bl	8000504 <__aeabi_ui2d>
 800c498:	2301      	movs	r3, #1
 800c49a:	4606      	mov	r6, r0
 800c49c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c4a0:	3d01      	subs	r5, #1
 800c4a2:	9310      	str	r3, [sp, #64]	; 0x40
 800c4a4:	e771      	b.n	800c38a <_dtoa_r+0x11a>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e7b6      	b.n	800c418 <_dtoa_r+0x1a8>
 800c4aa:	900e      	str	r0, [sp, #56]	; 0x38
 800c4ac:	e7b5      	b.n	800c41a <_dtoa_r+0x1aa>
 800c4ae:	f1ca 0300 	rsb	r3, sl, #0
 800c4b2:	9306      	str	r3, [sp, #24]
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	eba8 080a 	sub.w	r8, r8, sl
 800c4ba:	930d      	str	r3, [sp, #52]	; 0x34
 800c4bc:	e7c2      	b.n	800c444 <_dtoa_r+0x1d4>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	9308      	str	r3, [sp, #32]
 800c4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	dc39      	bgt.n	800c53c <_dtoa_r+0x2cc>
 800c4c8:	f04f 0901 	mov.w	r9, #1
 800c4cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c4d0:	464b      	mov	r3, r9
 800c4d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c4d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c4d8:	2200      	movs	r2, #0
 800c4da:	6042      	str	r2, [r0, #4]
 800c4dc:	2204      	movs	r2, #4
 800c4de:	f102 0614 	add.w	r6, r2, #20
 800c4e2:	429e      	cmp	r6, r3
 800c4e4:	6841      	ldr	r1, [r0, #4]
 800c4e6:	d92f      	bls.n	800c548 <_dtoa_r+0x2d8>
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f001 f86d 	bl	800d5c8 <_Balloc>
 800c4ee:	9000      	str	r0, [sp, #0]
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d14b      	bne.n	800c58c <_dtoa_r+0x31c>
 800c4f4:	4b24      	ldr	r3, [pc, #144]	; (800c588 <_dtoa_r+0x318>)
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c4fc:	e6d1      	b.n	800c2a2 <_dtoa_r+0x32>
 800c4fe:	2301      	movs	r3, #1
 800c500:	e7de      	b.n	800c4c0 <_dtoa_r+0x250>
 800c502:	2300      	movs	r3, #0
 800c504:	9308      	str	r3, [sp, #32]
 800c506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c508:	eb0a 0903 	add.w	r9, sl, r3
 800c50c:	f109 0301 	add.w	r3, r9, #1
 800c510:	2b01      	cmp	r3, #1
 800c512:	9301      	str	r3, [sp, #4]
 800c514:	bfb8      	it	lt
 800c516:	2301      	movlt	r3, #1
 800c518:	e7dd      	b.n	800c4d6 <_dtoa_r+0x266>
 800c51a:	2301      	movs	r3, #1
 800c51c:	e7f2      	b.n	800c504 <_dtoa_r+0x294>
 800c51e:	2501      	movs	r5, #1
 800c520:	2300      	movs	r3, #0
 800c522:	9305      	str	r3, [sp, #20]
 800c524:	9508      	str	r5, [sp, #32]
 800c526:	f04f 39ff 	mov.w	r9, #4294967295
 800c52a:	2200      	movs	r2, #0
 800c52c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c530:	2312      	movs	r3, #18
 800c532:	9209      	str	r2, [sp, #36]	; 0x24
 800c534:	e7cf      	b.n	800c4d6 <_dtoa_r+0x266>
 800c536:	2301      	movs	r3, #1
 800c538:	9308      	str	r3, [sp, #32]
 800c53a:	e7f4      	b.n	800c526 <_dtoa_r+0x2b6>
 800c53c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c540:	f8cd 9004 	str.w	r9, [sp, #4]
 800c544:	464b      	mov	r3, r9
 800c546:	e7c6      	b.n	800c4d6 <_dtoa_r+0x266>
 800c548:	3101      	adds	r1, #1
 800c54a:	6041      	str	r1, [r0, #4]
 800c54c:	0052      	lsls	r2, r2, #1
 800c54e:	e7c6      	b.n	800c4de <_dtoa_r+0x26e>
 800c550:	636f4361 	.word	0x636f4361
 800c554:	3fd287a7 	.word	0x3fd287a7
 800c558:	8b60c8b3 	.word	0x8b60c8b3
 800c55c:	3fc68a28 	.word	0x3fc68a28
 800c560:	509f79fb 	.word	0x509f79fb
 800c564:	3fd34413 	.word	0x3fd34413
 800c568:	0800fa48 	.word	0x0800fa48
 800c56c:	0800fc0a 	.word	0x0800fc0a
 800c570:	7ff00000 	.word	0x7ff00000
 800c574:	0800fc06 	.word	0x0800fc06
 800c578:	0800fbfd 	.word	0x0800fbfd
 800c57c:	0800fe6a 	.word	0x0800fe6a
 800c580:	3ff80000 	.word	0x3ff80000
 800c584:	0800fd80 	.word	0x0800fd80
 800c588:	0800fc69 	.word	0x0800fc69
 800c58c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c58e:	9a00      	ldr	r2, [sp, #0]
 800c590:	601a      	str	r2, [r3, #0]
 800c592:	9b01      	ldr	r3, [sp, #4]
 800c594:	2b0e      	cmp	r3, #14
 800c596:	f200 80ad 	bhi.w	800c6f4 <_dtoa_r+0x484>
 800c59a:	2d00      	cmp	r5, #0
 800c59c:	f000 80aa 	beq.w	800c6f4 <_dtoa_r+0x484>
 800c5a0:	f1ba 0f00 	cmp.w	sl, #0
 800c5a4:	dd36      	ble.n	800c614 <_dtoa_r+0x3a4>
 800c5a6:	4ac3      	ldr	r2, [pc, #780]	; (800c8b4 <_dtoa_r+0x644>)
 800c5a8:	f00a 030f 	and.w	r3, sl, #15
 800c5ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c5b0:	ed93 7b00 	vldr	d7, [r3]
 800c5b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c5b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c5bc:	eeb0 8a47 	vmov.f32	s16, s14
 800c5c0:	eef0 8a67 	vmov.f32	s17, s15
 800c5c4:	d016      	beq.n	800c5f4 <_dtoa_r+0x384>
 800c5c6:	4bbc      	ldr	r3, [pc, #752]	; (800c8b8 <_dtoa_r+0x648>)
 800c5c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c5cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c5d0:	f7f4 f93c 	bl	800084c <__aeabi_ddiv>
 800c5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5d8:	f007 070f 	and.w	r7, r7, #15
 800c5dc:	2503      	movs	r5, #3
 800c5de:	4eb6      	ldr	r6, [pc, #728]	; (800c8b8 <_dtoa_r+0x648>)
 800c5e0:	b957      	cbnz	r7, 800c5f8 <_dtoa_r+0x388>
 800c5e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5e6:	ec53 2b18 	vmov	r2, r3, d8
 800c5ea:	f7f4 f92f 	bl	800084c <__aeabi_ddiv>
 800c5ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5f2:	e029      	b.n	800c648 <_dtoa_r+0x3d8>
 800c5f4:	2502      	movs	r5, #2
 800c5f6:	e7f2      	b.n	800c5de <_dtoa_r+0x36e>
 800c5f8:	07f9      	lsls	r1, r7, #31
 800c5fa:	d508      	bpl.n	800c60e <_dtoa_r+0x39e>
 800c5fc:	ec51 0b18 	vmov	r0, r1, d8
 800c600:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c604:	f7f3 fff8 	bl	80005f8 <__aeabi_dmul>
 800c608:	ec41 0b18 	vmov	d8, r0, r1
 800c60c:	3501      	adds	r5, #1
 800c60e:	107f      	asrs	r7, r7, #1
 800c610:	3608      	adds	r6, #8
 800c612:	e7e5      	b.n	800c5e0 <_dtoa_r+0x370>
 800c614:	f000 80a6 	beq.w	800c764 <_dtoa_r+0x4f4>
 800c618:	f1ca 0600 	rsb	r6, sl, #0
 800c61c:	4ba5      	ldr	r3, [pc, #660]	; (800c8b4 <_dtoa_r+0x644>)
 800c61e:	4fa6      	ldr	r7, [pc, #664]	; (800c8b8 <_dtoa_r+0x648>)
 800c620:	f006 020f 	and.w	r2, r6, #15
 800c624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c630:	f7f3 ffe2 	bl	80005f8 <__aeabi_dmul>
 800c634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c638:	1136      	asrs	r6, r6, #4
 800c63a:	2300      	movs	r3, #0
 800c63c:	2502      	movs	r5, #2
 800c63e:	2e00      	cmp	r6, #0
 800c640:	f040 8085 	bne.w	800c74e <_dtoa_r+0x4de>
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1d2      	bne.n	800c5ee <_dtoa_r+0x37e>
 800c648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 808c 	beq.w	800c768 <_dtoa_r+0x4f8>
 800c650:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c654:	4b99      	ldr	r3, [pc, #612]	; (800c8bc <_dtoa_r+0x64c>)
 800c656:	2200      	movs	r2, #0
 800c658:	4630      	mov	r0, r6
 800c65a:	4639      	mov	r1, r7
 800c65c:	f7f4 fa3e 	bl	8000adc <__aeabi_dcmplt>
 800c660:	2800      	cmp	r0, #0
 800c662:	f000 8081 	beq.w	800c768 <_dtoa_r+0x4f8>
 800c666:	9b01      	ldr	r3, [sp, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d07d      	beq.n	800c768 <_dtoa_r+0x4f8>
 800c66c:	f1b9 0f00 	cmp.w	r9, #0
 800c670:	dd3c      	ble.n	800c6ec <_dtoa_r+0x47c>
 800c672:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c676:	9307      	str	r3, [sp, #28]
 800c678:	2200      	movs	r2, #0
 800c67a:	4b91      	ldr	r3, [pc, #580]	; (800c8c0 <_dtoa_r+0x650>)
 800c67c:	4630      	mov	r0, r6
 800c67e:	4639      	mov	r1, r7
 800c680:	f7f3 ffba 	bl	80005f8 <__aeabi_dmul>
 800c684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c688:	3501      	adds	r5, #1
 800c68a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c68e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c692:	4628      	mov	r0, r5
 800c694:	f7f3 ff46 	bl	8000524 <__aeabi_i2d>
 800c698:	4632      	mov	r2, r6
 800c69a:	463b      	mov	r3, r7
 800c69c:	f7f3 ffac 	bl	80005f8 <__aeabi_dmul>
 800c6a0:	4b88      	ldr	r3, [pc, #544]	; (800c8c4 <_dtoa_r+0x654>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f7f3 fdf2 	bl	800028c <__adddf3>
 800c6a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c6ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6b0:	9303      	str	r3, [sp, #12]
 800c6b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d15c      	bne.n	800c772 <_dtoa_r+0x502>
 800c6b8:	4b83      	ldr	r3, [pc, #524]	; (800c8c8 <_dtoa_r+0x658>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	4630      	mov	r0, r6
 800c6be:	4639      	mov	r1, r7
 800c6c0:	f7f3 fde2 	bl	8000288 <__aeabi_dsub>
 800c6c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6c8:	4606      	mov	r6, r0
 800c6ca:	460f      	mov	r7, r1
 800c6cc:	f7f4 fa24 	bl	8000b18 <__aeabi_dcmpgt>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	f040 8296 	bne.w	800cc02 <_dtoa_r+0x992>
 800c6d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c6da:	4630      	mov	r0, r6
 800c6dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6e0:	4639      	mov	r1, r7
 800c6e2:	f7f4 f9fb 	bl	8000adc <__aeabi_dcmplt>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	f040 8288 	bne.w	800cbfc <_dtoa_r+0x98c>
 800c6ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c6f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f2c0 8158 	blt.w	800c9ac <_dtoa_r+0x73c>
 800c6fc:	f1ba 0f0e 	cmp.w	sl, #14
 800c700:	f300 8154 	bgt.w	800c9ac <_dtoa_r+0x73c>
 800c704:	4b6b      	ldr	r3, [pc, #428]	; (800c8b4 <_dtoa_r+0x644>)
 800c706:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c70a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c710:	2b00      	cmp	r3, #0
 800c712:	f280 80e3 	bge.w	800c8dc <_dtoa_r+0x66c>
 800c716:	9b01      	ldr	r3, [sp, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f300 80df 	bgt.w	800c8dc <_dtoa_r+0x66c>
 800c71e:	f040 826d 	bne.w	800cbfc <_dtoa_r+0x98c>
 800c722:	4b69      	ldr	r3, [pc, #420]	; (800c8c8 <_dtoa_r+0x658>)
 800c724:	2200      	movs	r2, #0
 800c726:	4640      	mov	r0, r8
 800c728:	4649      	mov	r1, r9
 800c72a:	f7f3 ff65 	bl	80005f8 <__aeabi_dmul>
 800c72e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c732:	f7f4 f9e7 	bl	8000b04 <__aeabi_dcmpge>
 800c736:	9e01      	ldr	r6, [sp, #4]
 800c738:	4637      	mov	r7, r6
 800c73a:	2800      	cmp	r0, #0
 800c73c:	f040 8243 	bne.w	800cbc6 <_dtoa_r+0x956>
 800c740:	9d00      	ldr	r5, [sp, #0]
 800c742:	2331      	movs	r3, #49	; 0x31
 800c744:	f805 3b01 	strb.w	r3, [r5], #1
 800c748:	f10a 0a01 	add.w	sl, sl, #1
 800c74c:	e23f      	b.n	800cbce <_dtoa_r+0x95e>
 800c74e:	07f2      	lsls	r2, r6, #31
 800c750:	d505      	bpl.n	800c75e <_dtoa_r+0x4ee>
 800c752:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c756:	f7f3 ff4f 	bl	80005f8 <__aeabi_dmul>
 800c75a:	3501      	adds	r5, #1
 800c75c:	2301      	movs	r3, #1
 800c75e:	1076      	asrs	r6, r6, #1
 800c760:	3708      	adds	r7, #8
 800c762:	e76c      	b.n	800c63e <_dtoa_r+0x3ce>
 800c764:	2502      	movs	r5, #2
 800c766:	e76f      	b.n	800c648 <_dtoa_r+0x3d8>
 800c768:	9b01      	ldr	r3, [sp, #4]
 800c76a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c76e:	930c      	str	r3, [sp, #48]	; 0x30
 800c770:	e78d      	b.n	800c68e <_dtoa_r+0x41e>
 800c772:	9900      	ldr	r1, [sp, #0]
 800c774:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c776:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c778:	4b4e      	ldr	r3, [pc, #312]	; (800c8b4 <_dtoa_r+0x644>)
 800c77a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c77e:	4401      	add	r1, r0
 800c780:	9102      	str	r1, [sp, #8]
 800c782:	9908      	ldr	r1, [sp, #32]
 800c784:	eeb0 8a47 	vmov.f32	s16, s14
 800c788:	eef0 8a67 	vmov.f32	s17, s15
 800c78c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c790:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c794:	2900      	cmp	r1, #0
 800c796:	d045      	beq.n	800c824 <_dtoa_r+0x5b4>
 800c798:	494c      	ldr	r1, [pc, #304]	; (800c8cc <_dtoa_r+0x65c>)
 800c79a:	2000      	movs	r0, #0
 800c79c:	f7f4 f856 	bl	800084c <__aeabi_ddiv>
 800c7a0:	ec53 2b18 	vmov	r2, r3, d8
 800c7a4:	f7f3 fd70 	bl	8000288 <__aeabi_dsub>
 800c7a8:	9d00      	ldr	r5, [sp, #0]
 800c7aa:	ec41 0b18 	vmov	d8, r0, r1
 800c7ae:	4639      	mov	r1, r7
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f7f4 f9d1 	bl	8000b58 <__aeabi_d2iz>
 800c7b6:	900c      	str	r0, [sp, #48]	; 0x30
 800c7b8:	f7f3 feb4 	bl	8000524 <__aeabi_i2d>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	460b      	mov	r3, r1
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	4639      	mov	r1, r7
 800c7c4:	f7f3 fd60 	bl	8000288 <__aeabi_dsub>
 800c7c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7ca:	3330      	adds	r3, #48	; 0x30
 800c7cc:	f805 3b01 	strb.w	r3, [r5], #1
 800c7d0:	ec53 2b18 	vmov	r2, r3, d8
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	460f      	mov	r7, r1
 800c7d8:	f7f4 f980 	bl	8000adc <__aeabi_dcmplt>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d165      	bne.n	800c8ac <_dtoa_r+0x63c>
 800c7e0:	4632      	mov	r2, r6
 800c7e2:	463b      	mov	r3, r7
 800c7e4:	4935      	ldr	r1, [pc, #212]	; (800c8bc <_dtoa_r+0x64c>)
 800c7e6:	2000      	movs	r0, #0
 800c7e8:	f7f3 fd4e 	bl	8000288 <__aeabi_dsub>
 800c7ec:	ec53 2b18 	vmov	r2, r3, d8
 800c7f0:	f7f4 f974 	bl	8000adc <__aeabi_dcmplt>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	f040 80b9 	bne.w	800c96c <_dtoa_r+0x6fc>
 800c7fa:	9b02      	ldr	r3, [sp, #8]
 800c7fc:	429d      	cmp	r5, r3
 800c7fe:	f43f af75 	beq.w	800c6ec <_dtoa_r+0x47c>
 800c802:	4b2f      	ldr	r3, [pc, #188]	; (800c8c0 <_dtoa_r+0x650>)
 800c804:	ec51 0b18 	vmov	r0, r1, d8
 800c808:	2200      	movs	r2, #0
 800c80a:	f7f3 fef5 	bl	80005f8 <__aeabi_dmul>
 800c80e:	4b2c      	ldr	r3, [pc, #176]	; (800c8c0 <_dtoa_r+0x650>)
 800c810:	ec41 0b18 	vmov	d8, r0, r1
 800c814:	2200      	movs	r2, #0
 800c816:	4630      	mov	r0, r6
 800c818:	4639      	mov	r1, r7
 800c81a:	f7f3 feed 	bl	80005f8 <__aeabi_dmul>
 800c81e:	4606      	mov	r6, r0
 800c820:	460f      	mov	r7, r1
 800c822:	e7c4      	b.n	800c7ae <_dtoa_r+0x53e>
 800c824:	ec51 0b17 	vmov	r0, r1, d7
 800c828:	f7f3 fee6 	bl	80005f8 <__aeabi_dmul>
 800c82c:	9b02      	ldr	r3, [sp, #8]
 800c82e:	9d00      	ldr	r5, [sp, #0]
 800c830:	930c      	str	r3, [sp, #48]	; 0x30
 800c832:	ec41 0b18 	vmov	d8, r0, r1
 800c836:	4639      	mov	r1, r7
 800c838:	4630      	mov	r0, r6
 800c83a:	f7f4 f98d 	bl	8000b58 <__aeabi_d2iz>
 800c83e:	9011      	str	r0, [sp, #68]	; 0x44
 800c840:	f7f3 fe70 	bl	8000524 <__aeabi_i2d>
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	4630      	mov	r0, r6
 800c84a:	4639      	mov	r1, r7
 800c84c:	f7f3 fd1c 	bl	8000288 <__aeabi_dsub>
 800c850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c852:	3330      	adds	r3, #48	; 0x30
 800c854:	f805 3b01 	strb.w	r3, [r5], #1
 800c858:	9b02      	ldr	r3, [sp, #8]
 800c85a:	429d      	cmp	r5, r3
 800c85c:	4606      	mov	r6, r0
 800c85e:	460f      	mov	r7, r1
 800c860:	f04f 0200 	mov.w	r2, #0
 800c864:	d134      	bne.n	800c8d0 <_dtoa_r+0x660>
 800c866:	4b19      	ldr	r3, [pc, #100]	; (800c8cc <_dtoa_r+0x65c>)
 800c868:	ec51 0b18 	vmov	r0, r1, d8
 800c86c:	f7f3 fd0e 	bl	800028c <__adddf3>
 800c870:	4602      	mov	r2, r0
 800c872:	460b      	mov	r3, r1
 800c874:	4630      	mov	r0, r6
 800c876:	4639      	mov	r1, r7
 800c878:	f7f4 f94e 	bl	8000b18 <__aeabi_dcmpgt>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d175      	bne.n	800c96c <_dtoa_r+0x6fc>
 800c880:	ec53 2b18 	vmov	r2, r3, d8
 800c884:	4911      	ldr	r1, [pc, #68]	; (800c8cc <_dtoa_r+0x65c>)
 800c886:	2000      	movs	r0, #0
 800c888:	f7f3 fcfe 	bl	8000288 <__aeabi_dsub>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4630      	mov	r0, r6
 800c892:	4639      	mov	r1, r7
 800c894:	f7f4 f922 	bl	8000adc <__aeabi_dcmplt>
 800c898:	2800      	cmp	r0, #0
 800c89a:	f43f af27 	beq.w	800c6ec <_dtoa_r+0x47c>
 800c89e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8a0:	1e6b      	subs	r3, r5, #1
 800c8a2:	930c      	str	r3, [sp, #48]	; 0x30
 800c8a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c8a8:	2b30      	cmp	r3, #48	; 0x30
 800c8aa:	d0f8      	beq.n	800c89e <_dtoa_r+0x62e>
 800c8ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c8b0:	e04a      	b.n	800c948 <_dtoa_r+0x6d8>
 800c8b2:	bf00      	nop
 800c8b4:	0800fd80 	.word	0x0800fd80
 800c8b8:	0800fd58 	.word	0x0800fd58
 800c8bc:	3ff00000 	.word	0x3ff00000
 800c8c0:	40240000 	.word	0x40240000
 800c8c4:	401c0000 	.word	0x401c0000
 800c8c8:	40140000 	.word	0x40140000
 800c8cc:	3fe00000 	.word	0x3fe00000
 800c8d0:	4baf      	ldr	r3, [pc, #700]	; (800cb90 <_dtoa_r+0x920>)
 800c8d2:	f7f3 fe91 	bl	80005f8 <__aeabi_dmul>
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	460f      	mov	r7, r1
 800c8da:	e7ac      	b.n	800c836 <_dtoa_r+0x5c6>
 800c8dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c8e0:	9d00      	ldr	r5, [sp, #0]
 800c8e2:	4642      	mov	r2, r8
 800c8e4:	464b      	mov	r3, r9
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	f7f3 ffaf 	bl	800084c <__aeabi_ddiv>
 800c8ee:	f7f4 f933 	bl	8000b58 <__aeabi_d2iz>
 800c8f2:	9002      	str	r0, [sp, #8]
 800c8f4:	f7f3 fe16 	bl	8000524 <__aeabi_i2d>
 800c8f8:	4642      	mov	r2, r8
 800c8fa:	464b      	mov	r3, r9
 800c8fc:	f7f3 fe7c 	bl	80005f8 <__aeabi_dmul>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4630      	mov	r0, r6
 800c906:	4639      	mov	r1, r7
 800c908:	f7f3 fcbe 	bl	8000288 <__aeabi_dsub>
 800c90c:	9e02      	ldr	r6, [sp, #8]
 800c90e:	9f01      	ldr	r7, [sp, #4]
 800c910:	3630      	adds	r6, #48	; 0x30
 800c912:	f805 6b01 	strb.w	r6, [r5], #1
 800c916:	9e00      	ldr	r6, [sp, #0]
 800c918:	1bae      	subs	r6, r5, r6
 800c91a:	42b7      	cmp	r7, r6
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	d137      	bne.n	800c992 <_dtoa_r+0x722>
 800c922:	f7f3 fcb3 	bl	800028c <__adddf3>
 800c926:	4642      	mov	r2, r8
 800c928:	464b      	mov	r3, r9
 800c92a:	4606      	mov	r6, r0
 800c92c:	460f      	mov	r7, r1
 800c92e:	f7f4 f8f3 	bl	8000b18 <__aeabi_dcmpgt>
 800c932:	b9c8      	cbnz	r0, 800c968 <_dtoa_r+0x6f8>
 800c934:	4642      	mov	r2, r8
 800c936:	464b      	mov	r3, r9
 800c938:	4630      	mov	r0, r6
 800c93a:	4639      	mov	r1, r7
 800c93c:	f7f4 f8c4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c940:	b110      	cbz	r0, 800c948 <_dtoa_r+0x6d8>
 800c942:	9b02      	ldr	r3, [sp, #8]
 800c944:	07d9      	lsls	r1, r3, #31
 800c946:	d40f      	bmi.n	800c968 <_dtoa_r+0x6f8>
 800c948:	4620      	mov	r0, r4
 800c94a:	4659      	mov	r1, fp
 800c94c:	f000 fe7c 	bl	800d648 <_Bfree>
 800c950:	2300      	movs	r3, #0
 800c952:	702b      	strb	r3, [r5, #0]
 800c954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c956:	f10a 0001 	add.w	r0, sl, #1
 800c95a:	6018      	str	r0, [r3, #0]
 800c95c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f43f acd8 	beq.w	800c314 <_dtoa_r+0xa4>
 800c964:	601d      	str	r5, [r3, #0]
 800c966:	e4d5      	b.n	800c314 <_dtoa_r+0xa4>
 800c968:	f8cd a01c 	str.w	sl, [sp, #28]
 800c96c:	462b      	mov	r3, r5
 800c96e:	461d      	mov	r5, r3
 800c970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c974:	2a39      	cmp	r2, #57	; 0x39
 800c976:	d108      	bne.n	800c98a <_dtoa_r+0x71a>
 800c978:	9a00      	ldr	r2, [sp, #0]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d1f7      	bne.n	800c96e <_dtoa_r+0x6fe>
 800c97e:	9a07      	ldr	r2, [sp, #28]
 800c980:	9900      	ldr	r1, [sp, #0]
 800c982:	3201      	adds	r2, #1
 800c984:	9207      	str	r2, [sp, #28]
 800c986:	2230      	movs	r2, #48	; 0x30
 800c988:	700a      	strb	r2, [r1, #0]
 800c98a:	781a      	ldrb	r2, [r3, #0]
 800c98c:	3201      	adds	r2, #1
 800c98e:	701a      	strb	r2, [r3, #0]
 800c990:	e78c      	b.n	800c8ac <_dtoa_r+0x63c>
 800c992:	4b7f      	ldr	r3, [pc, #508]	; (800cb90 <_dtoa_r+0x920>)
 800c994:	2200      	movs	r2, #0
 800c996:	f7f3 fe2f 	bl	80005f8 <__aeabi_dmul>
 800c99a:	2200      	movs	r2, #0
 800c99c:	2300      	movs	r3, #0
 800c99e:	4606      	mov	r6, r0
 800c9a0:	460f      	mov	r7, r1
 800c9a2:	f7f4 f891 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d09b      	beq.n	800c8e2 <_dtoa_r+0x672>
 800c9aa:	e7cd      	b.n	800c948 <_dtoa_r+0x6d8>
 800c9ac:	9a08      	ldr	r2, [sp, #32]
 800c9ae:	2a00      	cmp	r2, #0
 800c9b0:	f000 80c4 	beq.w	800cb3c <_dtoa_r+0x8cc>
 800c9b4:	9a05      	ldr	r2, [sp, #20]
 800c9b6:	2a01      	cmp	r2, #1
 800c9b8:	f300 80a8 	bgt.w	800cb0c <_dtoa_r+0x89c>
 800c9bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9be:	2a00      	cmp	r2, #0
 800c9c0:	f000 80a0 	beq.w	800cb04 <_dtoa_r+0x894>
 800c9c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c9c8:	9e06      	ldr	r6, [sp, #24]
 800c9ca:	4645      	mov	r5, r8
 800c9cc:	9a04      	ldr	r2, [sp, #16]
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	441a      	add	r2, r3
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	4498      	add	r8, r3
 800c9d6:	9204      	str	r2, [sp, #16]
 800c9d8:	f000 ff3c 	bl	800d854 <__i2b>
 800c9dc:	4607      	mov	r7, r0
 800c9de:	2d00      	cmp	r5, #0
 800c9e0:	dd0b      	ble.n	800c9fa <_dtoa_r+0x78a>
 800c9e2:	9b04      	ldr	r3, [sp, #16]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	dd08      	ble.n	800c9fa <_dtoa_r+0x78a>
 800c9e8:	42ab      	cmp	r3, r5
 800c9ea:	9a04      	ldr	r2, [sp, #16]
 800c9ec:	bfa8      	it	ge
 800c9ee:	462b      	movge	r3, r5
 800c9f0:	eba8 0803 	sub.w	r8, r8, r3
 800c9f4:	1aed      	subs	r5, r5, r3
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	9304      	str	r3, [sp, #16]
 800c9fa:	9b06      	ldr	r3, [sp, #24]
 800c9fc:	b1fb      	cbz	r3, 800ca3e <_dtoa_r+0x7ce>
 800c9fe:	9b08      	ldr	r3, [sp, #32]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f000 809f 	beq.w	800cb44 <_dtoa_r+0x8d4>
 800ca06:	2e00      	cmp	r6, #0
 800ca08:	dd11      	ble.n	800ca2e <_dtoa_r+0x7be>
 800ca0a:	4639      	mov	r1, r7
 800ca0c:	4632      	mov	r2, r6
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f000 ffdc 	bl	800d9cc <__pow5mult>
 800ca14:	465a      	mov	r2, fp
 800ca16:	4601      	mov	r1, r0
 800ca18:	4607      	mov	r7, r0
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f000 ff30 	bl	800d880 <__multiply>
 800ca20:	4659      	mov	r1, fp
 800ca22:	9007      	str	r0, [sp, #28]
 800ca24:	4620      	mov	r0, r4
 800ca26:	f000 fe0f 	bl	800d648 <_Bfree>
 800ca2a:	9b07      	ldr	r3, [sp, #28]
 800ca2c:	469b      	mov	fp, r3
 800ca2e:	9b06      	ldr	r3, [sp, #24]
 800ca30:	1b9a      	subs	r2, r3, r6
 800ca32:	d004      	beq.n	800ca3e <_dtoa_r+0x7ce>
 800ca34:	4659      	mov	r1, fp
 800ca36:	4620      	mov	r0, r4
 800ca38:	f000 ffc8 	bl	800d9cc <__pow5mult>
 800ca3c:	4683      	mov	fp, r0
 800ca3e:	2101      	movs	r1, #1
 800ca40:	4620      	mov	r0, r4
 800ca42:	f000 ff07 	bl	800d854 <__i2b>
 800ca46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	dd7c      	ble.n	800cb48 <_dtoa_r+0x8d8>
 800ca4e:	461a      	mov	r2, r3
 800ca50:	4601      	mov	r1, r0
 800ca52:	4620      	mov	r0, r4
 800ca54:	f000 ffba 	bl	800d9cc <__pow5mult>
 800ca58:	9b05      	ldr	r3, [sp, #20]
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	4606      	mov	r6, r0
 800ca5e:	dd76      	ble.n	800cb4e <_dtoa_r+0x8de>
 800ca60:	2300      	movs	r3, #0
 800ca62:	9306      	str	r3, [sp, #24]
 800ca64:	6933      	ldr	r3, [r6, #16]
 800ca66:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ca6a:	6918      	ldr	r0, [r3, #16]
 800ca6c:	f000 fea2 	bl	800d7b4 <__hi0bits>
 800ca70:	f1c0 0020 	rsb	r0, r0, #32
 800ca74:	9b04      	ldr	r3, [sp, #16]
 800ca76:	4418      	add	r0, r3
 800ca78:	f010 001f 	ands.w	r0, r0, #31
 800ca7c:	f000 8086 	beq.w	800cb8c <_dtoa_r+0x91c>
 800ca80:	f1c0 0320 	rsb	r3, r0, #32
 800ca84:	2b04      	cmp	r3, #4
 800ca86:	dd7f      	ble.n	800cb88 <_dtoa_r+0x918>
 800ca88:	f1c0 001c 	rsb	r0, r0, #28
 800ca8c:	9b04      	ldr	r3, [sp, #16]
 800ca8e:	4403      	add	r3, r0
 800ca90:	4480      	add	r8, r0
 800ca92:	4405      	add	r5, r0
 800ca94:	9304      	str	r3, [sp, #16]
 800ca96:	f1b8 0f00 	cmp.w	r8, #0
 800ca9a:	dd05      	ble.n	800caa8 <_dtoa_r+0x838>
 800ca9c:	4659      	mov	r1, fp
 800ca9e:	4642      	mov	r2, r8
 800caa0:	4620      	mov	r0, r4
 800caa2:	f000 ffed 	bl	800da80 <__lshift>
 800caa6:	4683      	mov	fp, r0
 800caa8:	9b04      	ldr	r3, [sp, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	dd05      	ble.n	800caba <_dtoa_r+0x84a>
 800caae:	4631      	mov	r1, r6
 800cab0:	461a      	mov	r2, r3
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 ffe4 	bl	800da80 <__lshift>
 800cab8:	4606      	mov	r6, r0
 800caba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d069      	beq.n	800cb94 <_dtoa_r+0x924>
 800cac0:	4631      	mov	r1, r6
 800cac2:	4658      	mov	r0, fp
 800cac4:	f001 f848 	bl	800db58 <__mcmp>
 800cac8:	2800      	cmp	r0, #0
 800caca:	da63      	bge.n	800cb94 <_dtoa_r+0x924>
 800cacc:	2300      	movs	r3, #0
 800cace:	4659      	mov	r1, fp
 800cad0:	220a      	movs	r2, #10
 800cad2:	4620      	mov	r0, r4
 800cad4:	f000 fdda 	bl	800d68c <__multadd>
 800cad8:	9b08      	ldr	r3, [sp, #32]
 800cada:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cade:	4683      	mov	fp, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f000 818f 	beq.w	800ce04 <_dtoa_r+0xb94>
 800cae6:	4639      	mov	r1, r7
 800cae8:	2300      	movs	r3, #0
 800caea:	220a      	movs	r2, #10
 800caec:	4620      	mov	r0, r4
 800caee:	f000 fdcd 	bl	800d68c <__multadd>
 800caf2:	f1b9 0f00 	cmp.w	r9, #0
 800caf6:	4607      	mov	r7, r0
 800caf8:	f300 808e 	bgt.w	800cc18 <_dtoa_r+0x9a8>
 800cafc:	9b05      	ldr	r3, [sp, #20]
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	dc50      	bgt.n	800cba4 <_dtoa_r+0x934>
 800cb02:	e089      	b.n	800cc18 <_dtoa_r+0x9a8>
 800cb04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb0a:	e75d      	b.n	800c9c8 <_dtoa_r+0x758>
 800cb0c:	9b01      	ldr	r3, [sp, #4]
 800cb0e:	1e5e      	subs	r6, r3, #1
 800cb10:	9b06      	ldr	r3, [sp, #24]
 800cb12:	42b3      	cmp	r3, r6
 800cb14:	bfbf      	itttt	lt
 800cb16:	9b06      	ldrlt	r3, [sp, #24]
 800cb18:	9606      	strlt	r6, [sp, #24]
 800cb1a:	1af2      	sublt	r2, r6, r3
 800cb1c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800cb1e:	bfb6      	itet	lt
 800cb20:	189b      	addlt	r3, r3, r2
 800cb22:	1b9e      	subge	r6, r3, r6
 800cb24:	930d      	strlt	r3, [sp, #52]	; 0x34
 800cb26:	9b01      	ldr	r3, [sp, #4]
 800cb28:	bfb8      	it	lt
 800cb2a:	2600      	movlt	r6, #0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	bfb5      	itete	lt
 800cb30:	eba8 0503 	sublt.w	r5, r8, r3
 800cb34:	9b01      	ldrge	r3, [sp, #4]
 800cb36:	2300      	movlt	r3, #0
 800cb38:	4645      	movge	r5, r8
 800cb3a:	e747      	b.n	800c9cc <_dtoa_r+0x75c>
 800cb3c:	9e06      	ldr	r6, [sp, #24]
 800cb3e:	9f08      	ldr	r7, [sp, #32]
 800cb40:	4645      	mov	r5, r8
 800cb42:	e74c      	b.n	800c9de <_dtoa_r+0x76e>
 800cb44:	9a06      	ldr	r2, [sp, #24]
 800cb46:	e775      	b.n	800ca34 <_dtoa_r+0x7c4>
 800cb48:	9b05      	ldr	r3, [sp, #20]
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	dc18      	bgt.n	800cb80 <_dtoa_r+0x910>
 800cb4e:	9b02      	ldr	r3, [sp, #8]
 800cb50:	b9b3      	cbnz	r3, 800cb80 <_dtoa_r+0x910>
 800cb52:	9b03      	ldr	r3, [sp, #12]
 800cb54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb58:	b9a3      	cbnz	r3, 800cb84 <_dtoa_r+0x914>
 800cb5a:	9b03      	ldr	r3, [sp, #12]
 800cb5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb60:	0d1b      	lsrs	r3, r3, #20
 800cb62:	051b      	lsls	r3, r3, #20
 800cb64:	b12b      	cbz	r3, 800cb72 <_dtoa_r+0x902>
 800cb66:	9b04      	ldr	r3, [sp, #16]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	9304      	str	r3, [sp, #16]
 800cb6c:	f108 0801 	add.w	r8, r8, #1
 800cb70:	2301      	movs	r3, #1
 800cb72:	9306      	str	r3, [sp, #24]
 800cb74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f47f af74 	bne.w	800ca64 <_dtoa_r+0x7f4>
 800cb7c:	2001      	movs	r0, #1
 800cb7e:	e779      	b.n	800ca74 <_dtoa_r+0x804>
 800cb80:	2300      	movs	r3, #0
 800cb82:	e7f6      	b.n	800cb72 <_dtoa_r+0x902>
 800cb84:	9b02      	ldr	r3, [sp, #8]
 800cb86:	e7f4      	b.n	800cb72 <_dtoa_r+0x902>
 800cb88:	d085      	beq.n	800ca96 <_dtoa_r+0x826>
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	301c      	adds	r0, #28
 800cb8e:	e77d      	b.n	800ca8c <_dtoa_r+0x81c>
 800cb90:	40240000 	.word	0x40240000
 800cb94:	9b01      	ldr	r3, [sp, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	dc38      	bgt.n	800cc0c <_dtoa_r+0x99c>
 800cb9a:	9b05      	ldr	r3, [sp, #20]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	dd35      	ble.n	800cc0c <_dtoa_r+0x99c>
 800cba0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cba4:	f1b9 0f00 	cmp.w	r9, #0
 800cba8:	d10d      	bne.n	800cbc6 <_dtoa_r+0x956>
 800cbaa:	4631      	mov	r1, r6
 800cbac:	464b      	mov	r3, r9
 800cbae:	2205      	movs	r2, #5
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f000 fd6b 	bl	800d68c <__multadd>
 800cbb6:	4601      	mov	r1, r0
 800cbb8:	4606      	mov	r6, r0
 800cbba:	4658      	mov	r0, fp
 800cbbc:	f000 ffcc 	bl	800db58 <__mcmp>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	f73f adbd 	bgt.w	800c740 <_dtoa_r+0x4d0>
 800cbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc8:	9d00      	ldr	r5, [sp, #0]
 800cbca:	ea6f 0a03 	mvn.w	sl, r3
 800cbce:	f04f 0800 	mov.w	r8, #0
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f000 fd37 	bl	800d648 <_Bfree>
 800cbda:	2f00      	cmp	r7, #0
 800cbdc:	f43f aeb4 	beq.w	800c948 <_dtoa_r+0x6d8>
 800cbe0:	f1b8 0f00 	cmp.w	r8, #0
 800cbe4:	d005      	beq.n	800cbf2 <_dtoa_r+0x982>
 800cbe6:	45b8      	cmp	r8, r7
 800cbe8:	d003      	beq.n	800cbf2 <_dtoa_r+0x982>
 800cbea:	4641      	mov	r1, r8
 800cbec:	4620      	mov	r0, r4
 800cbee:	f000 fd2b 	bl	800d648 <_Bfree>
 800cbf2:	4639      	mov	r1, r7
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f000 fd27 	bl	800d648 <_Bfree>
 800cbfa:	e6a5      	b.n	800c948 <_dtoa_r+0x6d8>
 800cbfc:	2600      	movs	r6, #0
 800cbfe:	4637      	mov	r7, r6
 800cc00:	e7e1      	b.n	800cbc6 <_dtoa_r+0x956>
 800cc02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cc04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cc08:	4637      	mov	r7, r6
 800cc0a:	e599      	b.n	800c740 <_dtoa_r+0x4d0>
 800cc0c:	9b08      	ldr	r3, [sp, #32]
 800cc0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f000 80fd 	beq.w	800ce12 <_dtoa_r+0xba2>
 800cc18:	2d00      	cmp	r5, #0
 800cc1a:	dd05      	ble.n	800cc28 <_dtoa_r+0x9b8>
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	462a      	mov	r2, r5
 800cc20:	4620      	mov	r0, r4
 800cc22:	f000 ff2d 	bl	800da80 <__lshift>
 800cc26:	4607      	mov	r7, r0
 800cc28:	9b06      	ldr	r3, [sp, #24]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d05c      	beq.n	800cce8 <_dtoa_r+0xa78>
 800cc2e:	6879      	ldr	r1, [r7, #4]
 800cc30:	4620      	mov	r0, r4
 800cc32:	f000 fcc9 	bl	800d5c8 <_Balloc>
 800cc36:	4605      	mov	r5, r0
 800cc38:	b928      	cbnz	r0, 800cc46 <_dtoa_r+0x9d6>
 800cc3a:	4b80      	ldr	r3, [pc, #512]	; (800ce3c <_dtoa_r+0xbcc>)
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cc42:	f7ff bb2e 	b.w	800c2a2 <_dtoa_r+0x32>
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	3202      	adds	r2, #2
 800cc4a:	0092      	lsls	r2, r2, #2
 800cc4c:	f107 010c 	add.w	r1, r7, #12
 800cc50:	300c      	adds	r0, #12
 800cc52:	f000 fcab 	bl	800d5ac <memcpy>
 800cc56:	2201      	movs	r2, #1
 800cc58:	4629      	mov	r1, r5
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 ff10 	bl	800da80 <__lshift>
 800cc60:	9b00      	ldr	r3, [sp, #0]
 800cc62:	3301      	adds	r3, #1
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	9b00      	ldr	r3, [sp, #0]
 800cc68:	444b      	add	r3, r9
 800cc6a:	9307      	str	r3, [sp, #28]
 800cc6c:	9b02      	ldr	r3, [sp, #8]
 800cc6e:	f003 0301 	and.w	r3, r3, #1
 800cc72:	46b8      	mov	r8, r7
 800cc74:	9306      	str	r3, [sp, #24]
 800cc76:	4607      	mov	r7, r0
 800cc78:	9b01      	ldr	r3, [sp, #4]
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	4658      	mov	r0, fp
 800cc80:	9302      	str	r3, [sp, #8]
 800cc82:	f7ff fa69 	bl	800c158 <quorem>
 800cc86:	4603      	mov	r3, r0
 800cc88:	3330      	adds	r3, #48	; 0x30
 800cc8a:	9004      	str	r0, [sp, #16]
 800cc8c:	4641      	mov	r1, r8
 800cc8e:	4658      	mov	r0, fp
 800cc90:	9308      	str	r3, [sp, #32]
 800cc92:	f000 ff61 	bl	800db58 <__mcmp>
 800cc96:	463a      	mov	r2, r7
 800cc98:	4681      	mov	r9, r0
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f000 ff77 	bl	800db90 <__mdiff>
 800cca2:	68c2      	ldr	r2, [r0, #12]
 800cca4:	9b08      	ldr	r3, [sp, #32]
 800cca6:	4605      	mov	r5, r0
 800cca8:	bb02      	cbnz	r2, 800ccec <_dtoa_r+0xa7c>
 800ccaa:	4601      	mov	r1, r0
 800ccac:	4658      	mov	r0, fp
 800ccae:	f000 ff53 	bl	800db58 <__mcmp>
 800ccb2:	9b08      	ldr	r3, [sp, #32]
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	4620      	mov	r0, r4
 800ccba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ccbe:	f000 fcc3 	bl	800d648 <_Bfree>
 800ccc2:	9b05      	ldr	r3, [sp, #20]
 800ccc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccc6:	9d01      	ldr	r5, [sp, #4]
 800ccc8:	ea43 0102 	orr.w	r1, r3, r2
 800cccc:	9b06      	ldr	r3, [sp, #24]
 800ccce:	430b      	orrs	r3, r1
 800ccd0:	9b08      	ldr	r3, [sp, #32]
 800ccd2:	d10d      	bne.n	800ccf0 <_dtoa_r+0xa80>
 800ccd4:	2b39      	cmp	r3, #57	; 0x39
 800ccd6:	d029      	beq.n	800cd2c <_dtoa_r+0xabc>
 800ccd8:	f1b9 0f00 	cmp.w	r9, #0
 800ccdc:	dd01      	ble.n	800cce2 <_dtoa_r+0xa72>
 800ccde:	9b04      	ldr	r3, [sp, #16]
 800cce0:	3331      	adds	r3, #49	; 0x31
 800cce2:	9a02      	ldr	r2, [sp, #8]
 800cce4:	7013      	strb	r3, [r2, #0]
 800cce6:	e774      	b.n	800cbd2 <_dtoa_r+0x962>
 800cce8:	4638      	mov	r0, r7
 800ccea:	e7b9      	b.n	800cc60 <_dtoa_r+0x9f0>
 800ccec:	2201      	movs	r2, #1
 800ccee:	e7e2      	b.n	800ccb6 <_dtoa_r+0xa46>
 800ccf0:	f1b9 0f00 	cmp.w	r9, #0
 800ccf4:	db06      	blt.n	800cd04 <_dtoa_r+0xa94>
 800ccf6:	9905      	ldr	r1, [sp, #20]
 800ccf8:	ea41 0909 	orr.w	r9, r1, r9
 800ccfc:	9906      	ldr	r1, [sp, #24]
 800ccfe:	ea59 0101 	orrs.w	r1, r9, r1
 800cd02:	d120      	bne.n	800cd46 <_dtoa_r+0xad6>
 800cd04:	2a00      	cmp	r2, #0
 800cd06:	ddec      	ble.n	800cce2 <_dtoa_r+0xa72>
 800cd08:	4659      	mov	r1, fp
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	9301      	str	r3, [sp, #4]
 800cd10:	f000 feb6 	bl	800da80 <__lshift>
 800cd14:	4631      	mov	r1, r6
 800cd16:	4683      	mov	fp, r0
 800cd18:	f000 ff1e 	bl	800db58 <__mcmp>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	9b01      	ldr	r3, [sp, #4]
 800cd20:	dc02      	bgt.n	800cd28 <_dtoa_r+0xab8>
 800cd22:	d1de      	bne.n	800cce2 <_dtoa_r+0xa72>
 800cd24:	07da      	lsls	r2, r3, #31
 800cd26:	d5dc      	bpl.n	800cce2 <_dtoa_r+0xa72>
 800cd28:	2b39      	cmp	r3, #57	; 0x39
 800cd2a:	d1d8      	bne.n	800ccde <_dtoa_r+0xa6e>
 800cd2c:	9a02      	ldr	r2, [sp, #8]
 800cd2e:	2339      	movs	r3, #57	; 0x39
 800cd30:	7013      	strb	r3, [r2, #0]
 800cd32:	462b      	mov	r3, r5
 800cd34:	461d      	mov	r5, r3
 800cd36:	3b01      	subs	r3, #1
 800cd38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd3c:	2a39      	cmp	r2, #57	; 0x39
 800cd3e:	d050      	beq.n	800cde2 <_dtoa_r+0xb72>
 800cd40:	3201      	adds	r2, #1
 800cd42:	701a      	strb	r2, [r3, #0]
 800cd44:	e745      	b.n	800cbd2 <_dtoa_r+0x962>
 800cd46:	2a00      	cmp	r2, #0
 800cd48:	dd03      	ble.n	800cd52 <_dtoa_r+0xae2>
 800cd4a:	2b39      	cmp	r3, #57	; 0x39
 800cd4c:	d0ee      	beq.n	800cd2c <_dtoa_r+0xabc>
 800cd4e:	3301      	adds	r3, #1
 800cd50:	e7c7      	b.n	800cce2 <_dtoa_r+0xa72>
 800cd52:	9a01      	ldr	r2, [sp, #4]
 800cd54:	9907      	ldr	r1, [sp, #28]
 800cd56:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cd5a:	428a      	cmp	r2, r1
 800cd5c:	d02a      	beq.n	800cdb4 <_dtoa_r+0xb44>
 800cd5e:	4659      	mov	r1, fp
 800cd60:	2300      	movs	r3, #0
 800cd62:	220a      	movs	r2, #10
 800cd64:	4620      	mov	r0, r4
 800cd66:	f000 fc91 	bl	800d68c <__multadd>
 800cd6a:	45b8      	cmp	r8, r7
 800cd6c:	4683      	mov	fp, r0
 800cd6e:	f04f 0300 	mov.w	r3, #0
 800cd72:	f04f 020a 	mov.w	r2, #10
 800cd76:	4641      	mov	r1, r8
 800cd78:	4620      	mov	r0, r4
 800cd7a:	d107      	bne.n	800cd8c <_dtoa_r+0xb1c>
 800cd7c:	f000 fc86 	bl	800d68c <__multadd>
 800cd80:	4680      	mov	r8, r0
 800cd82:	4607      	mov	r7, r0
 800cd84:	9b01      	ldr	r3, [sp, #4]
 800cd86:	3301      	adds	r3, #1
 800cd88:	9301      	str	r3, [sp, #4]
 800cd8a:	e775      	b.n	800cc78 <_dtoa_r+0xa08>
 800cd8c:	f000 fc7e 	bl	800d68c <__multadd>
 800cd90:	4639      	mov	r1, r7
 800cd92:	4680      	mov	r8, r0
 800cd94:	2300      	movs	r3, #0
 800cd96:	220a      	movs	r2, #10
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 fc77 	bl	800d68c <__multadd>
 800cd9e:	4607      	mov	r7, r0
 800cda0:	e7f0      	b.n	800cd84 <_dtoa_r+0xb14>
 800cda2:	f1b9 0f00 	cmp.w	r9, #0
 800cda6:	9a00      	ldr	r2, [sp, #0]
 800cda8:	bfcc      	ite	gt
 800cdaa:	464d      	movgt	r5, r9
 800cdac:	2501      	movle	r5, #1
 800cdae:	4415      	add	r5, r2
 800cdb0:	f04f 0800 	mov.w	r8, #0
 800cdb4:	4659      	mov	r1, fp
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	4620      	mov	r0, r4
 800cdba:	9301      	str	r3, [sp, #4]
 800cdbc:	f000 fe60 	bl	800da80 <__lshift>
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4683      	mov	fp, r0
 800cdc4:	f000 fec8 	bl	800db58 <__mcmp>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	dcb2      	bgt.n	800cd32 <_dtoa_r+0xac2>
 800cdcc:	d102      	bne.n	800cdd4 <_dtoa_r+0xb64>
 800cdce:	9b01      	ldr	r3, [sp, #4]
 800cdd0:	07db      	lsls	r3, r3, #31
 800cdd2:	d4ae      	bmi.n	800cd32 <_dtoa_r+0xac2>
 800cdd4:	462b      	mov	r3, r5
 800cdd6:	461d      	mov	r5, r3
 800cdd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cddc:	2a30      	cmp	r2, #48	; 0x30
 800cdde:	d0fa      	beq.n	800cdd6 <_dtoa_r+0xb66>
 800cde0:	e6f7      	b.n	800cbd2 <_dtoa_r+0x962>
 800cde2:	9a00      	ldr	r2, [sp, #0]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d1a5      	bne.n	800cd34 <_dtoa_r+0xac4>
 800cde8:	f10a 0a01 	add.w	sl, sl, #1
 800cdec:	2331      	movs	r3, #49	; 0x31
 800cdee:	e779      	b.n	800cce4 <_dtoa_r+0xa74>
 800cdf0:	4b13      	ldr	r3, [pc, #76]	; (800ce40 <_dtoa_r+0xbd0>)
 800cdf2:	f7ff baaf 	b.w	800c354 <_dtoa_r+0xe4>
 800cdf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f47f aa86 	bne.w	800c30a <_dtoa_r+0x9a>
 800cdfe:	4b11      	ldr	r3, [pc, #68]	; (800ce44 <_dtoa_r+0xbd4>)
 800ce00:	f7ff baa8 	b.w	800c354 <_dtoa_r+0xe4>
 800ce04:	f1b9 0f00 	cmp.w	r9, #0
 800ce08:	dc03      	bgt.n	800ce12 <_dtoa_r+0xba2>
 800ce0a:	9b05      	ldr	r3, [sp, #20]
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	f73f aec9 	bgt.w	800cba4 <_dtoa_r+0x934>
 800ce12:	9d00      	ldr	r5, [sp, #0]
 800ce14:	4631      	mov	r1, r6
 800ce16:	4658      	mov	r0, fp
 800ce18:	f7ff f99e 	bl	800c158 <quorem>
 800ce1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ce20:	f805 3b01 	strb.w	r3, [r5], #1
 800ce24:	9a00      	ldr	r2, [sp, #0]
 800ce26:	1aaa      	subs	r2, r5, r2
 800ce28:	4591      	cmp	r9, r2
 800ce2a:	ddba      	ble.n	800cda2 <_dtoa_r+0xb32>
 800ce2c:	4659      	mov	r1, fp
 800ce2e:	2300      	movs	r3, #0
 800ce30:	220a      	movs	r2, #10
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fc2a 	bl	800d68c <__multadd>
 800ce38:	4683      	mov	fp, r0
 800ce3a:	e7eb      	b.n	800ce14 <_dtoa_r+0xba4>
 800ce3c:	0800fc69 	.word	0x0800fc69
 800ce40:	0800fe69 	.word	0x0800fe69
 800ce44:	0800fbfd 	.word	0x0800fbfd

0800ce48 <fiprintf>:
 800ce48:	b40e      	push	{r1, r2, r3}
 800ce4a:	b503      	push	{r0, r1, lr}
 800ce4c:	4601      	mov	r1, r0
 800ce4e:	ab03      	add	r3, sp, #12
 800ce50:	4805      	ldr	r0, [pc, #20]	; (800ce68 <fiprintf+0x20>)
 800ce52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce56:	6800      	ldr	r0, [r0, #0]
 800ce58:	9301      	str	r3, [sp, #4]
 800ce5a:	f001 fc81 	bl	800e760 <_vfiprintf_r>
 800ce5e:	b002      	add	sp, #8
 800ce60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce64:	b003      	add	sp, #12
 800ce66:	4770      	bx	lr
 800ce68:	20000078 	.word	0x20000078

0800ce6c <rshift>:
 800ce6c:	6903      	ldr	r3, [r0, #16]
 800ce6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce76:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce7a:	f100 0414 	add.w	r4, r0, #20
 800ce7e:	dd45      	ble.n	800cf0c <rshift+0xa0>
 800ce80:	f011 011f 	ands.w	r1, r1, #31
 800ce84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce8c:	d10c      	bne.n	800cea8 <rshift+0x3c>
 800ce8e:	f100 0710 	add.w	r7, r0, #16
 800ce92:	4629      	mov	r1, r5
 800ce94:	42b1      	cmp	r1, r6
 800ce96:	d334      	bcc.n	800cf02 <rshift+0x96>
 800ce98:	1a9b      	subs	r3, r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	1eea      	subs	r2, r5, #3
 800ce9e:	4296      	cmp	r6, r2
 800cea0:	bf38      	it	cc
 800cea2:	2300      	movcc	r3, #0
 800cea4:	4423      	add	r3, r4
 800cea6:	e015      	b.n	800ced4 <rshift+0x68>
 800cea8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ceac:	f1c1 0820 	rsb	r8, r1, #32
 800ceb0:	40cf      	lsrs	r7, r1
 800ceb2:	f105 0e04 	add.w	lr, r5, #4
 800ceb6:	46a1      	mov	r9, r4
 800ceb8:	4576      	cmp	r6, lr
 800ceba:	46f4      	mov	ip, lr
 800cebc:	d815      	bhi.n	800ceea <rshift+0x7e>
 800cebe:	1a9b      	subs	r3, r3, r2
 800cec0:	009a      	lsls	r2, r3, #2
 800cec2:	3a04      	subs	r2, #4
 800cec4:	3501      	adds	r5, #1
 800cec6:	42ae      	cmp	r6, r5
 800cec8:	bf38      	it	cc
 800ceca:	2200      	movcc	r2, #0
 800cecc:	18a3      	adds	r3, r4, r2
 800cece:	50a7      	str	r7, [r4, r2]
 800ced0:	b107      	cbz	r7, 800ced4 <rshift+0x68>
 800ced2:	3304      	adds	r3, #4
 800ced4:	1b1a      	subs	r2, r3, r4
 800ced6:	42a3      	cmp	r3, r4
 800ced8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cedc:	bf08      	it	eq
 800cede:	2300      	moveq	r3, #0
 800cee0:	6102      	str	r2, [r0, #16]
 800cee2:	bf08      	it	eq
 800cee4:	6143      	streq	r3, [r0, #20]
 800cee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceea:	f8dc c000 	ldr.w	ip, [ip]
 800ceee:	fa0c fc08 	lsl.w	ip, ip, r8
 800cef2:	ea4c 0707 	orr.w	r7, ip, r7
 800cef6:	f849 7b04 	str.w	r7, [r9], #4
 800cefa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cefe:	40cf      	lsrs	r7, r1
 800cf00:	e7da      	b.n	800ceb8 <rshift+0x4c>
 800cf02:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf06:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf0a:	e7c3      	b.n	800ce94 <rshift+0x28>
 800cf0c:	4623      	mov	r3, r4
 800cf0e:	e7e1      	b.n	800ced4 <rshift+0x68>

0800cf10 <__hexdig_fun>:
 800cf10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cf14:	2b09      	cmp	r3, #9
 800cf16:	d802      	bhi.n	800cf1e <__hexdig_fun+0xe>
 800cf18:	3820      	subs	r0, #32
 800cf1a:	b2c0      	uxtb	r0, r0
 800cf1c:	4770      	bx	lr
 800cf1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cf22:	2b05      	cmp	r3, #5
 800cf24:	d801      	bhi.n	800cf2a <__hexdig_fun+0x1a>
 800cf26:	3847      	subs	r0, #71	; 0x47
 800cf28:	e7f7      	b.n	800cf1a <__hexdig_fun+0xa>
 800cf2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cf2e:	2b05      	cmp	r3, #5
 800cf30:	d801      	bhi.n	800cf36 <__hexdig_fun+0x26>
 800cf32:	3827      	subs	r0, #39	; 0x27
 800cf34:	e7f1      	b.n	800cf1a <__hexdig_fun+0xa>
 800cf36:	2000      	movs	r0, #0
 800cf38:	4770      	bx	lr
	...

0800cf3c <__gethex>:
 800cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf40:	ed2d 8b02 	vpush	{d8}
 800cf44:	b089      	sub	sp, #36	; 0x24
 800cf46:	ee08 0a10 	vmov	s16, r0
 800cf4a:	9304      	str	r3, [sp, #16]
 800cf4c:	4bbc      	ldr	r3, [pc, #752]	; (800d240 <__gethex+0x304>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	9301      	str	r3, [sp, #4]
 800cf52:	4618      	mov	r0, r3
 800cf54:	468b      	mov	fp, r1
 800cf56:	4690      	mov	r8, r2
 800cf58:	f7f3 f93a 	bl	80001d0 <strlen>
 800cf5c:	9b01      	ldr	r3, [sp, #4]
 800cf5e:	f8db 2000 	ldr.w	r2, [fp]
 800cf62:	4403      	add	r3, r0
 800cf64:	4682      	mov	sl, r0
 800cf66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cf6a:	9305      	str	r3, [sp, #20]
 800cf6c:	1c93      	adds	r3, r2, #2
 800cf6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cf72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf76:	32fe      	adds	r2, #254	; 0xfe
 800cf78:	18d1      	adds	r1, r2, r3
 800cf7a:	461f      	mov	r7, r3
 800cf7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cf80:	9100      	str	r1, [sp, #0]
 800cf82:	2830      	cmp	r0, #48	; 0x30
 800cf84:	d0f8      	beq.n	800cf78 <__gethex+0x3c>
 800cf86:	f7ff ffc3 	bl	800cf10 <__hexdig_fun>
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d13a      	bne.n	800d006 <__gethex+0xca>
 800cf90:	9901      	ldr	r1, [sp, #4]
 800cf92:	4652      	mov	r2, sl
 800cf94:	4638      	mov	r0, r7
 800cf96:	f001 fec5 	bl	800ed24 <strncmp>
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	d168      	bne.n	800d072 <__gethex+0x136>
 800cfa0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cfa4:	eb07 060a 	add.w	r6, r7, sl
 800cfa8:	f7ff ffb2 	bl	800cf10 <__hexdig_fun>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d062      	beq.n	800d076 <__gethex+0x13a>
 800cfb0:	4633      	mov	r3, r6
 800cfb2:	7818      	ldrb	r0, [r3, #0]
 800cfb4:	2830      	cmp	r0, #48	; 0x30
 800cfb6:	461f      	mov	r7, r3
 800cfb8:	f103 0301 	add.w	r3, r3, #1
 800cfbc:	d0f9      	beq.n	800cfb2 <__gethex+0x76>
 800cfbe:	f7ff ffa7 	bl	800cf10 <__hexdig_fun>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	fab0 f480 	clz	r4, r0
 800cfc8:	0964      	lsrs	r4, r4, #5
 800cfca:	4635      	mov	r5, r6
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	463a      	mov	r2, r7
 800cfd0:	4616      	mov	r6, r2
 800cfd2:	3201      	adds	r2, #1
 800cfd4:	7830      	ldrb	r0, [r6, #0]
 800cfd6:	f7ff ff9b 	bl	800cf10 <__hexdig_fun>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d1f8      	bne.n	800cfd0 <__gethex+0x94>
 800cfde:	9901      	ldr	r1, [sp, #4]
 800cfe0:	4652      	mov	r2, sl
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f001 fe9e 	bl	800ed24 <strncmp>
 800cfe8:	b980      	cbnz	r0, 800d00c <__gethex+0xd0>
 800cfea:	b94d      	cbnz	r5, 800d000 <__gethex+0xc4>
 800cfec:	eb06 050a 	add.w	r5, r6, sl
 800cff0:	462a      	mov	r2, r5
 800cff2:	4616      	mov	r6, r2
 800cff4:	3201      	adds	r2, #1
 800cff6:	7830      	ldrb	r0, [r6, #0]
 800cff8:	f7ff ff8a 	bl	800cf10 <__hexdig_fun>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d1f8      	bne.n	800cff2 <__gethex+0xb6>
 800d000:	1bad      	subs	r5, r5, r6
 800d002:	00ad      	lsls	r5, r5, #2
 800d004:	e004      	b.n	800d010 <__gethex+0xd4>
 800d006:	2400      	movs	r4, #0
 800d008:	4625      	mov	r5, r4
 800d00a:	e7e0      	b.n	800cfce <__gethex+0x92>
 800d00c:	2d00      	cmp	r5, #0
 800d00e:	d1f7      	bne.n	800d000 <__gethex+0xc4>
 800d010:	7833      	ldrb	r3, [r6, #0]
 800d012:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d016:	2b50      	cmp	r3, #80	; 0x50
 800d018:	d13b      	bne.n	800d092 <__gethex+0x156>
 800d01a:	7873      	ldrb	r3, [r6, #1]
 800d01c:	2b2b      	cmp	r3, #43	; 0x2b
 800d01e:	d02c      	beq.n	800d07a <__gethex+0x13e>
 800d020:	2b2d      	cmp	r3, #45	; 0x2d
 800d022:	d02e      	beq.n	800d082 <__gethex+0x146>
 800d024:	1c71      	adds	r1, r6, #1
 800d026:	f04f 0900 	mov.w	r9, #0
 800d02a:	7808      	ldrb	r0, [r1, #0]
 800d02c:	f7ff ff70 	bl	800cf10 <__hexdig_fun>
 800d030:	1e43      	subs	r3, r0, #1
 800d032:	b2db      	uxtb	r3, r3
 800d034:	2b18      	cmp	r3, #24
 800d036:	d82c      	bhi.n	800d092 <__gethex+0x156>
 800d038:	f1a0 0210 	sub.w	r2, r0, #16
 800d03c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d040:	f7ff ff66 	bl	800cf10 <__hexdig_fun>
 800d044:	1e43      	subs	r3, r0, #1
 800d046:	b2db      	uxtb	r3, r3
 800d048:	2b18      	cmp	r3, #24
 800d04a:	d91d      	bls.n	800d088 <__gethex+0x14c>
 800d04c:	f1b9 0f00 	cmp.w	r9, #0
 800d050:	d000      	beq.n	800d054 <__gethex+0x118>
 800d052:	4252      	negs	r2, r2
 800d054:	4415      	add	r5, r2
 800d056:	f8cb 1000 	str.w	r1, [fp]
 800d05a:	b1e4      	cbz	r4, 800d096 <__gethex+0x15a>
 800d05c:	9b00      	ldr	r3, [sp, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	bf14      	ite	ne
 800d062:	2700      	movne	r7, #0
 800d064:	2706      	moveq	r7, #6
 800d066:	4638      	mov	r0, r7
 800d068:	b009      	add	sp, #36	; 0x24
 800d06a:	ecbd 8b02 	vpop	{d8}
 800d06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d072:	463e      	mov	r6, r7
 800d074:	4625      	mov	r5, r4
 800d076:	2401      	movs	r4, #1
 800d078:	e7ca      	b.n	800d010 <__gethex+0xd4>
 800d07a:	f04f 0900 	mov.w	r9, #0
 800d07e:	1cb1      	adds	r1, r6, #2
 800d080:	e7d3      	b.n	800d02a <__gethex+0xee>
 800d082:	f04f 0901 	mov.w	r9, #1
 800d086:	e7fa      	b.n	800d07e <__gethex+0x142>
 800d088:	230a      	movs	r3, #10
 800d08a:	fb03 0202 	mla	r2, r3, r2, r0
 800d08e:	3a10      	subs	r2, #16
 800d090:	e7d4      	b.n	800d03c <__gethex+0x100>
 800d092:	4631      	mov	r1, r6
 800d094:	e7df      	b.n	800d056 <__gethex+0x11a>
 800d096:	1bf3      	subs	r3, r6, r7
 800d098:	3b01      	subs	r3, #1
 800d09a:	4621      	mov	r1, r4
 800d09c:	2b07      	cmp	r3, #7
 800d09e:	dc0b      	bgt.n	800d0b8 <__gethex+0x17c>
 800d0a0:	ee18 0a10 	vmov	r0, s16
 800d0a4:	f000 fa90 	bl	800d5c8 <_Balloc>
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	b940      	cbnz	r0, 800d0be <__gethex+0x182>
 800d0ac:	4b65      	ldr	r3, [pc, #404]	; (800d244 <__gethex+0x308>)
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	21de      	movs	r1, #222	; 0xde
 800d0b2:	4865      	ldr	r0, [pc, #404]	; (800d248 <__gethex+0x30c>)
 800d0b4:	f7ff f822 	bl	800c0fc <__assert_func>
 800d0b8:	3101      	adds	r1, #1
 800d0ba:	105b      	asrs	r3, r3, #1
 800d0bc:	e7ee      	b.n	800d09c <__gethex+0x160>
 800d0be:	f100 0914 	add.w	r9, r0, #20
 800d0c2:	f04f 0b00 	mov.w	fp, #0
 800d0c6:	f1ca 0301 	rsb	r3, sl, #1
 800d0ca:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0ce:	f8cd b000 	str.w	fp, [sp]
 800d0d2:	9306      	str	r3, [sp, #24]
 800d0d4:	42b7      	cmp	r7, r6
 800d0d6:	d340      	bcc.n	800d15a <__gethex+0x21e>
 800d0d8:	9802      	ldr	r0, [sp, #8]
 800d0da:	9b00      	ldr	r3, [sp, #0]
 800d0dc:	f840 3b04 	str.w	r3, [r0], #4
 800d0e0:	eba0 0009 	sub.w	r0, r0, r9
 800d0e4:	1080      	asrs	r0, r0, #2
 800d0e6:	0146      	lsls	r6, r0, #5
 800d0e8:	6120      	str	r0, [r4, #16]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f000 fb62 	bl	800d7b4 <__hi0bits>
 800d0f0:	1a30      	subs	r0, r6, r0
 800d0f2:	f8d8 6000 	ldr.w	r6, [r8]
 800d0f6:	42b0      	cmp	r0, r6
 800d0f8:	dd63      	ble.n	800d1c2 <__gethex+0x286>
 800d0fa:	1b87      	subs	r7, r0, r6
 800d0fc:	4639      	mov	r1, r7
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 fefc 	bl	800defc <__any_on>
 800d104:	4682      	mov	sl, r0
 800d106:	b1a8      	cbz	r0, 800d134 <__gethex+0x1f8>
 800d108:	1e7b      	subs	r3, r7, #1
 800d10a:	1159      	asrs	r1, r3, #5
 800d10c:	f003 021f 	and.w	r2, r3, #31
 800d110:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d114:	f04f 0a01 	mov.w	sl, #1
 800d118:	fa0a f202 	lsl.w	r2, sl, r2
 800d11c:	420a      	tst	r2, r1
 800d11e:	d009      	beq.n	800d134 <__gethex+0x1f8>
 800d120:	4553      	cmp	r3, sl
 800d122:	dd05      	ble.n	800d130 <__gethex+0x1f4>
 800d124:	1eb9      	subs	r1, r7, #2
 800d126:	4620      	mov	r0, r4
 800d128:	f000 fee8 	bl	800defc <__any_on>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d145      	bne.n	800d1bc <__gethex+0x280>
 800d130:	f04f 0a02 	mov.w	sl, #2
 800d134:	4639      	mov	r1, r7
 800d136:	4620      	mov	r0, r4
 800d138:	f7ff fe98 	bl	800ce6c <rshift>
 800d13c:	443d      	add	r5, r7
 800d13e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d142:	42ab      	cmp	r3, r5
 800d144:	da4c      	bge.n	800d1e0 <__gethex+0x2a4>
 800d146:	ee18 0a10 	vmov	r0, s16
 800d14a:	4621      	mov	r1, r4
 800d14c:	f000 fa7c 	bl	800d648 <_Bfree>
 800d150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d152:	2300      	movs	r3, #0
 800d154:	6013      	str	r3, [r2, #0]
 800d156:	27a3      	movs	r7, #163	; 0xa3
 800d158:	e785      	b.n	800d066 <__gethex+0x12a>
 800d15a:	1e73      	subs	r3, r6, #1
 800d15c:	9a05      	ldr	r2, [sp, #20]
 800d15e:	9303      	str	r3, [sp, #12]
 800d160:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d164:	4293      	cmp	r3, r2
 800d166:	d019      	beq.n	800d19c <__gethex+0x260>
 800d168:	f1bb 0f20 	cmp.w	fp, #32
 800d16c:	d107      	bne.n	800d17e <__gethex+0x242>
 800d16e:	9b02      	ldr	r3, [sp, #8]
 800d170:	9a00      	ldr	r2, [sp, #0]
 800d172:	f843 2b04 	str.w	r2, [r3], #4
 800d176:	9302      	str	r3, [sp, #8]
 800d178:	2300      	movs	r3, #0
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	469b      	mov	fp, r3
 800d17e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d182:	f7ff fec5 	bl	800cf10 <__hexdig_fun>
 800d186:	9b00      	ldr	r3, [sp, #0]
 800d188:	f000 000f 	and.w	r0, r0, #15
 800d18c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d190:	4303      	orrs	r3, r0
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	f10b 0b04 	add.w	fp, fp, #4
 800d198:	9b03      	ldr	r3, [sp, #12]
 800d19a:	e00d      	b.n	800d1b8 <__gethex+0x27c>
 800d19c:	9b03      	ldr	r3, [sp, #12]
 800d19e:	9a06      	ldr	r2, [sp, #24]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	42bb      	cmp	r3, r7
 800d1a4:	d3e0      	bcc.n	800d168 <__gethex+0x22c>
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	9901      	ldr	r1, [sp, #4]
 800d1aa:	9307      	str	r3, [sp, #28]
 800d1ac:	4652      	mov	r2, sl
 800d1ae:	f001 fdb9 	bl	800ed24 <strncmp>
 800d1b2:	9b07      	ldr	r3, [sp, #28]
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d1d7      	bne.n	800d168 <__gethex+0x22c>
 800d1b8:	461e      	mov	r6, r3
 800d1ba:	e78b      	b.n	800d0d4 <__gethex+0x198>
 800d1bc:	f04f 0a03 	mov.w	sl, #3
 800d1c0:	e7b8      	b.n	800d134 <__gethex+0x1f8>
 800d1c2:	da0a      	bge.n	800d1da <__gethex+0x29e>
 800d1c4:	1a37      	subs	r7, r6, r0
 800d1c6:	4621      	mov	r1, r4
 800d1c8:	ee18 0a10 	vmov	r0, s16
 800d1cc:	463a      	mov	r2, r7
 800d1ce:	f000 fc57 	bl	800da80 <__lshift>
 800d1d2:	1bed      	subs	r5, r5, r7
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	f100 0914 	add.w	r9, r0, #20
 800d1da:	f04f 0a00 	mov.w	sl, #0
 800d1de:	e7ae      	b.n	800d13e <__gethex+0x202>
 800d1e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d1e4:	42a8      	cmp	r0, r5
 800d1e6:	dd72      	ble.n	800d2ce <__gethex+0x392>
 800d1e8:	1b45      	subs	r5, r0, r5
 800d1ea:	42ae      	cmp	r6, r5
 800d1ec:	dc36      	bgt.n	800d25c <__gethex+0x320>
 800d1ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d02a      	beq.n	800d24c <__gethex+0x310>
 800d1f6:	2b03      	cmp	r3, #3
 800d1f8:	d02c      	beq.n	800d254 <__gethex+0x318>
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d115      	bne.n	800d22a <__gethex+0x2ee>
 800d1fe:	42ae      	cmp	r6, r5
 800d200:	d113      	bne.n	800d22a <__gethex+0x2ee>
 800d202:	2e01      	cmp	r6, #1
 800d204:	d10b      	bne.n	800d21e <__gethex+0x2e2>
 800d206:	9a04      	ldr	r2, [sp, #16]
 800d208:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d20c:	6013      	str	r3, [r2, #0]
 800d20e:	2301      	movs	r3, #1
 800d210:	6123      	str	r3, [r4, #16]
 800d212:	f8c9 3000 	str.w	r3, [r9]
 800d216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d218:	2762      	movs	r7, #98	; 0x62
 800d21a:	601c      	str	r4, [r3, #0]
 800d21c:	e723      	b.n	800d066 <__gethex+0x12a>
 800d21e:	1e71      	subs	r1, r6, #1
 800d220:	4620      	mov	r0, r4
 800d222:	f000 fe6b 	bl	800defc <__any_on>
 800d226:	2800      	cmp	r0, #0
 800d228:	d1ed      	bne.n	800d206 <__gethex+0x2ca>
 800d22a:	ee18 0a10 	vmov	r0, s16
 800d22e:	4621      	mov	r1, r4
 800d230:	f000 fa0a 	bl	800d648 <_Bfree>
 800d234:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d236:	2300      	movs	r3, #0
 800d238:	6013      	str	r3, [r2, #0]
 800d23a:	2750      	movs	r7, #80	; 0x50
 800d23c:	e713      	b.n	800d066 <__gethex+0x12a>
 800d23e:	bf00      	nop
 800d240:	0800fce4 	.word	0x0800fce4
 800d244:	0800fc69 	.word	0x0800fc69
 800d248:	0800fc7a 	.word	0x0800fc7a
 800d24c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1eb      	bne.n	800d22a <__gethex+0x2ee>
 800d252:	e7d8      	b.n	800d206 <__gethex+0x2ca>
 800d254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1d5      	bne.n	800d206 <__gethex+0x2ca>
 800d25a:	e7e6      	b.n	800d22a <__gethex+0x2ee>
 800d25c:	1e6f      	subs	r7, r5, #1
 800d25e:	f1ba 0f00 	cmp.w	sl, #0
 800d262:	d131      	bne.n	800d2c8 <__gethex+0x38c>
 800d264:	b127      	cbz	r7, 800d270 <__gethex+0x334>
 800d266:	4639      	mov	r1, r7
 800d268:	4620      	mov	r0, r4
 800d26a:	f000 fe47 	bl	800defc <__any_on>
 800d26e:	4682      	mov	sl, r0
 800d270:	117b      	asrs	r3, r7, #5
 800d272:	2101      	movs	r1, #1
 800d274:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d278:	f007 071f 	and.w	r7, r7, #31
 800d27c:	fa01 f707 	lsl.w	r7, r1, r7
 800d280:	421f      	tst	r7, r3
 800d282:	4629      	mov	r1, r5
 800d284:	4620      	mov	r0, r4
 800d286:	bf18      	it	ne
 800d288:	f04a 0a02 	orrne.w	sl, sl, #2
 800d28c:	1b76      	subs	r6, r6, r5
 800d28e:	f7ff fded 	bl	800ce6c <rshift>
 800d292:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d296:	2702      	movs	r7, #2
 800d298:	f1ba 0f00 	cmp.w	sl, #0
 800d29c:	d048      	beq.n	800d330 <__gethex+0x3f4>
 800d29e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d015      	beq.n	800d2d2 <__gethex+0x396>
 800d2a6:	2b03      	cmp	r3, #3
 800d2a8:	d017      	beq.n	800d2da <__gethex+0x39e>
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d109      	bne.n	800d2c2 <__gethex+0x386>
 800d2ae:	f01a 0f02 	tst.w	sl, #2
 800d2b2:	d006      	beq.n	800d2c2 <__gethex+0x386>
 800d2b4:	f8d9 0000 	ldr.w	r0, [r9]
 800d2b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800d2bc:	f01a 0f01 	tst.w	sl, #1
 800d2c0:	d10e      	bne.n	800d2e0 <__gethex+0x3a4>
 800d2c2:	f047 0710 	orr.w	r7, r7, #16
 800d2c6:	e033      	b.n	800d330 <__gethex+0x3f4>
 800d2c8:	f04f 0a01 	mov.w	sl, #1
 800d2cc:	e7d0      	b.n	800d270 <__gethex+0x334>
 800d2ce:	2701      	movs	r7, #1
 800d2d0:	e7e2      	b.n	800d298 <__gethex+0x35c>
 800d2d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2d4:	f1c3 0301 	rsb	r3, r3, #1
 800d2d8:	9315      	str	r3, [sp, #84]	; 0x54
 800d2da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d0f0      	beq.n	800d2c2 <__gethex+0x386>
 800d2e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2e4:	f104 0314 	add.w	r3, r4, #20
 800d2e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d2ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d2f0:	f04f 0c00 	mov.w	ip, #0
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d2fe:	d01c      	beq.n	800d33a <__gethex+0x3fe>
 800d300:	3201      	adds	r2, #1
 800d302:	6002      	str	r2, [r0, #0]
 800d304:	2f02      	cmp	r7, #2
 800d306:	f104 0314 	add.w	r3, r4, #20
 800d30a:	d13f      	bne.n	800d38c <__gethex+0x450>
 800d30c:	f8d8 2000 	ldr.w	r2, [r8]
 800d310:	3a01      	subs	r2, #1
 800d312:	42b2      	cmp	r2, r6
 800d314:	d10a      	bne.n	800d32c <__gethex+0x3f0>
 800d316:	1171      	asrs	r1, r6, #5
 800d318:	2201      	movs	r2, #1
 800d31a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d31e:	f006 061f 	and.w	r6, r6, #31
 800d322:	fa02 f606 	lsl.w	r6, r2, r6
 800d326:	421e      	tst	r6, r3
 800d328:	bf18      	it	ne
 800d32a:	4617      	movne	r7, r2
 800d32c:	f047 0720 	orr.w	r7, r7, #32
 800d330:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d332:	601c      	str	r4, [r3, #0]
 800d334:	9b04      	ldr	r3, [sp, #16]
 800d336:	601d      	str	r5, [r3, #0]
 800d338:	e695      	b.n	800d066 <__gethex+0x12a>
 800d33a:	4299      	cmp	r1, r3
 800d33c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d340:	d8d8      	bhi.n	800d2f4 <__gethex+0x3b8>
 800d342:	68a3      	ldr	r3, [r4, #8]
 800d344:	459b      	cmp	fp, r3
 800d346:	db19      	blt.n	800d37c <__gethex+0x440>
 800d348:	6861      	ldr	r1, [r4, #4]
 800d34a:	ee18 0a10 	vmov	r0, s16
 800d34e:	3101      	adds	r1, #1
 800d350:	f000 f93a 	bl	800d5c8 <_Balloc>
 800d354:	4681      	mov	r9, r0
 800d356:	b918      	cbnz	r0, 800d360 <__gethex+0x424>
 800d358:	4b1a      	ldr	r3, [pc, #104]	; (800d3c4 <__gethex+0x488>)
 800d35a:	4602      	mov	r2, r0
 800d35c:	2184      	movs	r1, #132	; 0x84
 800d35e:	e6a8      	b.n	800d0b2 <__gethex+0x176>
 800d360:	6922      	ldr	r2, [r4, #16]
 800d362:	3202      	adds	r2, #2
 800d364:	f104 010c 	add.w	r1, r4, #12
 800d368:	0092      	lsls	r2, r2, #2
 800d36a:	300c      	adds	r0, #12
 800d36c:	f000 f91e 	bl	800d5ac <memcpy>
 800d370:	4621      	mov	r1, r4
 800d372:	ee18 0a10 	vmov	r0, s16
 800d376:	f000 f967 	bl	800d648 <_Bfree>
 800d37a:	464c      	mov	r4, r9
 800d37c:	6923      	ldr	r3, [r4, #16]
 800d37e:	1c5a      	adds	r2, r3, #1
 800d380:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d384:	6122      	str	r2, [r4, #16]
 800d386:	2201      	movs	r2, #1
 800d388:	615a      	str	r2, [r3, #20]
 800d38a:	e7bb      	b.n	800d304 <__gethex+0x3c8>
 800d38c:	6922      	ldr	r2, [r4, #16]
 800d38e:	455a      	cmp	r2, fp
 800d390:	dd0b      	ble.n	800d3aa <__gethex+0x46e>
 800d392:	2101      	movs	r1, #1
 800d394:	4620      	mov	r0, r4
 800d396:	f7ff fd69 	bl	800ce6c <rshift>
 800d39a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d39e:	3501      	adds	r5, #1
 800d3a0:	42ab      	cmp	r3, r5
 800d3a2:	f6ff aed0 	blt.w	800d146 <__gethex+0x20a>
 800d3a6:	2701      	movs	r7, #1
 800d3a8:	e7c0      	b.n	800d32c <__gethex+0x3f0>
 800d3aa:	f016 061f 	ands.w	r6, r6, #31
 800d3ae:	d0fa      	beq.n	800d3a6 <__gethex+0x46a>
 800d3b0:	449a      	add	sl, r3
 800d3b2:	f1c6 0620 	rsb	r6, r6, #32
 800d3b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d3ba:	f000 f9fb 	bl	800d7b4 <__hi0bits>
 800d3be:	42b0      	cmp	r0, r6
 800d3c0:	dbe7      	blt.n	800d392 <__gethex+0x456>
 800d3c2:	e7f0      	b.n	800d3a6 <__gethex+0x46a>
 800d3c4:	0800fc69 	.word	0x0800fc69

0800d3c8 <L_shift>:
 800d3c8:	f1c2 0208 	rsb	r2, r2, #8
 800d3cc:	0092      	lsls	r2, r2, #2
 800d3ce:	b570      	push	{r4, r5, r6, lr}
 800d3d0:	f1c2 0620 	rsb	r6, r2, #32
 800d3d4:	6843      	ldr	r3, [r0, #4]
 800d3d6:	6804      	ldr	r4, [r0, #0]
 800d3d8:	fa03 f506 	lsl.w	r5, r3, r6
 800d3dc:	432c      	orrs	r4, r5
 800d3de:	40d3      	lsrs	r3, r2
 800d3e0:	6004      	str	r4, [r0, #0]
 800d3e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3e6:	4288      	cmp	r0, r1
 800d3e8:	d3f4      	bcc.n	800d3d4 <L_shift+0xc>
 800d3ea:	bd70      	pop	{r4, r5, r6, pc}

0800d3ec <__match>:
 800d3ec:	b530      	push	{r4, r5, lr}
 800d3ee:	6803      	ldr	r3, [r0, #0]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3f6:	b914      	cbnz	r4, 800d3fe <__match+0x12>
 800d3f8:	6003      	str	r3, [r0, #0]
 800d3fa:	2001      	movs	r0, #1
 800d3fc:	bd30      	pop	{r4, r5, pc}
 800d3fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d402:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d406:	2d19      	cmp	r5, #25
 800d408:	bf98      	it	ls
 800d40a:	3220      	addls	r2, #32
 800d40c:	42a2      	cmp	r2, r4
 800d40e:	d0f0      	beq.n	800d3f2 <__match+0x6>
 800d410:	2000      	movs	r0, #0
 800d412:	e7f3      	b.n	800d3fc <__match+0x10>

0800d414 <__hexnan>:
 800d414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d418:	680b      	ldr	r3, [r1, #0]
 800d41a:	6801      	ldr	r1, [r0, #0]
 800d41c:	115e      	asrs	r6, r3, #5
 800d41e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d422:	f013 031f 	ands.w	r3, r3, #31
 800d426:	b087      	sub	sp, #28
 800d428:	bf18      	it	ne
 800d42a:	3604      	addne	r6, #4
 800d42c:	2500      	movs	r5, #0
 800d42e:	1f37      	subs	r7, r6, #4
 800d430:	4682      	mov	sl, r0
 800d432:	4690      	mov	r8, r2
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	f846 5c04 	str.w	r5, [r6, #-4]
 800d43a:	46b9      	mov	r9, r7
 800d43c:	463c      	mov	r4, r7
 800d43e:	9502      	str	r5, [sp, #8]
 800d440:	46ab      	mov	fp, r5
 800d442:	784a      	ldrb	r2, [r1, #1]
 800d444:	1c4b      	adds	r3, r1, #1
 800d446:	9303      	str	r3, [sp, #12]
 800d448:	b342      	cbz	r2, 800d49c <__hexnan+0x88>
 800d44a:	4610      	mov	r0, r2
 800d44c:	9105      	str	r1, [sp, #20]
 800d44e:	9204      	str	r2, [sp, #16]
 800d450:	f7ff fd5e 	bl	800cf10 <__hexdig_fun>
 800d454:	2800      	cmp	r0, #0
 800d456:	d14f      	bne.n	800d4f8 <__hexnan+0xe4>
 800d458:	9a04      	ldr	r2, [sp, #16]
 800d45a:	9905      	ldr	r1, [sp, #20]
 800d45c:	2a20      	cmp	r2, #32
 800d45e:	d818      	bhi.n	800d492 <__hexnan+0x7e>
 800d460:	9b02      	ldr	r3, [sp, #8]
 800d462:	459b      	cmp	fp, r3
 800d464:	dd13      	ble.n	800d48e <__hexnan+0x7a>
 800d466:	454c      	cmp	r4, r9
 800d468:	d206      	bcs.n	800d478 <__hexnan+0x64>
 800d46a:	2d07      	cmp	r5, #7
 800d46c:	dc04      	bgt.n	800d478 <__hexnan+0x64>
 800d46e:	462a      	mov	r2, r5
 800d470:	4649      	mov	r1, r9
 800d472:	4620      	mov	r0, r4
 800d474:	f7ff ffa8 	bl	800d3c8 <L_shift>
 800d478:	4544      	cmp	r4, r8
 800d47a:	d950      	bls.n	800d51e <__hexnan+0x10a>
 800d47c:	2300      	movs	r3, #0
 800d47e:	f1a4 0904 	sub.w	r9, r4, #4
 800d482:	f844 3c04 	str.w	r3, [r4, #-4]
 800d486:	f8cd b008 	str.w	fp, [sp, #8]
 800d48a:	464c      	mov	r4, r9
 800d48c:	461d      	mov	r5, r3
 800d48e:	9903      	ldr	r1, [sp, #12]
 800d490:	e7d7      	b.n	800d442 <__hexnan+0x2e>
 800d492:	2a29      	cmp	r2, #41	; 0x29
 800d494:	d156      	bne.n	800d544 <__hexnan+0x130>
 800d496:	3102      	adds	r1, #2
 800d498:	f8ca 1000 	str.w	r1, [sl]
 800d49c:	f1bb 0f00 	cmp.w	fp, #0
 800d4a0:	d050      	beq.n	800d544 <__hexnan+0x130>
 800d4a2:	454c      	cmp	r4, r9
 800d4a4:	d206      	bcs.n	800d4b4 <__hexnan+0xa0>
 800d4a6:	2d07      	cmp	r5, #7
 800d4a8:	dc04      	bgt.n	800d4b4 <__hexnan+0xa0>
 800d4aa:	462a      	mov	r2, r5
 800d4ac:	4649      	mov	r1, r9
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f7ff ff8a 	bl	800d3c8 <L_shift>
 800d4b4:	4544      	cmp	r4, r8
 800d4b6:	d934      	bls.n	800d522 <__hexnan+0x10e>
 800d4b8:	f1a8 0204 	sub.w	r2, r8, #4
 800d4bc:	4623      	mov	r3, r4
 800d4be:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4c6:	429f      	cmp	r7, r3
 800d4c8:	d2f9      	bcs.n	800d4be <__hexnan+0xaa>
 800d4ca:	1b3b      	subs	r3, r7, r4
 800d4cc:	f023 0303 	bic.w	r3, r3, #3
 800d4d0:	3304      	adds	r3, #4
 800d4d2:	3401      	adds	r4, #1
 800d4d4:	3e03      	subs	r6, #3
 800d4d6:	42b4      	cmp	r4, r6
 800d4d8:	bf88      	it	hi
 800d4da:	2304      	movhi	r3, #4
 800d4dc:	4443      	add	r3, r8
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f843 2b04 	str.w	r2, [r3], #4
 800d4e4:	429f      	cmp	r7, r3
 800d4e6:	d2fb      	bcs.n	800d4e0 <__hexnan+0xcc>
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	b91b      	cbnz	r3, 800d4f4 <__hexnan+0xe0>
 800d4ec:	4547      	cmp	r7, r8
 800d4ee:	d127      	bne.n	800d540 <__hexnan+0x12c>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	603b      	str	r3, [r7, #0]
 800d4f4:	2005      	movs	r0, #5
 800d4f6:	e026      	b.n	800d546 <__hexnan+0x132>
 800d4f8:	3501      	adds	r5, #1
 800d4fa:	2d08      	cmp	r5, #8
 800d4fc:	f10b 0b01 	add.w	fp, fp, #1
 800d500:	dd06      	ble.n	800d510 <__hexnan+0xfc>
 800d502:	4544      	cmp	r4, r8
 800d504:	d9c3      	bls.n	800d48e <__hexnan+0x7a>
 800d506:	2300      	movs	r3, #0
 800d508:	f844 3c04 	str.w	r3, [r4, #-4]
 800d50c:	2501      	movs	r5, #1
 800d50e:	3c04      	subs	r4, #4
 800d510:	6822      	ldr	r2, [r4, #0]
 800d512:	f000 000f 	and.w	r0, r0, #15
 800d516:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d51a:	6022      	str	r2, [r4, #0]
 800d51c:	e7b7      	b.n	800d48e <__hexnan+0x7a>
 800d51e:	2508      	movs	r5, #8
 800d520:	e7b5      	b.n	800d48e <__hexnan+0x7a>
 800d522:	9b01      	ldr	r3, [sp, #4]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d0df      	beq.n	800d4e8 <__hexnan+0xd4>
 800d528:	f04f 32ff 	mov.w	r2, #4294967295
 800d52c:	f1c3 0320 	rsb	r3, r3, #32
 800d530:	fa22 f303 	lsr.w	r3, r2, r3
 800d534:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d538:	401a      	ands	r2, r3
 800d53a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d53e:	e7d3      	b.n	800d4e8 <__hexnan+0xd4>
 800d540:	3f04      	subs	r7, #4
 800d542:	e7d1      	b.n	800d4e8 <__hexnan+0xd4>
 800d544:	2004      	movs	r0, #4
 800d546:	b007      	add	sp, #28
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d54c <_localeconv_r>:
 800d54c:	4800      	ldr	r0, [pc, #0]	; (800d550 <_localeconv_r+0x4>)
 800d54e:	4770      	bx	lr
 800d550:	200001d0 	.word	0x200001d0

0800d554 <_lseek_r>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4d07      	ldr	r5, [pc, #28]	; (800d574 <_lseek_r+0x20>)
 800d558:	4604      	mov	r4, r0
 800d55a:	4608      	mov	r0, r1
 800d55c:	4611      	mov	r1, r2
 800d55e:	2200      	movs	r2, #0
 800d560:	602a      	str	r2, [r5, #0]
 800d562:	461a      	mov	r2, r3
 800d564:	f7f4 fe5e 	bl	8002224 <_lseek>
 800d568:	1c43      	adds	r3, r0, #1
 800d56a:	d102      	bne.n	800d572 <_lseek_r+0x1e>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	b103      	cbz	r3, 800d572 <_lseek_r+0x1e>
 800d570:	6023      	str	r3, [r4, #0]
 800d572:	bd38      	pop	{r3, r4, r5, pc}
 800d574:	20000b18 	.word	0x20000b18

0800d578 <malloc>:
 800d578:	4b02      	ldr	r3, [pc, #8]	; (800d584 <malloc+0xc>)
 800d57a:	4601      	mov	r1, r0
 800d57c:	6818      	ldr	r0, [r3, #0]
 800d57e:	f000 bd3d 	b.w	800dffc <_malloc_r>
 800d582:	bf00      	nop
 800d584:	20000078 	.word	0x20000078

0800d588 <__ascii_mbtowc>:
 800d588:	b082      	sub	sp, #8
 800d58a:	b901      	cbnz	r1, 800d58e <__ascii_mbtowc+0x6>
 800d58c:	a901      	add	r1, sp, #4
 800d58e:	b142      	cbz	r2, 800d5a2 <__ascii_mbtowc+0x1a>
 800d590:	b14b      	cbz	r3, 800d5a6 <__ascii_mbtowc+0x1e>
 800d592:	7813      	ldrb	r3, [r2, #0]
 800d594:	600b      	str	r3, [r1, #0]
 800d596:	7812      	ldrb	r2, [r2, #0]
 800d598:	1e10      	subs	r0, r2, #0
 800d59a:	bf18      	it	ne
 800d59c:	2001      	movne	r0, #1
 800d59e:	b002      	add	sp, #8
 800d5a0:	4770      	bx	lr
 800d5a2:	4610      	mov	r0, r2
 800d5a4:	e7fb      	b.n	800d59e <__ascii_mbtowc+0x16>
 800d5a6:	f06f 0001 	mvn.w	r0, #1
 800d5aa:	e7f8      	b.n	800d59e <__ascii_mbtowc+0x16>

0800d5ac <memcpy>:
 800d5ac:	440a      	add	r2, r1
 800d5ae:	4291      	cmp	r1, r2
 800d5b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5b4:	d100      	bne.n	800d5b8 <memcpy+0xc>
 800d5b6:	4770      	bx	lr
 800d5b8:	b510      	push	{r4, lr}
 800d5ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5c2:	4291      	cmp	r1, r2
 800d5c4:	d1f9      	bne.n	800d5ba <memcpy+0xe>
 800d5c6:	bd10      	pop	{r4, pc}

0800d5c8 <_Balloc>:
 800d5c8:	b570      	push	{r4, r5, r6, lr}
 800d5ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	460d      	mov	r5, r1
 800d5d0:	b976      	cbnz	r6, 800d5f0 <_Balloc+0x28>
 800d5d2:	2010      	movs	r0, #16
 800d5d4:	f7ff ffd0 	bl	800d578 <malloc>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	6260      	str	r0, [r4, #36]	; 0x24
 800d5dc:	b920      	cbnz	r0, 800d5e8 <_Balloc+0x20>
 800d5de:	4b18      	ldr	r3, [pc, #96]	; (800d640 <_Balloc+0x78>)
 800d5e0:	4818      	ldr	r0, [pc, #96]	; (800d644 <_Balloc+0x7c>)
 800d5e2:	2166      	movs	r1, #102	; 0x66
 800d5e4:	f7fe fd8a 	bl	800c0fc <__assert_func>
 800d5e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5ec:	6006      	str	r6, [r0, #0]
 800d5ee:	60c6      	str	r6, [r0, #12]
 800d5f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d5f2:	68f3      	ldr	r3, [r6, #12]
 800d5f4:	b183      	cbz	r3, 800d618 <_Balloc+0x50>
 800d5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5fe:	b9b8      	cbnz	r0, 800d630 <_Balloc+0x68>
 800d600:	2101      	movs	r1, #1
 800d602:	fa01 f605 	lsl.w	r6, r1, r5
 800d606:	1d72      	adds	r2, r6, #5
 800d608:	0092      	lsls	r2, r2, #2
 800d60a:	4620      	mov	r0, r4
 800d60c:	f000 fc97 	bl	800df3e <_calloc_r>
 800d610:	b160      	cbz	r0, 800d62c <_Balloc+0x64>
 800d612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d616:	e00e      	b.n	800d636 <_Balloc+0x6e>
 800d618:	2221      	movs	r2, #33	; 0x21
 800d61a:	2104      	movs	r1, #4
 800d61c:	4620      	mov	r0, r4
 800d61e:	f000 fc8e 	bl	800df3e <_calloc_r>
 800d622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d624:	60f0      	str	r0, [r6, #12]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1e4      	bne.n	800d5f6 <_Balloc+0x2e>
 800d62c:	2000      	movs	r0, #0
 800d62e:	bd70      	pop	{r4, r5, r6, pc}
 800d630:	6802      	ldr	r2, [r0, #0]
 800d632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d636:	2300      	movs	r3, #0
 800d638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d63c:	e7f7      	b.n	800d62e <_Balloc+0x66>
 800d63e:	bf00      	nop
 800d640:	0800fa48 	.word	0x0800fa48
 800d644:	0800fcf8 	.word	0x0800fcf8

0800d648 <_Bfree>:
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d64c:	4605      	mov	r5, r0
 800d64e:	460c      	mov	r4, r1
 800d650:	b976      	cbnz	r6, 800d670 <_Bfree+0x28>
 800d652:	2010      	movs	r0, #16
 800d654:	f7ff ff90 	bl	800d578 <malloc>
 800d658:	4602      	mov	r2, r0
 800d65a:	6268      	str	r0, [r5, #36]	; 0x24
 800d65c:	b920      	cbnz	r0, 800d668 <_Bfree+0x20>
 800d65e:	4b09      	ldr	r3, [pc, #36]	; (800d684 <_Bfree+0x3c>)
 800d660:	4809      	ldr	r0, [pc, #36]	; (800d688 <_Bfree+0x40>)
 800d662:	218a      	movs	r1, #138	; 0x8a
 800d664:	f7fe fd4a 	bl	800c0fc <__assert_func>
 800d668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d66c:	6006      	str	r6, [r0, #0]
 800d66e:	60c6      	str	r6, [r0, #12]
 800d670:	b13c      	cbz	r4, 800d682 <_Bfree+0x3a>
 800d672:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d674:	6862      	ldr	r2, [r4, #4]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d67c:	6021      	str	r1, [r4, #0]
 800d67e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d682:	bd70      	pop	{r4, r5, r6, pc}
 800d684:	0800fa48 	.word	0x0800fa48
 800d688:	0800fcf8 	.word	0x0800fcf8

0800d68c <__multadd>:
 800d68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d690:	690e      	ldr	r6, [r1, #16]
 800d692:	4607      	mov	r7, r0
 800d694:	4698      	mov	r8, r3
 800d696:	460c      	mov	r4, r1
 800d698:	f101 0014 	add.w	r0, r1, #20
 800d69c:	2300      	movs	r3, #0
 800d69e:	6805      	ldr	r5, [r0, #0]
 800d6a0:	b2a9      	uxth	r1, r5
 800d6a2:	fb02 8101 	mla	r1, r2, r1, r8
 800d6a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d6aa:	0c2d      	lsrs	r5, r5, #16
 800d6ac:	fb02 c505 	mla	r5, r2, r5, ip
 800d6b0:	b289      	uxth	r1, r1
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d6b8:	429e      	cmp	r6, r3
 800d6ba:	f840 1b04 	str.w	r1, [r0], #4
 800d6be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d6c2:	dcec      	bgt.n	800d69e <__multadd+0x12>
 800d6c4:	f1b8 0f00 	cmp.w	r8, #0
 800d6c8:	d022      	beq.n	800d710 <__multadd+0x84>
 800d6ca:	68a3      	ldr	r3, [r4, #8]
 800d6cc:	42b3      	cmp	r3, r6
 800d6ce:	dc19      	bgt.n	800d704 <__multadd+0x78>
 800d6d0:	6861      	ldr	r1, [r4, #4]
 800d6d2:	4638      	mov	r0, r7
 800d6d4:	3101      	adds	r1, #1
 800d6d6:	f7ff ff77 	bl	800d5c8 <_Balloc>
 800d6da:	4605      	mov	r5, r0
 800d6dc:	b928      	cbnz	r0, 800d6ea <__multadd+0x5e>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	4b0d      	ldr	r3, [pc, #52]	; (800d718 <__multadd+0x8c>)
 800d6e2:	480e      	ldr	r0, [pc, #56]	; (800d71c <__multadd+0x90>)
 800d6e4:	21b5      	movs	r1, #181	; 0xb5
 800d6e6:	f7fe fd09 	bl	800c0fc <__assert_func>
 800d6ea:	6922      	ldr	r2, [r4, #16]
 800d6ec:	3202      	adds	r2, #2
 800d6ee:	f104 010c 	add.w	r1, r4, #12
 800d6f2:	0092      	lsls	r2, r2, #2
 800d6f4:	300c      	adds	r0, #12
 800d6f6:	f7ff ff59 	bl	800d5ac <memcpy>
 800d6fa:	4621      	mov	r1, r4
 800d6fc:	4638      	mov	r0, r7
 800d6fe:	f7ff ffa3 	bl	800d648 <_Bfree>
 800d702:	462c      	mov	r4, r5
 800d704:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d708:	3601      	adds	r6, #1
 800d70a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d70e:	6126      	str	r6, [r4, #16]
 800d710:	4620      	mov	r0, r4
 800d712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d716:	bf00      	nop
 800d718:	0800fc69 	.word	0x0800fc69
 800d71c:	0800fcf8 	.word	0x0800fcf8

0800d720 <__s2b>:
 800d720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d724:	460c      	mov	r4, r1
 800d726:	4615      	mov	r5, r2
 800d728:	461f      	mov	r7, r3
 800d72a:	2209      	movs	r2, #9
 800d72c:	3308      	adds	r3, #8
 800d72e:	4606      	mov	r6, r0
 800d730:	fb93 f3f2 	sdiv	r3, r3, r2
 800d734:	2100      	movs	r1, #0
 800d736:	2201      	movs	r2, #1
 800d738:	429a      	cmp	r2, r3
 800d73a:	db09      	blt.n	800d750 <__s2b+0x30>
 800d73c:	4630      	mov	r0, r6
 800d73e:	f7ff ff43 	bl	800d5c8 <_Balloc>
 800d742:	b940      	cbnz	r0, 800d756 <__s2b+0x36>
 800d744:	4602      	mov	r2, r0
 800d746:	4b19      	ldr	r3, [pc, #100]	; (800d7ac <__s2b+0x8c>)
 800d748:	4819      	ldr	r0, [pc, #100]	; (800d7b0 <__s2b+0x90>)
 800d74a:	21ce      	movs	r1, #206	; 0xce
 800d74c:	f7fe fcd6 	bl	800c0fc <__assert_func>
 800d750:	0052      	lsls	r2, r2, #1
 800d752:	3101      	adds	r1, #1
 800d754:	e7f0      	b.n	800d738 <__s2b+0x18>
 800d756:	9b08      	ldr	r3, [sp, #32]
 800d758:	6143      	str	r3, [r0, #20]
 800d75a:	2d09      	cmp	r5, #9
 800d75c:	f04f 0301 	mov.w	r3, #1
 800d760:	6103      	str	r3, [r0, #16]
 800d762:	dd16      	ble.n	800d792 <__s2b+0x72>
 800d764:	f104 0909 	add.w	r9, r4, #9
 800d768:	46c8      	mov	r8, r9
 800d76a:	442c      	add	r4, r5
 800d76c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d770:	4601      	mov	r1, r0
 800d772:	3b30      	subs	r3, #48	; 0x30
 800d774:	220a      	movs	r2, #10
 800d776:	4630      	mov	r0, r6
 800d778:	f7ff ff88 	bl	800d68c <__multadd>
 800d77c:	45a0      	cmp	r8, r4
 800d77e:	d1f5      	bne.n	800d76c <__s2b+0x4c>
 800d780:	f1a5 0408 	sub.w	r4, r5, #8
 800d784:	444c      	add	r4, r9
 800d786:	1b2d      	subs	r5, r5, r4
 800d788:	1963      	adds	r3, r4, r5
 800d78a:	42bb      	cmp	r3, r7
 800d78c:	db04      	blt.n	800d798 <__s2b+0x78>
 800d78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d792:	340a      	adds	r4, #10
 800d794:	2509      	movs	r5, #9
 800d796:	e7f6      	b.n	800d786 <__s2b+0x66>
 800d798:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d79c:	4601      	mov	r1, r0
 800d79e:	3b30      	subs	r3, #48	; 0x30
 800d7a0:	220a      	movs	r2, #10
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f7ff ff72 	bl	800d68c <__multadd>
 800d7a8:	e7ee      	b.n	800d788 <__s2b+0x68>
 800d7aa:	bf00      	nop
 800d7ac:	0800fc69 	.word	0x0800fc69
 800d7b0:	0800fcf8 	.word	0x0800fcf8

0800d7b4 <__hi0bits>:
 800d7b4:	0c03      	lsrs	r3, r0, #16
 800d7b6:	041b      	lsls	r3, r3, #16
 800d7b8:	b9d3      	cbnz	r3, 800d7f0 <__hi0bits+0x3c>
 800d7ba:	0400      	lsls	r0, r0, #16
 800d7bc:	2310      	movs	r3, #16
 800d7be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d7c2:	bf04      	itt	eq
 800d7c4:	0200      	lsleq	r0, r0, #8
 800d7c6:	3308      	addeq	r3, #8
 800d7c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d7cc:	bf04      	itt	eq
 800d7ce:	0100      	lsleq	r0, r0, #4
 800d7d0:	3304      	addeq	r3, #4
 800d7d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d7d6:	bf04      	itt	eq
 800d7d8:	0080      	lsleq	r0, r0, #2
 800d7da:	3302      	addeq	r3, #2
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	db05      	blt.n	800d7ec <__hi0bits+0x38>
 800d7e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d7e4:	f103 0301 	add.w	r3, r3, #1
 800d7e8:	bf08      	it	eq
 800d7ea:	2320      	moveq	r3, #32
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	4770      	bx	lr
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	e7e4      	b.n	800d7be <__hi0bits+0xa>

0800d7f4 <__lo0bits>:
 800d7f4:	6803      	ldr	r3, [r0, #0]
 800d7f6:	f013 0207 	ands.w	r2, r3, #7
 800d7fa:	4601      	mov	r1, r0
 800d7fc:	d00b      	beq.n	800d816 <__lo0bits+0x22>
 800d7fe:	07da      	lsls	r2, r3, #31
 800d800:	d424      	bmi.n	800d84c <__lo0bits+0x58>
 800d802:	0798      	lsls	r0, r3, #30
 800d804:	bf49      	itett	mi
 800d806:	085b      	lsrmi	r3, r3, #1
 800d808:	089b      	lsrpl	r3, r3, #2
 800d80a:	2001      	movmi	r0, #1
 800d80c:	600b      	strmi	r3, [r1, #0]
 800d80e:	bf5c      	itt	pl
 800d810:	600b      	strpl	r3, [r1, #0]
 800d812:	2002      	movpl	r0, #2
 800d814:	4770      	bx	lr
 800d816:	b298      	uxth	r0, r3
 800d818:	b9b0      	cbnz	r0, 800d848 <__lo0bits+0x54>
 800d81a:	0c1b      	lsrs	r3, r3, #16
 800d81c:	2010      	movs	r0, #16
 800d81e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d822:	bf04      	itt	eq
 800d824:	0a1b      	lsreq	r3, r3, #8
 800d826:	3008      	addeq	r0, #8
 800d828:	071a      	lsls	r2, r3, #28
 800d82a:	bf04      	itt	eq
 800d82c:	091b      	lsreq	r3, r3, #4
 800d82e:	3004      	addeq	r0, #4
 800d830:	079a      	lsls	r2, r3, #30
 800d832:	bf04      	itt	eq
 800d834:	089b      	lsreq	r3, r3, #2
 800d836:	3002      	addeq	r0, #2
 800d838:	07da      	lsls	r2, r3, #31
 800d83a:	d403      	bmi.n	800d844 <__lo0bits+0x50>
 800d83c:	085b      	lsrs	r3, r3, #1
 800d83e:	f100 0001 	add.w	r0, r0, #1
 800d842:	d005      	beq.n	800d850 <__lo0bits+0x5c>
 800d844:	600b      	str	r3, [r1, #0]
 800d846:	4770      	bx	lr
 800d848:	4610      	mov	r0, r2
 800d84a:	e7e8      	b.n	800d81e <__lo0bits+0x2a>
 800d84c:	2000      	movs	r0, #0
 800d84e:	4770      	bx	lr
 800d850:	2020      	movs	r0, #32
 800d852:	4770      	bx	lr

0800d854 <__i2b>:
 800d854:	b510      	push	{r4, lr}
 800d856:	460c      	mov	r4, r1
 800d858:	2101      	movs	r1, #1
 800d85a:	f7ff feb5 	bl	800d5c8 <_Balloc>
 800d85e:	4602      	mov	r2, r0
 800d860:	b928      	cbnz	r0, 800d86e <__i2b+0x1a>
 800d862:	4b05      	ldr	r3, [pc, #20]	; (800d878 <__i2b+0x24>)
 800d864:	4805      	ldr	r0, [pc, #20]	; (800d87c <__i2b+0x28>)
 800d866:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d86a:	f7fe fc47 	bl	800c0fc <__assert_func>
 800d86e:	2301      	movs	r3, #1
 800d870:	6144      	str	r4, [r0, #20]
 800d872:	6103      	str	r3, [r0, #16]
 800d874:	bd10      	pop	{r4, pc}
 800d876:	bf00      	nop
 800d878:	0800fc69 	.word	0x0800fc69
 800d87c:	0800fcf8 	.word	0x0800fcf8

0800d880 <__multiply>:
 800d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	4614      	mov	r4, r2
 800d886:	690a      	ldr	r2, [r1, #16]
 800d888:	6923      	ldr	r3, [r4, #16]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	bfb8      	it	lt
 800d88e:	460b      	movlt	r3, r1
 800d890:	460d      	mov	r5, r1
 800d892:	bfbc      	itt	lt
 800d894:	4625      	movlt	r5, r4
 800d896:	461c      	movlt	r4, r3
 800d898:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d89c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d8a0:	68ab      	ldr	r3, [r5, #8]
 800d8a2:	6869      	ldr	r1, [r5, #4]
 800d8a4:	eb0a 0709 	add.w	r7, sl, r9
 800d8a8:	42bb      	cmp	r3, r7
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	bfb8      	it	lt
 800d8ae:	3101      	addlt	r1, #1
 800d8b0:	f7ff fe8a 	bl	800d5c8 <_Balloc>
 800d8b4:	b930      	cbnz	r0, 800d8c4 <__multiply+0x44>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	4b42      	ldr	r3, [pc, #264]	; (800d9c4 <__multiply+0x144>)
 800d8ba:	4843      	ldr	r0, [pc, #268]	; (800d9c8 <__multiply+0x148>)
 800d8bc:	f240 115d 	movw	r1, #349	; 0x15d
 800d8c0:	f7fe fc1c 	bl	800c0fc <__assert_func>
 800d8c4:	f100 0614 	add.w	r6, r0, #20
 800d8c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d8cc:	4633      	mov	r3, r6
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	4543      	cmp	r3, r8
 800d8d2:	d31e      	bcc.n	800d912 <__multiply+0x92>
 800d8d4:	f105 0c14 	add.w	ip, r5, #20
 800d8d8:	f104 0314 	add.w	r3, r4, #20
 800d8dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d8e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d8e4:	9202      	str	r2, [sp, #8]
 800d8e6:	ebac 0205 	sub.w	r2, ip, r5
 800d8ea:	3a15      	subs	r2, #21
 800d8ec:	f022 0203 	bic.w	r2, r2, #3
 800d8f0:	3204      	adds	r2, #4
 800d8f2:	f105 0115 	add.w	r1, r5, #21
 800d8f6:	458c      	cmp	ip, r1
 800d8f8:	bf38      	it	cc
 800d8fa:	2204      	movcc	r2, #4
 800d8fc:	9201      	str	r2, [sp, #4]
 800d8fe:	9a02      	ldr	r2, [sp, #8]
 800d900:	9303      	str	r3, [sp, #12]
 800d902:	429a      	cmp	r2, r3
 800d904:	d808      	bhi.n	800d918 <__multiply+0x98>
 800d906:	2f00      	cmp	r7, #0
 800d908:	dc55      	bgt.n	800d9b6 <__multiply+0x136>
 800d90a:	6107      	str	r7, [r0, #16]
 800d90c:	b005      	add	sp, #20
 800d90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d912:	f843 2b04 	str.w	r2, [r3], #4
 800d916:	e7db      	b.n	800d8d0 <__multiply+0x50>
 800d918:	f8b3 a000 	ldrh.w	sl, [r3]
 800d91c:	f1ba 0f00 	cmp.w	sl, #0
 800d920:	d020      	beq.n	800d964 <__multiply+0xe4>
 800d922:	f105 0e14 	add.w	lr, r5, #20
 800d926:	46b1      	mov	r9, r6
 800d928:	2200      	movs	r2, #0
 800d92a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d92e:	f8d9 b000 	ldr.w	fp, [r9]
 800d932:	b2a1      	uxth	r1, r4
 800d934:	fa1f fb8b 	uxth.w	fp, fp
 800d938:	fb0a b101 	mla	r1, sl, r1, fp
 800d93c:	4411      	add	r1, r2
 800d93e:	f8d9 2000 	ldr.w	r2, [r9]
 800d942:	0c24      	lsrs	r4, r4, #16
 800d944:	0c12      	lsrs	r2, r2, #16
 800d946:	fb0a 2404 	mla	r4, sl, r4, r2
 800d94a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d94e:	b289      	uxth	r1, r1
 800d950:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d954:	45f4      	cmp	ip, lr
 800d956:	f849 1b04 	str.w	r1, [r9], #4
 800d95a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d95e:	d8e4      	bhi.n	800d92a <__multiply+0xaa>
 800d960:	9901      	ldr	r1, [sp, #4]
 800d962:	5072      	str	r2, [r6, r1]
 800d964:	9a03      	ldr	r2, [sp, #12]
 800d966:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d96a:	3304      	adds	r3, #4
 800d96c:	f1b9 0f00 	cmp.w	r9, #0
 800d970:	d01f      	beq.n	800d9b2 <__multiply+0x132>
 800d972:	6834      	ldr	r4, [r6, #0]
 800d974:	f105 0114 	add.w	r1, r5, #20
 800d978:	46b6      	mov	lr, r6
 800d97a:	f04f 0a00 	mov.w	sl, #0
 800d97e:	880a      	ldrh	r2, [r1, #0]
 800d980:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d984:	fb09 b202 	mla	r2, r9, r2, fp
 800d988:	4492      	add	sl, r2
 800d98a:	b2a4      	uxth	r4, r4
 800d98c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d990:	f84e 4b04 	str.w	r4, [lr], #4
 800d994:	f851 4b04 	ldr.w	r4, [r1], #4
 800d998:	f8be 2000 	ldrh.w	r2, [lr]
 800d99c:	0c24      	lsrs	r4, r4, #16
 800d99e:	fb09 2404 	mla	r4, r9, r4, r2
 800d9a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d9a6:	458c      	cmp	ip, r1
 800d9a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d9ac:	d8e7      	bhi.n	800d97e <__multiply+0xfe>
 800d9ae:	9a01      	ldr	r2, [sp, #4]
 800d9b0:	50b4      	str	r4, [r6, r2]
 800d9b2:	3604      	adds	r6, #4
 800d9b4:	e7a3      	b.n	800d8fe <__multiply+0x7e>
 800d9b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d1a5      	bne.n	800d90a <__multiply+0x8a>
 800d9be:	3f01      	subs	r7, #1
 800d9c0:	e7a1      	b.n	800d906 <__multiply+0x86>
 800d9c2:	bf00      	nop
 800d9c4:	0800fc69 	.word	0x0800fc69
 800d9c8:	0800fcf8 	.word	0x0800fcf8

0800d9cc <__pow5mult>:
 800d9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9d0:	4615      	mov	r5, r2
 800d9d2:	f012 0203 	ands.w	r2, r2, #3
 800d9d6:	4606      	mov	r6, r0
 800d9d8:	460f      	mov	r7, r1
 800d9da:	d007      	beq.n	800d9ec <__pow5mult+0x20>
 800d9dc:	4c25      	ldr	r4, [pc, #148]	; (800da74 <__pow5mult+0xa8>)
 800d9de:	3a01      	subs	r2, #1
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9e6:	f7ff fe51 	bl	800d68c <__multadd>
 800d9ea:	4607      	mov	r7, r0
 800d9ec:	10ad      	asrs	r5, r5, #2
 800d9ee:	d03d      	beq.n	800da6c <__pow5mult+0xa0>
 800d9f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9f2:	b97c      	cbnz	r4, 800da14 <__pow5mult+0x48>
 800d9f4:	2010      	movs	r0, #16
 800d9f6:	f7ff fdbf 	bl	800d578 <malloc>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	6270      	str	r0, [r6, #36]	; 0x24
 800d9fe:	b928      	cbnz	r0, 800da0c <__pow5mult+0x40>
 800da00:	4b1d      	ldr	r3, [pc, #116]	; (800da78 <__pow5mult+0xac>)
 800da02:	481e      	ldr	r0, [pc, #120]	; (800da7c <__pow5mult+0xb0>)
 800da04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da08:	f7fe fb78 	bl	800c0fc <__assert_func>
 800da0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da10:	6004      	str	r4, [r0, #0]
 800da12:	60c4      	str	r4, [r0, #12]
 800da14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da1c:	b94c      	cbnz	r4, 800da32 <__pow5mult+0x66>
 800da1e:	f240 2171 	movw	r1, #625	; 0x271
 800da22:	4630      	mov	r0, r6
 800da24:	f7ff ff16 	bl	800d854 <__i2b>
 800da28:	2300      	movs	r3, #0
 800da2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800da2e:	4604      	mov	r4, r0
 800da30:	6003      	str	r3, [r0, #0]
 800da32:	f04f 0900 	mov.w	r9, #0
 800da36:	07eb      	lsls	r3, r5, #31
 800da38:	d50a      	bpl.n	800da50 <__pow5mult+0x84>
 800da3a:	4639      	mov	r1, r7
 800da3c:	4622      	mov	r2, r4
 800da3e:	4630      	mov	r0, r6
 800da40:	f7ff ff1e 	bl	800d880 <__multiply>
 800da44:	4639      	mov	r1, r7
 800da46:	4680      	mov	r8, r0
 800da48:	4630      	mov	r0, r6
 800da4a:	f7ff fdfd 	bl	800d648 <_Bfree>
 800da4e:	4647      	mov	r7, r8
 800da50:	106d      	asrs	r5, r5, #1
 800da52:	d00b      	beq.n	800da6c <__pow5mult+0xa0>
 800da54:	6820      	ldr	r0, [r4, #0]
 800da56:	b938      	cbnz	r0, 800da68 <__pow5mult+0x9c>
 800da58:	4622      	mov	r2, r4
 800da5a:	4621      	mov	r1, r4
 800da5c:	4630      	mov	r0, r6
 800da5e:	f7ff ff0f 	bl	800d880 <__multiply>
 800da62:	6020      	str	r0, [r4, #0]
 800da64:	f8c0 9000 	str.w	r9, [r0]
 800da68:	4604      	mov	r4, r0
 800da6a:	e7e4      	b.n	800da36 <__pow5mult+0x6a>
 800da6c:	4638      	mov	r0, r7
 800da6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da72:	bf00      	nop
 800da74:	0800fe48 	.word	0x0800fe48
 800da78:	0800fa48 	.word	0x0800fa48
 800da7c:	0800fcf8 	.word	0x0800fcf8

0800da80 <__lshift>:
 800da80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da84:	460c      	mov	r4, r1
 800da86:	6849      	ldr	r1, [r1, #4]
 800da88:	6923      	ldr	r3, [r4, #16]
 800da8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da8e:	68a3      	ldr	r3, [r4, #8]
 800da90:	4607      	mov	r7, r0
 800da92:	4691      	mov	r9, r2
 800da94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da98:	f108 0601 	add.w	r6, r8, #1
 800da9c:	42b3      	cmp	r3, r6
 800da9e:	db0b      	blt.n	800dab8 <__lshift+0x38>
 800daa0:	4638      	mov	r0, r7
 800daa2:	f7ff fd91 	bl	800d5c8 <_Balloc>
 800daa6:	4605      	mov	r5, r0
 800daa8:	b948      	cbnz	r0, 800dabe <__lshift+0x3e>
 800daaa:	4602      	mov	r2, r0
 800daac:	4b28      	ldr	r3, [pc, #160]	; (800db50 <__lshift+0xd0>)
 800daae:	4829      	ldr	r0, [pc, #164]	; (800db54 <__lshift+0xd4>)
 800dab0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dab4:	f7fe fb22 	bl	800c0fc <__assert_func>
 800dab8:	3101      	adds	r1, #1
 800daba:	005b      	lsls	r3, r3, #1
 800dabc:	e7ee      	b.n	800da9c <__lshift+0x1c>
 800dabe:	2300      	movs	r3, #0
 800dac0:	f100 0114 	add.w	r1, r0, #20
 800dac4:	f100 0210 	add.w	r2, r0, #16
 800dac8:	4618      	mov	r0, r3
 800daca:	4553      	cmp	r3, sl
 800dacc:	db33      	blt.n	800db36 <__lshift+0xb6>
 800dace:	6920      	ldr	r0, [r4, #16]
 800dad0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dad4:	f104 0314 	add.w	r3, r4, #20
 800dad8:	f019 091f 	ands.w	r9, r9, #31
 800dadc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dae0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dae4:	d02b      	beq.n	800db3e <__lshift+0xbe>
 800dae6:	f1c9 0e20 	rsb	lr, r9, #32
 800daea:	468a      	mov	sl, r1
 800daec:	2200      	movs	r2, #0
 800daee:	6818      	ldr	r0, [r3, #0]
 800daf0:	fa00 f009 	lsl.w	r0, r0, r9
 800daf4:	4302      	orrs	r2, r0
 800daf6:	f84a 2b04 	str.w	r2, [sl], #4
 800dafa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dafe:	459c      	cmp	ip, r3
 800db00:	fa22 f20e 	lsr.w	r2, r2, lr
 800db04:	d8f3      	bhi.n	800daee <__lshift+0x6e>
 800db06:	ebac 0304 	sub.w	r3, ip, r4
 800db0a:	3b15      	subs	r3, #21
 800db0c:	f023 0303 	bic.w	r3, r3, #3
 800db10:	3304      	adds	r3, #4
 800db12:	f104 0015 	add.w	r0, r4, #21
 800db16:	4584      	cmp	ip, r0
 800db18:	bf38      	it	cc
 800db1a:	2304      	movcc	r3, #4
 800db1c:	50ca      	str	r2, [r1, r3]
 800db1e:	b10a      	cbz	r2, 800db24 <__lshift+0xa4>
 800db20:	f108 0602 	add.w	r6, r8, #2
 800db24:	3e01      	subs	r6, #1
 800db26:	4638      	mov	r0, r7
 800db28:	612e      	str	r6, [r5, #16]
 800db2a:	4621      	mov	r1, r4
 800db2c:	f7ff fd8c 	bl	800d648 <_Bfree>
 800db30:	4628      	mov	r0, r5
 800db32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db36:	f842 0f04 	str.w	r0, [r2, #4]!
 800db3a:	3301      	adds	r3, #1
 800db3c:	e7c5      	b.n	800daca <__lshift+0x4a>
 800db3e:	3904      	subs	r1, #4
 800db40:	f853 2b04 	ldr.w	r2, [r3], #4
 800db44:	f841 2f04 	str.w	r2, [r1, #4]!
 800db48:	459c      	cmp	ip, r3
 800db4a:	d8f9      	bhi.n	800db40 <__lshift+0xc0>
 800db4c:	e7ea      	b.n	800db24 <__lshift+0xa4>
 800db4e:	bf00      	nop
 800db50:	0800fc69 	.word	0x0800fc69
 800db54:	0800fcf8 	.word	0x0800fcf8

0800db58 <__mcmp>:
 800db58:	b530      	push	{r4, r5, lr}
 800db5a:	6902      	ldr	r2, [r0, #16]
 800db5c:	690c      	ldr	r4, [r1, #16]
 800db5e:	1b12      	subs	r2, r2, r4
 800db60:	d10e      	bne.n	800db80 <__mcmp+0x28>
 800db62:	f100 0314 	add.w	r3, r0, #20
 800db66:	3114      	adds	r1, #20
 800db68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db78:	42a5      	cmp	r5, r4
 800db7a:	d003      	beq.n	800db84 <__mcmp+0x2c>
 800db7c:	d305      	bcc.n	800db8a <__mcmp+0x32>
 800db7e:	2201      	movs	r2, #1
 800db80:	4610      	mov	r0, r2
 800db82:	bd30      	pop	{r4, r5, pc}
 800db84:	4283      	cmp	r3, r0
 800db86:	d3f3      	bcc.n	800db70 <__mcmp+0x18>
 800db88:	e7fa      	b.n	800db80 <__mcmp+0x28>
 800db8a:	f04f 32ff 	mov.w	r2, #4294967295
 800db8e:	e7f7      	b.n	800db80 <__mcmp+0x28>

0800db90 <__mdiff>:
 800db90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db94:	460c      	mov	r4, r1
 800db96:	4606      	mov	r6, r0
 800db98:	4611      	mov	r1, r2
 800db9a:	4620      	mov	r0, r4
 800db9c:	4617      	mov	r7, r2
 800db9e:	f7ff ffdb 	bl	800db58 <__mcmp>
 800dba2:	1e05      	subs	r5, r0, #0
 800dba4:	d110      	bne.n	800dbc8 <__mdiff+0x38>
 800dba6:	4629      	mov	r1, r5
 800dba8:	4630      	mov	r0, r6
 800dbaa:	f7ff fd0d 	bl	800d5c8 <_Balloc>
 800dbae:	b930      	cbnz	r0, 800dbbe <__mdiff+0x2e>
 800dbb0:	4b39      	ldr	r3, [pc, #228]	; (800dc98 <__mdiff+0x108>)
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	f240 2132 	movw	r1, #562	; 0x232
 800dbb8:	4838      	ldr	r0, [pc, #224]	; (800dc9c <__mdiff+0x10c>)
 800dbba:	f7fe fa9f 	bl	800c0fc <__assert_func>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc8:	bfa4      	itt	ge
 800dbca:	463b      	movge	r3, r7
 800dbcc:	4627      	movge	r7, r4
 800dbce:	4630      	mov	r0, r6
 800dbd0:	6879      	ldr	r1, [r7, #4]
 800dbd2:	bfa6      	itte	ge
 800dbd4:	461c      	movge	r4, r3
 800dbd6:	2500      	movge	r5, #0
 800dbd8:	2501      	movlt	r5, #1
 800dbda:	f7ff fcf5 	bl	800d5c8 <_Balloc>
 800dbde:	b920      	cbnz	r0, 800dbea <__mdiff+0x5a>
 800dbe0:	4b2d      	ldr	r3, [pc, #180]	; (800dc98 <__mdiff+0x108>)
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dbe8:	e7e6      	b.n	800dbb8 <__mdiff+0x28>
 800dbea:	693e      	ldr	r6, [r7, #16]
 800dbec:	60c5      	str	r5, [r0, #12]
 800dbee:	6925      	ldr	r5, [r4, #16]
 800dbf0:	f107 0114 	add.w	r1, r7, #20
 800dbf4:	f104 0914 	add.w	r9, r4, #20
 800dbf8:	f100 0e14 	add.w	lr, r0, #20
 800dbfc:	f107 0210 	add.w	r2, r7, #16
 800dc00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dc04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dc08:	46f2      	mov	sl, lr
 800dc0a:	2700      	movs	r7, #0
 800dc0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc14:	fa1f f883 	uxth.w	r8, r3
 800dc18:	fa17 f78b 	uxtah	r7, r7, fp
 800dc1c:	0c1b      	lsrs	r3, r3, #16
 800dc1e:	eba7 0808 	sub.w	r8, r7, r8
 800dc22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc2a:	fa1f f888 	uxth.w	r8, r8
 800dc2e:	141f      	asrs	r7, r3, #16
 800dc30:	454d      	cmp	r5, r9
 800dc32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc36:	f84a 3b04 	str.w	r3, [sl], #4
 800dc3a:	d8e7      	bhi.n	800dc0c <__mdiff+0x7c>
 800dc3c:	1b2b      	subs	r3, r5, r4
 800dc3e:	3b15      	subs	r3, #21
 800dc40:	f023 0303 	bic.w	r3, r3, #3
 800dc44:	3304      	adds	r3, #4
 800dc46:	3415      	adds	r4, #21
 800dc48:	42a5      	cmp	r5, r4
 800dc4a:	bf38      	it	cc
 800dc4c:	2304      	movcc	r3, #4
 800dc4e:	4419      	add	r1, r3
 800dc50:	4473      	add	r3, lr
 800dc52:	469e      	mov	lr, r3
 800dc54:	460d      	mov	r5, r1
 800dc56:	4565      	cmp	r5, ip
 800dc58:	d30e      	bcc.n	800dc78 <__mdiff+0xe8>
 800dc5a:	f10c 0203 	add.w	r2, ip, #3
 800dc5e:	1a52      	subs	r2, r2, r1
 800dc60:	f022 0203 	bic.w	r2, r2, #3
 800dc64:	3903      	subs	r1, #3
 800dc66:	458c      	cmp	ip, r1
 800dc68:	bf38      	it	cc
 800dc6a:	2200      	movcc	r2, #0
 800dc6c:	441a      	add	r2, r3
 800dc6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dc72:	b17b      	cbz	r3, 800dc94 <__mdiff+0x104>
 800dc74:	6106      	str	r6, [r0, #16]
 800dc76:	e7a5      	b.n	800dbc4 <__mdiff+0x34>
 800dc78:	f855 8b04 	ldr.w	r8, [r5], #4
 800dc7c:	fa17 f488 	uxtah	r4, r7, r8
 800dc80:	1422      	asrs	r2, r4, #16
 800dc82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dc86:	b2a4      	uxth	r4, r4
 800dc88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dc8c:	f84e 4b04 	str.w	r4, [lr], #4
 800dc90:	1417      	asrs	r7, r2, #16
 800dc92:	e7e0      	b.n	800dc56 <__mdiff+0xc6>
 800dc94:	3e01      	subs	r6, #1
 800dc96:	e7ea      	b.n	800dc6e <__mdiff+0xde>
 800dc98:	0800fc69 	.word	0x0800fc69
 800dc9c:	0800fcf8 	.word	0x0800fcf8

0800dca0 <__ulp>:
 800dca0:	b082      	sub	sp, #8
 800dca2:	ed8d 0b00 	vstr	d0, [sp]
 800dca6:	9b01      	ldr	r3, [sp, #4]
 800dca8:	4912      	ldr	r1, [pc, #72]	; (800dcf4 <__ulp+0x54>)
 800dcaa:	4019      	ands	r1, r3
 800dcac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dcb0:	2900      	cmp	r1, #0
 800dcb2:	dd05      	ble.n	800dcc0 <__ulp+0x20>
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	ec43 2b10 	vmov	d0, r2, r3
 800dcbc:	b002      	add	sp, #8
 800dcbe:	4770      	bx	lr
 800dcc0:	4249      	negs	r1, r1
 800dcc2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dcc6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dcca:	f04f 0200 	mov.w	r2, #0
 800dcce:	f04f 0300 	mov.w	r3, #0
 800dcd2:	da04      	bge.n	800dcde <__ulp+0x3e>
 800dcd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dcd8:	fa41 f300 	asr.w	r3, r1, r0
 800dcdc:	e7ec      	b.n	800dcb8 <__ulp+0x18>
 800dcde:	f1a0 0114 	sub.w	r1, r0, #20
 800dce2:	291e      	cmp	r1, #30
 800dce4:	bfda      	itte	le
 800dce6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dcea:	fa20 f101 	lsrle.w	r1, r0, r1
 800dcee:	2101      	movgt	r1, #1
 800dcf0:	460a      	mov	r2, r1
 800dcf2:	e7e1      	b.n	800dcb8 <__ulp+0x18>
 800dcf4:	7ff00000 	.word	0x7ff00000

0800dcf8 <__b2d>:
 800dcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfa:	6905      	ldr	r5, [r0, #16]
 800dcfc:	f100 0714 	add.w	r7, r0, #20
 800dd00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dd04:	1f2e      	subs	r6, r5, #4
 800dd06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f7ff fd52 	bl	800d7b4 <__hi0bits>
 800dd10:	f1c0 0320 	rsb	r3, r0, #32
 800dd14:	280a      	cmp	r0, #10
 800dd16:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dd94 <__b2d+0x9c>
 800dd1a:	600b      	str	r3, [r1, #0]
 800dd1c:	dc14      	bgt.n	800dd48 <__b2d+0x50>
 800dd1e:	f1c0 0e0b 	rsb	lr, r0, #11
 800dd22:	fa24 f10e 	lsr.w	r1, r4, lr
 800dd26:	42b7      	cmp	r7, r6
 800dd28:	ea41 030c 	orr.w	r3, r1, ip
 800dd2c:	bf34      	ite	cc
 800dd2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd32:	2100      	movcs	r1, #0
 800dd34:	3015      	adds	r0, #21
 800dd36:	fa04 f000 	lsl.w	r0, r4, r0
 800dd3a:	fa21 f10e 	lsr.w	r1, r1, lr
 800dd3e:	ea40 0201 	orr.w	r2, r0, r1
 800dd42:	ec43 2b10 	vmov	d0, r2, r3
 800dd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd48:	42b7      	cmp	r7, r6
 800dd4a:	bf3a      	itte	cc
 800dd4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd50:	f1a5 0608 	subcc.w	r6, r5, #8
 800dd54:	2100      	movcs	r1, #0
 800dd56:	380b      	subs	r0, #11
 800dd58:	d017      	beq.n	800dd8a <__b2d+0x92>
 800dd5a:	f1c0 0c20 	rsb	ip, r0, #32
 800dd5e:	fa04 f500 	lsl.w	r5, r4, r0
 800dd62:	42be      	cmp	r6, r7
 800dd64:	fa21 f40c 	lsr.w	r4, r1, ip
 800dd68:	ea45 0504 	orr.w	r5, r5, r4
 800dd6c:	bf8c      	ite	hi
 800dd6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dd72:	2400      	movls	r4, #0
 800dd74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dd78:	fa01 f000 	lsl.w	r0, r1, r0
 800dd7c:	fa24 f40c 	lsr.w	r4, r4, ip
 800dd80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd84:	ea40 0204 	orr.w	r2, r0, r4
 800dd88:	e7db      	b.n	800dd42 <__b2d+0x4a>
 800dd8a:	ea44 030c 	orr.w	r3, r4, ip
 800dd8e:	460a      	mov	r2, r1
 800dd90:	e7d7      	b.n	800dd42 <__b2d+0x4a>
 800dd92:	bf00      	nop
 800dd94:	3ff00000 	.word	0x3ff00000

0800dd98 <__d2b>:
 800dd98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd9c:	4689      	mov	r9, r1
 800dd9e:	2101      	movs	r1, #1
 800dda0:	ec57 6b10 	vmov	r6, r7, d0
 800dda4:	4690      	mov	r8, r2
 800dda6:	f7ff fc0f 	bl	800d5c8 <_Balloc>
 800ddaa:	4604      	mov	r4, r0
 800ddac:	b930      	cbnz	r0, 800ddbc <__d2b+0x24>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	4b25      	ldr	r3, [pc, #148]	; (800de48 <__d2b+0xb0>)
 800ddb2:	4826      	ldr	r0, [pc, #152]	; (800de4c <__d2b+0xb4>)
 800ddb4:	f240 310a 	movw	r1, #778	; 0x30a
 800ddb8:	f7fe f9a0 	bl	800c0fc <__assert_func>
 800ddbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ddc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ddc4:	bb35      	cbnz	r5, 800de14 <__d2b+0x7c>
 800ddc6:	2e00      	cmp	r6, #0
 800ddc8:	9301      	str	r3, [sp, #4]
 800ddca:	d028      	beq.n	800de1e <__d2b+0x86>
 800ddcc:	4668      	mov	r0, sp
 800ddce:	9600      	str	r6, [sp, #0]
 800ddd0:	f7ff fd10 	bl	800d7f4 <__lo0bits>
 800ddd4:	9900      	ldr	r1, [sp, #0]
 800ddd6:	b300      	cbz	r0, 800de1a <__d2b+0x82>
 800ddd8:	9a01      	ldr	r2, [sp, #4]
 800ddda:	f1c0 0320 	rsb	r3, r0, #32
 800ddde:	fa02 f303 	lsl.w	r3, r2, r3
 800dde2:	430b      	orrs	r3, r1
 800dde4:	40c2      	lsrs	r2, r0
 800dde6:	6163      	str	r3, [r4, #20]
 800dde8:	9201      	str	r2, [sp, #4]
 800ddea:	9b01      	ldr	r3, [sp, #4]
 800ddec:	61a3      	str	r3, [r4, #24]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	bf14      	ite	ne
 800ddf2:	2202      	movne	r2, #2
 800ddf4:	2201      	moveq	r2, #1
 800ddf6:	6122      	str	r2, [r4, #16]
 800ddf8:	b1d5      	cbz	r5, 800de30 <__d2b+0x98>
 800ddfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddfe:	4405      	add	r5, r0
 800de00:	f8c9 5000 	str.w	r5, [r9]
 800de04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de08:	f8c8 0000 	str.w	r0, [r8]
 800de0c:	4620      	mov	r0, r4
 800de0e:	b003      	add	sp, #12
 800de10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de18:	e7d5      	b.n	800ddc6 <__d2b+0x2e>
 800de1a:	6161      	str	r1, [r4, #20]
 800de1c:	e7e5      	b.n	800ddea <__d2b+0x52>
 800de1e:	a801      	add	r0, sp, #4
 800de20:	f7ff fce8 	bl	800d7f4 <__lo0bits>
 800de24:	9b01      	ldr	r3, [sp, #4]
 800de26:	6163      	str	r3, [r4, #20]
 800de28:	2201      	movs	r2, #1
 800de2a:	6122      	str	r2, [r4, #16]
 800de2c:	3020      	adds	r0, #32
 800de2e:	e7e3      	b.n	800ddf8 <__d2b+0x60>
 800de30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de38:	f8c9 0000 	str.w	r0, [r9]
 800de3c:	6918      	ldr	r0, [r3, #16]
 800de3e:	f7ff fcb9 	bl	800d7b4 <__hi0bits>
 800de42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de46:	e7df      	b.n	800de08 <__d2b+0x70>
 800de48:	0800fc69 	.word	0x0800fc69
 800de4c:	0800fcf8 	.word	0x0800fcf8

0800de50 <__ratio>:
 800de50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de54:	4688      	mov	r8, r1
 800de56:	4669      	mov	r1, sp
 800de58:	4681      	mov	r9, r0
 800de5a:	f7ff ff4d 	bl	800dcf8 <__b2d>
 800de5e:	a901      	add	r1, sp, #4
 800de60:	4640      	mov	r0, r8
 800de62:	ec55 4b10 	vmov	r4, r5, d0
 800de66:	f7ff ff47 	bl	800dcf8 <__b2d>
 800de6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800de72:	eba3 0c02 	sub.w	ip, r3, r2
 800de76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800de7a:	1a9b      	subs	r3, r3, r2
 800de7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800de80:	ec51 0b10 	vmov	r0, r1, d0
 800de84:	2b00      	cmp	r3, #0
 800de86:	bfd6      	itet	le
 800de88:	460a      	movle	r2, r1
 800de8a:	462a      	movgt	r2, r5
 800de8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de90:	468b      	mov	fp, r1
 800de92:	462f      	mov	r7, r5
 800de94:	bfd4      	ite	le
 800de96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800de9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de9e:	4620      	mov	r0, r4
 800dea0:	ee10 2a10 	vmov	r2, s0
 800dea4:	465b      	mov	r3, fp
 800dea6:	4639      	mov	r1, r7
 800dea8:	f7f2 fcd0 	bl	800084c <__aeabi_ddiv>
 800deac:	ec41 0b10 	vmov	d0, r0, r1
 800deb0:	b003      	add	sp, #12
 800deb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800deb6 <__copybits>:
 800deb6:	3901      	subs	r1, #1
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	1149      	asrs	r1, r1, #5
 800debc:	6914      	ldr	r4, [r2, #16]
 800debe:	3101      	adds	r1, #1
 800dec0:	f102 0314 	add.w	r3, r2, #20
 800dec4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dec8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800decc:	1f05      	subs	r5, r0, #4
 800dece:	42a3      	cmp	r3, r4
 800ded0:	d30c      	bcc.n	800deec <__copybits+0x36>
 800ded2:	1aa3      	subs	r3, r4, r2
 800ded4:	3b11      	subs	r3, #17
 800ded6:	f023 0303 	bic.w	r3, r3, #3
 800deda:	3211      	adds	r2, #17
 800dedc:	42a2      	cmp	r2, r4
 800dede:	bf88      	it	hi
 800dee0:	2300      	movhi	r3, #0
 800dee2:	4418      	add	r0, r3
 800dee4:	2300      	movs	r3, #0
 800dee6:	4288      	cmp	r0, r1
 800dee8:	d305      	bcc.n	800def6 <__copybits+0x40>
 800deea:	bd70      	pop	{r4, r5, r6, pc}
 800deec:	f853 6b04 	ldr.w	r6, [r3], #4
 800def0:	f845 6f04 	str.w	r6, [r5, #4]!
 800def4:	e7eb      	b.n	800dece <__copybits+0x18>
 800def6:	f840 3b04 	str.w	r3, [r0], #4
 800defa:	e7f4      	b.n	800dee6 <__copybits+0x30>

0800defc <__any_on>:
 800defc:	f100 0214 	add.w	r2, r0, #20
 800df00:	6900      	ldr	r0, [r0, #16]
 800df02:	114b      	asrs	r3, r1, #5
 800df04:	4298      	cmp	r0, r3
 800df06:	b510      	push	{r4, lr}
 800df08:	db11      	blt.n	800df2e <__any_on+0x32>
 800df0a:	dd0a      	ble.n	800df22 <__any_on+0x26>
 800df0c:	f011 011f 	ands.w	r1, r1, #31
 800df10:	d007      	beq.n	800df22 <__any_on+0x26>
 800df12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800df16:	fa24 f001 	lsr.w	r0, r4, r1
 800df1a:	fa00 f101 	lsl.w	r1, r0, r1
 800df1e:	428c      	cmp	r4, r1
 800df20:	d10b      	bne.n	800df3a <__any_on+0x3e>
 800df22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df26:	4293      	cmp	r3, r2
 800df28:	d803      	bhi.n	800df32 <__any_on+0x36>
 800df2a:	2000      	movs	r0, #0
 800df2c:	bd10      	pop	{r4, pc}
 800df2e:	4603      	mov	r3, r0
 800df30:	e7f7      	b.n	800df22 <__any_on+0x26>
 800df32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df36:	2900      	cmp	r1, #0
 800df38:	d0f5      	beq.n	800df26 <__any_on+0x2a>
 800df3a:	2001      	movs	r0, #1
 800df3c:	e7f6      	b.n	800df2c <__any_on+0x30>

0800df3e <_calloc_r>:
 800df3e:	b513      	push	{r0, r1, r4, lr}
 800df40:	434a      	muls	r2, r1
 800df42:	4611      	mov	r1, r2
 800df44:	9201      	str	r2, [sp, #4]
 800df46:	f000 f859 	bl	800dffc <_malloc_r>
 800df4a:	4604      	mov	r4, r0
 800df4c:	b118      	cbz	r0, 800df56 <_calloc_r+0x18>
 800df4e:	9a01      	ldr	r2, [sp, #4]
 800df50:	2100      	movs	r1, #0
 800df52:	f7fc fa5d 	bl	800a410 <memset>
 800df56:	4620      	mov	r0, r4
 800df58:	b002      	add	sp, #8
 800df5a:	bd10      	pop	{r4, pc}

0800df5c <_free_r>:
 800df5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df5e:	2900      	cmp	r1, #0
 800df60:	d048      	beq.n	800dff4 <_free_r+0x98>
 800df62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df66:	9001      	str	r0, [sp, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f1a1 0404 	sub.w	r4, r1, #4
 800df6e:	bfb8      	it	lt
 800df70:	18e4      	addlt	r4, r4, r3
 800df72:	f001 faaf 	bl	800f4d4 <__malloc_lock>
 800df76:	4a20      	ldr	r2, [pc, #128]	; (800dff8 <_free_r+0x9c>)
 800df78:	9801      	ldr	r0, [sp, #4]
 800df7a:	6813      	ldr	r3, [r2, #0]
 800df7c:	4615      	mov	r5, r2
 800df7e:	b933      	cbnz	r3, 800df8e <_free_r+0x32>
 800df80:	6063      	str	r3, [r4, #4]
 800df82:	6014      	str	r4, [r2, #0]
 800df84:	b003      	add	sp, #12
 800df86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df8a:	f001 baa9 	b.w	800f4e0 <__malloc_unlock>
 800df8e:	42a3      	cmp	r3, r4
 800df90:	d90b      	bls.n	800dfaa <_free_r+0x4e>
 800df92:	6821      	ldr	r1, [r4, #0]
 800df94:	1862      	adds	r2, r4, r1
 800df96:	4293      	cmp	r3, r2
 800df98:	bf04      	itt	eq
 800df9a:	681a      	ldreq	r2, [r3, #0]
 800df9c:	685b      	ldreq	r3, [r3, #4]
 800df9e:	6063      	str	r3, [r4, #4]
 800dfa0:	bf04      	itt	eq
 800dfa2:	1852      	addeq	r2, r2, r1
 800dfa4:	6022      	streq	r2, [r4, #0]
 800dfa6:	602c      	str	r4, [r5, #0]
 800dfa8:	e7ec      	b.n	800df84 <_free_r+0x28>
 800dfaa:	461a      	mov	r2, r3
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	b10b      	cbz	r3, 800dfb4 <_free_r+0x58>
 800dfb0:	42a3      	cmp	r3, r4
 800dfb2:	d9fa      	bls.n	800dfaa <_free_r+0x4e>
 800dfb4:	6811      	ldr	r1, [r2, #0]
 800dfb6:	1855      	adds	r5, r2, r1
 800dfb8:	42a5      	cmp	r5, r4
 800dfba:	d10b      	bne.n	800dfd4 <_free_r+0x78>
 800dfbc:	6824      	ldr	r4, [r4, #0]
 800dfbe:	4421      	add	r1, r4
 800dfc0:	1854      	adds	r4, r2, r1
 800dfc2:	42a3      	cmp	r3, r4
 800dfc4:	6011      	str	r1, [r2, #0]
 800dfc6:	d1dd      	bne.n	800df84 <_free_r+0x28>
 800dfc8:	681c      	ldr	r4, [r3, #0]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	6053      	str	r3, [r2, #4]
 800dfce:	4421      	add	r1, r4
 800dfd0:	6011      	str	r1, [r2, #0]
 800dfd2:	e7d7      	b.n	800df84 <_free_r+0x28>
 800dfd4:	d902      	bls.n	800dfdc <_free_r+0x80>
 800dfd6:	230c      	movs	r3, #12
 800dfd8:	6003      	str	r3, [r0, #0]
 800dfda:	e7d3      	b.n	800df84 <_free_r+0x28>
 800dfdc:	6825      	ldr	r5, [r4, #0]
 800dfde:	1961      	adds	r1, r4, r5
 800dfe0:	428b      	cmp	r3, r1
 800dfe2:	bf04      	itt	eq
 800dfe4:	6819      	ldreq	r1, [r3, #0]
 800dfe6:	685b      	ldreq	r3, [r3, #4]
 800dfe8:	6063      	str	r3, [r4, #4]
 800dfea:	bf04      	itt	eq
 800dfec:	1949      	addeq	r1, r1, r5
 800dfee:	6021      	streq	r1, [r4, #0]
 800dff0:	6054      	str	r4, [r2, #4]
 800dff2:	e7c7      	b.n	800df84 <_free_r+0x28>
 800dff4:	b003      	add	sp, #12
 800dff6:	bd30      	pop	{r4, r5, pc}
 800dff8:	200002c0 	.word	0x200002c0

0800dffc <_malloc_r>:
 800dffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dffe:	1ccd      	adds	r5, r1, #3
 800e000:	f025 0503 	bic.w	r5, r5, #3
 800e004:	3508      	adds	r5, #8
 800e006:	2d0c      	cmp	r5, #12
 800e008:	bf38      	it	cc
 800e00a:	250c      	movcc	r5, #12
 800e00c:	2d00      	cmp	r5, #0
 800e00e:	4606      	mov	r6, r0
 800e010:	db01      	blt.n	800e016 <_malloc_r+0x1a>
 800e012:	42a9      	cmp	r1, r5
 800e014:	d903      	bls.n	800e01e <_malloc_r+0x22>
 800e016:	230c      	movs	r3, #12
 800e018:	6033      	str	r3, [r6, #0]
 800e01a:	2000      	movs	r0, #0
 800e01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e01e:	f001 fa59 	bl	800f4d4 <__malloc_lock>
 800e022:	4921      	ldr	r1, [pc, #132]	; (800e0a8 <_malloc_r+0xac>)
 800e024:	680a      	ldr	r2, [r1, #0]
 800e026:	4614      	mov	r4, r2
 800e028:	b99c      	cbnz	r4, 800e052 <_malloc_r+0x56>
 800e02a:	4f20      	ldr	r7, [pc, #128]	; (800e0ac <_malloc_r+0xb0>)
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	b923      	cbnz	r3, 800e03a <_malloc_r+0x3e>
 800e030:	4621      	mov	r1, r4
 800e032:	4630      	mov	r0, r6
 800e034:	f000 fe2c 	bl	800ec90 <_sbrk_r>
 800e038:	6038      	str	r0, [r7, #0]
 800e03a:	4629      	mov	r1, r5
 800e03c:	4630      	mov	r0, r6
 800e03e:	f000 fe27 	bl	800ec90 <_sbrk_r>
 800e042:	1c43      	adds	r3, r0, #1
 800e044:	d123      	bne.n	800e08e <_malloc_r+0x92>
 800e046:	230c      	movs	r3, #12
 800e048:	6033      	str	r3, [r6, #0]
 800e04a:	4630      	mov	r0, r6
 800e04c:	f001 fa48 	bl	800f4e0 <__malloc_unlock>
 800e050:	e7e3      	b.n	800e01a <_malloc_r+0x1e>
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	1b5b      	subs	r3, r3, r5
 800e056:	d417      	bmi.n	800e088 <_malloc_r+0x8c>
 800e058:	2b0b      	cmp	r3, #11
 800e05a:	d903      	bls.n	800e064 <_malloc_r+0x68>
 800e05c:	6023      	str	r3, [r4, #0]
 800e05e:	441c      	add	r4, r3
 800e060:	6025      	str	r5, [r4, #0]
 800e062:	e004      	b.n	800e06e <_malloc_r+0x72>
 800e064:	6863      	ldr	r3, [r4, #4]
 800e066:	42a2      	cmp	r2, r4
 800e068:	bf0c      	ite	eq
 800e06a:	600b      	streq	r3, [r1, #0]
 800e06c:	6053      	strne	r3, [r2, #4]
 800e06e:	4630      	mov	r0, r6
 800e070:	f001 fa36 	bl	800f4e0 <__malloc_unlock>
 800e074:	f104 000b 	add.w	r0, r4, #11
 800e078:	1d23      	adds	r3, r4, #4
 800e07a:	f020 0007 	bic.w	r0, r0, #7
 800e07e:	1ac2      	subs	r2, r0, r3
 800e080:	d0cc      	beq.n	800e01c <_malloc_r+0x20>
 800e082:	1a1b      	subs	r3, r3, r0
 800e084:	50a3      	str	r3, [r4, r2]
 800e086:	e7c9      	b.n	800e01c <_malloc_r+0x20>
 800e088:	4622      	mov	r2, r4
 800e08a:	6864      	ldr	r4, [r4, #4]
 800e08c:	e7cc      	b.n	800e028 <_malloc_r+0x2c>
 800e08e:	1cc4      	adds	r4, r0, #3
 800e090:	f024 0403 	bic.w	r4, r4, #3
 800e094:	42a0      	cmp	r0, r4
 800e096:	d0e3      	beq.n	800e060 <_malloc_r+0x64>
 800e098:	1a21      	subs	r1, r4, r0
 800e09a:	4630      	mov	r0, r6
 800e09c:	f000 fdf8 	bl	800ec90 <_sbrk_r>
 800e0a0:	3001      	adds	r0, #1
 800e0a2:	d1dd      	bne.n	800e060 <_malloc_r+0x64>
 800e0a4:	e7cf      	b.n	800e046 <_malloc_r+0x4a>
 800e0a6:	bf00      	nop
 800e0a8:	200002c0 	.word	0x200002c0
 800e0ac:	200002c4 	.word	0x200002c4

0800e0b0 <__ssputs_r>:
 800e0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b4:	688e      	ldr	r6, [r1, #8]
 800e0b6:	429e      	cmp	r6, r3
 800e0b8:	4682      	mov	sl, r0
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	4690      	mov	r8, r2
 800e0be:	461f      	mov	r7, r3
 800e0c0:	d838      	bhi.n	800e134 <__ssputs_r+0x84>
 800e0c2:	898a      	ldrh	r2, [r1, #12]
 800e0c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0c8:	d032      	beq.n	800e130 <__ssputs_r+0x80>
 800e0ca:	6825      	ldr	r5, [r4, #0]
 800e0cc:	6909      	ldr	r1, [r1, #16]
 800e0ce:	eba5 0901 	sub.w	r9, r5, r1
 800e0d2:	6965      	ldr	r5, [r4, #20]
 800e0d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0dc:	3301      	adds	r3, #1
 800e0de:	444b      	add	r3, r9
 800e0e0:	106d      	asrs	r5, r5, #1
 800e0e2:	429d      	cmp	r5, r3
 800e0e4:	bf38      	it	cc
 800e0e6:	461d      	movcc	r5, r3
 800e0e8:	0553      	lsls	r3, r2, #21
 800e0ea:	d531      	bpl.n	800e150 <__ssputs_r+0xa0>
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	f7ff ff85 	bl	800dffc <_malloc_r>
 800e0f2:	4606      	mov	r6, r0
 800e0f4:	b950      	cbnz	r0, 800e10c <__ssputs_r+0x5c>
 800e0f6:	230c      	movs	r3, #12
 800e0f8:	f8ca 3000 	str.w	r3, [sl]
 800e0fc:	89a3      	ldrh	r3, [r4, #12]
 800e0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e102:	81a3      	strh	r3, [r4, #12]
 800e104:	f04f 30ff 	mov.w	r0, #4294967295
 800e108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e10c:	6921      	ldr	r1, [r4, #16]
 800e10e:	464a      	mov	r2, r9
 800e110:	f7ff fa4c 	bl	800d5ac <memcpy>
 800e114:	89a3      	ldrh	r3, [r4, #12]
 800e116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e11a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e11e:	81a3      	strh	r3, [r4, #12]
 800e120:	6126      	str	r6, [r4, #16]
 800e122:	6165      	str	r5, [r4, #20]
 800e124:	444e      	add	r6, r9
 800e126:	eba5 0509 	sub.w	r5, r5, r9
 800e12a:	6026      	str	r6, [r4, #0]
 800e12c:	60a5      	str	r5, [r4, #8]
 800e12e:	463e      	mov	r6, r7
 800e130:	42be      	cmp	r6, r7
 800e132:	d900      	bls.n	800e136 <__ssputs_r+0x86>
 800e134:	463e      	mov	r6, r7
 800e136:	4632      	mov	r2, r6
 800e138:	6820      	ldr	r0, [r4, #0]
 800e13a:	4641      	mov	r1, r8
 800e13c:	f001 f9b0 	bl	800f4a0 <memmove>
 800e140:	68a3      	ldr	r3, [r4, #8]
 800e142:	6822      	ldr	r2, [r4, #0]
 800e144:	1b9b      	subs	r3, r3, r6
 800e146:	4432      	add	r2, r6
 800e148:	60a3      	str	r3, [r4, #8]
 800e14a:	6022      	str	r2, [r4, #0]
 800e14c:	2000      	movs	r0, #0
 800e14e:	e7db      	b.n	800e108 <__ssputs_r+0x58>
 800e150:	462a      	mov	r2, r5
 800e152:	f001 f9cb 	bl	800f4ec <_realloc_r>
 800e156:	4606      	mov	r6, r0
 800e158:	2800      	cmp	r0, #0
 800e15a:	d1e1      	bne.n	800e120 <__ssputs_r+0x70>
 800e15c:	6921      	ldr	r1, [r4, #16]
 800e15e:	4650      	mov	r0, sl
 800e160:	f7ff fefc 	bl	800df5c <_free_r>
 800e164:	e7c7      	b.n	800e0f6 <__ssputs_r+0x46>
	...

0800e168 <_svfiprintf_r>:
 800e168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e16c:	4698      	mov	r8, r3
 800e16e:	898b      	ldrh	r3, [r1, #12]
 800e170:	061b      	lsls	r3, r3, #24
 800e172:	b09d      	sub	sp, #116	; 0x74
 800e174:	4607      	mov	r7, r0
 800e176:	460d      	mov	r5, r1
 800e178:	4614      	mov	r4, r2
 800e17a:	d50e      	bpl.n	800e19a <_svfiprintf_r+0x32>
 800e17c:	690b      	ldr	r3, [r1, #16]
 800e17e:	b963      	cbnz	r3, 800e19a <_svfiprintf_r+0x32>
 800e180:	2140      	movs	r1, #64	; 0x40
 800e182:	f7ff ff3b 	bl	800dffc <_malloc_r>
 800e186:	6028      	str	r0, [r5, #0]
 800e188:	6128      	str	r0, [r5, #16]
 800e18a:	b920      	cbnz	r0, 800e196 <_svfiprintf_r+0x2e>
 800e18c:	230c      	movs	r3, #12
 800e18e:	603b      	str	r3, [r7, #0]
 800e190:	f04f 30ff 	mov.w	r0, #4294967295
 800e194:	e0d1      	b.n	800e33a <_svfiprintf_r+0x1d2>
 800e196:	2340      	movs	r3, #64	; 0x40
 800e198:	616b      	str	r3, [r5, #20]
 800e19a:	2300      	movs	r3, #0
 800e19c:	9309      	str	r3, [sp, #36]	; 0x24
 800e19e:	2320      	movs	r3, #32
 800e1a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1a8:	2330      	movs	r3, #48	; 0x30
 800e1aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e354 <_svfiprintf_r+0x1ec>
 800e1ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1b2:	f04f 0901 	mov.w	r9, #1
 800e1b6:	4623      	mov	r3, r4
 800e1b8:	469a      	mov	sl, r3
 800e1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1be:	b10a      	cbz	r2, 800e1c4 <_svfiprintf_r+0x5c>
 800e1c0:	2a25      	cmp	r2, #37	; 0x25
 800e1c2:	d1f9      	bne.n	800e1b8 <_svfiprintf_r+0x50>
 800e1c4:	ebba 0b04 	subs.w	fp, sl, r4
 800e1c8:	d00b      	beq.n	800e1e2 <_svfiprintf_r+0x7a>
 800e1ca:	465b      	mov	r3, fp
 800e1cc:	4622      	mov	r2, r4
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	4638      	mov	r0, r7
 800e1d2:	f7ff ff6d 	bl	800e0b0 <__ssputs_r>
 800e1d6:	3001      	adds	r0, #1
 800e1d8:	f000 80aa 	beq.w	800e330 <_svfiprintf_r+0x1c8>
 800e1dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1de:	445a      	add	r2, fp
 800e1e0:	9209      	str	r2, [sp, #36]	; 0x24
 800e1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	f000 80a2 	beq.w	800e330 <_svfiprintf_r+0x1c8>
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1f6:	f10a 0a01 	add.w	sl, sl, #1
 800e1fa:	9304      	str	r3, [sp, #16]
 800e1fc:	9307      	str	r3, [sp, #28]
 800e1fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e202:	931a      	str	r3, [sp, #104]	; 0x68
 800e204:	4654      	mov	r4, sl
 800e206:	2205      	movs	r2, #5
 800e208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e20c:	4851      	ldr	r0, [pc, #324]	; (800e354 <_svfiprintf_r+0x1ec>)
 800e20e:	f7f1 ffe7 	bl	80001e0 <memchr>
 800e212:	9a04      	ldr	r2, [sp, #16]
 800e214:	b9d8      	cbnz	r0, 800e24e <_svfiprintf_r+0xe6>
 800e216:	06d0      	lsls	r0, r2, #27
 800e218:	bf44      	itt	mi
 800e21a:	2320      	movmi	r3, #32
 800e21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e220:	0711      	lsls	r1, r2, #28
 800e222:	bf44      	itt	mi
 800e224:	232b      	movmi	r3, #43	; 0x2b
 800e226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e22a:	f89a 3000 	ldrb.w	r3, [sl]
 800e22e:	2b2a      	cmp	r3, #42	; 0x2a
 800e230:	d015      	beq.n	800e25e <_svfiprintf_r+0xf6>
 800e232:	9a07      	ldr	r2, [sp, #28]
 800e234:	4654      	mov	r4, sl
 800e236:	2000      	movs	r0, #0
 800e238:	f04f 0c0a 	mov.w	ip, #10
 800e23c:	4621      	mov	r1, r4
 800e23e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e242:	3b30      	subs	r3, #48	; 0x30
 800e244:	2b09      	cmp	r3, #9
 800e246:	d94e      	bls.n	800e2e6 <_svfiprintf_r+0x17e>
 800e248:	b1b0      	cbz	r0, 800e278 <_svfiprintf_r+0x110>
 800e24a:	9207      	str	r2, [sp, #28]
 800e24c:	e014      	b.n	800e278 <_svfiprintf_r+0x110>
 800e24e:	eba0 0308 	sub.w	r3, r0, r8
 800e252:	fa09 f303 	lsl.w	r3, r9, r3
 800e256:	4313      	orrs	r3, r2
 800e258:	9304      	str	r3, [sp, #16]
 800e25a:	46a2      	mov	sl, r4
 800e25c:	e7d2      	b.n	800e204 <_svfiprintf_r+0x9c>
 800e25e:	9b03      	ldr	r3, [sp, #12]
 800e260:	1d19      	adds	r1, r3, #4
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	9103      	str	r1, [sp, #12]
 800e266:	2b00      	cmp	r3, #0
 800e268:	bfbb      	ittet	lt
 800e26a:	425b      	neglt	r3, r3
 800e26c:	f042 0202 	orrlt.w	r2, r2, #2
 800e270:	9307      	strge	r3, [sp, #28]
 800e272:	9307      	strlt	r3, [sp, #28]
 800e274:	bfb8      	it	lt
 800e276:	9204      	strlt	r2, [sp, #16]
 800e278:	7823      	ldrb	r3, [r4, #0]
 800e27a:	2b2e      	cmp	r3, #46	; 0x2e
 800e27c:	d10c      	bne.n	800e298 <_svfiprintf_r+0x130>
 800e27e:	7863      	ldrb	r3, [r4, #1]
 800e280:	2b2a      	cmp	r3, #42	; 0x2a
 800e282:	d135      	bne.n	800e2f0 <_svfiprintf_r+0x188>
 800e284:	9b03      	ldr	r3, [sp, #12]
 800e286:	1d1a      	adds	r2, r3, #4
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	9203      	str	r2, [sp, #12]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	bfb8      	it	lt
 800e290:	f04f 33ff 	movlt.w	r3, #4294967295
 800e294:	3402      	adds	r4, #2
 800e296:	9305      	str	r3, [sp, #20]
 800e298:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e364 <_svfiprintf_r+0x1fc>
 800e29c:	7821      	ldrb	r1, [r4, #0]
 800e29e:	2203      	movs	r2, #3
 800e2a0:	4650      	mov	r0, sl
 800e2a2:	f7f1 ff9d 	bl	80001e0 <memchr>
 800e2a6:	b140      	cbz	r0, 800e2ba <_svfiprintf_r+0x152>
 800e2a8:	2340      	movs	r3, #64	; 0x40
 800e2aa:	eba0 000a 	sub.w	r0, r0, sl
 800e2ae:	fa03 f000 	lsl.w	r0, r3, r0
 800e2b2:	9b04      	ldr	r3, [sp, #16]
 800e2b4:	4303      	orrs	r3, r0
 800e2b6:	3401      	adds	r4, #1
 800e2b8:	9304      	str	r3, [sp, #16]
 800e2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2be:	4826      	ldr	r0, [pc, #152]	; (800e358 <_svfiprintf_r+0x1f0>)
 800e2c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2c4:	2206      	movs	r2, #6
 800e2c6:	f7f1 ff8b 	bl	80001e0 <memchr>
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d038      	beq.n	800e340 <_svfiprintf_r+0x1d8>
 800e2ce:	4b23      	ldr	r3, [pc, #140]	; (800e35c <_svfiprintf_r+0x1f4>)
 800e2d0:	bb1b      	cbnz	r3, 800e31a <_svfiprintf_r+0x1b2>
 800e2d2:	9b03      	ldr	r3, [sp, #12]
 800e2d4:	3307      	adds	r3, #7
 800e2d6:	f023 0307 	bic.w	r3, r3, #7
 800e2da:	3308      	adds	r3, #8
 800e2dc:	9303      	str	r3, [sp, #12]
 800e2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2e0:	4433      	add	r3, r6
 800e2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e2e4:	e767      	b.n	800e1b6 <_svfiprintf_r+0x4e>
 800e2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	2001      	movs	r0, #1
 800e2ee:	e7a5      	b.n	800e23c <_svfiprintf_r+0xd4>
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	3401      	adds	r4, #1
 800e2f4:	9305      	str	r3, [sp, #20]
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	f04f 0c0a 	mov.w	ip, #10
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e302:	3a30      	subs	r2, #48	; 0x30
 800e304:	2a09      	cmp	r2, #9
 800e306:	d903      	bls.n	800e310 <_svfiprintf_r+0x1a8>
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d0c5      	beq.n	800e298 <_svfiprintf_r+0x130>
 800e30c:	9105      	str	r1, [sp, #20]
 800e30e:	e7c3      	b.n	800e298 <_svfiprintf_r+0x130>
 800e310:	fb0c 2101 	mla	r1, ip, r1, r2
 800e314:	4604      	mov	r4, r0
 800e316:	2301      	movs	r3, #1
 800e318:	e7f0      	b.n	800e2fc <_svfiprintf_r+0x194>
 800e31a:	ab03      	add	r3, sp, #12
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	462a      	mov	r2, r5
 800e320:	4b0f      	ldr	r3, [pc, #60]	; (800e360 <_svfiprintf_r+0x1f8>)
 800e322:	a904      	add	r1, sp, #16
 800e324:	4638      	mov	r0, r7
 800e326:	f7fc f91b 	bl	800a560 <_printf_float>
 800e32a:	1c42      	adds	r2, r0, #1
 800e32c:	4606      	mov	r6, r0
 800e32e:	d1d6      	bne.n	800e2de <_svfiprintf_r+0x176>
 800e330:	89ab      	ldrh	r3, [r5, #12]
 800e332:	065b      	lsls	r3, r3, #25
 800e334:	f53f af2c 	bmi.w	800e190 <_svfiprintf_r+0x28>
 800e338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e33a:	b01d      	add	sp, #116	; 0x74
 800e33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e340:	ab03      	add	r3, sp, #12
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	462a      	mov	r2, r5
 800e346:	4b06      	ldr	r3, [pc, #24]	; (800e360 <_svfiprintf_r+0x1f8>)
 800e348:	a904      	add	r1, sp, #16
 800e34a:	4638      	mov	r0, r7
 800e34c:	f7fc fbac 	bl	800aaa8 <_printf_i>
 800e350:	e7eb      	b.n	800e32a <_svfiprintf_r+0x1c2>
 800e352:	bf00      	nop
 800e354:	0800fe54 	.word	0x0800fe54
 800e358:	0800fe5e 	.word	0x0800fe5e
 800e35c:	0800a561 	.word	0x0800a561
 800e360:	0800e0b1 	.word	0x0800e0b1
 800e364:	0800fe5a 	.word	0x0800fe5a

0800e368 <_sungetc_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	1c4b      	adds	r3, r1, #1
 800e36c:	4614      	mov	r4, r2
 800e36e:	d103      	bne.n	800e378 <_sungetc_r+0x10>
 800e370:	f04f 35ff 	mov.w	r5, #4294967295
 800e374:	4628      	mov	r0, r5
 800e376:	bd38      	pop	{r3, r4, r5, pc}
 800e378:	8993      	ldrh	r3, [r2, #12]
 800e37a:	f023 0320 	bic.w	r3, r3, #32
 800e37e:	8193      	strh	r3, [r2, #12]
 800e380:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e382:	6852      	ldr	r2, [r2, #4]
 800e384:	b2cd      	uxtb	r5, r1
 800e386:	b18b      	cbz	r3, 800e3ac <_sungetc_r+0x44>
 800e388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e38a:	4293      	cmp	r3, r2
 800e38c:	dd08      	ble.n	800e3a0 <_sungetc_r+0x38>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	1e5a      	subs	r2, r3, #1
 800e392:	6022      	str	r2, [r4, #0]
 800e394:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e398:	6863      	ldr	r3, [r4, #4]
 800e39a:	3301      	adds	r3, #1
 800e39c:	6063      	str	r3, [r4, #4]
 800e39e:	e7e9      	b.n	800e374 <_sungetc_r+0xc>
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	f000 fd4f 	bl	800ee44 <__submore>
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d0f1      	beq.n	800e38e <_sungetc_r+0x26>
 800e3aa:	e7e1      	b.n	800e370 <_sungetc_r+0x8>
 800e3ac:	6921      	ldr	r1, [r4, #16]
 800e3ae:	6823      	ldr	r3, [r4, #0]
 800e3b0:	b151      	cbz	r1, 800e3c8 <_sungetc_r+0x60>
 800e3b2:	4299      	cmp	r1, r3
 800e3b4:	d208      	bcs.n	800e3c8 <_sungetc_r+0x60>
 800e3b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e3ba:	42a9      	cmp	r1, r5
 800e3bc:	d104      	bne.n	800e3c8 <_sungetc_r+0x60>
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	3201      	adds	r2, #1
 800e3c2:	6023      	str	r3, [r4, #0]
 800e3c4:	6062      	str	r2, [r4, #4]
 800e3c6:	e7d5      	b.n	800e374 <_sungetc_r+0xc>
 800e3c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e3cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3d0:	6363      	str	r3, [r4, #52]	; 0x34
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e3d6:	4623      	mov	r3, r4
 800e3d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e3dc:	6023      	str	r3, [r4, #0]
 800e3de:	2301      	movs	r3, #1
 800e3e0:	e7dc      	b.n	800e39c <_sungetc_r+0x34>

0800e3e2 <__ssrefill_r>:
 800e3e2:	b510      	push	{r4, lr}
 800e3e4:	460c      	mov	r4, r1
 800e3e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e3e8:	b169      	cbz	r1, 800e406 <__ssrefill_r+0x24>
 800e3ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3ee:	4299      	cmp	r1, r3
 800e3f0:	d001      	beq.n	800e3f6 <__ssrefill_r+0x14>
 800e3f2:	f7ff fdb3 	bl	800df5c <_free_r>
 800e3f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3f8:	6063      	str	r3, [r4, #4]
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	6360      	str	r0, [r4, #52]	; 0x34
 800e3fe:	b113      	cbz	r3, 800e406 <__ssrefill_r+0x24>
 800e400:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e402:	6023      	str	r3, [r4, #0]
 800e404:	bd10      	pop	{r4, pc}
 800e406:	6923      	ldr	r3, [r4, #16]
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	2300      	movs	r3, #0
 800e40c:	6063      	str	r3, [r4, #4]
 800e40e:	89a3      	ldrh	r3, [r4, #12]
 800e410:	f043 0320 	orr.w	r3, r3, #32
 800e414:	81a3      	strh	r3, [r4, #12]
 800e416:	f04f 30ff 	mov.w	r0, #4294967295
 800e41a:	e7f3      	b.n	800e404 <__ssrefill_r+0x22>

0800e41c <__ssvfiscanf_r>:
 800e41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e420:	460c      	mov	r4, r1
 800e422:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800e426:	2100      	movs	r1, #0
 800e428:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e42c:	49b2      	ldr	r1, [pc, #712]	; (800e6f8 <__ssvfiscanf_r+0x2dc>)
 800e42e:	91a0      	str	r1, [sp, #640]	; 0x280
 800e430:	f10d 0804 	add.w	r8, sp, #4
 800e434:	49b1      	ldr	r1, [pc, #708]	; (800e6fc <__ssvfiscanf_r+0x2e0>)
 800e436:	4fb2      	ldr	r7, [pc, #712]	; (800e700 <__ssvfiscanf_r+0x2e4>)
 800e438:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800e704 <__ssvfiscanf_r+0x2e8>
 800e43c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e440:	4606      	mov	r6, r0
 800e442:	91a1      	str	r1, [sp, #644]	; 0x284
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	f892 a000 	ldrb.w	sl, [r2]
 800e44a:	f1ba 0f00 	cmp.w	sl, #0
 800e44e:	f000 8151 	beq.w	800e6f4 <__ssvfiscanf_r+0x2d8>
 800e452:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800e456:	f013 0308 	ands.w	r3, r3, #8
 800e45a:	f102 0501 	add.w	r5, r2, #1
 800e45e:	d019      	beq.n	800e494 <__ssvfiscanf_r+0x78>
 800e460:	6863      	ldr	r3, [r4, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	dd0f      	ble.n	800e486 <__ssvfiscanf_r+0x6a>
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	781a      	ldrb	r2, [r3, #0]
 800e46a:	5cba      	ldrb	r2, [r7, r2]
 800e46c:	0712      	lsls	r2, r2, #28
 800e46e:	d401      	bmi.n	800e474 <__ssvfiscanf_r+0x58>
 800e470:	462a      	mov	r2, r5
 800e472:	e7e8      	b.n	800e446 <__ssvfiscanf_r+0x2a>
 800e474:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e476:	3201      	adds	r2, #1
 800e478:	9245      	str	r2, [sp, #276]	; 0x114
 800e47a:	6862      	ldr	r2, [r4, #4]
 800e47c:	3301      	adds	r3, #1
 800e47e:	3a01      	subs	r2, #1
 800e480:	6062      	str	r2, [r4, #4]
 800e482:	6023      	str	r3, [r4, #0]
 800e484:	e7ec      	b.n	800e460 <__ssvfiscanf_r+0x44>
 800e486:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e488:	4621      	mov	r1, r4
 800e48a:	4630      	mov	r0, r6
 800e48c:	4798      	blx	r3
 800e48e:	2800      	cmp	r0, #0
 800e490:	d0e9      	beq.n	800e466 <__ssvfiscanf_r+0x4a>
 800e492:	e7ed      	b.n	800e470 <__ssvfiscanf_r+0x54>
 800e494:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800e498:	f040 8083 	bne.w	800e5a2 <__ssvfiscanf_r+0x186>
 800e49c:	9341      	str	r3, [sp, #260]	; 0x104
 800e49e:	9343      	str	r3, [sp, #268]	; 0x10c
 800e4a0:	7853      	ldrb	r3, [r2, #1]
 800e4a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e4a4:	bf02      	ittt	eq
 800e4a6:	2310      	moveq	r3, #16
 800e4a8:	1c95      	addeq	r5, r2, #2
 800e4aa:	9341      	streq	r3, [sp, #260]	; 0x104
 800e4ac:	220a      	movs	r2, #10
 800e4ae:	46ab      	mov	fp, r5
 800e4b0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800e4b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e4b8:	2b09      	cmp	r3, #9
 800e4ba:	d91d      	bls.n	800e4f8 <__ssvfiscanf_r+0xdc>
 800e4bc:	4891      	ldr	r0, [pc, #580]	; (800e704 <__ssvfiscanf_r+0x2e8>)
 800e4be:	2203      	movs	r2, #3
 800e4c0:	f7f1 fe8e 	bl	80001e0 <memchr>
 800e4c4:	b140      	cbz	r0, 800e4d8 <__ssvfiscanf_r+0xbc>
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	eba0 0009 	sub.w	r0, r0, r9
 800e4cc:	fa03 f000 	lsl.w	r0, r3, r0
 800e4d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e4d2:	4318      	orrs	r0, r3
 800e4d4:	9041      	str	r0, [sp, #260]	; 0x104
 800e4d6:	465d      	mov	r5, fp
 800e4d8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e4dc:	2b78      	cmp	r3, #120	; 0x78
 800e4de:	d806      	bhi.n	800e4ee <__ssvfiscanf_r+0xd2>
 800e4e0:	2b57      	cmp	r3, #87	; 0x57
 800e4e2:	d810      	bhi.n	800e506 <__ssvfiscanf_r+0xea>
 800e4e4:	2b25      	cmp	r3, #37	; 0x25
 800e4e6:	d05c      	beq.n	800e5a2 <__ssvfiscanf_r+0x186>
 800e4e8:	d856      	bhi.n	800e598 <__ssvfiscanf_r+0x17c>
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d074      	beq.n	800e5d8 <__ssvfiscanf_r+0x1bc>
 800e4ee:	2303      	movs	r3, #3
 800e4f0:	9347      	str	r3, [sp, #284]	; 0x11c
 800e4f2:	230a      	movs	r3, #10
 800e4f4:	9342      	str	r3, [sp, #264]	; 0x108
 800e4f6:	e081      	b.n	800e5fc <__ssvfiscanf_r+0x1e0>
 800e4f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e4fa:	fb02 1303 	mla	r3, r2, r3, r1
 800e4fe:	3b30      	subs	r3, #48	; 0x30
 800e500:	9343      	str	r3, [sp, #268]	; 0x10c
 800e502:	465d      	mov	r5, fp
 800e504:	e7d3      	b.n	800e4ae <__ssvfiscanf_r+0x92>
 800e506:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e50a:	2a20      	cmp	r2, #32
 800e50c:	d8ef      	bhi.n	800e4ee <__ssvfiscanf_r+0xd2>
 800e50e:	a101      	add	r1, pc, #4	; (adr r1, 800e514 <__ssvfiscanf_r+0xf8>)
 800e510:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e514:	0800e5e7 	.word	0x0800e5e7
 800e518:	0800e4ef 	.word	0x0800e4ef
 800e51c:	0800e4ef 	.word	0x0800e4ef
 800e520:	0800e645 	.word	0x0800e645
 800e524:	0800e4ef 	.word	0x0800e4ef
 800e528:	0800e4ef 	.word	0x0800e4ef
 800e52c:	0800e4ef 	.word	0x0800e4ef
 800e530:	0800e4ef 	.word	0x0800e4ef
 800e534:	0800e4ef 	.word	0x0800e4ef
 800e538:	0800e4ef 	.word	0x0800e4ef
 800e53c:	0800e4ef 	.word	0x0800e4ef
 800e540:	0800e65b 	.word	0x0800e65b
 800e544:	0800e631 	.word	0x0800e631
 800e548:	0800e59f 	.word	0x0800e59f
 800e54c:	0800e59f 	.word	0x0800e59f
 800e550:	0800e59f 	.word	0x0800e59f
 800e554:	0800e4ef 	.word	0x0800e4ef
 800e558:	0800e635 	.word	0x0800e635
 800e55c:	0800e4ef 	.word	0x0800e4ef
 800e560:	0800e4ef 	.word	0x0800e4ef
 800e564:	0800e4ef 	.word	0x0800e4ef
 800e568:	0800e4ef 	.word	0x0800e4ef
 800e56c:	0800e66b 	.word	0x0800e66b
 800e570:	0800e63d 	.word	0x0800e63d
 800e574:	0800e5df 	.word	0x0800e5df
 800e578:	0800e4ef 	.word	0x0800e4ef
 800e57c:	0800e4ef 	.word	0x0800e4ef
 800e580:	0800e667 	.word	0x0800e667
 800e584:	0800e4ef 	.word	0x0800e4ef
 800e588:	0800e631 	.word	0x0800e631
 800e58c:	0800e4ef 	.word	0x0800e4ef
 800e590:	0800e4ef 	.word	0x0800e4ef
 800e594:	0800e5e7 	.word	0x0800e5e7
 800e598:	3b45      	subs	r3, #69	; 0x45
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d8a7      	bhi.n	800e4ee <__ssvfiscanf_r+0xd2>
 800e59e:	2305      	movs	r3, #5
 800e5a0:	e02b      	b.n	800e5fa <__ssvfiscanf_r+0x1de>
 800e5a2:	6863      	ldr	r3, [r4, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	dd0d      	ble.n	800e5c4 <__ssvfiscanf_r+0x1a8>
 800e5a8:	6823      	ldr	r3, [r4, #0]
 800e5aa:	781a      	ldrb	r2, [r3, #0]
 800e5ac:	4552      	cmp	r2, sl
 800e5ae:	f040 80a1 	bne.w	800e6f4 <__ssvfiscanf_r+0x2d8>
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	6862      	ldr	r2, [r4, #4]
 800e5b6:	6023      	str	r3, [r4, #0]
 800e5b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e5ba:	3a01      	subs	r2, #1
 800e5bc:	3301      	adds	r3, #1
 800e5be:	6062      	str	r2, [r4, #4]
 800e5c0:	9345      	str	r3, [sp, #276]	; 0x114
 800e5c2:	e755      	b.n	800e470 <__ssvfiscanf_r+0x54>
 800e5c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	4798      	blx	r3
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	d0eb      	beq.n	800e5a8 <__ssvfiscanf_r+0x18c>
 800e5d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	f040 8084 	bne.w	800e6e0 <__ssvfiscanf_r+0x2c4>
 800e5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5dc:	e086      	b.n	800e6ec <__ssvfiscanf_r+0x2d0>
 800e5de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e5e0:	f042 0220 	orr.w	r2, r2, #32
 800e5e4:	9241      	str	r2, [sp, #260]	; 0x104
 800e5e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e5e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5ec:	9241      	str	r2, [sp, #260]	; 0x104
 800e5ee:	2210      	movs	r2, #16
 800e5f0:	2b6f      	cmp	r3, #111	; 0x6f
 800e5f2:	9242      	str	r2, [sp, #264]	; 0x108
 800e5f4:	bf34      	ite	cc
 800e5f6:	2303      	movcc	r3, #3
 800e5f8:	2304      	movcs	r3, #4
 800e5fa:	9347      	str	r3, [sp, #284]	; 0x11c
 800e5fc:	6863      	ldr	r3, [r4, #4]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	dd41      	ble.n	800e686 <__ssvfiscanf_r+0x26a>
 800e602:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e604:	0659      	lsls	r1, r3, #25
 800e606:	d404      	bmi.n	800e612 <__ssvfiscanf_r+0x1f6>
 800e608:	6823      	ldr	r3, [r4, #0]
 800e60a:	781a      	ldrb	r2, [r3, #0]
 800e60c:	5cba      	ldrb	r2, [r7, r2]
 800e60e:	0712      	lsls	r2, r2, #28
 800e610:	d440      	bmi.n	800e694 <__ssvfiscanf_r+0x278>
 800e612:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e614:	2b02      	cmp	r3, #2
 800e616:	dc4f      	bgt.n	800e6b8 <__ssvfiscanf_r+0x29c>
 800e618:	466b      	mov	r3, sp
 800e61a:	4622      	mov	r2, r4
 800e61c:	a941      	add	r1, sp, #260	; 0x104
 800e61e:	4630      	mov	r0, r6
 800e620:	f000 f9ce 	bl	800e9c0 <_scanf_chars>
 800e624:	2801      	cmp	r0, #1
 800e626:	d065      	beq.n	800e6f4 <__ssvfiscanf_r+0x2d8>
 800e628:	2802      	cmp	r0, #2
 800e62a:	f47f af21 	bne.w	800e470 <__ssvfiscanf_r+0x54>
 800e62e:	e7cf      	b.n	800e5d0 <__ssvfiscanf_r+0x1b4>
 800e630:	220a      	movs	r2, #10
 800e632:	e7dd      	b.n	800e5f0 <__ssvfiscanf_r+0x1d4>
 800e634:	2300      	movs	r3, #0
 800e636:	9342      	str	r3, [sp, #264]	; 0x108
 800e638:	2303      	movs	r3, #3
 800e63a:	e7de      	b.n	800e5fa <__ssvfiscanf_r+0x1de>
 800e63c:	2308      	movs	r3, #8
 800e63e:	9342      	str	r3, [sp, #264]	; 0x108
 800e640:	2304      	movs	r3, #4
 800e642:	e7da      	b.n	800e5fa <__ssvfiscanf_r+0x1de>
 800e644:	4629      	mov	r1, r5
 800e646:	4640      	mov	r0, r8
 800e648:	f000 fb32 	bl	800ecb0 <__sccl>
 800e64c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e64e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e652:	9341      	str	r3, [sp, #260]	; 0x104
 800e654:	4605      	mov	r5, r0
 800e656:	2301      	movs	r3, #1
 800e658:	e7cf      	b.n	800e5fa <__ssvfiscanf_r+0x1de>
 800e65a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e65c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e660:	9341      	str	r3, [sp, #260]	; 0x104
 800e662:	2300      	movs	r3, #0
 800e664:	e7c9      	b.n	800e5fa <__ssvfiscanf_r+0x1de>
 800e666:	2302      	movs	r3, #2
 800e668:	e7c7      	b.n	800e5fa <__ssvfiscanf_r+0x1de>
 800e66a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e66c:	06c3      	lsls	r3, r0, #27
 800e66e:	f53f aeff 	bmi.w	800e470 <__ssvfiscanf_r+0x54>
 800e672:	9b00      	ldr	r3, [sp, #0]
 800e674:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e676:	1d19      	adds	r1, r3, #4
 800e678:	9100      	str	r1, [sp, #0]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	07c0      	lsls	r0, r0, #31
 800e67e:	bf4c      	ite	mi
 800e680:	801a      	strhmi	r2, [r3, #0]
 800e682:	601a      	strpl	r2, [r3, #0]
 800e684:	e6f4      	b.n	800e470 <__ssvfiscanf_r+0x54>
 800e686:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e688:	4621      	mov	r1, r4
 800e68a:	4630      	mov	r0, r6
 800e68c:	4798      	blx	r3
 800e68e:	2800      	cmp	r0, #0
 800e690:	d0b7      	beq.n	800e602 <__ssvfiscanf_r+0x1e6>
 800e692:	e79d      	b.n	800e5d0 <__ssvfiscanf_r+0x1b4>
 800e694:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e696:	3201      	adds	r2, #1
 800e698:	9245      	str	r2, [sp, #276]	; 0x114
 800e69a:	6862      	ldr	r2, [r4, #4]
 800e69c:	3a01      	subs	r2, #1
 800e69e:	2a00      	cmp	r2, #0
 800e6a0:	6062      	str	r2, [r4, #4]
 800e6a2:	dd02      	ble.n	800e6aa <__ssvfiscanf_r+0x28e>
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	6023      	str	r3, [r4, #0]
 800e6a8:	e7ae      	b.n	800e608 <__ssvfiscanf_r+0x1ec>
 800e6aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	4798      	blx	r3
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	d0a8      	beq.n	800e608 <__ssvfiscanf_r+0x1ec>
 800e6b6:	e78b      	b.n	800e5d0 <__ssvfiscanf_r+0x1b4>
 800e6b8:	2b04      	cmp	r3, #4
 800e6ba:	dc06      	bgt.n	800e6ca <__ssvfiscanf_r+0x2ae>
 800e6bc:	466b      	mov	r3, sp
 800e6be:	4622      	mov	r2, r4
 800e6c0:	a941      	add	r1, sp, #260	; 0x104
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	f000 f9d4 	bl	800ea70 <_scanf_i>
 800e6c8:	e7ac      	b.n	800e624 <__ssvfiscanf_r+0x208>
 800e6ca:	4b0f      	ldr	r3, [pc, #60]	; (800e708 <__ssvfiscanf_r+0x2ec>)
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f43f aecf 	beq.w	800e470 <__ssvfiscanf_r+0x54>
 800e6d2:	466b      	mov	r3, sp
 800e6d4:	4622      	mov	r2, r4
 800e6d6:	a941      	add	r1, sp, #260	; 0x104
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f7fc fb0b 	bl	800acf4 <_scanf_float>
 800e6de:	e7a1      	b.n	800e624 <__ssvfiscanf_r+0x208>
 800e6e0:	89a3      	ldrh	r3, [r4, #12]
 800e6e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e6e6:	bf18      	it	ne
 800e6e8:	f04f 30ff 	movne.w	r0, #4294967295
 800e6ec:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800e6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e6f6:	e7f9      	b.n	800e6ec <__ssvfiscanf_r+0x2d0>
 800e6f8:	0800e369 	.word	0x0800e369
 800e6fc:	0800e3e3 	.word	0x0800e3e3
 800e700:	0800fafd 	.word	0x0800fafd
 800e704:	0800fe5a 	.word	0x0800fe5a
 800e708:	0800acf5 	.word	0x0800acf5

0800e70c <__sfputc_r>:
 800e70c:	6893      	ldr	r3, [r2, #8]
 800e70e:	3b01      	subs	r3, #1
 800e710:	2b00      	cmp	r3, #0
 800e712:	b410      	push	{r4}
 800e714:	6093      	str	r3, [r2, #8]
 800e716:	da08      	bge.n	800e72a <__sfputc_r+0x1e>
 800e718:	6994      	ldr	r4, [r2, #24]
 800e71a:	42a3      	cmp	r3, r4
 800e71c:	db01      	blt.n	800e722 <__sfputc_r+0x16>
 800e71e:	290a      	cmp	r1, #10
 800e720:	d103      	bne.n	800e72a <__sfputc_r+0x1e>
 800e722:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e726:	f000 bbc7 	b.w	800eeb8 <__swbuf_r>
 800e72a:	6813      	ldr	r3, [r2, #0]
 800e72c:	1c58      	adds	r0, r3, #1
 800e72e:	6010      	str	r0, [r2, #0]
 800e730:	7019      	strb	r1, [r3, #0]
 800e732:	4608      	mov	r0, r1
 800e734:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <__sfputs_r>:
 800e73a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73c:	4606      	mov	r6, r0
 800e73e:	460f      	mov	r7, r1
 800e740:	4614      	mov	r4, r2
 800e742:	18d5      	adds	r5, r2, r3
 800e744:	42ac      	cmp	r4, r5
 800e746:	d101      	bne.n	800e74c <__sfputs_r+0x12>
 800e748:	2000      	movs	r0, #0
 800e74a:	e007      	b.n	800e75c <__sfputs_r+0x22>
 800e74c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e750:	463a      	mov	r2, r7
 800e752:	4630      	mov	r0, r6
 800e754:	f7ff ffda 	bl	800e70c <__sfputc_r>
 800e758:	1c43      	adds	r3, r0, #1
 800e75a:	d1f3      	bne.n	800e744 <__sfputs_r+0xa>
 800e75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e760 <_vfiprintf_r>:
 800e760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e764:	460d      	mov	r5, r1
 800e766:	b09d      	sub	sp, #116	; 0x74
 800e768:	4614      	mov	r4, r2
 800e76a:	4698      	mov	r8, r3
 800e76c:	4606      	mov	r6, r0
 800e76e:	b118      	cbz	r0, 800e778 <_vfiprintf_r+0x18>
 800e770:	6983      	ldr	r3, [r0, #24]
 800e772:	b90b      	cbnz	r3, 800e778 <_vfiprintf_r+0x18>
 800e774:	f000 fd90 	bl	800f298 <__sinit>
 800e778:	4b89      	ldr	r3, [pc, #548]	; (800e9a0 <_vfiprintf_r+0x240>)
 800e77a:	429d      	cmp	r5, r3
 800e77c:	d11b      	bne.n	800e7b6 <_vfiprintf_r+0x56>
 800e77e:	6875      	ldr	r5, [r6, #4]
 800e780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e782:	07d9      	lsls	r1, r3, #31
 800e784:	d405      	bmi.n	800e792 <_vfiprintf_r+0x32>
 800e786:	89ab      	ldrh	r3, [r5, #12]
 800e788:	059a      	lsls	r2, r3, #22
 800e78a:	d402      	bmi.n	800e792 <_vfiprintf_r+0x32>
 800e78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e78e:	f000 fe21 	bl	800f3d4 <__retarget_lock_acquire_recursive>
 800e792:	89ab      	ldrh	r3, [r5, #12]
 800e794:	071b      	lsls	r3, r3, #28
 800e796:	d501      	bpl.n	800e79c <_vfiprintf_r+0x3c>
 800e798:	692b      	ldr	r3, [r5, #16]
 800e79a:	b9eb      	cbnz	r3, 800e7d8 <_vfiprintf_r+0x78>
 800e79c:	4629      	mov	r1, r5
 800e79e:	4630      	mov	r0, r6
 800e7a0:	f000 fbea 	bl	800ef78 <__swsetup_r>
 800e7a4:	b1c0      	cbz	r0, 800e7d8 <_vfiprintf_r+0x78>
 800e7a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7a8:	07dc      	lsls	r4, r3, #31
 800e7aa:	d50e      	bpl.n	800e7ca <_vfiprintf_r+0x6a>
 800e7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b0:	b01d      	add	sp, #116	; 0x74
 800e7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b6:	4b7b      	ldr	r3, [pc, #492]	; (800e9a4 <_vfiprintf_r+0x244>)
 800e7b8:	429d      	cmp	r5, r3
 800e7ba:	d101      	bne.n	800e7c0 <_vfiprintf_r+0x60>
 800e7bc:	68b5      	ldr	r5, [r6, #8]
 800e7be:	e7df      	b.n	800e780 <_vfiprintf_r+0x20>
 800e7c0:	4b79      	ldr	r3, [pc, #484]	; (800e9a8 <_vfiprintf_r+0x248>)
 800e7c2:	429d      	cmp	r5, r3
 800e7c4:	bf08      	it	eq
 800e7c6:	68f5      	ldreq	r5, [r6, #12]
 800e7c8:	e7da      	b.n	800e780 <_vfiprintf_r+0x20>
 800e7ca:	89ab      	ldrh	r3, [r5, #12]
 800e7cc:	0598      	lsls	r0, r3, #22
 800e7ce:	d4ed      	bmi.n	800e7ac <_vfiprintf_r+0x4c>
 800e7d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7d2:	f000 fe00 	bl	800f3d6 <__retarget_lock_release_recursive>
 800e7d6:	e7e9      	b.n	800e7ac <_vfiprintf_r+0x4c>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	9309      	str	r3, [sp, #36]	; 0x24
 800e7dc:	2320      	movs	r3, #32
 800e7de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7e6:	2330      	movs	r3, #48	; 0x30
 800e7e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e9ac <_vfiprintf_r+0x24c>
 800e7ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7f0:	f04f 0901 	mov.w	r9, #1
 800e7f4:	4623      	mov	r3, r4
 800e7f6:	469a      	mov	sl, r3
 800e7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7fc:	b10a      	cbz	r2, 800e802 <_vfiprintf_r+0xa2>
 800e7fe:	2a25      	cmp	r2, #37	; 0x25
 800e800:	d1f9      	bne.n	800e7f6 <_vfiprintf_r+0x96>
 800e802:	ebba 0b04 	subs.w	fp, sl, r4
 800e806:	d00b      	beq.n	800e820 <_vfiprintf_r+0xc0>
 800e808:	465b      	mov	r3, fp
 800e80a:	4622      	mov	r2, r4
 800e80c:	4629      	mov	r1, r5
 800e80e:	4630      	mov	r0, r6
 800e810:	f7ff ff93 	bl	800e73a <__sfputs_r>
 800e814:	3001      	adds	r0, #1
 800e816:	f000 80aa 	beq.w	800e96e <_vfiprintf_r+0x20e>
 800e81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e81c:	445a      	add	r2, fp
 800e81e:	9209      	str	r2, [sp, #36]	; 0x24
 800e820:	f89a 3000 	ldrb.w	r3, [sl]
 800e824:	2b00      	cmp	r3, #0
 800e826:	f000 80a2 	beq.w	800e96e <_vfiprintf_r+0x20e>
 800e82a:	2300      	movs	r3, #0
 800e82c:	f04f 32ff 	mov.w	r2, #4294967295
 800e830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e834:	f10a 0a01 	add.w	sl, sl, #1
 800e838:	9304      	str	r3, [sp, #16]
 800e83a:	9307      	str	r3, [sp, #28]
 800e83c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e840:	931a      	str	r3, [sp, #104]	; 0x68
 800e842:	4654      	mov	r4, sl
 800e844:	2205      	movs	r2, #5
 800e846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e84a:	4858      	ldr	r0, [pc, #352]	; (800e9ac <_vfiprintf_r+0x24c>)
 800e84c:	f7f1 fcc8 	bl	80001e0 <memchr>
 800e850:	9a04      	ldr	r2, [sp, #16]
 800e852:	b9d8      	cbnz	r0, 800e88c <_vfiprintf_r+0x12c>
 800e854:	06d1      	lsls	r1, r2, #27
 800e856:	bf44      	itt	mi
 800e858:	2320      	movmi	r3, #32
 800e85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e85e:	0713      	lsls	r3, r2, #28
 800e860:	bf44      	itt	mi
 800e862:	232b      	movmi	r3, #43	; 0x2b
 800e864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e868:	f89a 3000 	ldrb.w	r3, [sl]
 800e86c:	2b2a      	cmp	r3, #42	; 0x2a
 800e86e:	d015      	beq.n	800e89c <_vfiprintf_r+0x13c>
 800e870:	9a07      	ldr	r2, [sp, #28]
 800e872:	4654      	mov	r4, sl
 800e874:	2000      	movs	r0, #0
 800e876:	f04f 0c0a 	mov.w	ip, #10
 800e87a:	4621      	mov	r1, r4
 800e87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e880:	3b30      	subs	r3, #48	; 0x30
 800e882:	2b09      	cmp	r3, #9
 800e884:	d94e      	bls.n	800e924 <_vfiprintf_r+0x1c4>
 800e886:	b1b0      	cbz	r0, 800e8b6 <_vfiprintf_r+0x156>
 800e888:	9207      	str	r2, [sp, #28]
 800e88a:	e014      	b.n	800e8b6 <_vfiprintf_r+0x156>
 800e88c:	eba0 0308 	sub.w	r3, r0, r8
 800e890:	fa09 f303 	lsl.w	r3, r9, r3
 800e894:	4313      	orrs	r3, r2
 800e896:	9304      	str	r3, [sp, #16]
 800e898:	46a2      	mov	sl, r4
 800e89a:	e7d2      	b.n	800e842 <_vfiprintf_r+0xe2>
 800e89c:	9b03      	ldr	r3, [sp, #12]
 800e89e:	1d19      	adds	r1, r3, #4
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	9103      	str	r1, [sp, #12]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	bfbb      	ittet	lt
 800e8a8:	425b      	neglt	r3, r3
 800e8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e8ae:	9307      	strge	r3, [sp, #28]
 800e8b0:	9307      	strlt	r3, [sp, #28]
 800e8b2:	bfb8      	it	lt
 800e8b4:	9204      	strlt	r2, [sp, #16]
 800e8b6:	7823      	ldrb	r3, [r4, #0]
 800e8b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e8ba:	d10c      	bne.n	800e8d6 <_vfiprintf_r+0x176>
 800e8bc:	7863      	ldrb	r3, [r4, #1]
 800e8be:	2b2a      	cmp	r3, #42	; 0x2a
 800e8c0:	d135      	bne.n	800e92e <_vfiprintf_r+0x1ce>
 800e8c2:	9b03      	ldr	r3, [sp, #12]
 800e8c4:	1d1a      	adds	r2, r3, #4
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	9203      	str	r2, [sp, #12]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	bfb8      	it	lt
 800e8ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8d2:	3402      	adds	r4, #2
 800e8d4:	9305      	str	r3, [sp, #20]
 800e8d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e9bc <_vfiprintf_r+0x25c>
 800e8da:	7821      	ldrb	r1, [r4, #0]
 800e8dc:	2203      	movs	r2, #3
 800e8de:	4650      	mov	r0, sl
 800e8e0:	f7f1 fc7e 	bl	80001e0 <memchr>
 800e8e4:	b140      	cbz	r0, 800e8f8 <_vfiprintf_r+0x198>
 800e8e6:	2340      	movs	r3, #64	; 0x40
 800e8e8:	eba0 000a 	sub.w	r0, r0, sl
 800e8ec:	fa03 f000 	lsl.w	r0, r3, r0
 800e8f0:	9b04      	ldr	r3, [sp, #16]
 800e8f2:	4303      	orrs	r3, r0
 800e8f4:	3401      	adds	r4, #1
 800e8f6:	9304      	str	r3, [sp, #16]
 800e8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8fc:	482c      	ldr	r0, [pc, #176]	; (800e9b0 <_vfiprintf_r+0x250>)
 800e8fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e902:	2206      	movs	r2, #6
 800e904:	f7f1 fc6c 	bl	80001e0 <memchr>
 800e908:	2800      	cmp	r0, #0
 800e90a:	d03f      	beq.n	800e98c <_vfiprintf_r+0x22c>
 800e90c:	4b29      	ldr	r3, [pc, #164]	; (800e9b4 <_vfiprintf_r+0x254>)
 800e90e:	bb1b      	cbnz	r3, 800e958 <_vfiprintf_r+0x1f8>
 800e910:	9b03      	ldr	r3, [sp, #12]
 800e912:	3307      	adds	r3, #7
 800e914:	f023 0307 	bic.w	r3, r3, #7
 800e918:	3308      	adds	r3, #8
 800e91a:	9303      	str	r3, [sp, #12]
 800e91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e91e:	443b      	add	r3, r7
 800e920:	9309      	str	r3, [sp, #36]	; 0x24
 800e922:	e767      	b.n	800e7f4 <_vfiprintf_r+0x94>
 800e924:	fb0c 3202 	mla	r2, ip, r2, r3
 800e928:	460c      	mov	r4, r1
 800e92a:	2001      	movs	r0, #1
 800e92c:	e7a5      	b.n	800e87a <_vfiprintf_r+0x11a>
 800e92e:	2300      	movs	r3, #0
 800e930:	3401      	adds	r4, #1
 800e932:	9305      	str	r3, [sp, #20]
 800e934:	4619      	mov	r1, r3
 800e936:	f04f 0c0a 	mov.w	ip, #10
 800e93a:	4620      	mov	r0, r4
 800e93c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e940:	3a30      	subs	r2, #48	; 0x30
 800e942:	2a09      	cmp	r2, #9
 800e944:	d903      	bls.n	800e94e <_vfiprintf_r+0x1ee>
 800e946:	2b00      	cmp	r3, #0
 800e948:	d0c5      	beq.n	800e8d6 <_vfiprintf_r+0x176>
 800e94a:	9105      	str	r1, [sp, #20]
 800e94c:	e7c3      	b.n	800e8d6 <_vfiprintf_r+0x176>
 800e94e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e952:	4604      	mov	r4, r0
 800e954:	2301      	movs	r3, #1
 800e956:	e7f0      	b.n	800e93a <_vfiprintf_r+0x1da>
 800e958:	ab03      	add	r3, sp, #12
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	462a      	mov	r2, r5
 800e95e:	4b16      	ldr	r3, [pc, #88]	; (800e9b8 <_vfiprintf_r+0x258>)
 800e960:	a904      	add	r1, sp, #16
 800e962:	4630      	mov	r0, r6
 800e964:	f7fb fdfc 	bl	800a560 <_printf_float>
 800e968:	4607      	mov	r7, r0
 800e96a:	1c78      	adds	r0, r7, #1
 800e96c:	d1d6      	bne.n	800e91c <_vfiprintf_r+0x1bc>
 800e96e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e970:	07d9      	lsls	r1, r3, #31
 800e972:	d405      	bmi.n	800e980 <_vfiprintf_r+0x220>
 800e974:	89ab      	ldrh	r3, [r5, #12]
 800e976:	059a      	lsls	r2, r3, #22
 800e978:	d402      	bmi.n	800e980 <_vfiprintf_r+0x220>
 800e97a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e97c:	f000 fd2b 	bl	800f3d6 <__retarget_lock_release_recursive>
 800e980:	89ab      	ldrh	r3, [r5, #12]
 800e982:	065b      	lsls	r3, r3, #25
 800e984:	f53f af12 	bmi.w	800e7ac <_vfiprintf_r+0x4c>
 800e988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e98a:	e711      	b.n	800e7b0 <_vfiprintf_r+0x50>
 800e98c:	ab03      	add	r3, sp, #12
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	462a      	mov	r2, r5
 800e992:	4b09      	ldr	r3, [pc, #36]	; (800e9b8 <_vfiprintf_r+0x258>)
 800e994:	a904      	add	r1, sp, #16
 800e996:	4630      	mov	r0, r6
 800e998:	f7fc f886 	bl	800aaa8 <_printf_i>
 800e99c:	e7e4      	b.n	800e968 <_vfiprintf_r+0x208>
 800e99e:	bf00      	nop
 800e9a0:	0800fea0 	.word	0x0800fea0
 800e9a4:	0800fec0 	.word	0x0800fec0
 800e9a8:	0800fe80 	.word	0x0800fe80
 800e9ac:	0800fe54 	.word	0x0800fe54
 800e9b0:	0800fe5e 	.word	0x0800fe5e
 800e9b4:	0800a561 	.word	0x0800a561
 800e9b8:	0800e73b 	.word	0x0800e73b
 800e9bc:	0800fe5a 	.word	0x0800fe5a

0800e9c0 <_scanf_chars>:
 800e9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9c4:	4615      	mov	r5, r2
 800e9c6:	688a      	ldr	r2, [r1, #8]
 800e9c8:	4680      	mov	r8, r0
 800e9ca:	460c      	mov	r4, r1
 800e9cc:	b932      	cbnz	r2, 800e9dc <_scanf_chars+0x1c>
 800e9ce:	698a      	ldr	r2, [r1, #24]
 800e9d0:	2a00      	cmp	r2, #0
 800e9d2:	bf0c      	ite	eq
 800e9d4:	2201      	moveq	r2, #1
 800e9d6:	f04f 32ff 	movne.w	r2, #4294967295
 800e9da:	608a      	str	r2, [r1, #8]
 800e9dc:	6822      	ldr	r2, [r4, #0]
 800e9de:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800ea6c <_scanf_chars+0xac>
 800e9e2:	06d1      	lsls	r1, r2, #27
 800e9e4:	bf5f      	itttt	pl
 800e9e6:	681a      	ldrpl	r2, [r3, #0]
 800e9e8:	1d11      	addpl	r1, r2, #4
 800e9ea:	6019      	strpl	r1, [r3, #0]
 800e9ec:	6816      	ldrpl	r6, [r2, #0]
 800e9ee:	2700      	movs	r7, #0
 800e9f0:	69a0      	ldr	r0, [r4, #24]
 800e9f2:	b188      	cbz	r0, 800ea18 <_scanf_chars+0x58>
 800e9f4:	2801      	cmp	r0, #1
 800e9f6:	d107      	bne.n	800ea08 <_scanf_chars+0x48>
 800e9f8:	682b      	ldr	r3, [r5, #0]
 800e9fa:	781a      	ldrb	r2, [r3, #0]
 800e9fc:	6963      	ldr	r3, [r4, #20]
 800e9fe:	5c9b      	ldrb	r3, [r3, r2]
 800ea00:	b953      	cbnz	r3, 800ea18 <_scanf_chars+0x58>
 800ea02:	bb27      	cbnz	r7, 800ea4e <_scanf_chars+0x8e>
 800ea04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea08:	2802      	cmp	r0, #2
 800ea0a:	d120      	bne.n	800ea4e <_scanf_chars+0x8e>
 800ea0c:	682b      	ldr	r3, [r5, #0]
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ea14:	071b      	lsls	r3, r3, #28
 800ea16:	d41a      	bmi.n	800ea4e <_scanf_chars+0x8e>
 800ea18:	6823      	ldr	r3, [r4, #0]
 800ea1a:	06da      	lsls	r2, r3, #27
 800ea1c:	bf5e      	ittt	pl
 800ea1e:	682b      	ldrpl	r3, [r5, #0]
 800ea20:	781b      	ldrbpl	r3, [r3, #0]
 800ea22:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ea26:	682a      	ldr	r2, [r5, #0]
 800ea28:	686b      	ldr	r3, [r5, #4]
 800ea2a:	3201      	adds	r2, #1
 800ea2c:	602a      	str	r2, [r5, #0]
 800ea2e:	68a2      	ldr	r2, [r4, #8]
 800ea30:	3b01      	subs	r3, #1
 800ea32:	3a01      	subs	r2, #1
 800ea34:	606b      	str	r3, [r5, #4]
 800ea36:	3701      	adds	r7, #1
 800ea38:	60a2      	str	r2, [r4, #8]
 800ea3a:	b142      	cbz	r2, 800ea4e <_scanf_chars+0x8e>
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	dcd7      	bgt.n	800e9f0 <_scanf_chars+0x30>
 800ea40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea44:	4629      	mov	r1, r5
 800ea46:	4640      	mov	r0, r8
 800ea48:	4798      	blx	r3
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d0d0      	beq.n	800e9f0 <_scanf_chars+0x30>
 800ea4e:	6823      	ldr	r3, [r4, #0]
 800ea50:	f013 0310 	ands.w	r3, r3, #16
 800ea54:	d105      	bne.n	800ea62 <_scanf_chars+0xa2>
 800ea56:	68e2      	ldr	r2, [r4, #12]
 800ea58:	3201      	adds	r2, #1
 800ea5a:	60e2      	str	r2, [r4, #12]
 800ea5c:	69a2      	ldr	r2, [r4, #24]
 800ea5e:	b102      	cbz	r2, 800ea62 <_scanf_chars+0xa2>
 800ea60:	7033      	strb	r3, [r6, #0]
 800ea62:	6923      	ldr	r3, [r4, #16]
 800ea64:	441f      	add	r7, r3
 800ea66:	6127      	str	r7, [r4, #16]
 800ea68:	2000      	movs	r0, #0
 800ea6a:	e7cb      	b.n	800ea04 <_scanf_chars+0x44>
 800ea6c:	0800fafd 	.word	0x0800fafd

0800ea70 <_scanf_i>:
 800ea70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea74:	4698      	mov	r8, r3
 800ea76:	4b74      	ldr	r3, [pc, #464]	; (800ec48 <_scanf_i+0x1d8>)
 800ea78:	460c      	mov	r4, r1
 800ea7a:	4682      	mov	sl, r0
 800ea7c:	4616      	mov	r6, r2
 800ea7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea82:	b087      	sub	sp, #28
 800ea84:	ab03      	add	r3, sp, #12
 800ea86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ea8a:	4b70      	ldr	r3, [pc, #448]	; (800ec4c <_scanf_i+0x1dc>)
 800ea8c:	69a1      	ldr	r1, [r4, #24]
 800ea8e:	4a70      	ldr	r2, [pc, #448]	; (800ec50 <_scanf_i+0x1e0>)
 800ea90:	2903      	cmp	r1, #3
 800ea92:	bf18      	it	ne
 800ea94:	461a      	movne	r2, r3
 800ea96:	68a3      	ldr	r3, [r4, #8]
 800ea98:	9201      	str	r2, [sp, #4]
 800ea9a:	1e5a      	subs	r2, r3, #1
 800ea9c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800eaa0:	bf88      	it	hi
 800eaa2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800eaa6:	4627      	mov	r7, r4
 800eaa8:	bf82      	ittt	hi
 800eaaa:	eb03 0905 	addhi.w	r9, r3, r5
 800eaae:	f240 135d 	movwhi	r3, #349	; 0x15d
 800eab2:	60a3      	strhi	r3, [r4, #8]
 800eab4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800eab8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800eabc:	bf98      	it	ls
 800eabe:	f04f 0900 	movls.w	r9, #0
 800eac2:	6023      	str	r3, [r4, #0]
 800eac4:	463d      	mov	r5, r7
 800eac6:	f04f 0b00 	mov.w	fp, #0
 800eaca:	6831      	ldr	r1, [r6, #0]
 800eacc:	ab03      	add	r3, sp, #12
 800eace:	7809      	ldrb	r1, [r1, #0]
 800ead0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ead4:	2202      	movs	r2, #2
 800ead6:	f7f1 fb83 	bl	80001e0 <memchr>
 800eada:	b328      	cbz	r0, 800eb28 <_scanf_i+0xb8>
 800eadc:	f1bb 0f01 	cmp.w	fp, #1
 800eae0:	d159      	bne.n	800eb96 <_scanf_i+0x126>
 800eae2:	6862      	ldr	r2, [r4, #4]
 800eae4:	b92a      	cbnz	r2, 800eaf2 <_scanf_i+0x82>
 800eae6:	6822      	ldr	r2, [r4, #0]
 800eae8:	2308      	movs	r3, #8
 800eaea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eaee:	6063      	str	r3, [r4, #4]
 800eaf0:	6022      	str	r2, [r4, #0]
 800eaf2:	6822      	ldr	r2, [r4, #0]
 800eaf4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800eaf8:	6022      	str	r2, [r4, #0]
 800eafa:	68a2      	ldr	r2, [r4, #8]
 800eafc:	1e51      	subs	r1, r2, #1
 800eafe:	60a1      	str	r1, [r4, #8]
 800eb00:	b192      	cbz	r2, 800eb28 <_scanf_i+0xb8>
 800eb02:	6832      	ldr	r2, [r6, #0]
 800eb04:	1c51      	adds	r1, r2, #1
 800eb06:	6031      	str	r1, [r6, #0]
 800eb08:	7812      	ldrb	r2, [r2, #0]
 800eb0a:	f805 2b01 	strb.w	r2, [r5], #1
 800eb0e:	6872      	ldr	r2, [r6, #4]
 800eb10:	3a01      	subs	r2, #1
 800eb12:	2a00      	cmp	r2, #0
 800eb14:	6072      	str	r2, [r6, #4]
 800eb16:	dc07      	bgt.n	800eb28 <_scanf_i+0xb8>
 800eb18:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800eb1c:	4631      	mov	r1, r6
 800eb1e:	4650      	mov	r0, sl
 800eb20:	4790      	blx	r2
 800eb22:	2800      	cmp	r0, #0
 800eb24:	f040 8085 	bne.w	800ec32 <_scanf_i+0x1c2>
 800eb28:	f10b 0b01 	add.w	fp, fp, #1
 800eb2c:	f1bb 0f03 	cmp.w	fp, #3
 800eb30:	d1cb      	bne.n	800eaca <_scanf_i+0x5a>
 800eb32:	6863      	ldr	r3, [r4, #4]
 800eb34:	b90b      	cbnz	r3, 800eb3a <_scanf_i+0xca>
 800eb36:	230a      	movs	r3, #10
 800eb38:	6063      	str	r3, [r4, #4]
 800eb3a:	6863      	ldr	r3, [r4, #4]
 800eb3c:	4945      	ldr	r1, [pc, #276]	; (800ec54 <_scanf_i+0x1e4>)
 800eb3e:	6960      	ldr	r0, [r4, #20]
 800eb40:	1ac9      	subs	r1, r1, r3
 800eb42:	f000 f8b5 	bl	800ecb0 <__sccl>
 800eb46:	f04f 0b00 	mov.w	fp, #0
 800eb4a:	68a3      	ldr	r3, [r4, #8]
 800eb4c:	6822      	ldr	r2, [r4, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d03d      	beq.n	800ebce <_scanf_i+0x15e>
 800eb52:	6831      	ldr	r1, [r6, #0]
 800eb54:	6960      	ldr	r0, [r4, #20]
 800eb56:	f891 c000 	ldrb.w	ip, [r1]
 800eb5a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d035      	beq.n	800ebce <_scanf_i+0x15e>
 800eb62:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800eb66:	d124      	bne.n	800ebb2 <_scanf_i+0x142>
 800eb68:	0510      	lsls	r0, r2, #20
 800eb6a:	d522      	bpl.n	800ebb2 <_scanf_i+0x142>
 800eb6c:	f10b 0b01 	add.w	fp, fp, #1
 800eb70:	f1b9 0f00 	cmp.w	r9, #0
 800eb74:	d003      	beq.n	800eb7e <_scanf_i+0x10e>
 800eb76:	3301      	adds	r3, #1
 800eb78:	f109 39ff 	add.w	r9, r9, #4294967295
 800eb7c:	60a3      	str	r3, [r4, #8]
 800eb7e:	6873      	ldr	r3, [r6, #4]
 800eb80:	3b01      	subs	r3, #1
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	6073      	str	r3, [r6, #4]
 800eb86:	dd1b      	ble.n	800ebc0 <_scanf_i+0x150>
 800eb88:	6833      	ldr	r3, [r6, #0]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	6033      	str	r3, [r6, #0]
 800eb8e:	68a3      	ldr	r3, [r4, #8]
 800eb90:	3b01      	subs	r3, #1
 800eb92:	60a3      	str	r3, [r4, #8]
 800eb94:	e7d9      	b.n	800eb4a <_scanf_i+0xda>
 800eb96:	f1bb 0f02 	cmp.w	fp, #2
 800eb9a:	d1ae      	bne.n	800eafa <_scanf_i+0x8a>
 800eb9c:	6822      	ldr	r2, [r4, #0]
 800eb9e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800eba2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800eba6:	d1bf      	bne.n	800eb28 <_scanf_i+0xb8>
 800eba8:	2310      	movs	r3, #16
 800ebaa:	6063      	str	r3, [r4, #4]
 800ebac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ebb0:	e7a2      	b.n	800eaf8 <_scanf_i+0x88>
 800ebb2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ebb6:	6022      	str	r2, [r4, #0]
 800ebb8:	780b      	ldrb	r3, [r1, #0]
 800ebba:	f805 3b01 	strb.w	r3, [r5], #1
 800ebbe:	e7de      	b.n	800eb7e <_scanf_i+0x10e>
 800ebc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ebc4:	4631      	mov	r1, r6
 800ebc6:	4650      	mov	r0, sl
 800ebc8:	4798      	blx	r3
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	d0df      	beq.n	800eb8e <_scanf_i+0x11e>
 800ebce:	6823      	ldr	r3, [r4, #0]
 800ebd0:	05d9      	lsls	r1, r3, #23
 800ebd2:	d50d      	bpl.n	800ebf0 <_scanf_i+0x180>
 800ebd4:	42bd      	cmp	r5, r7
 800ebd6:	d909      	bls.n	800ebec <_scanf_i+0x17c>
 800ebd8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ebdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ebe0:	4632      	mov	r2, r6
 800ebe2:	4650      	mov	r0, sl
 800ebe4:	4798      	blx	r3
 800ebe6:	f105 39ff 	add.w	r9, r5, #4294967295
 800ebea:	464d      	mov	r5, r9
 800ebec:	42bd      	cmp	r5, r7
 800ebee:	d028      	beq.n	800ec42 <_scanf_i+0x1d2>
 800ebf0:	6822      	ldr	r2, [r4, #0]
 800ebf2:	f012 0210 	ands.w	r2, r2, #16
 800ebf6:	d113      	bne.n	800ec20 <_scanf_i+0x1b0>
 800ebf8:	702a      	strb	r2, [r5, #0]
 800ebfa:	6863      	ldr	r3, [r4, #4]
 800ebfc:	9e01      	ldr	r6, [sp, #4]
 800ebfe:	4639      	mov	r1, r7
 800ec00:	4650      	mov	r0, sl
 800ec02:	47b0      	blx	r6
 800ec04:	f8d8 3000 	ldr.w	r3, [r8]
 800ec08:	6821      	ldr	r1, [r4, #0]
 800ec0a:	1d1a      	adds	r2, r3, #4
 800ec0c:	f8c8 2000 	str.w	r2, [r8]
 800ec10:	f011 0f20 	tst.w	r1, #32
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	d00f      	beq.n	800ec38 <_scanf_i+0x1c8>
 800ec18:	6018      	str	r0, [r3, #0]
 800ec1a:	68e3      	ldr	r3, [r4, #12]
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	60e3      	str	r3, [r4, #12]
 800ec20:	1bed      	subs	r5, r5, r7
 800ec22:	44ab      	add	fp, r5
 800ec24:	6925      	ldr	r5, [r4, #16]
 800ec26:	445d      	add	r5, fp
 800ec28:	6125      	str	r5, [r4, #16]
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	b007      	add	sp, #28
 800ec2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec32:	f04f 0b00 	mov.w	fp, #0
 800ec36:	e7ca      	b.n	800ebce <_scanf_i+0x15e>
 800ec38:	07ca      	lsls	r2, r1, #31
 800ec3a:	bf4c      	ite	mi
 800ec3c:	8018      	strhmi	r0, [r3, #0]
 800ec3e:	6018      	strpl	r0, [r3, #0]
 800ec40:	e7eb      	b.n	800ec1a <_scanf_i+0x1aa>
 800ec42:	2001      	movs	r0, #1
 800ec44:	e7f2      	b.n	800ec2c <_scanf_i+0x1bc>
 800ec46:	bf00      	nop
 800ec48:	0800f910 	.word	0x0800f910
 800ec4c:	0800ee41 	.word	0x0800ee41
 800ec50:	0800c061 	.word	0x0800c061
 800ec54:	0800fe7e 	.word	0x0800fe7e

0800ec58 <_read_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	4d07      	ldr	r5, [pc, #28]	; (800ec78 <_read_r+0x20>)
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	4608      	mov	r0, r1
 800ec60:	4611      	mov	r1, r2
 800ec62:	2200      	movs	r2, #0
 800ec64:	602a      	str	r2, [r5, #0]
 800ec66:	461a      	mov	r2, r3
 800ec68:	f7f3 fa7c 	bl	8002164 <_read>
 800ec6c:	1c43      	adds	r3, r0, #1
 800ec6e:	d102      	bne.n	800ec76 <_read_r+0x1e>
 800ec70:	682b      	ldr	r3, [r5, #0]
 800ec72:	b103      	cbz	r3, 800ec76 <_read_r+0x1e>
 800ec74:	6023      	str	r3, [r4, #0]
 800ec76:	bd38      	pop	{r3, r4, r5, pc}
 800ec78:	20000b18 	.word	0x20000b18
 800ec7c:	00000000 	.word	0x00000000

0800ec80 <nan>:
 800ec80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ec88 <nan+0x8>
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	00000000 	.word	0x00000000
 800ec8c:	7ff80000 	.word	0x7ff80000

0800ec90 <_sbrk_r>:
 800ec90:	b538      	push	{r3, r4, r5, lr}
 800ec92:	4d06      	ldr	r5, [pc, #24]	; (800ecac <_sbrk_r+0x1c>)
 800ec94:	2300      	movs	r3, #0
 800ec96:	4604      	mov	r4, r0
 800ec98:	4608      	mov	r0, r1
 800ec9a:	602b      	str	r3, [r5, #0]
 800ec9c:	f7f3 fad0 	bl	8002240 <_sbrk>
 800eca0:	1c43      	adds	r3, r0, #1
 800eca2:	d102      	bne.n	800ecaa <_sbrk_r+0x1a>
 800eca4:	682b      	ldr	r3, [r5, #0]
 800eca6:	b103      	cbz	r3, 800ecaa <_sbrk_r+0x1a>
 800eca8:	6023      	str	r3, [r4, #0]
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	20000b18 	.word	0x20000b18

0800ecb0 <__sccl>:
 800ecb0:	b570      	push	{r4, r5, r6, lr}
 800ecb2:	780b      	ldrb	r3, [r1, #0]
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	2b5e      	cmp	r3, #94	; 0x5e
 800ecb8:	bf0b      	itete	eq
 800ecba:	784b      	ldrbeq	r3, [r1, #1]
 800ecbc:	1c48      	addne	r0, r1, #1
 800ecbe:	1c88      	addeq	r0, r1, #2
 800ecc0:	2200      	movne	r2, #0
 800ecc2:	bf08      	it	eq
 800ecc4:	2201      	moveq	r2, #1
 800ecc6:	1e61      	subs	r1, r4, #1
 800ecc8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800eccc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ecd0:	42a9      	cmp	r1, r5
 800ecd2:	d1fb      	bne.n	800eccc <__sccl+0x1c>
 800ecd4:	b90b      	cbnz	r3, 800ecda <__sccl+0x2a>
 800ecd6:	3801      	subs	r0, #1
 800ecd8:	bd70      	pop	{r4, r5, r6, pc}
 800ecda:	f082 0101 	eor.w	r1, r2, #1
 800ecde:	54e1      	strb	r1, [r4, r3]
 800ece0:	1c42      	adds	r2, r0, #1
 800ece2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800ece6:	2d2d      	cmp	r5, #45	; 0x2d
 800ece8:	f102 36ff 	add.w	r6, r2, #4294967295
 800ecec:	4610      	mov	r0, r2
 800ecee:	d006      	beq.n	800ecfe <__sccl+0x4e>
 800ecf0:	2d5d      	cmp	r5, #93	; 0x5d
 800ecf2:	d0f1      	beq.n	800ecd8 <__sccl+0x28>
 800ecf4:	b90d      	cbnz	r5, 800ecfa <__sccl+0x4a>
 800ecf6:	4630      	mov	r0, r6
 800ecf8:	e7ee      	b.n	800ecd8 <__sccl+0x28>
 800ecfa:	462b      	mov	r3, r5
 800ecfc:	e7ef      	b.n	800ecde <__sccl+0x2e>
 800ecfe:	7816      	ldrb	r6, [r2, #0]
 800ed00:	2e5d      	cmp	r6, #93	; 0x5d
 800ed02:	d0fa      	beq.n	800ecfa <__sccl+0x4a>
 800ed04:	42b3      	cmp	r3, r6
 800ed06:	dcf8      	bgt.n	800ecfa <__sccl+0x4a>
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3001      	adds	r0, #1
 800ed0c:	4286      	cmp	r6, r0
 800ed0e:	5421      	strb	r1, [r4, r0]
 800ed10:	dcfb      	bgt.n	800ed0a <__sccl+0x5a>
 800ed12:	43d8      	mvns	r0, r3
 800ed14:	4430      	add	r0, r6
 800ed16:	1c5d      	adds	r5, r3, #1
 800ed18:	42b3      	cmp	r3, r6
 800ed1a:	bfa8      	it	ge
 800ed1c:	2000      	movge	r0, #0
 800ed1e:	182b      	adds	r3, r5, r0
 800ed20:	3202      	adds	r2, #2
 800ed22:	e7de      	b.n	800ece2 <__sccl+0x32>

0800ed24 <strncmp>:
 800ed24:	b510      	push	{r4, lr}
 800ed26:	b16a      	cbz	r2, 800ed44 <strncmp+0x20>
 800ed28:	3901      	subs	r1, #1
 800ed2a:	1884      	adds	r4, r0, r2
 800ed2c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ed30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d103      	bne.n	800ed40 <strncmp+0x1c>
 800ed38:	42a0      	cmp	r0, r4
 800ed3a:	d001      	beq.n	800ed40 <strncmp+0x1c>
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1f5      	bne.n	800ed2c <strncmp+0x8>
 800ed40:	1a98      	subs	r0, r3, r2
 800ed42:	bd10      	pop	{r4, pc}
 800ed44:	4610      	mov	r0, r2
 800ed46:	e7fc      	b.n	800ed42 <strncmp+0x1e>

0800ed48 <_strtoul_l.isra.0>:
 800ed48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed4c:	4e3b      	ldr	r6, [pc, #236]	; (800ee3c <_strtoul_l.isra.0+0xf4>)
 800ed4e:	4686      	mov	lr, r0
 800ed50:	468c      	mov	ip, r1
 800ed52:	4660      	mov	r0, ip
 800ed54:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ed58:	5da5      	ldrb	r5, [r4, r6]
 800ed5a:	f015 0508 	ands.w	r5, r5, #8
 800ed5e:	d1f8      	bne.n	800ed52 <_strtoul_l.isra.0+0xa>
 800ed60:	2c2d      	cmp	r4, #45	; 0x2d
 800ed62:	d134      	bne.n	800edce <_strtoul_l.isra.0+0x86>
 800ed64:	f89c 4000 	ldrb.w	r4, [ip]
 800ed68:	f04f 0801 	mov.w	r8, #1
 800ed6c:	f100 0c02 	add.w	ip, r0, #2
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d05e      	beq.n	800ee32 <_strtoul_l.isra.0+0xea>
 800ed74:	2b10      	cmp	r3, #16
 800ed76:	d10c      	bne.n	800ed92 <_strtoul_l.isra.0+0x4a>
 800ed78:	2c30      	cmp	r4, #48	; 0x30
 800ed7a:	d10a      	bne.n	800ed92 <_strtoul_l.isra.0+0x4a>
 800ed7c:	f89c 0000 	ldrb.w	r0, [ip]
 800ed80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ed84:	2858      	cmp	r0, #88	; 0x58
 800ed86:	d14f      	bne.n	800ee28 <_strtoul_l.isra.0+0xe0>
 800ed88:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ed8c:	2310      	movs	r3, #16
 800ed8e:	f10c 0c02 	add.w	ip, ip, #2
 800ed92:	f04f 37ff 	mov.w	r7, #4294967295
 800ed96:	2500      	movs	r5, #0
 800ed98:	fbb7 f7f3 	udiv	r7, r7, r3
 800ed9c:	fb03 f907 	mul.w	r9, r3, r7
 800eda0:	ea6f 0909 	mvn.w	r9, r9
 800eda4:	4628      	mov	r0, r5
 800eda6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800edaa:	2e09      	cmp	r6, #9
 800edac:	d818      	bhi.n	800ede0 <_strtoul_l.isra.0+0x98>
 800edae:	4634      	mov	r4, r6
 800edb0:	42a3      	cmp	r3, r4
 800edb2:	dd24      	ble.n	800edfe <_strtoul_l.isra.0+0xb6>
 800edb4:	2d00      	cmp	r5, #0
 800edb6:	db1f      	blt.n	800edf8 <_strtoul_l.isra.0+0xb0>
 800edb8:	4287      	cmp	r7, r0
 800edba:	d31d      	bcc.n	800edf8 <_strtoul_l.isra.0+0xb0>
 800edbc:	d101      	bne.n	800edc2 <_strtoul_l.isra.0+0x7a>
 800edbe:	45a1      	cmp	r9, r4
 800edc0:	db1a      	blt.n	800edf8 <_strtoul_l.isra.0+0xb0>
 800edc2:	fb00 4003 	mla	r0, r0, r3, r4
 800edc6:	2501      	movs	r5, #1
 800edc8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800edcc:	e7eb      	b.n	800eda6 <_strtoul_l.isra.0+0x5e>
 800edce:	2c2b      	cmp	r4, #43	; 0x2b
 800edd0:	bf08      	it	eq
 800edd2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800edd6:	46a8      	mov	r8, r5
 800edd8:	bf08      	it	eq
 800edda:	f100 0c02 	addeq.w	ip, r0, #2
 800edde:	e7c7      	b.n	800ed70 <_strtoul_l.isra.0+0x28>
 800ede0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ede4:	2e19      	cmp	r6, #25
 800ede6:	d801      	bhi.n	800edec <_strtoul_l.isra.0+0xa4>
 800ede8:	3c37      	subs	r4, #55	; 0x37
 800edea:	e7e1      	b.n	800edb0 <_strtoul_l.isra.0+0x68>
 800edec:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800edf0:	2e19      	cmp	r6, #25
 800edf2:	d804      	bhi.n	800edfe <_strtoul_l.isra.0+0xb6>
 800edf4:	3c57      	subs	r4, #87	; 0x57
 800edf6:	e7db      	b.n	800edb0 <_strtoul_l.isra.0+0x68>
 800edf8:	f04f 35ff 	mov.w	r5, #4294967295
 800edfc:	e7e4      	b.n	800edc8 <_strtoul_l.isra.0+0x80>
 800edfe:	2d00      	cmp	r5, #0
 800ee00:	da07      	bge.n	800ee12 <_strtoul_l.isra.0+0xca>
 800ee02:	2322      	movs	r3, #34	; 0x22
 800ee04:	f8ce 3000 	str.w	r3, [lr]
 800ee08:	f04f 30ff 	mov.w	r0, #4294967295
 800ee0c:	b942      	cbnz	r2, 800ee20 <_strtoul_l.isra.0+0xd8>
 800ee0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee12:	f1b8 0f00 	cmp.w	r8, #0
 800ee16:	d000      	beq.n	800ee1a <_strtoul_l.isra.0+0xd2>
 800ee18:	4240      	negs	r0, r0
 800ee1a:	2a00      	cmp	r2, #0
 800ee1c:	d0f7      	beq.n	800ee0e <_strtoul_l.isra.0+0xc6>
 800ee1e:	b10d      	cbz	r5, 800ee24 <_strtoul_l.isra.0+0xdc>
 800ee20:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ee24:	6011      	str	r1, [r2, #0]
 800ee26:	e7f2      	b.n	800ee0e <_strtoul_l.isra.0+0xc6>
 800ee28:	2430      	movs	r4, #48	; 0x30
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d1b1      	bne.n	800ed92 <_strtoul_l.isra.0+0x4a>
 800ee2e:	2308      	movs	r3, #8
 800ee30:	e7af      	b.n	800ed92 <_strtoul_l.isra.0+0x4a>
 800ee32:	2c30      	cmp	r4, #48	; 0x30
 800ee34:	d0a2      	beq.n	800ed7c <_strtoul_l.isra.0+0x34>
 800ee36:	230a      	movs	r3, #10
 800ee38:	e7ab      	b.n	800ed92 <_strtoul_l.isra.0+0x4a>
 800ee3a:	bf00      	nop
 800ee3c:	0800fafd 	.word	0x0800fafd

0800ee40 <_strtoul_r>:
 800ee40:	f7ff bf82 	b.w	800ed48 <_strtoul_l.isra.0>

0800ee44 <__submore>:
 800ee44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee48:	460c      	mov	r4, r1
 800ee4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ee4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee50:	4299      	cmp	r1, r3
 800ee52:	d11d      	bne.n	800ee90 <__submore+0x4c>
 800ee54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ee58:	f7ff f8d0 	bl	800dffc <_malloc_r>
 800ee5c:	b918      	cbnz	r0, 800ee66 <__submore+0x22>
 800ee5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee6a:	63a3      	str	r3, [r4, #56]	; 0x38
 800ee6c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ee70:	6360      	str	r0, [r4, #52]	; 0x34
 800ee72:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ee76:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ee7a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ee7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ee82:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ee86:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ee8a:	6020      	str	r0, [r4, #0]
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	e7e8      	b.n	800ee62 <__submore+0x1e>
 800ee90:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ee92:	0077      	lsls	r7, r6, #1
 800ee94:	463a      	mov	r2, r7
 800ee96:	f000 fb29 	bl	800f4ec <_realloc_r>
 800ee9a:	4605      	mov	r5, r0
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d0de      	beq.n	800ee5e <__submore+0x1a>
 800eea0:	eb00 0806 	add.w	r8, r0, r6
 800eea4:	4601      	mov	r1, r0
 800eea6:	4632      	mov	r2, r6
 800eea8:	4640      	mov	r0, r8
 800eeaa:	f7fe fb7f 	bl	800d5ac <memcpy>
 800eeae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800eeb2:	f8c4 8000 	str.w	r8, [r4]
 800eeb6:	e7e9      	b.n	800ee8c <__submore+0x48>

0800eeb8 <__swbuf_r>:
 800eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeba:	460e      	mov	r6, r1
 800eebc:	4614      	mov	r4, r2
 800eebe:	4605      	mov	r5, r0
 800eec0:	b118      	cbz	r0, 800eeca <__swbuf_r+0x12>
 800eec2:	6983      	ldr	r3, [r0, #24]
 800eec4:	b90b      	cbnz	r3, 800eeca <__swbuf_r+0x12>
 800eec6:	f000 f9e7 	bl	800f298 <__sinit>
 800eeca:	4b21      	ldr	r3, [pc, #132]	; (800ef50 <__swbuf_r+0x98>)
 800eecc:	429c      	cmp	r4, r3
 800eece:	d12b      	bne.n	800ef28 <__swbuf_r+0x70>
 800eed0:	686c      	ldr	r4, [r5, #4]
 800eed2:	69a3      	ldr	r3, [r4, #24]
 800eed4:	60a3      	str	r3, [r4, #8]
 800eed6:	89a3      	ldrh	r3, [r4, #12]
 800eed8:	071a      	lsls	r2, r3, #28
 800eeda:	d52f      	bpl.n	800ef3c <__swbuf_r+0x84>
 800eedc:	6923      	ldr	r3, [r4, #16]
 800eede:	b36b      	cbz	r3, 800ef3c <__swbuf_r+0x84>
 800eee0:	6923      	ldr	r3, [r4, #16]
 800eee2:	6820      	ldr	r0, [r4, #0]
 800eee4:	1ac0      	subs	r0, r0, r3
 800eee6:	6963      	ldr	r3, [r4, #20]
 800eee8:	b2f6      	uxtb	r6, r6
 800eeea:	4283      	cmp	r3, r0
 800eeec:	4637      	mov	r7, r6
 800eeee:	dc04      	bgt.n	800eefa <__swbuf_r+0x42>
 800eef0:	4621      	mov	r1, r4
 800eef2:	4628      	mov	r0, r5
 800eef4:	f000 f93c 	bl	800f170 <_fflush_r>
 800eef8:	bb30      	cbnz	r0, 800ef48 <__swbuf_r+0x90>
 800eefa:	68a3      	ldr	r3, [r4, #8]
 800eefc:	3b01      	subs	r3, #1
 800eefe:	60a3      	str	r3, [r4, #8]
 800ef00:	6823      	ldr	r3, [r4, #0]
 800ef02:	1c5a      	adds	r2, r3, #1
 800ef04:	6022      	str	r2, [r4, #0]
 800ef06:	701e      	strb	r6, [r3, #0]
 800ef08:	6963      	ldr	r3, [r4, #20]
 800ef0a:	3001      	adds	r0, #1
 800ef0c:	4283      	cmp	r3, r0
 800ef0e:	d004      	beq.n	800ef1a <__swbuf_r+0x62>
 800ef10:	89a3      	ldrh	r3, [r4, #12]
 800ef12:	07db      	lsls	r3, r3, #31
 800ef14:	d506      	bpl.n	800ef24 <__swbuf_r+0x6c>
 800ef16:	2e0a      	cmp	r6, #10
 800ef18:	d104      	bne.n	800ef24 <__swbuf_r+0x6c>
 800ef1a:	4621      	mov	r1, r4
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	f000 f927 	bl	800f170 <_fflush_r>
 800ef22:	b988      	cbnz	r0, 800ef48 <__swbuf_r+0x90>
 800ef24:	4638      	mov	r0, r7
 800ef26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef28:	4b0a      	ldr	r3, [pc, #40]	; (800ef54 <__swbuf_r+0x9c>)
 800ef2a:	429c      	cmp	r4, r3
 800ef2c:	d101      	bne.n	800ef32 <__swbuf_r+0x7a>
 800ef2e:	68ac      	ldr	r4, [r5, #8]
 800ef30:	e7cf      	b.n	800eed2 <__swbuf_r+0x1a>
 800ef32:	4b09      	ldr	r3, [pc, #36]	; (800ef58 <__swbuf_r+0xa0>)
 800ef34:	429c      	cmp	r4, r3
 800ef36:	bf08      	it	eq
 800ef38:	68ec      	ldreq	r4, [r5, #12]
 800ef3a:	e7ca      	b.n	800eed2 <__swbuf_r+0x1a>
 800ef3c:	4621      	mov	r1, r4
 800ef3e:	4628      	mov	r0, r5
 800ef40:	f000 f81a 	bl	800ef78 <__swsetup_r>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d0cb      	beq.n	800eee0 <__swbuf_r+0x28>
 800ef48:	f04f 37ff 	mov.w	r7, #4294967295
 800ef4c:	e7ea      	b.n	800ef24 <__swbuf_r+0x6c>
 800ef4e:	bf00      	nop
 800ef50:	0800fea0 	.word	0x0800fea0
 800ef54:	0800fec0 	.word	0x0800fec0
 800ef58:	0800fe80 	.word	0x0800fe80

0800ef5c <__ascii_wctomb>:
 800ef5c:	b149      	cbz	r1, 800ef72 <__ascii_wctomb+0x16>
 800ef5e:	2aff      	cmp	r2, #255	; 0xff
 800ef60:	bf85      	ittet	hi
 800ef62:	238a      	movhi	r3, #138	; 0x8a
 800ef64:	6003      	strhi	r3, [r0, #0]
 800ef66:	700a      	strbls	r2, [r1, #0]
 800ef68:	f04f 30ff 	movhi.w	r0, #4294967295
 800ef6c:	bf98      	it	ls
 800ef6e:	2001      	movls	r0, #1
 800ef70:	4770      	bx	lr
 800ef72:	4608      	mov	r0, r1
 800ef74:	4770      	bx	lr
	...

0800ef78 <__swsetup_r>:
 800ef78:	4b32      	ldr	r3, [pc, #200]	; (800f044 <__swsetup_r+0xcc>)
 800ef7a:	b570      	push	{r4, r5, r6, lr}
 800ef7c:	681d      	ldr	r5, [r3, #0]
 800ef7e:	4606      	mov	r6, r0
 800ef80:	460c      	mov	r4, r1
 800ef82:	b125      	cbz	r5, 800ef8e <__swsetup_r+0x16>
 800ef84:	69ab      	ldr	r3, [r5, #24]
 800ef86:	b913      	cbnz	r3, 800ef8e <__swsetup_r+0x16>
 800ef88:	4628      	mov	r0, r5
 800ef8a:	f000 f985 	bl	800f298 <__sinit>
 800ef8e:	4b2e      	ldr	r3, [pc, #184]	; (800f048 <__swsetup_r+0xd0>)
 800ef90:	429c      	cmp	r4, r3
 800ef92:	d10f      	bne.n	800efb4 <__swsetup_r+0x3c>
 800ef94:	686c      	ldr	r4, [r5, #4]
 800ef96:	89a3      	ldrh	r3, [r4, #12]
 800ef98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef9c:	0719      	lsls	r1, r3, #28
 800ef9e:	d42c      	bmi.n	800effa <__swsetup_r+0x82>
 800efa0:	06dd      	lsls	r5, r3, #27
 800efa2:	d411      	bmi.n	800efc8 <__swsetup_r+0x50>
 800efa4:	2309      	movs	r3, #9
 800efa6:	6033      	str	r3, [r6, #0]
 800efa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800efac:	81a3      	strh	r3, [r4, #12]
 800efae:	f04f 30ff 	mov.w	r0, #4294967295
 800efb2:	e03e      	b.n	800f032 <__swsetup_r+0xba>
 800efb4:	4b25      	ldr	r3, [pc, #148]	; (800f04c <__swsetup_r+0xd4>)
 800efb6:	429c      	cmp	r4, r3
 800efb8:	d101      	bne.n	800efbe <__swsetup_r+0x46>
 800efba:	68ac      	ldr	r4, [r5, #8]
 800efbc:	e7eb      	b.n	800ef96 <__swsetup_r+0x1e>
 800efbe:	4b24      	ldr	r3, [pc, #144]	; (800f050 <__swsetup_r+0xd8>)
 800efc0:	429c      	cmp	r4, r3
 800efc2:	bf08      	it	eq
 800efc4:	68ec      	ldreq	r4, [r5, #12]
 800efc6:	e7e6      	b.n	800ef96 <__swsetup_r+0x1e>
 800efc8:	0758      	lsls	r0, r3, #29
 800efca:	d512      	bpl.n	800eff2 <__swsetup_r+0x7a>
 800efcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efce:	b141      	cbz	r1, 800efe2 <__swsetup_r+0x6a>
 800efd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efd4:	4299      	cmp	r1, r3
 800efd6:	d002      	beq.n	800efde <__swsetup_r+0x66>
 800efd8:	4630      	mov	r0, r6
 800efda:	f7fe ffbf 	bl	800df5c <_free_r>
 800efde:	2300      	movs	r3, #0
 800efe0:	6363      	str	r3, [r4, #52]	; 0x34
 800efe2:	89a3      	ldrh	r3, [r4, #12]
 800efe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800efe8:	81a3      	strh	r3, [r4, #12]
 800efea:	2300      	movs	r3, #0
 800efec:	6063      	str	r3, [r4, #4]
 800efee:	6923      	ldr	r3, [r4, #16]
 800eff0:	6023      	str	r3, [r4, #0]
 800eff2:	89a3      	ldrh	r3, [r4, #12]
 800eff4:	f043 0308 	orr.w	r3, r3, #8
 800eff8:	81a3      	strh	r3, [r4, #12]
 800effa:	6923      	ldr	r3, [r4, #16]
 800effc:	b94b      	cbnz	r3, 800f012 <__swsetup_r+0x9a>
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f008:	d003      	beq.n	800f012 <__swsetup_r+0x9a>
 800f00a:	4621      	mov	r1, r4
 800f00c:	4630      	mov	r0, r6
 800f00e:	f000 fa07 	bl	800f420 <__smakebuf_r>
 800f012:	89a0      	ldrh	r0, [r4, #12]
 800f014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f018:	f010 0301 	ands.w	r3, r0, #1
 800f01c:	d00a      	beq.n	800f034 <__swsetup_r+0xbc>
 800f01e:	2300      	movs	r3, #0
 800f020:	60a3      	str	r3, [r4, #8]
 800f022:	6963      	ldr	r3, [r4, #20]
 800f024:	425b      	negs	r3, r3
 800f026:	61a3      	str	r3, [r4, #24]
 800f028:	6923      	ldr	r3, [r4, #16]
 800f02a:	b943      	cbnz	r3, 800f03e <__swsetup_r+0xc6>
 800f02c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f030:	d1ba      	bne.n	800efa8 <__swsetup_r+0x30>
 800f032:	bd70      	pop	{r4, r5, r6, pc}
 800f034:	0781      	lsls	r1, r0, #30
 800f036:	bf58      	it	pl
 800f038:	6963      	ldrpl	r3, [r4, #20]
 800f03a:	60a3      	str	r3, [r4, #8]
 800f03c:	e7f4      	b.n	800f028 <__swsetup_r+0xb0>
 800f03e:	2000      	movs	r0, #0
 800f040:	e7f7      	b.n	800f032 <__swsetup_r+0xba>
 800f042:	bf00      	nop
 800f044:	20000078 	.word	0x20000078
 800f048:	0800fea0 	.word	0x0800fea0
 800f04c:	0800fec0 	.word	0x0800fec0
 800f050:	0800fe80 	.word	0x0800fe80

0800f054 <abort>:
 800f054:	b508      	push	{r3, lr}
 800f056:	2006      	movs	r0, #6
 800f058:	f000 fa96 	bl	800f588 <raise>
 800f05c:	2001      	movs	r0, #1
 800f05e:	f7f3 f877 	bl	8002150 <_exit>
	...

0800f064 <__sflush_r>:
 800f064:	898a      	ldrh	r2, [r1, #12]
 800f066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f06a:	4605      	mov	r5, r0
 800f06c:	0710      	lsls	r0, r2, #28
 800f06e:	460c      	mov	r4, r1
 800f070:	d458      	bmi.n	800f124 <__sflush_r+0xc0>
 800f072:	684b      	ldr	r3, [r1, #4]
 800f074:	2b00      	cmp	r3, #0
 800f076:	dc05      	bgt.n	800f084 <__sflush_r+0x20>
 800f078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	dc02      	bgt.n	800f084 <__sflush_r+0x20>
 800f07e:	2000      	movs	r0, #0
 800f080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f086:	2e00      	cmp	r6, #0
 800f088:	d0f9      	beq.n	800f07e <__sflush_r+0x1a>
 800f08a:	2300      	movs	r3, #0
 800f08c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f090:	682f      	ldr	r7, [r5, #0]
 800f092:	602b      	str	r3, [r5, #0]
 800f094:	d032      	beq.n	800f0fc <__sflush_r+0x98>
 800f096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f098:	89a3      	ldrh	r3, [r4, #12]
 800f09a:	075a      	lsls	r2, r3, #29
 800f09c:	d505      	bpl.n	800f0aa <__sflush_r+0x46>
 800f09e:	6863      	ldr	r3, [r4, #4]
 800f0a0:	1ac0      	subs	r0, r0, r3
 800f0a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0a4:	b10b      	cbz	r3, 800f0aa <__sflush_r+0x46>
 800f0a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0a8:	1ac0      	subs	r0, r0, r3
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0b0:	6a21      	ldr	r1, [r4, #32]
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	47b0      	blx	r6
 800f0b6:	1c43      	adds	r3, r0, #1
 800f0b8:	89a3      	ldrh	r3, [r4, #12]
 800f0ba:	d106      	bne.n	800f0ca <__sflush_r+0x66>
 800f0bc:	6829      	ldr	r1, [r5, #0]
 800f0be:	291d      	cmp	r1, #29
 800f0c0:	d82c      	bhi.n	800f11c <__sflush_r+0xb8>
 800f0c2:	4a2a      	ldr	r2, [pc, #168]	; (800f16c <__sflush_r+0x108>)
 800f0c4:	40ca      	lsrs	r2, r1
 800f0c6:	07d6      	lsls	r6, r2, #31
 800f0c8:	d528      	bpl.n	800f11c <__sflush_r+0xb8>
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	6062      	str	r2, [r4, #4]
 800f0ce:	04d9      	lsls	r1, r3, #19
 800f0d0:	6922      	ldr	r2, [r4, #16]
 800f0d2:	6022      	str	r2, [r4, #0]
 800f0d4:	d504      	bpl.n	800f0e0 <__sflush_r+0x7c>
 800f0d6:	1c42      	adds	r2, r0, #1
 800f0d8:	d101      	bne.n	800f0de <__sflush_r+0x7a>
 800f0da:	682b      	ldr	r3, [r5, #0]
 800f0dc:	b903      	cbnz	r3, 800f0e0 <__sflush_r+0x7c>
 800f0de:	6560      	str	r0, [r4, #84]	; 0x54
 800f0e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0e2:	602f      	str	r7, [r5, #0]
 800f0e4:	2900      	cmp	r1, #0
 800f0e6:	d0ca      	beq.n	800f07e <__sflush_r+0x1a>
 800f0e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0ec:	4299      	cmp	r1, r3
 800f0ee:	d002      	beq.n	800f0f6 <__sflush_r+0x92>
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	f7fe ff33 	bl	800df5c <_free_r>
 800f0f6:	2000      	movs	r0, #0
 800f0f8:	6360      	str	r0, [r4, #52]	; 0x34
 800f0fa:	e7c1      	b.n	800f080 <__sflush_r+0x1c>
 800f0fc:	6a21      	ldr	r1, [r4, #32]
 800f0fe:	2301      	movs	r3, #1
 800f100:	4628      	mov	r0, r5
 800f102:	47b0      	blx	r6
 800f104:	1c41      	adds	r1, r0, #1
 800f106:	d1c7      	bne.n	800f098 <__sflush_r+0x34>
 800f108:	682b      	ldr	r3, [r5, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d0c4      	beq.n	800f098 <__sflush_r+0x34>
 800f10e:	2b1d      	cmp	r3, #29
 800f110:	d001      	beq.n	800f116 <__sflush_r+0xb2>
 800f112:	2b16      	cmp	r3, #22
 800f114:	d101      	bne.n	800f11a <__sflush_r+0xb6>
 800f116:	602f      	str	r7, [r5, #0]
 800f118:	e7b1      	b.n	800f07e <__sflush_r+0x1a>
 800f11a:	89a3      	ldrh	r3, [r4, #12]
 800f11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f120:	81a3      	strh	r3, [r4, #12]
 800f122:	e7ad      	b.n	800f080 <__sflush_r+0x1c>
 800f124:	690f      	ldr	r7, [r1, #16]
 800f126:	2f00      	cmp	r7, #0
 800f128:	d0a9      	beq.n	800f07e <__sflush_r+0x1a>
 800f12a:	0793      	lsls	r3, r2, #30
 800f12c:	680e      	ldr	r6, [r1, #0]
 800f12e:	bf08      	it	eq
 800f130:	694b      	ldreq	r3, [r1, #20]
 800f132:	600f      	str	r7, [r1, #0]
 800f134:	bf18      	it	ne
 800f136:	2300      	movne	r3, #0
 800f138:	eba6 0807 	sub.w	r8, r6, r7
 800f13c:	608b      	str	r3, [r1, #8]
 800f13e:	f1b8 0f00 	cmp.w	r8, #0
 800f142:	dd9c      	ble.n	800f07e <__sflush_r+0x1a>
 800f144:	6a21      	ldr	r1, [r4, #32]
 800f146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f148:	4643      	mov	r3, r8
 800f14a:	463a      	mov	r2, r7
 800f14c:	4628      	mov	r0, r5
 800f14e:	47b0      	blx	r6
 800f150:	2800      	cmp	r0, #0
 800f152:	dc06      	bgt.n	800f162 <__sflush_r+0xfe>
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f15a:	81a3      	strh	r3, [r4, #12]
 800f15c:	f04f 30ff 	mov.w	r0, #4294967295
 800f160:	e78e      	b.n	800f080 <__sflush_r+0x1c>
 800f162:	4407      	add	r7, r0
 800f164:	eba8 0800 	sub.w	r8, r8, r0
 800f168:	e7e9      	b.n	800f13e <__sflush_r+0xda>
 800f16a:	bf00      	nop
 800f16c:	20400001 	.word	0x20400001

0800f170 <_fflush_r>:
 800f170:	b538      	push	{r3, r4, r5, lr}
 800f172:	690b      	ldr	r3, [r1, #16]
 800f174:	4605      	mov	r5, r0
 800f176:	460c      	mov	r4, r1
 800f178:	b913      	cbnz	r3, 800f180 <_fflush_r+0x10>
 800f17a:	2500      	movs	r5, #0
 800f17c:	4628      	mov	r0, r5
 800f17e:	bd38      	pop	{r3, r4, r5, pc}
 800f180:	b118      	cbz	r0, 800f18a <_fflush_r+0x1a>
 800f182:	6983      	ldr	r3, [r0, #24]
 800f184:	b90b      	cbnz	r3, 800f18a <_fflush_r+0x1a>
 800f186:	f000 f887 	bl	800f298 <__sinit>
 800f18a:	4b14      	ldr	r3, [pc, #80]	; (800f1dc <_fflush_r+0x6c>)
 800f18c:	429c      	cmp	r4, r3
 800f18e:	d11b      	bne.n	800f1c8 <_fflush_r+0x58>
 800f190:	686c      	ldr	r4, [r5, #4]
 800f192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d0ef      	beq.n	800f17a <_fflush_r+0xa>
 800f19a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f19c:	07d0      	lsls	r0, r2, #31
 800f19e:	d404      	bmi.n	800f1aa <_fflush_r+0x3a>
 800f1a0:	0599      	lsls	r1, r3, #22
 800f1a2:	d402      	bmi.n	800f1aa <_fflush_r+0x3a>
 800f1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1a6:	f000 f915 	bl	800f3d4 <__retarget_lock_acquire_recursive>
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	f7ff ff59 	bl	800f064 <__sflush_r>
 800f1b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1b4:	07da      	lsls	r2, r3, #31
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	d4e0      	bmi.n	800f17c <_fflush_r+0xc>
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	059b      	lsls	r3, r3, #22
 800f1be:	d4dd      	bmi.n	800f17c <_fflush_r+0xc>
 800f1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1c2:	f000 f908 	bl	800f3d6 <__retarget_lock_release_recursive>
 800f1c6:	e7d9      	b.n	800f17c <_fflush_r+0xc>
 800f1c8:	4b05      	ldr	r3, [pc, #20]	; (800f1e0 <_fflush_r+0x70>)
 800f1ca:	429c      	cmp	r4, r3
 800f1cc:	d101      	bne.n	800f1d2 <_fflush_r+0x62>
 800f1ce:	68ac      	ldr	r4, [r5, #8]
 800f1d0:	e7df      	b.n	800f192 <_fflush_r+0x22>
 800f1d2:	4b04      	ldr	r3, [pc, #16]	; (800f1e4 <_fflush_r+0x74>)
 800f1d4:	429c      	cmp	r4, r3
 800f1d6:	bf08      	it	eq
 800f1d8:	68ec      	ldreq	r4, [r5, #12]
 800f1da:	e7da      	b.n	800f192 <_fflush_r+0x22>
 800f1dc:	0800fea0 	.word	0x0800fea0
 800f1e0:	0800fec0 	.word	0x0800fec0
 800f1e4:	0800fe80 	.word	0x0800fe80

0800f1e8 <std>:
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	b510      	push	{r4, lr}
 800f1ec:	4604      	mov	r4, r0
 800f1ee:	e9c0 3300 	strd	r3, r3, [r0]
 800f1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f1f6:	6083      	str	r3, [r0, #8]
 800f1f8:	8181      	strh	r1, [r0, #12]
 800f1fa:	6643      	str	r3, [r0, #100]	; 0x64
 800f1fc:	81c2      	strh	r2, [r0, #14]
 800f1fe:	6183      	str	r3, [r0, #24]
 800f200:	4619      	mov	r1, r3
 800f202:	2208      	movs	r2, #8
 800f204:	305c      	adds	r0, #92	; 0x5c
 800f206:	f7fb f903 	bl	800a410 <memset>
 800f20a:	4b05      	ldr	r3, [pc, #20]	; (800f220 <std+0x38>)
 800f20c:	6263      	str	r3, [r4, #36]	; 0x24
 800f20e:	4b05      	ldr	r3, [pc, #20]	; (800f224 <std+0x3c>)
 800f210:	62a3      	str	r3, [r4, #40]	; 0x28
 800f212:	4b05      	ldr	r3, [pc, #20]	; (800f228 <std+0x40>)
 800f214:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f216:	4b05      	ldr	r3, [pc, #20]	; (800f22c <std+0x44>)
 800f218:	6224      	str	r4, [r4, #32]
 800f21a:	6323      	str	r3, [r4, #48]	; 0x30
 800f21c:	bd10      	pop	{r4, pc}
 800f21e:	bf00      	nop
 800f220:	0800b1b9 	.word	0x0800b1b9
 800f224:	0800b1df 	.word	0x0800b1df
 800f228:	0800b217 	.word	0x0800b217
 800f22c:	0800b23b 	.word	0x0800b23b

0800f230 <_cleanup_r>:
 800f230:	4901      	ldr	r1, [pc, #4]	; (800f238 <_cleanup_r+0x8>)
 800f232:	f000 b8af 	b.w	800f394 <_fwalk_reent>
 800f236:	bf00      	nop
 800f238:	0800f171 	.word	0x0800f171

0800f23c <__sfmoreglue>:
 800f23c:	b570      	push	{r4, r5, r6, lr}
 800f23e:	1e4a      	subs	r2, r1, #1
 800f240:	2568      	movs	r5, #104	; 0x68
 800f242:	4355      	muls	r5, r2
 800f244:	460e      	mov	r6, r1
 800f246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f24a:	f7fe fed7 	bl	800dffc <_malloc_r>
 800f24e:	4604      	mov	r4, r0
 800f250:	b140      	cbz	r0, 800f264 <__sfmoreglue+0x28>
 800f252:	2100      	movs	r1, #0
 800f254:	e9c0 1600 	strd	r1, r6, [r0]
 800f258:	300c      	adds	r0, #12
 800f25a:	60a0      	str	r0, [r4, #8]
 800f25c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f260:	f7fb f8d6 	bl	800a410 <memset>
 800f264:	4620      	mov	r0, r4
 800f266:	bd70      	pop	{r4, r5, r6, pc}

0800f268 <__sfp_lock_acquire>:
 800f268:	4801      	ldr	r0, [pc, #4]	; (800f270 <__sfp_lock_acquire+0x8>)
 800f26a:	f000 b8b3 	b.w	800f3d4 <__retarget_lock_acquire_recursive>
 800f26e:	bf00      	nop
 800f270:	20000b24 	.word	0x20000b24

0800f274 <__sfp_lock_release>:
 800f274:	4801      	ldr	r0, [pc, #4]	; (800f27c <__sfp_lock_release+0x8>)
 800f276:	f000 b8ae 	b.w	800f3d6 <__retarget_lock_release_recursive>
 800f27a:	bf00      	nop
 800f27c:	20000b24 	.word	0x20000b24

0800f280 <__sinit_lock_acquire>:
 800f280:	4801      	ldr	r0, [pc, #4]	; (800f288 <__sinit_lock_acquire+0x8>)
 800f282:	f000 b8a7 	b.w	800f3d4 <__retarget_lock_acquire_recursive>
 800f286:	bf00      	nop
 800f288:	20000b1f 	.word	0x20000b1f

0800f28c <__sinit_lock_release>:
 800f28c:	4801      	ldr	r0, [pc, #4]	; (800f294 <__sinit_lock_release+0x8>)
 800f28e:	f000 b8a2 	b.w	800f3d6 <__retarget_lock_release_recursive>
 800f292:	bf00      	nop
 800f294:	20000b1f 	.word	0x20000b1f

0800f298 <__sinit>:
 800f298:	b510      	push	{r4, lr}
 800f29a:	4604      	mov	r4, r0
 800f29c:	f7ff fff0 	bl	800f280 <__sinit_lock_acquire>
 800f2a0:	69a3      	ldr	r3, [r4, #24]
 800f2a2:	b11b      	cbz	r3, 800f2ac <__sinit+0x14>
 800f2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2a8:	f7ff bff0 	b.w	800f28c <__sinit_lock_release>
 800f2ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f2b0:	6523      	str	r3, [r4, #80]	; 0x50
 800f2b2:	4b13      	ldr	r3, [pc, #76]	; (800f300 <__sinit+0x68>)
 800f2b4:	4a13      	ldr	r2, [pc, #76]	; (800f304 <__sinit+0x6c>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f2ba:	42a3      	cmp	r3, r4
 800f2bc:	bf04      	itt	eq
 800f2be:	2301      	moveq	r3, #1
 800f2c0:	61a3      	streq	r3, [r4, #24]
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f000 f820 	bl	800f308 <__sfp>
 800f2c8:	6060      	str	r0, [r4, #4]
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	f000 f81c 	bl	800f308 <__sfp>
 800f2d0:	60a0      	str	r0, [r4, #8]
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f000 f818 	bl	800f308 <__sfp>
 800f2d8:	2200      	movs	r2, #0
 800f2da:	60e0      	str	r0, [r4, #12]
 800f2dc:	2104      	movs	r1, #4
 800f2de:	6860      	ldr	r0, [r4, #4]
 800f2e0:	f7ff ff82 	bl	800f1e8 <std>
 800f2e4:	68a0      	ldr	r0, [r4, #8]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	2109      	movs	r1, #9
 800f2ea:	f7ff ff7d 	bl	800f1e8 <std>
 800f2ee:	68e0      	ldr	r0, [r4, #12]
 800f2f0:	2202      	movs	r2, #2
 800f2f2:	2112      	movs	r1, #18
 800f2f4:	f7ff ff78 	bl	800f1e8 <std>
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	61a3      	str	r3, [r4, #24]
 800f2fc:	e7d2      	b.n	800f2a4 <__sinit+0xc>
 800f2fe:	bf00      	nop
 800f300:	0800f9bc 	.word	0x0800f9bc
 800f304:	0800f231 	.word	0x0800f231

0800f308 <__sfp>:
 800f308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f30a:	4607      	mov	r7, r0
 800f30c:	f7ff ffac 	bl	800f268 <__sfp_lock_acquire>
 800f310:	4b1e      	ldr	r3, [pc, #120]	; (800f38c <__sfp+0x84>)
 800f312:	681e      	ldr	r6, [r3, #0]
 800f314:	69b3      	ldr	r3, [r6, #24]
 800f316:	b913      	cbnz	r3, 800f31e <__sfp+0x16>
 800f318:	4630      	mov	r0, r6
 800f31a:	f7ff ffbd 	bl	800f298 <__sinit>
 800f31e:	3648      	adds	r6, #72	; 0x48
 800f320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f324:	3b01      	subs	r3, #1
 800f326:	d503      	bpl.n	800f330 <__sfp+0x28>
 800f328:	6833      	ldr	r3, [r6, #0]
 800f32a:	b30b      	cbz	r3, 800f370 <__sfp+0x68>
 800f32c:	6836      	ldr	r6, [r6, #0]
 800f32e:	e7f7      	b.n	800f320 <__sfp+0x18>
 800f330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f334:	b9d5      	cbnz	r5, 800f36c <__sfp+0x64>
 800f336:	4b16      	ldr	r3, [pc, #88]	; (800f390 <__sfp+0x88>)
 800f338:	60e3      	str	r3, [r4, #12]
 800f33a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f33e:	6665      	str	r5, [r4, #100]	; 0x64
 800f340:	f000 f847 	bl	800f3d2 <__retarget_lock_init_recursive>
 800f344:	f7ff ff96 	bl	800f274 <__sfp_lock_release>
 800f348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f34c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f350:	6025      	str	r5, [r4, #0]
 800f352:	61a5      	str	r5, [r4, #24]
 800f354:	2208      	movs	r2, #8
 800f356:	4629      	mov	r1, r5
 800f358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f35c:	f7fb f858 	bl	800a410 <memset>
 800f360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f368:	4620      	mov	r0, r4
 800f36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f36c:	3468      	adds	r4, #104	; 0x68
 800f36e:	e7d9      	b.n	800f324 <__sfp+0x1c>
 800f370:	2104      	movs	r1, #4
 800f372:	4638      	mov	r0, r7
 800f374:	f7ff ff62 	bl	800f23c <__sfmoreglue>
 800f378:	4604      	mov	r4, r0
 800f37a:	6030      	str	r0, [r6, #0]
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d1d5      	bne.n	800f32c <__sfp+0x24>
 800f380:	f7ff ff78 	bl	800f274 <__sfp_lock_release>
 800f384:	230c      	movs	r3, #12
 800f386:	603b      	str	r3, [r7, #0]
 800f388:	e7ee      	b.n	800f368 <__sfp+0x60>
 800f38a:	bf00      	nop
 800f38c:	0800f9bc 	.word	0x0800f9bc
 800f390:	ffff0001 	.word	0xffff0001

0800f394 <_fwalk_reent>:
 800f394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f398:	4606      	mov	r6, r0
 800f39a:	4688      	mov	r8, r1
 800f39c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f3a0:	2700      	movs	r7, #0
 800f3a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3a6:	f1b9 0901 	subs.w	r9, r9, #1
 800f3aa:	d505      	bpl.n	800f3b8 <_fwalk_reent+0x24>
 800f3ac:	6824      	ldr	r4, [r4, #0]
 800f3ae:	2c00      	cmp	r4, #0
 800f3b0:	d1f7      	bne.n	800f3a2 <_fwalk_reent+0xe>
 800f3b2:	4638      	mov	r0, r7
 800f3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3b8:	89ab      	ldrh	r3, [r5, #12]
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d907      	bls.n	800f3ce <_fwalk_reent+0x3a>
 800f3be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	d003      	beq.n	800f3ce <_fwalk_reent+0x3a>
 800f3c6:	4629      	mov	r1, r5
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	47c0      	blx	r8
 800f3cc:	4307      	orrs	r7, r0
 800f3ce:	3568      	adds	r5, #104	; 0x68
 800f3d0:	e7e9      	b.n	800f3a6 <_fwalk_reent+0x12>

0800f3d2 <__retarget_lock_init_recursive>:
 800f3d2:	4770      	bx	lr

0800f3d4 <__retarget_lock_acquire_recursive>:
 800f3d4:	4770      	bx	lr

0800f3d6 <__retarget_lock_release_recursive>:
 800f3d6:	4770      	bx	lr

0800f3d8 <__swhatbuf_r>:
 800f3d8:	b570      	push	{r4, r5, r6, lr}
 800f3da:	460e      	mov	r6, r1
 800f3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3e0:	2900      	cmp	r1, #0
 800f3e2:	b096      	sub	sp, #88	; 0x58
 800f3e4:	4614      	mov	r4, r2
 800f3e6:	461d      	mov	r5, r3
 800f3e8:	da07      	bge.n	800f3fa <__swhatbuf_r+0x22>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	602b      	str	r3, [r5, #0]
 800f3ee:	89b3      	ldrh	r3, [r6, #12]
 800f3f0:	061a      	lsls	r2, r3, #24
 800f3f2:	d410      	bmi.n	800f416 <__swhatbuf_r+0x3e>
 800f3f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3f8:	e00e      	b.n	800f418 <__swhatbuf_r+0x40>
 800f3fa:	466a      	mov	r2, sp
 800f3fc:	f000 f8e0 	bl	800f5c0 <_fstat_r>
 800f400:	2800      	cmp	r0, #0
 800f402:	dbf2      	blt.n	800f3ea <__swhatbuf_r+0x12>
 800f404:	9a01      	ldr	r2, [sp, #4]
 800f406:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f40a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f40e:	425a      	negs	r2, r3
 800f410:	415a      	adcs	r2, r3
 800f412:	602a      	str	r2, [r5, #0]
 800f414:	e7ee      	b.n	800f3f4 <__swhatbuf_r+0x1c>
 800f416:	2340      	movs	r3, #64	; 0x40
 800f418:	2000      	movs	r0, #0
 800f41a:	6023      	str	r3, [r4, #0]
 800f41c:	b016      	add	sp, #88	; 0x58
 800f41e:	bd70      	pop	{r4, r5, r6, pc}

0800f420 <__smakebuf_r>:
 800f420:	898b      	ldrh	r3, [r1, #12]
 800f422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f424:	079d      	lsls	r5, r3, #30
 800f426:	4606      	mov	r6, r0
 800f428:	460c      	mov	r4, r1
 800f42a:	d507      	bpl.n	800f43c <__smakebuf_r+0x1c>
 800f42c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	6123      	str	r3, [r4, #16]
 800f434:	2301      	movs	r3, #1
 800f436:	6163      	str	r3, [r4, #20]
 800f438:	b002      	add	sp, #8
 800f43a:	bd70      	pop	{r4, r5, r6, pc}
 800f43c:	ab01      	add	r3, sp, #4
 800f43e:	466a      	mov	r2, sp
 800f440:	f7ff ffca 	bl	800f3d8 <__swhatbuf_r>
 800f444:	9900      	ldr	r1, [sp, #0]
 800f446:	4605      	mov	r5, r0
 800f448:	4630      	mov	r0, r6
 800f44a:	f7fe fdd7 	bl	800dffc <_malloc_r>
 800f44e:	b948      	cbnz	r0, 800f464 <__smakebuf_r+0x44>
 800f450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f454:	059a      	lsls	r2, r3, #22
 800f456:	d4ef      	bmi.n	800f438 <__smakebuf_r+0x18>
 800f458:	f023 0303 	bic.w	r3, r3, #3
 800f45c:	f043 0302 	orr.w	r3, r3, #2
 800f460:	81a3      	strh	r3, [r4, #12]
 800f462:	e7e3      	b.n	800f42c <__smakebuf_r+0xc>
 800f464:	4b0d      	ldr	r3, [pc, #52]	; (800f49c <__smakebuf_r+0x7c>)
 800f466:	62b3      	str	r3, [r6, #40]	; 0x28
 800f468:	89a3      	ldrh	r3, [r4, #12]
 800f46a:	6020      	str	r0, [r4, #0]
 800f46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f470:	81a3      	strh	r3, [r4, #12]
 800f472:	9b00      	ldr	r3, [sp, #0]
 800f474:	6163      	str	r3, [r4, #20]
 800f476:	9b01      	ldr	r3, [sp, #4]
 800f478:	6120      	str	r0, [r4, #16]
 800f47a:	b15b      	cbz	r3, 800f494 <__smakebuf_r+0x74>
 800f47c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f480:	4630      	mov	r0, r6
 800f482:	f000 f8af 	bl	800f5e4 <_isatty_r>
 800f486:	b128      	cbz	r0, 800f494 <__smakebuf_r+0x74>
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	f023 0303 	bic.w	r3, r3, #3
 800f48e:	f043 0301 	orr.w	r3, r3, #1
 800f492:	81a3      	strh	r3, [r4, #12]
 800f494:	89a0      	ldrh	r0, [r4, #12]
 800f496:	4305      	orrs	r5, r0
 800f498:	81a5      	strh	r5, [r4, #12]
 800f49a:	e7cd      	b.n	800f438 <__smakebuf_r+0x18>
 800f49c:	0800f231 	.word	0x0800f231

0800f4a0 <memmove>:
 800f4a0:	4288      	cmp	r0, r1
 800f4a2:	b510      	push	{r4, lr}
 800f4a4:	eb01 0402 	add.w	r4, r1, r2
 800f4a8:	d902      	bls.n	800f4b0 <memmove+0x10>
 800f4aa:	4284      	cmp	r4, r0
 800f4ac:	4623      	mov	r3, r4
 800f4ae:	d807      	bhi.n	800f4c0 <memmove+0x20>
 800f4b0:	1e43      	subs	r3, r0, #1
 800f4b2:	42a1      	cmp	r1, r4
 800f4b4:	d008      	beq.n	800f4c8 <memmove+0x28>
 800f4b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4be:	e7f8      	b.n	800f4b2 <memmove+0x12>
 800f4c0:	4402      	add	r2, r0
 800f4c2:	4601      	mov	r1, r0
 800f4c4:	428a      	cmp	r2, r1
 800f4c6:	d100      	bne.n	800f4ca <memmove+0x2a>
 800f4c8:	bd10      	pop	{r4, pc}
 800f4ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4d2:	e7f7      	b.n	800f4c4 <memmove+0x24>

0800f4d4 <__malloc_lock>:
 800f4d4:	4801      	ldr	r0, [pc, #4]	; (800f4dc <__malloc_lock+0x8>)
 800f4d6:	f7ff bf7d 	b.w	800f3d4 <__retarget_lock_acquire_recursive>
 800f4da:	bf00      	nop
 800f4dc:	20000b20 	.word	0x20000b20

0800f4e0 <__malloc_unlock>:
 800f4e0:	4801      	ldr	r0, [pc, #4]	; (800f4e8 <__malloc_unlock+0x8>)
 800f4e2:	f7ff bf78 	b.w	800f3d6 <__retarget_lock_release_recursive>
 800f4e6:	bf00      	nop
 800f4e8:	20000b20 	.word	0x20000b20

0800f4ec <_realloc_r>:
 800f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ee:	4607      	mov	r7, r0
 800f4f0:	4614      	mov	r4, r2
 800f4f2:	460e      	mov	r6, r1
 800f4f4:	b921      	cbnz	r1, 800f500 <_realloc_r+0x14>
 800f4f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f4fa:	4611      	mov	r1, r2
 800f4fc:	f7fe bd7e 	b.w	800dffc <_malloc_r>
 800f500:	b922      	cbnz	r2, 800f50c <_realloc_r+0x20>
 800f502:	f7fe fd2b 	bl	800df5c <_free_r>
 800f506:	4625      	mov	r5, r4
 800f508:	4628      	mov	r0, r5
 800f50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f50c:	f000 f87a 	bl	800f604 <_malloc_usable_size_r>
 800f510:	42a0      	cmp	r0, r4
 800f512:	d20f      	bcs.n	800f534 <_realloc_r+0x48>
 800f514:	4621      	mov	r1, r4
 800f516:	4638      	mov	r0, r7
 800f518:	f7fe fd70 	bl	800dffc <_malloc_r>
 800f51c:	4605      	mov	r5, r0
 800f51e:	2800      	cmp	r0, #0
 800f520:	d0f2      	beq.n	800f508 <_realloc_r+0x1c>
 800f522:	4631      	mov	r1, r6
 800f524:	4622      	mov	r2, r4
 800f526:	f7fe f841 	bl	800d5ac <memcpy>
 800f52a:	4631      	mov	r1, r6
 800f52c:	4638      	mov	r0, r7
 800f52e:	f7fe fd15 	bl	800df5c <_free_r>
 800f532:	e7e9      	b.n	800f508 <_realloc_r+0x1c>
 800f534:	4635      	mov	r5, r6
 800f536:	e7e7      	b.n	800f508 <_realloc_r+0x1c>

0800f538 <_raise_r>:
 800f538:	291f      	cmp	r1, #31
 800f53a:	b538      	push	{r3, r4, r5, lr}
 800f53c:	4604      	mov	r4, r0
 800f53e:	460d      	mov	r5, r1
 800f540:	d904      	bls.n	800f54c <_raise_r+0x14>
 800f542:	2316      	movs	r3, #22
 800f544:	6003      	str	r3, [r0, #0]
 800f546:	f04f 30ff 	mov.w	r0, #4294967295
 800f54a:	bd38      	pop	{r3, r4, r5, pc}
 800f54c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f54e:	b112      	cbz	r2, 800f556 <_raise_r+0x1e>
 800f550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f554:	b94b      	cbnz	r3, 800f56a <_raise_r+0x32>
 800f556:	4620      	mov	r0, r4
 800f558:	f000 f830 	bl	800f5bc <_getpid_r>
 800f55c:	462a      	mov	r2, r5
 800f55e:	4601      	mov	r1, r0
 800f560:	4620      	mov	r0, r4
 800f562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f566:	f000 b817 	b.w	800f598 <_kill_r>
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d00a      	beq.n	800f584 <_raise_r+0x4c>
 800f56e:	1c59      	adds	r1, r3, #1
 800f570:	d103      	bne.n	800f57a <_raise_r+0x42>
 800f572:	2316      	movs	r3, #22
 800f574:	6003      	str	r3, [r0, #0]
 800f576:	2001      	movs	r0, #1
 800f578:	e7e7      	b.n	800f54a <_raise_r+0x12>
 800f57a:	2400      	movs	r4, #0
 800f57c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f580:	4628      	mov	r0, r5
 800f582:	4798      	blx	r3
 800f584:	2000      	movs	r0, #0
 800f586:	e7e0      	b.n	800f54a <_raise_r+0x12>

0800f588 <raise>:
 800f588:	4b02      	ldr	r3, [pc, #8]	; (800f594 <raise+0xc>)
 800f58a:	4601      	mov	r1, r0
 800f58c:	6818      	ldr	r0, [r3, #0]
 800f58e:	f7ff bfd3 	b.w	800f538 <_raise_r>
 800f592:	bf00      	nop
 800f594:	20000078 	.word	0x20000078

0800f598 <_kill_r>:
 800f598:	b538      	push	{r3, r4, r5, lr}
 800f59a:	4d07      	ldr	r5, [pc, #28]	; (800f5b8 <_kill_r+0x20>)
 800f59c:	2300      	movs	r3, #0
 800f59e:	4604      	mov	r4, r0
 800f5a0:	4608      	mov	r0, r1
 800f5a2:	4611      	mov	r1, r2
 800f5a4:	602b      	str	r3, [r5, #0]
 800f5a6:	f7f2 fdc3 	bl	8002130 <_kill>
 800f5aa:	1c43      	adds	r3, r0, #1
 800f5ac:	d102      	bne.n	800f5b4 <_kill_r+0x1c>
 800f5ae:	682b      	ldr	r3, [r5, #0]
 800f5b0:	b103      	cbz	r3, 800f5b4 <_kill_r+0x1c>
 800f5b2:	6023      	str	r3, [r4, #0]
 800f5b4:	bd38      	pop	{r3, r4, r5, pc}
 800f5b6:	bf00      	nop
 800f5b8:	20000b18 	.word	0x20000b18

0800f5bc <_getpid_r>:
 800f5bc:	f7f2 bdb0 	b.w	8002120 <_getpid>

0800f5c0 <_fstat_r>:
 800f5c0:	b538      	push	{r3, r4, r5, lr}
 800f5c2:	4d07      	ldr	r5, [pc, #28]	; (800f5e0 <_fstat_r+0x20>)
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	4604      	mov	r4, r0
 800f5c8:	4608      	mov	r0, r1
 800f5ca:	4611      	mov	r1, r2
 800f5cc:	602b      	str	r3, [r5, #0]
 800f5ce:	f7f2 fe0e 	bl	80021ee <_fstat>
 800f5d2:	1c43      	adds	r3, r0, #1
 800f5d4:	d102      	bne.n	800f5dc <_fstat_r+0x1c>
 800f5d6:	682b      	ldr	r3, [r5, #0]
 800f5d8:	b103      	cbz	r3, 800f5dc <_fstat_r+0x1c>
 800f5da:	6023      	str	r3, [r4, #0]
 800f5dc:	bd38      	pop	{r3, r4, r5, pc}
 800f5de:	bf00      	nop
 800f5e0:	20000b18 	.word	0x20000b18

0800f5e4 <_isatty_r>:
 800f5e4:	b538      	push	{r3, r4, r5, lr}
 800f5e6:	4d06      	ldr	r5, [pc, #24]	; (800f600 <_isatty_r+0x1c>)
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	4608      	mov	r0, r1
 800f5ee:	602b      	str	r3, [r5, #0]
 800f5f0:	f7f2 fe0d 	bl	800220e <_isatty>
 800f5f4:	1c43      	adds	r3, r0, #1
 800f5f6:	d102      	bne.n	800f5fe <_isatty_r+0x1a>
 800f5f8:	682b      	ldr	r3, [r5, #0]
 800f5fa:	b103      	cbz	r3, 800f5fe <_isatty_r+0x1a>
 800f5fc:	6023      	str	r3, [r4, #0]
 800f5fe:	bd38      	pop	{r3, r4, r5, pc}
 800f600:	20000b18 	.word	0x20000b18

0800f604 <_malloc_usable_size_r>:
 800f604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f608:	1f18      	subs	r0, r3, #4
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	bfbc      	itt	lt
 800f60e:	580b      	ldrlt	r3, [r1, r0]
 800f610:	18c0      	addlt	r0, r0, r3
 800f612:	4770      	bx	lr

0800f614 <_init>:
 800f614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f616:	bf00      	nop
 800f618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f61a:	bc08      	pop	{r3}
 800f61c:	469e      	mov	lr, r3
 800f61e:	4770      	bx	lr

0800f620 <_fini>:
 800f620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f622:	bf00      	nop
 800f624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f626:	bc08      	pop	{r3}
 800f628:	469e      	mov	lr, r3
 800f62a:	4770      	bx	lr
