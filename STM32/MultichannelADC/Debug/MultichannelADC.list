
MultichannelADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f414  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  0800f5a8  0800f5a8  0001f5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe58  0800fe58  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe58  0800fe58  0001fe58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe60  0800fe60  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe60  0800fe60  0001fe60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe64  0800fe64  0001fe64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800fe68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002024c  2**0
                  CONTENTS
 10 .bss          000008e0  2000024c  2000024c  0002024c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b2c  20000b2c  0002024c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000215b4  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004348  00000000  00000000  00041830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  00045b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015c8  00000000  00000000  000472e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271ae  00000000  00000000  000488a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020506  00000000  00000000  0006fa56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfff4  00000000  00000000  0008ff5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016ff50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a18  00000000  00000000  0016ffa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f58c 	.word	0x0800f58c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	0800f58c 	.word	0x0800f58c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MCP4725_init>:

    Constructor
*/
/**************************************************************************/
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	ed87 0a00 	vstr	s0, [r7]
 8000ffc:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	ed97 0a00 	vldr	s0, [r7]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f822 	bl	800105c <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	461c      	mov	r4, r3
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}

0800102e <MCP4725_isConnected>:

    Check the connection
*/
/**************************************************************************/
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	791b      	ldrb	r3, [r3, #4]
 800103e:	b299      	uxth	r1, r3
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	2202      	movs	r2, #2
 8001044:	f003 fec4 	bl	8004dd0 <HAL_I2C_IsDeviceReady>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf0c      	ite	eq
 800104e:	2301      	moveq	r3, #1
 8001050:	2300      	movne	r3, #0
 8001052:	b2db      	uxtb	r3, r3
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8001068:	edd7 7a00 	vldr	s15, [r7]
 800106c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	d103      	bne.n	800107e <MCP4725_setReferenceVoltage+0x22>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <MCP4725_setReferenceVoltage+0x50>)
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	e002      	b.n	8001084 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	ed93 7a02 	vldr	s14, [r3, #8]
 800108a:	eddf 6a09 	vldr	s13, [pc, #36]	; 80010b0 <MCP4725_setReferenceVoltage+0x54>
 800108e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001096:	ee17 3a90 	vmov	r3, s15
 800109a:	b29a      	uxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	819a      	strh	r2, [r3, #12]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	40533333 	.word	0x40533333
 80010b0:	45800000 	.word	0x45800000

080010b4 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	807b      	strh	r3, [r7, #2]
 80010c6:	460b      	mov	r3, r1
 80010c8:	707b      	strb	r3, [r7, #1]
 80010ca:	4613      	mov	r3, r2
 80010cc:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 80010ce:	783b      	ldrb	r3, [r7, #0]
 80010d0:	787a      	ldrb	r2, [r7, #1]
 80010d2:	8879      	ldrh	r1, [r7, #2]
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f822 	bl	800111e <MCP4725_writeComand>
 80010da:	4603      	mov	r3, r0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 80010ec:	2101      	movs	r1, #1
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f895 	bl	800121e <MCP4725_readRegister>
 80010f4:	4603      	mov	r3, r0
 80010f6:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fe:	4293      	cmp	r3, r2
 8001100:	d008      	beq.n	8001114 <MCP4725_getEepromBusyFlag+0x30>
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf14      	ite	ne
 800110c:	2301      	movne	r3, #1
 800110e:	2300      	moveq	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	e000      	b.n	8001116 <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af02      	add	r7, sp, #8
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	4608      	mov	r0, r1
 8001128:	4611      	mov	r1, r2
 800112a:	461a      	mov	r2, r3
 800112c:	4603      	mov	r3, r0
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	460b      	mov	r3, r1
 8001132:	707b      	strb	r3, [r7, #1]
 8001134:	4613      	mov	r3, r2
 8001136:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
//  Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001138:	787b      	ldrb	r3, [r7, #1]
 800113a:	2b60      	cmp	r3, #96	; 0x60
 800113c:	d028      	beq.n	8001190 <MCP4725_writeComand+0x72>
 800113e:	2b60      	cmp	r3, #96	; 0x60
 8001140:	dc4a      	bgt.n	80011d8 <MCP4725_writeComand+0xba>
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <MCP4725_writeComand+0x2e>
 8001146:	2b40      	cmp	r3, #64	; 0x40
 8001148:	d022      	beq.n	8001190 <MCP4725_writeComand+0x72>
 800114a:	e045      	b.n	80011d8 <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18

      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode | (powerType << 4)  | highByte(value);
 800114c:	783b      	ldrb	r3, [r7, #0]
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	b25a      	sxtb	r2, r3
 8001152:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001156:	4313      	orrs	r3, r2
 8001158:	b25a      	sxtb	r2, r3
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	b29b      	uxth	r3, r3
 8001160:	b25b      	sxtb	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b25b      	sxtb	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	737b      	strb	r3, [r7, #13]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	791b      	ldrb	r3, [r3, #4]
 8001178:	b299      	uxth	r1, r3
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2302      	movs	r3, #2
 8001186:	f003 faff 	bl	8004788 <HAL_I2C_Master_Transmit>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

      break;
 800118e:	e023      	b.n	80011d8 <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));

			buffer[0] = mode  | (powerType << 1);
 8001196:	783b      	ldrb	r3, [r7, #0]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	b25a      	sxtb	r2, r3
 800119c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	73bb      	strb	r3, [r7, #14]

			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	b299      	uxth	r1, r3
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2303      	movs	r3, #3
 80011ce:	f003 fadb 	bl	8004788 <HAL_I2C_Master_Transmit>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]

			break;
 80011d6:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MCP4725_writeComand+0xc4>
 80011de:	2300      	movs	r3, #0
 80011e0:	e019      	b.n	8001216 <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 80011e2:	787b      	ldrb	r3, [r7, #1]
 80011e4:	2b60      	cmp	r3, #96	; 0x60
 80011e6:	d115      	bne.n	8001214 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff7b 	bl	80010e4 <MCP4725_getEepromBusyFlag>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <MCP4725_writeComand+0xda>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e00e      	b.n	8001216 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 80011f8:	2019      	movs	r0, #25
 80011fa:	f001 ff1d 	bl	8003038 <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff70 	bl	80010e4 <MCP4725_getEepromBusyFlag>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <MCP4725_writeComand+0xf0>
 800120a:	2301      	movs	r3, #1
 800120c:	e003      	b.n	8001216 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 800120e:	2019      	movs	r0, #25
 8001210:	f001 ff12 	bl	8003038 <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 800121e:	b5b0      	push	{r4, r5, r7, lr}
 8001220:	b088      	sub	sp, #32
 8001222:	af02      	add	r7, sp, #8
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	70fb      	strb	r3, [r7, #3]
 800122a:	466b      	mov	r3, sp
 800122c:	461d      	mov	r5, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8001232:	2300      	movs	r3, #0
 8001234:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8001236:	78fc      	ldrb	r4, [r7, #3]
 8001238:	4623      	mov	r3, r4
 800123a:	3b01      	subs	r3, #1
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	b2e0      	uxtb	r0, r4
 8001240:	f04f 0100 	mov.w	r1, #0
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	00cb      	lsls	r3, r1, #3
 800124e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001252:	00c2      	lsls	r2, r0, #3
 8001254:	b2e0      	uxtb	r0, r4
 8001256:	f04f 0100 	mov.w	r1, #0
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	00cb      	lsls	r3, r1, #3
 8001264:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001268:	00c2      	lsls	r2, r0, #3
 800126a:	4623      	mov	r3, r4
 800126c:	3307      	adds	r3, #7
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	ebad 0d03 	sub.w	sp, sp, r3
 8001276:	ab02      	add	r3, sp, #8
 8001278:	3300      	adds	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;

	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	791b      	ldrb	r3, [r3, #4]
 8001284:	b299      	uxth	r1, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	b29b      	uxth	r3, r3
 800128c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001290:	9400      	str	r4, [sp, #0]
 8001292:	f003 fb77 	bl	8004984 <HAL_I2C_Master_Receive>
 8001296:	4603      	mov	r3, r0
 8001298:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <MCP4725_readRegister+0x88>
 80012a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a4:	e01f      	b.n	80012e6 <MCP4725_readRegister+0xc8>


  /* read data from buffer */
  switch (dataType)
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d00a      	beq.n	80012c2 <MCP4725_readRegister+0xa4>
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	dc19      	bgt.n	80012e4 <MCP4725_readRegister+0xc6>
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d002      	beq.n	80012ba <MCP4725_readRegister+0x9c>
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d004      	beq.n	80012c2 <MCP4725_readRegister+0xa4>
 80012b8:	e014      	b.n	80012e4 <MCP4725_readRegister+0xc6>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	82fb      	strh	r3, [r7, #22]

      break;
 80012c0:	e010      	b.n	80012e4 <MCP4725_readRegister+0xc6>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 80012c2:	8abb      	ldrh	r3, [r7, #20]
 80012c4:	3b02      	subs	r3, #2
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 80012cc:	8afb      	ldrh	r3, [r7, #22]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	8abb      	ldrh	r3, [r7, #20]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	68f9      	ldr	r1, [r7, #12]
 80012d8:	5ccb      	ldrb	r3, [r1, r3]
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21b      	sxth	r3, r3
 80012e0:	82fb      	strh	r3, [r7, #22]
      break;
 80012e2:	bf00      	nop
  }

  return ret_val;
 80012e4:	8afb      	ldrh	r3, [r7, #22]
 80012e6:	46ad      	mov	sp, r5
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdb0      	pop	{r4, r5, r7, pc}

080012f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001302:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001304:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <MX_ADC1_Init+0xd4>)
 8001306:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800130a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800130e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001318:	2201      	movs	r2, #1
 800131a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800131e:	2201      	movs	r2, #1
 8001320:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800132c:	2200      	movs	r2, #0
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <MX_ADC1_Init+0xd8>)
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800133c:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800133e:	2203      	movs	r2, #3
 8001340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800134c:	2201      	movs	r2, #1
 800134e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001350:	481b      	ldr	r0, [pc, #108]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001352:	f001 fe95 	bl	8003080 <HAL_ADC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800135c:	f000 fdc8 	bl	8001ef0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001360:	2300      	movs	r3, #0
 8001362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001364:	2301      	movs	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001368:	2307      	movs	r3, #7
 800136a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <MX_ADC1_Init+0xd0>)
 8001372:	f001 ffed 	bl	8003350 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800137c:	f000 fdb8 	bl	8001ef0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001380:	2301      	movs	r3, #1
 8001382:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_ADC1_Init+0xd0>)
 800138e:	f001 ffdf 	bl	8003350 <HAL_ADC_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001398:	f000 fdaa 	bl	8001ef0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800139c:	2302      	movs	r3, #2
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013a0:	2303      	movs	r3, #3
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_ADC1_Init+0xd0>)
 80013aa:	f001 ffd1 	bl	8003350 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013b4:	f000 fd9c 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200002c8 	.word	0x200002c8
 80013c4:	40012000 	.word	0x40012000
 80013c8:	0f000001 	.word	0x0f000001

080013cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a2f      	ldr	r2, [pc, #188]	; (80014a8 <HAL_ADC_MspInit+0xdc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d157      	bne.n	800149e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a2d      	ldr	r2, [pc, #180]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a26      	ldr	r2, [pc, #152]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_ADC_MspInit+0xe0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001426:	2307      	movs	r3, #7
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	481d      	ldr	r0, [pc, #116]	; (80014b0 <HAL_ADC_MspInit+0xe4>)
 800143a:	f002 feab 	bl	8004194 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_ADC_MspInit+0xec>)
 8001442:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001460:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001464:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001468:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001474:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001484:	f002 fb16 	bl	8003ab4 <HAL_DMA_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800148e:	f000 fd2f 	bl	8001ef0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 8001496:	639a      	str	r2, [r3, #56]	; 0x38
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_ADC_MspInit+0xe8>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	; 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40012000 	.word	0x40012000
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	20000310 	.word	0x20000310
 80014b8:	40026410 	.word	0x40026410

080014bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_DMA_Init+0x3c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <MX_DMA_Init+0x3c>)
 80014cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_DMA_Init+0x3c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2038      	movs	r0, #56	; 0x38
 80014e4:	f002 faaf 	bl	8003a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014e8:	2038      	movs	r0, #56	; 0x38
 80014ea:	f002 fac8 	bl	8003a7e <HAL_NVIC_EnableIRQ>

}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <MX_GPIO_Init+0xfc>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a37      	ldr	r2, [pc, #220]	; (80015f8 <MX_GPIO_Init+0xfc>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <MX_GPIO_Init+0xfc>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <MX_GPIO_Init+0xfc>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a30      	ldr	r2, [pc, #192]	; (80015f8 <MX_GPIO_Init+0xfc>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <MX_GPIO_Init+0xfc>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <MX_GPIO_Init+0xfc>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a29      	ldr	r2, [pc, #164]	; (80015f8 <MX_GPIO_Init+0xfc>)
 8001554:	f043 0310 	orr.w	r3, r3, #16
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <MX_GPIO_Init+0xfc>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <MX_GPIO_Init+0xfc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <MX_GPIO_Init+0xfc>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <MX_GPIO_Init+0xfc>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_GPIO_Init+0xfc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <MX_GPIO_Init+0xfc>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_GPIO_Init+0xfc>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2110      	movs	r1, #16
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <MX_GPIO_Init+0x100>)
 80015a4:	f002 ff92 	bl	80044cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ae:	4814      	ldr	r0, [pc, #80]	; (8001600 <MX_GPIO_Init+0x104>)
 80015b0:	f002 ff8c 	bl	80044cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015b4:	2310      	movs	r3, #16
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_GPIO_Init+0x100>)
 80015cc:	f002 fde2 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_GPIO_Init+0x104>)
 80015ea:	f002 fdd3 	bl	8004194 <HAL_GPIO_Init>

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40021000 	.word	0x40021000

08001604 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_I2C1_Init+0x50>)
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <MX_I2C1_Init+0x54>)
 800160c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_I2C1_Init+0x50>)
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <MX_I2C1_Init+0x58>)
 8001612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_I2C1_Init+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_I2C1_Init+0x50>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_I2C1_Init+0x50>)
 8001622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_I2C1_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_I2C1_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_I2C1_Init+0x50>)
 8001642:	f002 ff5d 	bl	8004500 <HAL_I2C_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800164c:	f000 fc50 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000370 	.word	0x20000370
 8001658:	40005400 	.word	0x40005400
 800165c:	000186a0 	.word	0x000186a0

08001660 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <MX_I2C2_Init+0x54>)
 8001668:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_I2C2_Init+0x50>)
 800166c:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <MX_I2C2_Init+0x58>)
 800166e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 2;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001678:	2202      	movs	r2, #2
 800167a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_I2C2_Init+0x50>)
 800167e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001682:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_I2C2_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_I2C2_Init+0x50>)
 800169e:	f002 ff2f 	bl	8004500 <HAL_I2C_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016a8:	f000 fc22 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200003c4 	.word	0x200003c4
 80016b4:	40005800 	.word	0x40005800
 80016b8:	000186a0 	.word	0x000186a0

080016bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	; 0x30
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a32      	ldr	r2, [pc, #200]	; (80017a4 <HAL_I2C_MspInit+0xe8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12c      	bne.n	8001738 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a30      	ldr	r2, [pc, #192]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016fa:	23c0      	movs	r3, #192	; 0xc0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fe:	2312      	movs	r3, #18
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001702:	2301      	movs	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800170a:	2304      	movs	r3, #4
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4825      	ldr	r0, [pc, #148]	; (80017ac <HAL_I2C_MspInit+0xf0>)
 8001716:	f002 fd3d 	bl	8004194 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 8001724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001736:	e031      	b.n	800179c <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <HAL_I2C_MspInit+0xf4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d12c      	bne.n	800179c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800175e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001764:	2312      	movs	r3, #18
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001768:	2301      	movs	r3, #1
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001770:	2304      	movs	r3, #4
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	480c      	ldr	r0, [pc, #48]	; (80017ac <HAL_I2C_MspInit+0xf0>)
 800177c:	f002 fd0a 	bl	8004194 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 800178a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800178e:	6413      	str	r3, [r2, #64]	; 0x40
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_I2C_MspInit+0xec>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	bf00      	nop
 800179e:	3730      	adds	r7, #48	; 0x30
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40005400 	.word	0x40005400
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40005800 	.word	0x40005800

080017b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	f2ad 4ddc 	subw	sp, sp, #1244	; 0x4dc
 80017ba:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
   	startTime = HAL_GetTick();
 80017bc:	f001 fc30 	bl	8003020 <HAL_GetTick>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a7a      	ldr	r2, [pc, #488]	; (80019ac <main+0x1f8>)
 80017c4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c6:	f001 fbc5 	bl	8002f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ca:	f000 faa9 	bl	8001d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ce:	f7ff fe95 	bl	80014fc <MX_GPIO_Init>
  MX_DMA_Init();
 80017d2:	f7ff fe73 	bl	80014bc <MX_DMA_Init>
  MX_ADC1_Init();
 80017d6:	f7ff fd8b 	bl	80012f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80017da:	f000 fd41 	bl	8002260 <MX_TIM1_Init>
  MX_SPI1_Init();
 80017de:	f000 fb8d 	bl	8001efc <MX_SPI1_Init>
  MX_FATFS_Init();
 80017e2:	f006 f94b 	bl	8007a7c <MX_FATFS_Init>
  MX_UART4_Init();
 80017e6:	f000 fe39 	bl	800245c <MX_UART4_Init>
  MX_I2C1_Init();
 80017ea:	f7ff ff0b 	bl	8001604 <MX_I2C1_Init>
  MX_I2C2_Init();
 80017ee:	f7ff ff37 	bl	8001660 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, my_adc, 3);
 80017f2:	2203      	movs	r2, #3
 80017f4:	496e      	ldr	r1, [pc, #440]	; (80019b0 <main+0x1fc>)
 80017f6:	486f      	ldr	r0, [pc, #444]	; (80019b4 <main+0x200>)
 80017f8:	f001 fc86 	bl	8003108 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017fc:	2100      	movs	r1, #0
 80017fe:	486e      	ldr	r0, [pc, #440]	; (80019b8 <main+0x204>)
 8001800:	f004 ff54 	bl	80066ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001804:	2104      	movs	r1, #4
 8001806:	486c      	ldr	r0, [pc, #432]	; (80019b8 <main+0x204>)
 8001808:	f004 ff50 	bl	80066ac <HAL_TIM_PWM_Start>
  //https://github.com/SMotlaq/mcp4725/blob/master/Core/Src/main.c
  // Second, initilaize the MCP4725 object:


	myMCP4725_AO0 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 5);
 800180c:	4c6b      	ldr	r4, [pc, #428]	; (80019bc <main+0x208>)
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001816:	2260      	movs	r2, #96	; 0x60
 8001818:	4969      	ldr	r1, [pc, #420]	; (80019c0 <main+0x20c>)
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fbe6 	bl	8000fec <MCP4725_init>
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001826:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myMCP4725_AO1 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A01, 5);
 800182a:	4c66      	ldr	r4, [pc, #408]	; (80019c4 <main+0x210>)
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001834:	2261      	movs	r2, #97	; 0x61
 8001836:	4962      	ldr	r1, [pc, #392]	; (80019c0 <main+0x20c>)
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fbd7 	bl	8000fec <MCP4725_init>
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

//  https://github.com/kiwih/cubemx-mmc-sd-card/blob/master/Src/main.c

  myprintf("\r\n\r\n(Powering up)\r\nReady to write data --\r\nThe data will be save in csv format.\r\n\r\n");
 8001848:	485f      	ldr	r0, [pc, #380]	; (80019c8 <main+0x214>)
 800184a:	f000 fb0b 	bl	8001e64 <myprintf>
  FRESULT fres;

  //Mount drive
  fres = f_mount(&FatFs, "", 1); //1=mount now
 800184e:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8001852:	2201      	movs	r2, #1
 8001854:	495d      	ldr	r1, [pc, #372]	; (80019cc <main+0x218>)
 8001856:	4618      	mov	r0, r3
 8001858:	f007 febe 	bl	80095d8 <f_mount>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
  if (fres != FR_OK) {
 8001862:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <main+0xc4>
	myprintf("f_mount error (%i)\r\n", fres);
 800186a:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 800186e:	4619      	mov	r1, r3
 8001870:	4857      	ldr	r0, [pc, #348]	; (80019d0 <main+0x21c>)
 8001872:	f000 faf7 	bl	8001e64 <myprintf>
 8001876:	e002      	b.n	800187e <main+0xca>
//	while(1);
 }
  else{
	  myprintf("SD CARD mounted successfully...\n\n");
 8001878:	4856      	ldr	r0, [pc, #344]	; (80019d4 <main+0x220>)
 800187a:	f000 faf3 	bl	8001e64 <myprintf>
 }

 /* Check free space */
  DWORD free_clusters, free_sectors, total_sectors;
  FATFS* getFreeFs;
  fres = f_getfree("", &free_clusters, &getFreeFs);
 800187e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001882:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001886:	4619      	mov	r1, r3
 8001888:	4850      	ldr	r0, [pc, #320]	; (80019cc <main+0x218>)
 800188a:	f008 fc05 	bl	800a098 <f_getfree>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7

  if (fres != FR_OK) {
 8001894:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <main+0xf6>
	myprintf("f_getfree error (%i)\r\n", fres);
 800189c:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 80018a0:	4619      	mov	r1, r3
 80018a2:	484d      	ldr	r0, [pc, #308]	; (80019d8 <main+0x224>)
 80018a4:	f000 fade 	bl	8001e64 <myprintf>
	while(1);
 80018a8:	e7fe      	b.n	80018a8 <main+0xf4>
  } else{
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80018aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	3b02      	subs	r3, #2
 80018b4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	8952      	ldrh	r2, [r2, #10]
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
	free_sectors = free_clusters * getFreeFs->csize;
 80018c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	895b      	ldrh	r3, [r3, #10]
 80018cc:	461a      	mov	r2, r3
 80018ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fb03 f302 	mul.w	r3, r3, r2
 80018d8:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
	myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80018dc:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 80018e0:	0859      	lsrs	r1, r3, #1
 80018e2:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	461a      	mov	r2, r3
 80018ea:	483c      	ldr	r0, [pc, #240]	; (80019dc <main+0x228>)
 80018ec:	f000 faba 	bl	8001e64 <myprintf>
  }

  /*-----READ TEST.TXT by f_open method----*/
  fres = f_open(&fil, "testBaca.txt", FA_READ); //Try to open file
 80018f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018f4:	2201      	movs	r2, #1
 80018f6:	493a      	ldr	r1, [pc, #232]	; (80019e0 <main+0x22c>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f007 feb3 	bl	8009664 <f_open>
 80018fe:	4603      	mov	r3, r0
 8001900:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
  if (fres != FR_OK) {
 8001904:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <main+0x160>
	  myprintf("f_open error (%i)\r\n");
 800190c:	4835      	ldr	r0, [pc, #212]	; (80019e4 <main+0x230>)
 800190e:	f000 faa9 	bl	8001e64 <myprintf>
	  while(1);
 8001912:	e7fe      	b.n	8001912 <main+0x15e>
  } else{
	  myprintf("I was able to open 'testBaca.txt' for reading!\r\n");
 8001914:	4834      	ldr	r0, [pc, #208]	; (80019e8 <main+0x234>)
 8001916:	f000 faa5 	bl	8001e64 <myprintf>

  /*-----READ TEST.TXT by f_gets method----*/
  BYTE readBuf[30];
  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 800191a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	211e      	movs	r1, #30
 8001924:	4618      	mov	r0, r3
 8001926:	f008 fc6c 	bl	800a202 <f_gets>
 800192a:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
  if(rres != 0) {
 800192e:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d019      	beq.n	800196a <main+0x1b6>
	  myprintf("Read string from 'testBaca.txt' contents: %s\r\n", readBuf);
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	482b      	ldr	r0, [pc, #172]	; (80019ec <main+0x238>)
 800193e:	f000 fa91 	bl	8001e64 <myprintf>
  } else {
	  myprintf("f_gets error (%i)\r\n", fres);
	  while(1);
  }
  f_close(&fil); //Close file, don't forget this!
 8001942:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001946:	4618      	mov	r0, r3
 8001948:	f008 fb7c 	bl	800a044 <f_close>

  /*-----OPEN WRITE.TXT READY TO WRITE----*/
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800194c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001950:	221a      	movs	r2, #26
 8001952:	4927      	ldr	r1, [pc, #156]	; (80019f0 <main+0x23c>)
 8001954:	4618      	mov	r0, r3
 8001956:	f007 fe85 	bl	8009664 <f_open>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
  if(fres == FR_OK) {
 8001960:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8001964:	2b00      	cmp	r3, #0
 8001966:	d11a      	bne.n	800199e <main+0x1ea>
 8001968:	e006      	b.n	8001978 <main+0x1c4>
	  myprintf("f_gets error (%i)\r\n", fres);
 800196a:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 800196e:	4619      	mov	r1, r3
 8001970:	4820      	ldr	r0, [pc, #128]	; (80019f4 <main+0x240>)
 8001972:	f000 fa77 	bl	8001e64 <myprintf>
	  while(1);
 8001976:	e7fe      	b.n	8001976 <main+0x1c2>
	  myprintf("I was able to open 'write.txt' for writing\r\n");
 8001978:	481f      	ldr	r0, [pc, #124]	; (80019f8 <main+0x244>)
 800197a:	f000 fa73 	bl	8001e64 <myprintf>
  } else {
	  myprintf("f_open error (%i)\r\n", fres);
   while(1);
  }

  setValue_AO0(0);	// 0mV di awal
 800197e:	2000      	movs	r0, #0
 8001980:	f000 fa92 	bl	8001ea8 <setValue_AO0>
  setValue_AO1(0);	// 0mV di awal
 8001984:	2000      	movs	r0, #0
 8001986:	f000 faa1 	bl	8001ecc <setValue_AO1>
  prevTime = 0;
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <main+0x248>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001996:	481a      	ldr	r0, [pc, #104]	; (8001a00 <main+0x24c>)
 8001998:	f002 fd98 	bl	80044cc <HAL_GPIO_WritePin>
 800199c:	e032      	b.n	8001a04 <main+0x250>
	  myprintf("f_open error (%i)\r\n", fres);
 800199e:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 80019a2:	4619      	mov	r1, r3
 80019a4:	480f      	ldr	r0, [pc, #60]	; (80019e4 <main+0x230>)
 80019a6:	f000 fa5d 	bl	8001e64 <myprintf>
   while(1);
 80019aa:	e7fe      	b.n	80019aa <main+0x1f6>
 80019ac:	200005b8 	.word	0x200005b8
 80019b0:	20000450 	.word	0x20000450
 80019b4:	200002c8 	.word	0x200002c8
 80019b8:	2000061c 	.word	0x2000061c
 80019bc:	2000041c 	.word	0x2000041c
 80019c0:	20000370 	.word	0x20000370
 80019c4:	20000438 	.word	0x20000438
 80019c8:	0800f5a8 	.word	0x0800f5a8
 80019cc:	0800f5fc 	.word	0x0800f5fc
 80019d0:	0800f600 	.word	0x0800f600
 80019d4:	0800f618 	.word	0x0800f618
 80019d8:	0800f63c 	.word	0x0800f63c
 80019dc:	0800f654 	.word	0x0800f654
 80019e0:	0800f69c 	.word	0x0800f69c
 80019e4:	0800f6ac 	.word	0x0800f6ac
 80019e8:	0800f6c0 	.word	0x0800f6c0
 80019ec:	0800f6f4 	.word	0x0800f6f4
 80019f0:	0800f738 	.word	0x0800f738
 80019f4:	0800f724 	.word	0x0800f724
 80019f8:	0800f744 	.word	0x0800f744
 80019fc:	2000027c 	.word	0x2000027c
 8001a00:	40021000 	.word	0x40021000

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	{
	diffTime = HAL_GetTick() - startTime; // dalam ms
 8001a04:	f001 fb0c 	bl	8003020 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b9b      	ldr	r3, [pc, #620]	; (8001c78 <main+0x4c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a9a      	ldr	r2, [pc, #616]	; (8001c7c <main+0x4c8>)
 8001a12:	6013      	str	r3, [r2, #0]

	AO0_bit = (uint16_t) 4095 * AO0_volt / 24; // divided by 24V karena AO0 mengirim tegangan max 24V
 8001a14:	4b9a      	ldr	r3, [pc, #616]	; (8001c80 <main+0x4cc>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001c84 <main+0x4d0>
 8001a1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a22:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 8001a26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2e:	ee17 3a90 	vmov	r3, s15
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	4b94      	ldr	r3, [pc, #592]	; (8001c88 <main+0x4d4>)
 8001a36:	801a      	strh	r2, [r3, #0]
	AO1_bit = (uint16_t) 4095 * AO1_volt / 10; // divided by 10V karena AO0 mengirim tegangan max 10V
 8001a38:	4b94      	ldr	r3, [pc, #592]	; (8001c8c <main+0x4d8>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8001c84 <main+0x4d0>
 8001a42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a46:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a52:	ee17 3a90 	vmov	r3, s15
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b8d      	ldr	r3, [pc, #564]	; (8001c90 <main+0x4dc>)
 8001a5a:	801a      	strh	r2, [r3, #0]

	if(!MCP4725_isConnected(&myMCP4725_AO0)){
 8001a5c:	488d      	ldr	r0, [pc, #564]	; (8001c94 <main+0x4e0>)
 8001a5e:	f7ff fae6 	bl	800102e <MCP4725_isConnected>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <main+0x2c0>
		/* Print that the DAC is connected */
		errorDAC = 1;
 8001a68:	4b8b      	ldr	r3, [pc, #556]	; (8001c98 <main+0x4e4>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
		myprintf("MCP A0 not connected | ");
 8001a6e:	488b      	ldr	r0, [pc, #556]	; (8001c9c <main+0x4e8>)
 8001a70:	f000 f9f8 	bl	8001e64 <myprintf>
		}
	if(!MCP4725_isConnected(&myMCP4725_AO1)){
 8001a74:	488a      	ldr	r0, [pc, #552]	; (8001ca0 <main+0x4ec>)
 8001a76:	f7ff fada 	bl	800102e <MCP4725_isConnected>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <main+0x2d8>
		/* Print that the DAC is connected */
		errorDAC = 1;
 8001a80:	4b85      	ldr	r3, [pc, #532]	; (8001c98 <main+0x4e4>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
		myprintf("MCP A1 not connected | ");
 8001a86:	4887      	ldr	r0, [pc, #540]	; (8001ca4 <main+0x4f0>)
 8001a88:	f000 f9ec 	bl	8001e64 <myprintf>
		}

	if(MCP4725_isConnected(&myMCP4725_AO0) && MCP4725_isConnected(&myMCP4725_AO1)){
 8001a8c:	4881      	ldr	r0, [pc, #516]	; (8001c94 <main+0x4e0>)
 8001a8e:	f7ff face 	bl	800102e <MCP4725_isConnected>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00b      	beq.n	8001ab0 <main+0x2fc>
 8001a98:	4881      	ldr	r0, [pc, #516]	; (8001ca0 <main+0x4ec>)
 8001a9a:	f7ff fac8 	bl	800102e <MCP4725_isConnected>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <main+0x2fc>
		errorDAC = 0;/* Print that the DAC is NOT connected */
 8001aa4:	4b7c      	ldr	r3, [pc, #496]	; (8001c98 <main+0x4e4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
		myprintf("Both MCP4725 s Connected  -- ");
 8001aaa:	487f      	ldr	r0, [pc, #508]	; (8001ca8 <main+0x4f4>)
 8001aac:	f000 f9da 	bl	8001e64 <myprintf>
		}


	setValue_AO0(AO0_bit);
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <main+0x4d4>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 f9f7 	bl	8001ea8 <setValue_AO0>
	setValue_AO1(AO1_bit);
 8001aba:	4b75      	ldr	r3, [pc, #468]	; (8001c90 <main+0x4dc>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fa04 	bl	8001ecc <setValue_AO1>

	/*-----STORING TO MICRO SD----*/
	UINT bytesWrote;
	dt = diffTime - prevTime; // juga digunakan dalam integrator, derivative PID
 8001ac4:	4b6d      	ldr	r3, [pc, #436]	; (8001c7c <main+0x4c8>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b78      	ldr	r3, [pc, #480]	; (8001cac <main+0x4f8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	4a78      	ldr	r2, [pc, #480]	; (8001cb0 <main+0x4fc>)
 8001ad0:	6013      	str	r3, [r2, #0]
	if(dt >= timeSampling){
 8001ad2:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <main+0x500>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b75      	ldr	r3, [pc, #468]	; (8001cb0 <main+0x4fc>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d817      	bhi.n	8001b10 <main+0x35c>
		fres = f_write(&fil, stringKirim, strlen(stringKirim), &bytesWrote);
 8001ae0:	4875      	ldr	r0, [pc, #468]	; (8001cb8 <main+0x504>)
 8001ae2:	f7fe fb75 	bl	80001d0 <strlen>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001af0:	4971      	ldr	r1, [pc, #452]	; (8001cb8 <main+0x504>)
 8001af2:	f008 f8b4 	bl	8009c5e <f_write>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
		k++;
 8001afc:	4b6f      	ldr	r3, [pc, #444]	; (8001cbc <main+0x508>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	4a6e      	ldr	r2, [pc, #440]	; (8001cbc <main+0x508>)
 8001b04:	6013      	str	r3, [r2, #0]
		prevTime = HAL_GetTick();
 8001b06:	f001 fa8b 	bl	8003020 <HAL_GetTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a67      	ldr	r2, [pc, #412]	; (8001cac <main+0x4f8>)
 8001b0e:	6013      	str	r3, [r2, #0]
		}

	timestamp = HAL_GetTick() - startTime;
 8001b10:	f001 fa86 	bl	8003020 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <main+0x4c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	4a68      	ldr	r2, [pc, #416]	; (8001cc0 <main+0x50c>)
 8001b1e:	6013      	str	r3, [r2, #0]
	/* KONVERSI bit ke Volt */
//	AI0_volt = AI0_bit * 3.3 / 4096; // PA0
//	AI1_volt = AI1_bit * 3.3 / 4096; // PA1
//	AI2_volt = AI2_bit * 3.3 / 4096; // PA2
	sprintf(stringKirim,"%d, %d, %f, %f, %d, %d, %d\n",k,timestamp, AO0_volt, AO1_volt, AI0_bit, AI1_bit, AI2_bit); // stringKirim baru, sesuai nilai adc cpltCallback
 8001b20:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <main+0x508>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <main+0x50c>)
 8001b28:	6819      	ldr	r1, [r3, #0]
 8001b2a:	6039      	str	r1, [r7, #0]
 8001b2c:	4b54      	ldr	r3, [pc, #336]	; (8001c80 <main+0x4cc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd09 	bl	8000548 <__aeabi_f2d>
 8001b36:	4604      	mov	r4, r0
 8001b38:	460d      	mov	r5, r1
 8001b3a:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <main+0x4d8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fd02 	bl	8000548 <__aeabi_f2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	495e      	ldr	r1, [pc, #376]	; (8001cc4 <main+0x510>)
 8001b4a:	6809      	ldr	r1, [r1, #0]
 8001b4c:	485e      	ldr	r0, [pc, #376]	; (8001cc8 <main+0x514>)
 8001b4e:	6800      	ldr	r0, [r0, #0]
 8001b50:	4e5e      	ldr	r6, [pc, #376]	; (8001ccc <main+0x518>)
 8001b52:	6836      	ldr	r6, [r6, #0]
 8001b54:	9606      	str	r6, [sp, #24]
 8001b56:	9005      	str	r0, [sp, #20]
 8001b58:	9104      	str	r1, [sp, #16]
 8001b5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b5e:	e9cd 4500 	strd	r4, r5, [sp]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	495a      	ldr	r1, [pc, #360]	; (8001cd0 <main+0x51c>)
 8001b68:	4853      	ldr	r0, [pc, #332]	; (8001cb8 <main+0x504>)
 8001b6a:	f009 fa95 	bl	800b098 <siprintf>

	if(fres == FR_OK) {
 8001b6e:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d104      	bne.n	8001b80 <main+0x3cc>
	myprintf("Status: %s",stringKirim);
 8001b76:	4950      	ldr	r1, [pc, #320]	; (8001cb8 <main+0x504>)
 8001b78:	4856      	ldr	r0, [pc, #344]	; (8001cd4 <main+0x520>)
 8001b7a:	f000 f973 	bl	8001e64 <myprintf>
 8001b7e:	e02a      	b.n	8001bd6 <main+0x422>
	} else {
	if(awal==0){ myprintf("f_write error (%i)\r\n"); }
 8001b80:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <main+0x524>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <main+0x3da>
 8001b88:	4854      	ldr	r0, [pc, #336]	; (8001cdc <main+0x528>)
 8001b8a:	f000 f96b 	bl	8001e64 <myprintf>
	HAL_UART_Receive(&huart4, (char*)Rx_buffer, 50, 500);
 8001b8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b92:	2232      	movs	r2, #50	; 0x32
 8001b94:	4952      	ldr	r1, [pc, #328]	; (8001ce0 <main+0x52c>)
 8001b96:	4853      	ldr	r0, [pc, #332]	; (8001ce4 <main+0x530>)
 8001b98:	f005 fc97 	bl	80074ca <HAL_UART_Receive>
	sprintf(Rx_buffer_string,"%s",Rx_buffer);
 8001b9c:	4a50      	ldr	r2, [pc, #320]	; (8001ce0 <main+0x52c>)
 8001b9e:	4952      	ldr	r1, [pc, #328]	; (8001ce8 <main+0x534>)
 8001ba0:	4852      	ldr	r0, [pc, #328]	; (8001cec <main+0x538>)
 8001ba2:	f009 fa79 	bl	800b098 <siprintf>
	char* Rx_buffer_print = strtok(Rx_buffer_string,"\r\n");
 8001ba6:	4952      	ldr	r1, [pc, #328]	; (8001cf0 <main+0x53c>)
 8001ba8:	4850      	ldr	r0, [pc, #320]	; (8001cec <main+0x538>)
 8001baa:	f00a f935 	bl	800be18 <strtok>
 8001bae:	f8c7 04a4 	str.w	r0, [r7, #1188]	; 0x4a4
	sscanf(Rx_buffer_print, "[SP=%d],[KP=%d],[KI=%d]", &SP, &KP, &KI);
 8001bb2:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <main+0x540>)
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	4b50      	ldr	r3, [pc, #320]	; (8001cf8 <main+0x544>)
 8001bb8:	4a50      	ldr	r2, [pc, #320]	; (8001cfc <main+0x548>)
 8001bba:	4951      	ldr	r1, [pc, #324]	; (8001d00 <main+0x54c>)
 8001bbc:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 8001bc0:	f009 fa8a 	bl	800b0d8 <siscanf>
	myprintf("SP = %d | KP = %d | KI = %d \n",SP, KP, KI);
 8001bc4:	4b4d      	ldr	r3, [pc, #308]	; (8001cfc <main+0x548>)
 8001bc6:	6819      	ldr	r1, [r3, #0]
 8001bc8:	4b4b      	ldr	r3, [pc, #300]	; (8001cf8 <main+0x544>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <main+0x540>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	484c      	ldr	r0, [pc, #304]	; (8001d04 <main+0x550>)
 8001bd2:	f000 f947 	bl	8001e64 <myprintf>
	}
	if(SP != prevSP){
 8001bd6:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <main+0x548>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b4b      	ldr	r3, [pc, #300]	; (8001d08 <main+0x554>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d017      	beq.n	8001c12 <main+0x45e>
	/*-----PWM DAC DUTY CYCLE GENERATION-----*/
		htim1.Instance->CCR1 = SP * 999 / 4096; // output PE9 dalam 0 (0% duty cycle) - 4096 (100% duty cycle) 1kHz HCLK
 8001be2:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <main+0x548>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bea:	fb02 f203 	mul.w	r2, r2, r3
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <main+0x558>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0b12      	lsrs	r2, r2, #12
 8001bf4:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2 = KP * 999 / 4096; // output PE9 dalam 0 (0% duty cycle) - 4096 (100% duty cycle) 1kHz HCLK
 8001bf6:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <main+0x544>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bfe:	fb02 f203 	mul.w	r2, r2, r3
 8001c02:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <main+0x558>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0b12      	lsrs	r2, r2, #12
 8001c08:	639a      	str	r2, [r3, #56]	; 0x38
		prevSP = SP;
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <main+0x548>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a3e      	ldr	r2, [pc, #248]	; (8001d08 <main+0x554>)
 8001c10:	6013      	str	r3, [r2, #0]
	}

	if(diffTime > 3000){ // awal kali 0V, setelah 2s keluar AO sesuai yg diminta
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <main+0x4c8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	f67f aef2 	bls.w	8001a04 <main+0x250>
				AO0_volt = 15; // valve flow control Qin
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <main+0x4cc>)
 8001c22:	4a3b      	ldr	r2, [pc, #236]	; (8001d10 <main+0x55c>)
 8001c24:	601a      	str	r2, [r3, #0]
				AO1_volt = 0; // pompa, drain valve
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <main+0x4d8>)
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c34:	4837      	ldr	r0, [pc, #220]	; (8001d14 <main+0x560>)
 8001c36:	f002 fc49 	bl	80044cc <HAL_GPIO_WritePin>

				if(diffTime > 963000) { // waktu stop untuk close dan unmount csv, nilai ini harus + difftime 2s
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <main+0x4c8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a36      	ldr	r2, [pc, #216]	; (8001d18 <main+0x564>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	f67f aedf 	bls.w	8001a04 <main+0x250>
					f_close(&fil); //Close file, don't forget this!
 8001c46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f008 f9fa 	bl	800a044 <f_close>
					f_mount(NULL, "", 0); //De-mount drive
 8001c50:	2200      	movs	r2, #0
 8001c52:	4932      	ldr	r1, [pc, #200]	; (8001d1c <main+0x568>)
 8001c54:	2000      	movs	r0, #0
 8001c56:	f007 fcbf 	bl	80095d8 <f_mount>
					// normalkan kondisi semua off
					AO0_volt = 0;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <main+0x4cc>)
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
					AO1_volt = 0;
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <main+0x4d8>)
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c70:	4828      	ldr	r0, [pc, #160]	; (8001d14 <main+0x560>)
 8001c72:	f002 fc2b 	bl	80044cc <HAL_GPIO_WritePin>
	{
 8001c76:	e6c5      	b.n	8001a04 <main+0x250>
 8001c78:	200005b8 	.word	0x200005b8
 8001c7c:	2000044c 	.word	0x2000044c
 8001c80:	20000268 	.word	0x20000268
 8001c84:	457ff000 	.word	0x457ff000
 8001c88:	200005c0 	.word	0x200005c0
 8001c8c:	2000026c 	.word	0x2000026c
 8001c90:	20000270 	.word	0x20000270
 8001c94:	2000041c 	.word	0x2000041c
 8001c98:	20000280 	.word	0x20000280
 8001c9c:	0800f774 	.word	0x0800f774
 8001ca0:	20000438 	.word	0x20000438
 8001ca4:	0800f78c 	.word	0x0800f78c
 8001ca8:	0800f7a4 	.word	0x0800f7a4
 8001cac:	2000027c 	.word	0x2000027c
 8001cb0:	20000544 	.word	0x20000544
 8001cb4:	20000050 	.word	0x20000050
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	20000278 	.word	0x20000278
 8001cc0:	20000434 	.word	0x20000434
 8001cc4:	20000464 	.word	0x20000464
 8001cc8:	200005b0 	.word	0x200005b0
 8001ccc:	200004d4 	.word	0x200004d4
 8001cd0:	0800f7c4 	.word	0x0800f7c4
 8001cd4:	0800f7e0 	.word	0x0800f7e0
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	0800f7ec 	.word	0x0800f7ec
 8001ce0:	2000054c 	.word	0x2000054c
 8001ce4:	20000664 	.word	0x20000664
 8001ce8:	0800f804 	.word	0x0800f804
 8001cec:	20000548 	.word	0x20000548
 8001cf0:	0800f808 	.word	0x0800f808
 8001cf4:	20000274 	.word	0x20000274
 8001cf8:	20000430 	.word	0x20000430
 8001cfc:	20000418 	.word	0x20000418
 8001d00:	0800f80c 	.word	0x0800f80c
 8001d04:	0800f824 	.word	0x0800f824
 8001d08:	20000460 	.word	0x20000460
 8001d0c:	2000061c 	.word	0x2000061c
 8001d10:	41700000 	.word	0x41700000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	000eb1b8 	.word	0x000eb1b8
 8001d1c:	0800f5fc 	.word	0x0800f5fc

08001d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b094      	sub	sp, #80	; 0x50
 8001d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d26:	f107 0320 	add.w	r3, r7, #32
 8001d2a:	2230      	movs	r2, #48	; 0x30
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f008 fb2a 	bl	800a388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <SystemClock_Config+0xcc>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	4a27      	ldr	r2, [pc, #156]	; (8001dec <SystemClock_Config+0xcc>)
 8001d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d52:	6413      	str	r3, [r2, #64]	; 0x40
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <SystemClock_Config+0xcc>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d60:	2300      	movs	r3, #0
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <SystemClock_Config+0xd0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <SystemClock_Config+0xd0>)
 8001d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <SystemClock_Config+0xd0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d86:	2302      	movs	r3, #2
 8001d88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d90:	2304      	movs	r3, #4
 8001d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d94:	23a8      	movs	r3, #168	; 0xa8
 8001d96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da0:	f107 0320 	add.w	r3, r7, #32
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 fc6f 	bl	8005688 <HAL_RCC_OscConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001db0:	f000 f89e 	bl	8001ef0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db4:	230f      	movs	r3, #15
 8001db6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db8:	2302      	movs	r3, #2
 8001dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2105      	movs	r1, #5
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fed0 	bl	8005b78 <HAL_RCC_ClockConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001dde:	f000 f887 	bl	8001ef0 <Error_Handler>
  }
}
 8001de2:	bf00      	nop
 8001de4:	3750      	adds	r7, #80	; 0x50
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40007000 	.word	0x40007000

08001df4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

 if(hadc->Instance == ADC1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_ADC_ConvCpltCallback+0x50>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d119      	bne.n	8001e3a <HAL_ADC_ConvCpltCallback+0x46>
  {
   AI0_bit = my_adc[0]; // PA0
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_ADC_ConvCpltCallback+0x54>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_ADC_ConvCpltCallback+0x58>)
 8001e0c:	6013      	str	r3, [r2, #0]
   AI1_bit = my_adc[1]; // PA1
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_ADC_ConvCpltCallback+0x54>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001e14:	6013      	str	r3, [r2, #0]
   AI2_bit = my_adc[2]; // PA2
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_ADC_ConvCpltCallback+0x54>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_ADC_ConvCpltCallback+0x60>)
 8001e1c:	6013      	str	r3, [r2, #0]
   if(awal = 1){
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x64>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
	   diffTime = HAL_GetTick() - startTime;
 8001e24:	f001 f8fc 	bl	8003020 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x68>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e32:	6013      	str	r3, [r2, #0]
   }
   awal = 0;
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x64>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40012000 	.word	0x40012000
 8001e48:	20000450 	.word	0x20000450
 8001e4c:	20000464 	.word	0x20000464
 8001e50:	200005b0 	.word	0x200005b0
 8001e54:	200004d4 	.word	0x200004d4
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	200005b8 	.word	0x200005b8
 8001e60:	2000044c 	.word	0x2000044c

08001e64 <myprintf>:

void myprintf(const char *fmt, ...) {
 8001e64:	b40f      	push	{r0, r1, r2, r3}
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, fmt);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	607b      	str	r3, [r7, #4]
  vsnprintf(Tx_buffer, sizeof(Tx_buffer), fmt, args);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	2164      	movs	r1, #100	; 0x64
 8001e78:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <myprintf+0x3c>)
 8001e7a:	f00a f8db 	bl	800c034 <vsniprintf>
  va_end(args);
  HAL_UART_Transmit(&huart4, (uint8_t*)Tx_buffer, strlen(Tx_buffer), 100);
 8001e7e:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <myprintf+0x3c>)
 8001e80:	f7fe f9a6 	bl	80001d0 <strlen>
 8001e84:	4603      	mov	r3, r0
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	2364      	movs	r3, #100	; 0x64
 8001e8a:	4905      	ldr	r1, [pc, #20]	; (8001ea0 <myprintf+0x3c>)
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <myprintf+0x40>)
 8001e8e:	f005 fa8a 	bl	80073a6 <HAL_UART_Transmit>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e9c:	b004      	add	sp, #16
 8001e9e:	4770      	bx	lr
 8001ea0:	200004dc 	.word	0x200004dc
 8001ea4:	20000664 	.word	0x20000664

08001ea8 <setValue_AO0>:

uint8_t setValue_AO0(uint16_t AO0_bit){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	80fb      	strh	r3, [r7, #6]
	return MCP4725_setValue(&myMCP4725_AO0, AO0_bit, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001eb2:	88f9      	ldrh	r1, [r7, #6]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <setValue_AO0+0x20>)
 8001eba:	f7ff f8fb 	bl	80010b4 <MCP4725_setValue>
 8001ebe:	4603      	mov	r3, r0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	2000041c 	.word	0x2000041c

08001ecc <setValue_AO1>:

uint8_t setValue_AO1(uint16_t AO1_bit){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
	return MCP4725_setValue(&myMCP4725_AO1, AO1_bit, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8001ed6:	88f9      	ldrh	r1, [r7, #6]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2200      	movs	r2, #0
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <setValue_AO1+0x20>)
 8001ede:	f7ff f8e9 	bl	80010b4 <MCP4725_setValue>
 8001ee2:	4603      	mov	r3, r0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000438 	.word	0x20000438

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <Error_Handler+0x8>
	...

08001efc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f02:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <MX_SPI1_Init+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f48:	220a      	movs	r2, #10
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MX_SPI1_Init+0x64>)
 8001f4e:	f004 f80f 	bl	8005f70 <HAL_SPI_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f58:	f7ff ffca 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200005c4 	.word	0x200005c4
 8001f64:	40013000 	.word	0x40013000

08001f68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_SPI_MspInit+0x84>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12b      	bne.n	8001fe2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fc2:	23e0      	movs	r3, #224	; 0xe0
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <HAL_SPI_MspInit+0x8c>)
 8001fde:	f002 f8d9 	bl	8004194 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	3728      	adds	r7, #40	; 0x28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40013000 	.word	0x40013000
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_MspInit+0x4c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <HAL_MspInit+0x4c>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_MspInit+0x4c>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_MspInit+0x4c>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_MspInit+0x4c>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_MspInit+0x4c>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800204c:	e7fe      	b.n	800204c <NMI_Handler+0x4>

0800204e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <MemManage_Handler+0x4>

0800205a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <BusFault_Handler+0x4>

08002060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <UsageFault_Handler+0x4>

08002066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002094:	f000 ffb0 	bl	8002ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <DMA2_Stream0_IRQHandler+0x10>)
 80020a2:	f001 fe0d 	bl	8003cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000310 	.word	0x20000310

080020b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
	return 1;
 80020b4:	2301      	movs	r3, #1
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_kill>:

int _kill(int pid, int sig)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020ca:	f008 f933 	bl	800a334 <__errno>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2216      	movs	r2, #22
 80020d2:	601a      	str	r2, [r3, #0]
	return -1;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_exit>:

void _exit (int status)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ffe7 	bl	80020c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020f2:	e7fe      	b.n	80020f2 <_exit+0x12>

080020f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e00a      	b.n	800211c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002106:	f3af 8000 	nop.w
 800210a:	4601      	mov	r1, r0
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	b2ca      	uxtb	r2, r1
 8002114:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf0      	blt.n	8002106 <_read+0x12>
	}

return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e009      	b.n	8002154 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	60ba      	str	r2, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf1      	blt.n	8002140 <_write+0x12>
	}
	return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_close>:

int _close(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
	return -1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218e:	605a      	str	r2, [r3, #4]
	return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_isatty>:

int _isatty(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
	return 1;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
	return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f008 f898 	bl	800a334 <__errno>
 8002204:	4603      	mov	r3, r0
 8002206:	220c      	movs	r2, #12
 8002208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20020000 	.word	0x20020000
 8002230:	00000400 	.word	0x00000400
 8002234:	20000284 	.word	0x20000284
 8002238:	20000b30 	.word	0x20000b30

0800223c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <SystemInit+0x20>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <SystemInit+0x20>)
 8002248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800224c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b096      	sub	sp, #88	; 0x58
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002274:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	615a      	str	r2, [r3, #20]
 8002290:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2220      	movs	r2, #32
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f008 f875 	bl	800a388 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <MX_TIM1_Init+0x13c>)
 80022a0:	4a3f      	ldr	r2, [pc, #252]	; (80023a0 <MX_TIM1_Init+0x140>)
 80022a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 80022a4:	4b3d      	ldr	r3, [pc, #244]	; (800239c <MX_TIM1_Init+0x13c>)
 80022a6:	f240 124f 	movw	r2, #335	; 0x14f
 80022aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ac:	4b3b      	ldr	r3, [pc, #236]	; (800239c <MX_TIM1_Init+0x13c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80022b2:	4b3a      	ldr	r3, [pc, #232]	; (800239c <MX_TIM1_Init+0x13c>)
 80022b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ba:	4b38      	ldr	r3, [pc, #224]	; (800239c <MX_TIM1_Init+0x13c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 12;
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <MX_TIM1_Init+0x13c>)
 80022c2:	220c      	movs	r2, #12
 80022c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c6:	4b35      	ldr	r3, [pc, #212]	; (800239c <MX_TIM1_Init+0x13c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022cc:	4833      	ldr	r0, [pc, #204]	; (800239c <MX_TIM1_Init+0x13c>)
 80022ce:	f004 f945 	bl	800655c <HAL_TIM_Base_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80022d8:	f7ff fe0a 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022e6:	4619      	mov	r1, r3
 80022e8:	482c      	ldr	r0, [pc, #176]	; (800239c <MX_TIM1_Init+0x13c>)
 80022ea:	f004 fb69 	bl	80069c0 <HAL_TIM_ConfigClockSource>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80022f4:	f7ff fdfc 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022f8:	4828      	ldr	r0, [pc, #160]	; (800239c <MX_TIM1_Init+0x13c>)
 80022fa:	f004 f97e 	bl	80065fa <HAL_TIM_PWM_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002304:	f7ff fdf4 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002308:	2300      	movs	r3, #0
 800230a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002310:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002314:	4619      	mov	r1, r3
 8002316:	4821      	ldr	r0, [pc, #132]	; (800239c <MX_TIM1_Init+0x13c>)
 8002318:	f004 ff2a 	bl	8007170 <HAL_TIMEx_MasterConfigSynchronization>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002322:	f7ff fde5 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002326:	2360      	movs	r3, #96	; 0x60
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800232e:	2300      	movs	r3, #0
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002332:	2300      	movs	r3, #0
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002346:	2200      	movs	r2, #0
 8002348:	4619      	mov	r1, r3
 800234a:	4814      	ldr	r0, [pc, #80]	; (800239c <MX_TIM1_Init+0x13c>)
 800234c:	f004 fa76 	bl	800683c <HAL_TIM_PWM_ConfigChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002356:	f7ff fdcb 	bl	8001ef0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800236e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002372:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	4619      	mov	r1, r3
 800237c:	4807      	ldr	r0, [pc, #28]	; (800239c <MX_TIM1_Init+0x13c>)
 800237e:	f004 ff73 	bl	8007268 <HAL_TIMEx_ConfigBreakDeadTime>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002388:	f7ff fdb2 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <MX_TIM1_Init+0x13c>)
 800238e:	f000 f82b 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 8002392:	bf00      	nop
 8002394:	3758      	adds	r7, #88	; 0x58
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2000061c 	.word	0x2000061c
 80023a0:	40010000 	.word	0x40010000

080023a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <HAL_TIM_Base_MspInit+0x3c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d10d      	bne.n	80023d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_TIM_Base_MspInit+0x40>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <HAL_TIM_Base_MspInit+0x40>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <HAL_TIM_Base_MspInit+0x40>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40010000 	.word	0x40010000
 80023e4:	40023800 	.word	0x40023800

080023e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a12      	ldr	r2, [pc, #72]	; (8002450 <HAL_TIM_MspPostInit+0x68>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d11e      	bne.n	8002448 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_TIM_MspPostInit+0x6c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_TIM_MspPostInit+0x6c>)
 8002414:	f043 0310 	orr.w	r3, r3, #16
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_TIM_MspPostInit+0x6c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800242a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002438:	2301      	movs	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	4619      	mov	r1, r3
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <HAL_TIM_MspPostInit+0x70>)
 8002444:	f001 fea6 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002448:	bf00      	nop
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40010000 	.word	0x40010000
 8002454:	40023800 	.word	0x40023800
 8002458:	40021000 	.word	0x40021000

0800245c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_UART4_Init+0x4c>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <MX_UART4_Init+0x50>)
 8002464:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_UART4_Init+0x4c>)
 8002468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800246c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_UART4_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_UART4_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_UART4_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_UART4_Init+0x4c>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_UART4_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_UART4_Init+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_UART4_Init+0x4c>)
 8002494:	f004 ff3a 	bl	800730c <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800249e:	f7ff fd27 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000664 	.word	0x20000664
 80024ac:	40004c00 	.word	0x40004c00

080024b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_UART_MspInit+0x84>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d12c      	bne.n	800252c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <HAL_UART_MspInit+0x88>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a17      	ldr	r2, [pc, #92]	; (8002538 <HAL_UART_MspInit+0x88>)
 80024dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HAL_UART_MspInit+0x88>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_UART_MspInit+0x88>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a10      	ldr	r2, [pc, #64]	; (8002538 <HAL_UART_MspInit+0x88>)
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <HAL_UART_MspInit+0x88>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800250a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800250e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800251c:	2308      	movs	r3, #8
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <HAL_UART_MspInit+0x8c>)
 8002528:	f001 fe34 	bl	8004194 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800252c:	bf00      	nop
 800252e:	3728      	adds	r7, #40	; 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40004c00 	.word	0x40004c00
 8002538:	40023800 	.word	0x40023800
 800253c:	40020800 	.word	0x40020800

08002540 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002548:	f000 fd6a 	bl	8003020 <HAL_GetTick>
 800254c:	4603      	mov	r3, r0
 800254e:	4a04      	ldr	r2, [pc, #16]	; (8002560 <SPI_Timer_On+0x20>)
 8002550:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <SPI_Timer_On+0x24>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	200006a8 	.word	0x200006a8
 8002564:	200006ac 	.word	0x200006ac

08002568 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800256c:	f000 fd58 	bl	8003020 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <SPI_Timer_Status+0x24>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	1ad2      	subs	r2, r2, r3
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <SPI_Timer_Status+0x28>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	bf34      	ite	cc
 8002580:	2301      	movcc	r3, #1
 8002582:	2300      	movcs	r3, #0
 8002584:	b2db      	uxtb	r3, r3
}
 8002586:	4618      	mov	r0, r3
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200006a8 	.word	0x200006a8
 8002590:	200006ac 	.word	0x200006ac

08002594 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af02      	add	r7, sp, #8
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi1, &dat, &rxDat, 1, 50);
 800259e:	f107 020f 	add.w	r2, r7, #15
 80025a2:	1df9      	adds	r1, r7, #7
 80025a4:	2332      	movs	r3, #50	; 0x32
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2301      	movs	r3, #1
 80025aa:	4804      	ldr	r0, [pc, #16]	; (80025bc <xchg_spi+0x28>)
 80025ac:	f003 fd69 	bl	8006082 <HAL_SPI_TransmitReceive>
    return rxDat;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200005c4 	.word	0x200005c4

080025c0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	e00a      	b.n	80025e6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	18d4      	adds	r4, r2, r3
 80025d6:	20ff      	movs	r0, #255	; 0xff
 80025d8:	f7ff ffdc 	bl	8002594 <xchg_spi>
 80025dc:	4603      	mov	r3, r0
 80025de:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3301      	adds	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d3f0      	bcc.n	80025d0 <rcvr_spi_multi+0x10>
	}
}
 80025ee:	bf00      	nop
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}

080025f8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e009      	b.n	800261c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ffbf 	bl	8002594 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3301      	adds	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d3f1      	bcc.n	8002608 <xmit_spi_multi+0x10>
	}
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002636:	f000 fcf3 	bl	8003020 <HAL_GetTick>
 800263a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002640:	20ff      	movs	r0, #255	; 0xff
 8002642:	f7ff ffa7 	bl	8002594 <xchg_spi>
 8002646:	4603      	mov	r3, r0
 8002648:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2bff      	cmp	r3, #255	; 0xff
 800264e:	d007      	beq.n	8002660 <wait_ready+0x32>
 8002650:	f000 fce6 	bl	8003020 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d8ef      	bhi.n	8002640 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2bff      	cmp	r3, #255	; 0xff
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002678:	2201      	movs	r2, #1
 800267a:	2110      	movs	r1, #16
 800267c:	4803      	ldr	r0, [pc, #12]	; (800268c <despiselect+0x18>)
 800267e:	f001 ff25 	bl	80044cc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002682:	20ff      	movs	r0, #255	; 0xff
 8002684:	f7ff ff86 	bl	8002594 <xchg_spi>

}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40020000 	.word	0x40020000

08002690 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002694:	2200      	movs	r2, #0
 8002696:	2110      	movs	r1, #16
 8002698:	4809      	ldr	r0, [pc, #36]	; (80026c0 <spiselect+0x30>)
 800269a:	f001 ff17 	bl	80044cc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800269e:	20ff      	movs	r0, #255	; 0xff
 80026a0:	f7ff ff78 	bl	8002594 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80026a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026a8:	f7ff ffc1 	bl	800262e <wait_ready>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <spiselect+0x26>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e002      	b.n	80026bc <spiselect+0x2c>

	despiselect();
 80026b6:	f7ff ffdd 	bl	8002674 <despiselect>
	return 0;	/* Timeout */
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40020000 	.word	0x40020000

080026c4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80026ce:	20c8      	movs	r0, #200	; 0xc8
 80026d0:	f7ff ff36 	bl	8002540 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80026d4:	20ff      	movs	r0, #255	; 0xff
 80026d6:	f7ff ff5d 	bl	8002594 <xchg_spi>
 80026da:	4603      	mov	r3, r0
 80026dc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	2bff      	cmp	r3, #255	; 0xff
 80026e2:	d104      	bne.n	80026ee <rcvr_datablock+0x2a>
 80026e4:	f7ff ff40 	bl	8002568 <SPI_Timer_Status>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f2      	bne.n	80026d4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	2bfe      	cmp	r3, #254	; 0xfe
 80026f2:	d001      	beq.n	80026f8 <rcvr_datablock+0x34>
 80026f4:	2300      	movs	r3, #0
 80026f6:	e00a      	b.n	800270e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80026f8:	6839      	ldr	r1, [r7, #0]
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ff60 	bl	80025c0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002700:	20ff      	movs	r0, #255	; 0xff
 8002702:	f7ff ff47 	bl	8002594 <xchg_spi>
 8002706:	20ff      	movs	r0, #255	; 0xff
 8002708:	f7ff ff44 	bl	8002594 <xchg_spi>

	return 1;						/* Function succeeded */
 800270c:	2301      	movs	r3, #1
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002722:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002726:	f7ff ff82 	bl	800262e <wait_ready>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <xmit_datablock+0x1e>
 8002730:	2300      	movs	r3, #0
 8002732:	e01e      	b.n	8002772 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff2c 	bl	8002594 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	2bfd      	cmp	r3, #253	; 0xfd
 8002740:	d016      	beq.n	8002770 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002742:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ff56 	bl	80025f8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800274c:	20ff      	movs	r0, #255	; 0xff
 800274e:	f7ff ff21 	bl	8002594 <xchg_spi>
 8002752:	20ff      	movs	r0, #255	; 0xff
 8002754:	f7ff ff1e 	bl	8002594 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002758:	20ff      	movs	r0, #255	; 0xff
 800275a:	f7ff ff1b 	bl	8002594 <xchg_spi>
 800275e:	4603      	mov	r3, r0
 8002760:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2b05      	cmp	r3, #5
 800276a:	d001      	beq.n	8002770 <xmit_datablock+0x5a>
 800276c:	2300      	movs	r3, #0
 800276e:	e000      	b.n	8002772 <xmit_datablock+0x5c>
	}
	return 1;
 8002770:	2301      	movs	r3, #1
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	6039      	str	r1, [r7, #0]
 8002784:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	da0e      	bge.n	80027ac <send_cmd+0x32>
		cmd &= 0x7F;
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002794:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002796:	2100      	movs	r1, #0
 8002798:	2037      	movs	r0, #55	; 0x37
 800279a:	f7ff ffee 	bl	800277a <send_cmd>
 800279e:	4603      	mov	r3, r0
 80027a0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80027a2:	7bbb      	ldrb	r3, [r7, #14]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d901      	bls.n	80027ac <send_cmd+0x32>
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
 80027aa:	e051      	b.n	8002850 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d008      	beq.n	80027c4 <send_cmd+0x4a>
		despiselect();
 80027b2:	f7ff ff5f 	bl	8002674 <despiselect>
		if (!spiselect()) return 0xFF;
 80027b6:	f7ff ff6b 	bl	8002690 <spiselect>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <send_cmd+0x4a>
 80027c0:	23ff      	movs	r3, #255	; 0xff
 80027c2:	e045      	b.n	8002850 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fee1 	bl	8002594 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	0e1b      	lsrs	r3, r3, #24
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fedb 	bl	8002594 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fed5 	bl	8002594 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fecf 	bl	8002594 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff feca 	bl	8002594 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <send_cmd+0x94>
 800280a:	2395      	movs	r3, #149	; 0x95
 800280c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d101      	bne.n	8002818 <send_cmd+0x9e>
 8002814:	2387      	movs	r3, #135	; 0x87
 8002816:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff feba 	bl	8002594 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d102      	bne.n	800282c <send_cmd+0xb2>
 8002826:	20ff      	movs	r0, #255	; 0xff
 8002828:	f7ff feb4 	bl	8002594 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800282c:	230a      	movs	r3, #10
 800282e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002830:	20ff      	movs	r0, #255	; 0xff
 8002832:	f7ff feaf 	bl	8002594 <xchg_spi>
 8002836:	4603      	mov	r3, r0
 8002838:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800283a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800283e:	2b00      	cmp	r3, #0
 8002840:	da05      	bge.n	800284e <send_cmd+0xd4>
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	3b01      	subs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <send_cmd+0xb6>

	return res;							/* Return received response */
 800284e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <USER_SPI_initialize+0x14>
 8002868:	2301      	movs	r3, #1
 800286a:	e0d6      	b.n	8002a1a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800286c:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <USER_SPI_initialize+0x1cc>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <USER_SPI_initialize+0x2a>
 800287a:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <USER_SPI_initialize+0x1cc>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	e0cb      	b.n	8002a1a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002882:	4b69      	ldr	r3, [pc, #420]	; (8002a28 <USER_SPI_initialize+0x1d0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800288c:	4b66      	ldr	r3, [pc, #408]	; (8002a28 <USER_SPI_initialize+0x1d0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002894:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002896:	230a      	movs	r3, #10
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	e005      	b.n	80028a8 <USER_SPI_initialize+0x50>
 800289c:	20ff      	movs	r0, #255	; 0xff
 800289e:	f7ff fe79 	bl	8002594 <xchg_spi>
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f6      	bne.n	800289c <USER_SPI_initialize+0x44>

	ty = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80028b2:	2100      	movs	r1, #0
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7ff ff60 	bl	800277a <send_cmd>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b01      	cmp	r3, #1
 80028be:	f040 808b 	bne.w	80029d8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80028c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028c6:	f7ff fe3b 	bl	8002540 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80028ca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80028ce:	2008      	movs	r0, #8
 80028d0:	f7ff ff53 	bl	800277a <send_cmd>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d151      	bne.n	800297e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80028da:	2300      	movs	r3, #0
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	e00d      	b.n	80028fc <USER_SPI_initialize+0xa4>
 80028e0:	7bfc      	ldrb	r4, [r7, #15]
 80028e2:	20ff      	movs	r0, #255	; 0xff
 80028e4:	f7ff fe56 	bl	8002594 <xchg_spi>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	4423      	add	r3, r4
 80028f2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	3301      	adds	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d9ee      	bls.n	80028e0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002902:	7abb      	ldrb	r3, [r7, #10]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d167      	bne.n	80029d8 <USER_SPI_initialize+0x180>
 8002908:	7afb      	ldrb	r3, [r7, #11]
 800290a:	2baa      	cmp	r3, #170	; 0xaa
 800290c:	d164      	bne.n	80029d8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800290e:	bf00      	nop
 8002910:	f7ff fe2a 	bl	8002568 <SPI_Timer_Status>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <USER_SPI_initialize+0xd2>
 800291a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800291e:	20a9      	movs	r0, #169	; 0xa9
 8002920:	f7ff ff2b 	bl	800277a <send_cmd>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f2      	bne.n	8002910 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800292a:	f7ff fe1d 	bl	8002568 <SPI_Timer_Status>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d051      	beq.n	80029d8 <USER_SPI_initialize+0x180>
 8002934:	2100      	movs	r1, #0
 8002936:	203a      	movs	r0, #58	; 0x3a
 8002938:	f7ff ff1f 	bl	800277a <send_cmd>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d14a      	bne.n	80029d8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	e00d      	b.n	8002964 <USER_SPI_initialize+0x10c>
 8002948:	7bfc      	ldrb	r4, [r7, #15]
 800294a:	20ff      	movs	r0, #255	; 0xff
 800294c:	f7ff fe22 	bl	8002594 <xchg_spi>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	f107 0310 	add.w	r3, r7, #16
 8002958:	4423      	add	r3, r4
 800295a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	3301      	adds	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d9ee      	bls.n	8002948 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800296a:	7a3b      	ldrb	r3, [r7, #8]
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <USER_SPI_initialize+0x120>
 8002974:	230c      	movs	r3, #12
 8002976:	e000      	b.n	800297a <USER_SPI_initialize+0x122>
 8002978:	2304      	movs	r3, #4
 800297a:	737b      	strb	r3, [r7, #13]
 800297c:	e02c      	b.n	80029d8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800297e:	2100      	movs	r1, #0
 8002980:	20a9      	movs	r0, #169	; 0xa9
 8002982:	f7ff fefa 	bl	800277a <send_cmd>
 8002986:	4603      	mov	r3, r0
 8002988:	2b01      	cmp	r3, #1
 800298a:	d804      	bhi.n	8002996 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800298c:	2302      	movs	r3, #2
 800298e:	737b      	strb	r3, [r7, #13]
 8002990:	23a9      	movs	r3, #169	; 0xa9
 8002992:	73bb      	strb	r3, [r7, #14]
 8002994:	e003      	b.n	800299e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002996:	2301      	movs	r3, #1
 8002998:	737b      	strb	r3, [r7, #13]
 800299a:	2301      	movs	r3, #1
 800299c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800299e:	bf00      	nop
 80029a0:	f7ff fde2 	bl	8002568 <SPI_Timer_Status>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <USER_SPI_initialize+0x162>
 80029aa:	7bbb      	ldrb	r3, [r7, #14]
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fee3 	bl	800277a <send_cmd>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f2      	bne.n	80029a0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80029ba:	f7ff fdd5 	bl	8002568 <SPI_Timer_Status>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <USER_SPI_initialize+0x17c>
 80029c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029c8:	2010      	movs	r0, #16
 80029ca:	f7ff fed6 	bl	800277a <send_cmd>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <USER_SPI_initialize+0x180>
				ty = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80029d8:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <USER_SPI_initialize+0x1d4>)
 80029da:	7b7b      	ldrb	r3, [r7, #13]
 80029dc:	7013      	strb	r3, [r2, #0]
	despiselect();
 80029de:	f7ff fe49 	bl	8002674 <despiselect>

	if (ty) {			/* OK */
 80029e2:	7b7b      	ldrb	r3, [r7, #13]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d012      	beq.n	8002a0e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <USER_SPI_initialize+0x1d0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <USER_SPI_initialize+0x1d0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0210 	orr.w	r2, r2, #16
 80029fa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <USER_SPI_initialize+0x1cc>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <USER_SPI_initialize+0x1cc>)
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	e002      	b.n	8002a14 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <USER_SPI_initialize+0x1cc>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <USER_SPI_initialize+0x1cc>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000058 	.word	0x20000058
 8002a28:	200005c4 	.word	0x200005c4
 8002a2c:	20000288 	.word	0x20000288

08002a30 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <USER_SPI_status+0x14>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e002      	b.n	8002a4a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <USER_SPI_status+0x28>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b2db      	uxtb	r3, r3
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000058 	.word	0x20000058

08002a5c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	4603      	mov	r3, r0
 8002a6a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <USER_SPI_read+0x1c>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <USER_SPI_read+0x20>
 8002a78:	2304      	movs	r3, #4
 8002a7a:	e04d      	b.n	8002b18 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <USER_SPI_read+0xc4>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <USER_SPI_read+0x32>
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e044      	b.n	8002b18 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002a8e:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <USER_SPI_read+0xc8>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <USER_SPI_read+0x44>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	025b      	lsls	r3, r3, #9
 8002a9e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d111      	bne.n	8002aca <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	2011      	movs	r0, #17
 8002aaa:	f7ff fe66 	bl	800277a <send_cmd>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d129      	bne.n	8002b08 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ab8:	68b8      	ldr	r0, [r7, #8]
 8002aba:	f7ff fe03 	bl	80026c4 <rcvr_datablock>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d021      	beq.n	8002b08 <USER_SPI_read+0xac>
			count = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	e01e      	b.n	8002b08 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	2012      	movs	r0, #18
 8002ace:	f7ff fe54 	bl	800277a <send_cmd>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d117      	bne.n	8002b08 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002adc:	68b8      	ldr	r0, [r7, #8]
 8002ade:	f7ff fdf1 	bl	80026c4 <rcvr_datablock>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <USER_SPI_read+0xa2>
				buff += 512;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002aee:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1ed      	bne.n	8002ad8 <USER_SPI_read+0x7c>
 8002afc:	e000      	b.n	8002b00 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8002afe:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002b00:	2100      	movs	r1, #0
 8002b02:	200c      	movs	r0, #12
 8002b04:	f7ff fe39 	bl	800277a <send_cmd>
		}
	}
	despiselect();
 8002b08:	f7ff fdb4 	bl	8002674 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf14      	ite	ne
 8002b12:	2301      	movne	r3, #1
 8002b14:	2300      	moveq	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000058 	.word	0x20000058
 8002b24:	20000288 	.word	0x20000288

08002b28 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <USER_SPI_write+0x1c>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <USER_SPI_write+0x20>
 8002b44:	2304      	movs	r3, #4
 8002b46:	e063      	b.n	8002c10 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002b48:	4b33      	ldr	r3, [pc, #204]	; (8002c18 <USER_SPI_write+0xf0>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <USER_SPI_write+0x32>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e05a      	b.n	8002c10 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <USER_SPI_write+0xf0>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <USER_SPI_write+0x44>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e051      	b.n	8002c10 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <USER_SPI_write+0xf4>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <USER_SPI_write+0x56>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	025b      	lsls	r3, r3, #9
 8002b7c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d110      	bne.n	8002ba6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	2018      	movs	r0, #24
 8002b88:	f7ff fdf7 	bl	800277a <send_cmd>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d136      	bne.n	8002c00 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002b92:	21fe      	movs	r1, #254	; 0xfe
 8002b94:	68b8      	ldr	r0, [r7, #8]
 8002b96:	f7ff fdbe 	bl	8002716 <xmit_datablock>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d02f      	beq.n	8002c00 <USER_SPI_write+0xd8>
			count = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	e02c      	b.n	8002c00 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <USER_SPI_write+0xf4>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	f003 0306 	and.w	r3, r3, #6
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <USER_SPI_write+0x92>
 8002bb2:	6839      	ldr	r1, [r7, #0]
 8002bb4:	2097      	movs	r0, #151	; 0x97
 8002bb6:	f7ff fde0 	bl	800277a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	2019      	movs	r0, #25
 8002bbe:	f7ff fddc 	bl	800277a <send_cmd>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d11b      	bne.n	8002c00 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002bc8:	21fc      	movs	r1, #252	; 0xfc
 8002bca:	68b8      	ldr	r0, [r7, #8]
 8002bcc:	f7ff fda3 	bl	8002716 <xmit_datablock>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <USER_SPI_write+0xc4>
				buff += 512;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002bdc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ee      	bne.n	8002bc8 <USER_SPI_write+0xa0>
 8002bea:	e000      	b.n	8002bee <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002bec:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002bee:	21fd      	movs	r1, #253	; 0xfd
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7ff fd90 	bl	8002716 <xmit_datablock>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <USER_SPI_write+0xd8>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002c00:	f7ff fd38 	bl	8002674 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	b2db      	uxtb	r3, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000058 	.word	0x20000058
 8002c1c:	20000288 	.word	0x20000288

08002c20 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	603a      	str	r2, [r7, #0]
 8002c2a:	71fb      	strb	r3, [r7, #7]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <USER_SPI_ioctl+0x1a>
 8002c36:	2304      	movs	r3, #4
 8002c38:	e15a      	b.n	8002ef0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002c3a:	4baf      	ldr	r3, [pc, #700]	; (8002ef8 <USER_SPI_ioctl+0x2d8>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <USER_SPI_ioctl+0x2c>
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e151      	b.n	8002ef0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8002c52:	79bb      	ldrb	r3, [r7, #6]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	f200 8136 	bhi.w	8002ec6 <USER_SPI_ioctl+0x2a6>
 8002c5a:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <USER_SPI_ioctl+0x40>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c75 	.word	0x08002c75
 8002c64:	08002c89 	.word	0x08002c89
 8002c68:	08002ec7 	.word	0x08002ec7
 8002c6c:	08002d35 	.word	0x08002d35
 8002c70:	08002e2b 	.word	0x08002e2b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002c74:	f7ff fd0c 	bl	8002690 <spiselect>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 8127 	beq.w	8002ece <USER_SPI_ioctl+0x2ae>
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002c86:	e122      	b.n	8002ece <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002c88:	2100      	movs	r1, #0
 8002c8a:	2009      	movs	r0, #9
 8002c8c:	f7ff fd75 	bl	800277a <send_cmd>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 811d 	bne.w	8002ed2 <USER_SPI_ioctl+0x2b2>
 8002c98:	f107 030c 	add.w	r3, r7, #12
 8002c9c:	2110      	movs	r1, #16
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fd10 	bl	80026c4 <rcvr_datablock>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8113 	beq.w	8002ed2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002cac:	7b3b      	ldrb	r3, [r7, #12]
 8002cae:	099b      	lsrs	r3, r3, #6
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d111      	bne.n	8002cda <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002cb6:	7d7b      	ldrb	r3, [r7, #21]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	7d3b      	ldrb	r3, [r7, #20]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	4413      	add	r3, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	7cfb      	ldrb	r3, [r7, #19]
 8002cc4:	041b      	lsls	r3, r3, #16
 8002cc6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002cca:	4413      	add	r3, r2
 8002ccc:	3301      	adds	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	029a      	lsls	r2, r3, #10
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e028      	b.n	8002d2c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002cda:	7c7b      	ldrb	r3, [r7, #17]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	7dbb      	ldrb	r3, [r7, #22]
 8002ce4:	09db      	lsrs	r3, r3, #7
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	7d7b      	ldrb	r3, [r7, #21]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 0306 	and.w	r3, r3, #6
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002d02:	7d3b      	ldrb	r3, [r7, #20]
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	441a      	add	r2, r3
 8002d10:	7cbb      	ldrb	r3, [r7, #18]
 8002d12:	029b      	lsls	r3, r3, #10
 8002d14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d18:	4413      	add	r3, r2
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002d1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d22:	3b09      	subs	r3, #9
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	409a      	lsls	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002d32:	e0ce      	b.n	8002ed2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002d34:	4b71      	ldr	r3, [pc, #452]	; (8002efc <USER_SPI_ioctl+0x2dc>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d031      	beq.n	8002da4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002d40:	2100      	movs	r1, #0
 8002d42:	208d      	movs	r0, #141	; 0x8d
 8002d44:	f7ff fd19 	bl	800277a <send_cmd>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 80c3 	bne.w	8002ed6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002d50:	20ff      	movs	r0, #255	; 0xff
 8002d52:	f7ff fc1f 	bl	8002594 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	2110      	movs	r1, #16
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fcb1 	bl	80026c4 <rcvr_datablock>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80b6 	beq.w	8002ed6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002d6a:	2330      	movs	r3, #48	; 0x30
 8002d6c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002d70:	e007      	b.n	8002d82 <USER_SPI_ioctl+0x162>
 8002d72:	20ff      	movs	r0, #255	; 0xff
 8002d74:	f7ff fc0e 	bl	8002594 <xchg_spi>
 8002d78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002d82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f3      	bne.n	8002d72 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002d8a:	7dbb      	ldrb	r3, [r7, #22]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	2310      	movs	r3, #16
 8002d94:	fa03 f202 	lsl.w	r2, r3, r2
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002da2:	e098      	b.n	8002ed6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002da4:	2100      	movs	r1, #0
 8002da6:	2009      	movs	r0, #9
 8002da8:	f7ff fce7 	bl	800277a <send_cmd>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 8091 	bne.w	8002ed6 <USER_SPI_ioctl+0x2b6>
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	2110      	movs	r1, #16
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fc82 	bl	80026c4 <rcvr_datablock>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8087 	beq.w	8002ed6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002dc8:	4b4c      	ldr	r3, [pc, #304]	; (8002efc <USER_SPI_ioctl+0x2dc>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d012      	beq.n	8002dfa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002dd4:	7dbb      	ldrb	r3, [r7, #22]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002ddc:	7dfa      	ldrb	r2, [r7, #23]
 8002dde:	09d2      	lsrs	r2, r2, #7
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	4413      	add	r3, r2
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	7e7b      	ldrb	r3, [r7, #25]
 8002de8:	099b      	lsrs	r3, r3, #6
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	e013      	b.n	8002e22 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002dfa:	7dbb      	ldrb	r3, [r7, #22]
 8002dfc:	109b      	asrs	r3, r3, #2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	3301      	adds	r3, #1
 8002e06:	7dfa      	ldrb	r2, [r7, #23]
 8002e08:	00d2      	lsls	r2, r2, #3
 8002e0a:	f002 0218 	and.w	r2, r2, #24
 8002e0e:	7df9      	ldrb	r1, [r7, #23]
 8002e10:	0949      	lsrs	r1, r1, #5
 8002e12:	b2c9      	uxtb	r1, r1
 8002e14:	440a      	add	r2, r1
 8002e16:	3201      	adds	r2, #1
 8002e18:	fb02 f303 	mul.w	r3, r2, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002e28:	e055      	b.n	8002ed6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002e2a:	4b34      	ldr	r3, [pc, #208]	; (8002efc <USER_SPI_ioctl+0x2dc>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	f003 0306 	and.w	r3, r3, #6
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d051      	beq.n	8002eda <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002e36:	f107 020c 	add.w	r2, r7, #12
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	210b      	movs	r1, #11
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff feee 	bl	8002c20 <USER_SPI_ioctl>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d149      	bne.n	8002ede <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002e4a:	7b3b      	ldrb	r3, [r7, #12]
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <USER_SPI_ioctl+0x23e>
 8002e54:	7dbb      	ldrb	r3, [r7, #22]
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d041      	beq.n	8002ee2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	623b      	str	r3, [r7, #32]
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002e6e:	4b23      	ldr	r3, [pc, #140]	; (8002efc <USER_SPI_ioctl+0x2dc>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d105      	bne.n	8002e86 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	025b      	lsls	r3, r3, #9
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	025b      	lsls	r3, r3, #9
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e88:	2020      	movs	r0, #32
 8002e8a:	f7ff fc76 	bl	800277a <send_cmd>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d128      	bne.n	8002ee6 <USER_SPI_ioctl+0x2c6>
 8002e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e96:	2021      	movs	r0, #33	; 0x21
 8002e98:	f7ff fc6f 	bl	800277a <send_cmd>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d121      	bne.n	8002ee6 <USER_SPI_ioctl+0x2c6>
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	2026      	movs	r0, #38	; 0x26
 8002ea6:	f7ff fc68 	bl	800277a <send_cmd>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d11a      	bne.n	8002ee6 <USER_SPI_ioctl+0x2c6>
 8002eb0:	f247 5030 	movw	r0, #30000	; 0x7530
 8002eb4:	f7ff fbbb 	bl	800262e <wait_ready>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d013      	beq.n	8002ee6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002ec4:	e00f      	b.n	8002ee6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002ecc:	e00c      	b.n	8002ee8 <USER_SPI_ioctl+0x2c8>
		break;
 8002ece:	bf00      	nop
 8002ed0:	e00a      	b.n	8002ee8 <USER_SPI_ioctl+0x2c8>
		break;
 8002ed2:	bf00      	nop
 8002ed4:	e008      	b.n	8002ee8 <USER_SPI_ioctl+0x2c8>
		break;
 8002ed6:	bf00      	nop
 8002ed8:	e006      	b.n	8002ee8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002eda:	bf00      	nop
 8002edc:	e004      	b.n	8002ee8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <USER_SPI_ioctl+0x2c8>
		break;
 8002ee6:	bf00      	nop
	}

	despiselect();
 8002ee8:	f7ff fbc4 	bl	8002674 <despiselect>

	return res;
 8002eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3730      	adds	r7, #48	; 0x30
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000058 	.word	0x20000058
 8002efc:	20000288 	.word	0x20000288

08002f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f06:	490e      	ldr	r1, [pc, #56]	; (8002f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f08:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f0c:	e002      	b.n	8002f14 <LoopCopyDataInit>

08002f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f12:	3304      	adds	r3, #4

08002f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f18:	d3f9      	bcc.n	8002f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f1c:	4c0b      	ldr	r4, [pc, #44]	; (8002f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f20:	e001      	b.n	8002f26 <LoopFillZerobss>

08002f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f24:	3204      	adds	r2, #4

08002f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f28:	d3fb      	bcc.n	8002f22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f2a:	f7ff f987 	bl	800223c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2e:	f007 fa07 	bl	800a340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f32:	f7fe fc3f 	bl	80017b4 <main>
  bx  lr    
 8002f36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f40:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8002f44:	0800fe68 	.word	0x0800fe68
  ldr r2, =_sbss
 8002f48:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8002f4c:	20000b2c 	.word	0x20000b2c

08002f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f50:	e7fe      	b.n	8002f50 <ADC_IRQHandler>
	...

08002f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <HAL_Init+0x40>)
 8002f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HAL_Init+0x40>)
 8002f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <HAL_Init+0x40>)
 8002f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	f000 fd57 	bl	8003a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f82:	200f      	movs	r0, #15
 8002f84:	f000 f808 	bl	8002f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f88:	f7ff f836 	bl	8001ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023c00 	.word	0x40023c00

08002f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_InitTick+0x54>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_InitTick+0x58>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fd6f 	bl	8003a9a <HAL_SYSTICK_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e00e      	b.n	8002fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b0f      	cmp	r3, #15
 8002fca:	d80a      	bhi.n	8002fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	f000 fd37 	bl	8003a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd8:	4a06      	ldr	r2, [pc, #24]	; (8002ff4 <HAL_InitTick+0x5c>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e000      	b.n	8002fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000054 	.word	0x20000054
 8002ff0:	20000060 	.word	0x20000060
 8002ff4:	2000005c 	.word	0x2000005c

08002ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_IncTick+0x20>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_IncTick+0x24>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4413      	add	r3, r2
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_IncTick+0x24>)
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000060 	.word	0x20000060
 800301c:	200006b0 	.word	0x200006b0

08003020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return uwTick;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_GetTick+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	200006b0 	.word	0x200006b0

08003038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff ffee 	bl	8003020 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d005      	beq.n	800305e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_Delay+0x44>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800305e:	bf00      	nop
 8003060:	f7ff ffde 	bl	8003020 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d8f7      	bhi.n	8003060 <HAL_Delay+0x28>
  {
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000060 	.word	0x20000060

08003080 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e033      	b.n	80030fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe f994 	bl	80013cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030c6:	f023 0302 	bic.w	r3, r3, #2
 80030ca:	f043 0202 	orr.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa5e 	bl	8003594 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
 80030ee:	e001      	b.n	80030f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_ADC_Start_DMA+0x1e>
 8003122:	2302      	movs	r3, #2
 8003124:	e0e9      	b.n	80032fa <HAL_ADC_Start_DMA+0x1f2>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d018      	beq.n	800316e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800314c:	4b6d      	ldr	r3, [pc, #436]	; (8003304 <HAL_ADC_Start_DMA+0x1fc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a6d      	ldr	r2, [pc, #436]	; (8003308 <HAL_ADC_Start_DMA+0x200>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0c9a      	lsrs	r2, r3, #18
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003160:	e002      	b.n	8003168 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	3b01      	subs	r3, #1
 8003166:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f9      	bne.n	8003162 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317c:	d107      	bne.n	800318e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800318c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	f040 80a1 	bne.w	80032e0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031dc:	d106      	bne.n	80031ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	f023 0206 	bic.w	r2, r3, #6
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	645a      	str	r2, [r3, #68]	; 0x44
 80031ea:	e002      	b.n	80031f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031fa:	4b44      	ldr	r3, [pc, #272]	; (800330c <HAL_ADC_Start_DMA+0x204>)
 80031fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	4a43      	ldr	r2, [pc, #268]	; (8003310 <HAL_ADC_Start_DMA+0x208>)
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	4a42      	ldr	r2, [pc, #264]	; (8003314 <HAL_ADC_Start_DMA+0x20c>)
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	4a41      	ldr	r2, [pc, #260]	; (8003318 <HAL_ADC_Start_DMA+0x210>)
 8003214:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800321e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800322e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800323e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	334c      	adds	r3, #76	; 0x4c
 800324a:	4619      	mov	r1, r3
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f000 fcde 	bl	8003c10 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	2b00      	cmp	r3, #0
 800325e:	d12a      	bne.n	80032b6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a2d      	ldr	r2, [pc, #180]	; (800331c <HAL_ADC_Start_DMA+0x214>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d015      	beq.n	8003296 <HAL_ADC_Start_DMA+0x18e>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <HAL_ADC_Start_DMA+0x218>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d105      	bne.n	8003280 <HAL_ADC_Start_DMA+0x178>
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <HAL_ADC_Start_DMA+0x204>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a27      	ldr	r2, [pc, #156]	; (8003324 <HAL_ADC_Start_DMA+0x21c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d136      	bne.n	80032f8 <HAL_ADC_Start_DMA+0x1f0>
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_ADC_Start_DMA+0x204>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	d130      	bne.n	80032f8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d129      	bne.n	80032f8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	e020      	b.n	80032f8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a18      	ldr	r2, [pc, #96]	; (800331c <HAL_ADC_Start_DMA+0x214>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d11b      	bne.n	80032f8 <HAL_ADC_Start_DMA+0x1f0>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d114      	bne.n	80032f8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	e00b      	b.n	80032f8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f043 0210 	orr.w	r2, r3, #16
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	f043 0201 	orr.w	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000054 	.word	0x20000054
 8003308:	431bde83 	.word	0x431bde83
 800330c:	40012300 	.word	0x40012300
 8003310:	0800378d 	.word	0x0800378d
 8003314:	08003847 	.word	0x08003847
 8003318:	08003863 	.word	0x08003863
 800331c:	40012000 	.word	0x40012000
 8003320:	40012100 	.word	0x40012100
 8003324:	40012200 	.word	0x40012200

08003328 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1c>
 8003368:	2302      	movs	r3, #2
 800336a:	e105      	b.n	8003578 <HAL_ADC_ConfigChannel+0x228>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b09      	cmp	r3, #9
 800337a:	d925      	bls.n	80033c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	3b1e      	subs	r3, #30
 8003392:	2207      	movs	r2, #7
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43da      	mvns	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	400a      	ands	r2, r1
 80033a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68d9      	ldr	r1, [r3, #12]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	4603      	mov	r3, r0
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4403      	add	r3, r0
 80033ba:	3b1e      	subs	r3, #30
 80033bc:	409a      	lsls	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e022      	b.n	800340e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6919      	ldr	r1, [r3, #16]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	2207      	movs	r2, #7
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	400a      	ands	r2, r1
 80033ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6919      	ldr	r1, [r3, #16]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4618      	mov	r0, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4403      	add	r3, r0
 8003404:	409a      	lsls	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d824      	bhi.n	8003460 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	3b05      	subs	r3, #5
 8003428:	221f      	movs	r2, #31
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	400a      	ands	r2, r1
 8003436:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	4618      	mov	r0, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	3b05      	subs	r3, #5
 8003452:	fa00 f203 	lsl.w	r2, r0, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	635a      	str	r2, [r3, #52]	; 0x34
 800345e:	e04c      	b.n	80034fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	d824      	bhi.n	80034b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	3b23      	subs	r3, #35	; 0x23
 800347a:	221f      	movs	r2, #31
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43da      	mvns	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	400a      	ands	r2, r1
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	b29b      	uxth	r3, r3
 8003496:	4618      	mov	r0, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	3b23      	subs	r3, #35	; 0x23
 80034a4:	fa00 f203 	lsl.w	r2, r0, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
 80034b0:	e023      	b.n	80034fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	3b41      	subs	r3, #65	; 0x41
 80034c4:	221f      	movs	r2, #31
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	400a      	ands	r2, r1
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4618      	mov	r0, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	3b41      	subs	r3, #65	; 0x41
 80034ee:	fa00 f203 	lsl.w	r2, r0, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_ADC_ConfigChannel+0x234>)
 80034fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a21      	ldr	r2, [pc, #132]	; (8003588 <HAL_ADC_ConfigChannel+0x238>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d109      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1cc>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b12      	cmp	r3, #18
 800350e:	d105      	bne.n	800351c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a19      	ldr	r2, [pc, #100]	; (8003588 <HAL_ADC_ConfigChannel+0x238>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d123      	bne.n	800356e <HAL_ADC_ConfigChannel+0x21e>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b10      	cmp	r3, #16
 800352c:	d003      	beq.n	8003536 <HAL_ADC_ConfigChannel+0x1e6>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b11      	cmp	r3, #17
 8003534:	d11b      	bne.n	800356e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b10      	cmp	r3, #16
 8003548:	d111      	bne.n	800356e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_ADC_ConfigChannel+0x23c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a10      	ldr	r2, [pc, #64]	; (8003590 <HAL_ADC_ConfigChannel+0x240>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	0c9a      	lsrs	r2, r3, #18
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003560:	e002      	b.n	8003568 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	3b01      	subs	r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f9      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40012300 	.word	0x40012300
 8003588:	40012000 	.word	0x40012000
 800358c:	20000054 	.word	0x20000054
 8003590:	431bde83 	.word	0x431bde83

08003594 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800359c:	4b79      	ldr	r3, [pc, #484]	; (8003784 <ADC_Init+0x1f0>)
 800359e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	021a      	lsls	r2, r3, #8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6899      	ldr	r1, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	4a58      	ldr	r2, [pc, #352]	; (8003788 <ADC_Init+0x1f4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d022      	beq.n	8003672 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800363a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800365c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	e00f      	b.n	8003692 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003690:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0202 	bic.w	r2, r2, #2
 80036a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7e1b      	ldrb	r3, [r3, #24]
 80036ac:	005a      	lsls	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	3b01      	subs	r3, #1
 80036ec:	035a      	lsls	r2, r3, #13
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	e007      	b.n	8003708 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003706:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	3b01      	subs	r3, #1
 8003724:	051a      	lsls	r2, r3, #20
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800373c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800374a:	025a      	lsls	r2, r3, #9
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	029a      	lsls	r2, r3, #10
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40012300 	.word	0x40012300
 8003788:	0f000001 	.word	0x0f000001

0800378c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d13c      	bne.n	8003820 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d12b      	bne.n	8003818 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d127      	bne.n	8003818 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d006      	beq.n	80037e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d119      	bne.n	8003818 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0220 	bic.w	r2, r2, #32
 80037f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7fe faeb 	bl	8001df4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800381e:	e00e      	b.n	800383e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff fd85 	bl	800333c <HAL_ADC_ErrorCallback>
}
 8003832:	e004      	b.n	800383e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7ff fd67 	bl	8003328 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2240      	movs	r2, #64	; 0x40
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0204 	orr.w	r2, r3, #4
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fd5a 	bl	800333c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <__NVIC_SetPriorityGrouping+0x44>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038ac:	4013      	ands	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038c2:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <__NVIC_SetPriorityGrouping+0x44>)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	60d3      	str	r3, [r2, #12]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <__NVIC_GetPriorityGrouping+0x18>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	f003 0307 	and.w	r3, r3, #7
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	2b00      	cmp	r3, #0
 8003904:	db0b      	blt.n	800391e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	f003 021f 	and.w	r2, r3, #31
 800390c:	4907      	ldr	r1, [pc, #28]	; (800392c <__NVIC_EnableIRQ+0x38>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2001      	movs	r0, #1
 8003916:	fa00 f202 	lsl.w	r2, r0, r2
 800391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000e100 	.word	0xe000e100

08003930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	6039      	str	r1, [r7, #0]
 800393a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003940:	2b00      	cmp	r3, #0
 8003942:	db0a      	blt.n	800395a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	490c      	ldr	r1, [pc, #48]	; (800397c <__NVIC_SetPriority+0x4c>)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	0112      	lsls	r2, r2, #4
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	440b      	add	r3, r1
 8003954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003958:	e00a      	b.n	8003970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	4908      	ldr	r1, [pc, #32]	; (8003980 <__NVIC_SetPriority+0x50>)
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	3b04      	subs	r3, #4
 8003968:	0112      	lsls	r2, r2, #4
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	440b      	add	r3, r1
 800396e:	761a      	strb	r2, [r3, #24]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000e100 	.word	0xe000e100
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f1c3 0307 	rsb	r3, r3, #7
 800399e:	2b04      	cmp	r3, #4
 80039a0:	bf28      	it	cs
 80039a2:	2304      	movcs	r3, #4
 80039a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3304      	adds	r3, #4
 80039aa:	2b06      	cmp	r3, #6
 80039ac:	d902      	bls.n	80039b4 <NVIC_EncodePriority+0x30>
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3b03      	subs	r3, #3
 80039b2:	e000      	b.n	80039b6 <NVIC_EncodePriority+0x32>
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b8:	f04f 32ff 	mov.w	r2, #4294967295
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43da      	mvns	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	401a      	ands	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039cc:	f04f 31ff 	mov.w	r1, #4294967295
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	fa01 f303 	lsl.w	r3, r1, r3
 80039d6:	43d9      	mvns	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039dc:	4313      	orrs	r3, r2
         );
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3724      	adds	r7, #36	; 0x24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039fc:	d301      	bcc.n	8003a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039fe:	2301      	movs	r3, #1
 8003a00:	e00f      	b.n	8003a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a02:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <SysTick_Config+0x40>)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a0a:	210f      	movs	r1, #15
 8003a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a10:	f7ff ff8e 	bl	8003930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <SysTick_Config+0x40>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a1a:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <SysTick_Config+0x40>)
 8003a1c:	2207      	movs	r2, #7
 8003a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	e000e010 	.word	0xe000e010

08003a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ff29 	bl	8003890 <__NVIC_SetPriorityGrouping>
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b086      	sub	sp, #24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a58:	f7ff ff3e 	bl	80038d8 <__NVIC_GetPriorityGrouping>
 8003a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	6978      	ldr	r0, [r7, #20]
 8003a64:	f7ff ff8e 	bl	8003984 <NVIC_EncodePriority>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff ff5d 	bl	8003930 <__NVIC_SetPriority>
}
 8003a76:	bf00      	nop
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	4603      	mov	r3, r0
 8003a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff31 	bl	80038f4 <__NVIC_EnableIRQ>
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff ffa2 	bl	80039ec <SysTick_Config>
 8003aa8:	4603      	mov	r3, r0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ac0:	f7ff faae 	bl	8003020 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e099      	b.n	8003c04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003af0:	e00f      	b.n	8003b12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003af2:	f7ff fa95 	bl	8003020 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d908      	bls.n	8003b12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2203      	movs	r2, #3
 8003b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e078      	b.n	8003c04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e8      	bne.n	8003af2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4b38      	ldr	r3, [pc, #224]	; (8003c0c <HAL_DMA_Init+0x158>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d107      	bne.n	8003b7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	4313      	orrs	r3, r2
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f023 0307 	bic.w	r3, r3, #7
 8003b92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d117      	bne.n	8003bd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fa6f 	bl	800409c <DMA_CheckFifoParam>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2240      	movs	r2, #64	; 0x40
 8003bc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e016      	b.n	8003c04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa26 	bl	8004030 <DMA_CalcBaseAndBitshift>
 8003be4:	4603      	mov	r3, r0
 8003be6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bec:	223f      	movs	r2, #63	; 0x3f
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	f010803f 	.word	0xf010803f

08003c10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_DMA_Start_IT+0x26>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e040      	b.n	8003cb8 <HAL_DMA_Start_IT+0xa8>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d12f      	bne.n	8003caa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f9b8 	bl	8003fd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	223f      	movs	r2, #63	; 0x3f
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0216 	orr.w	r2, r2, #22
 8003c7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0208 	orr.w	r2, r2, #8
 8003c96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e005      	b.n	8003cb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ccc:	4b92      	ldr	r3, [pc, #584]	; (8003f18 <HAL_DMA_IRQHandler+0x258>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a92      	ldr	r2, [pc, #584]	; (8003f1c <HAL_DMA_IRQHandler+0x25c>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	0a9b      	lsrs	r3, r3, #10
 8003cd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	2208      	movs	r2, #8
 8003cec:	409a      	lsls	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01a      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0204 	bic.w	r2, r2, #4
 8003d12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	2208      	movs	r2, #8
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	f043 0201 	orr.w	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	2201      	movs	r2, #1
 8003d32:	409a      	lsls	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d012      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4e:	2201      	movs	r2, #1
 8003d50:	409a      	lsls	r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f043 0202 	orr.w	r2, r3, #2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	2204      	movs	r2, #4
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d012      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	2204      	movs	r2, #4
 8003d86:	409a      	lsls	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f043 0204 	orr.w	r2, r3, #4
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d043      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d03c      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	2210      	movs	r2, #16
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d018      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d108      	bne.n	8003df0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d024      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
 8003dee:	e01f      	b.n	8003e30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01b      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
 8003e00:	e016      	b.n	8003e30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d107      	bne.n	8003e20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0208 	bic.w	r2, r2, #8
 8003e1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	2220      	movs	r2, #32
 8003e36:	409a      	lsls	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 808e 	beq.w	8003f5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8086 	beq.w	8003f5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	2220      	movs	r2, #32
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d136      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0216 	bic.w	r2, r2, #22
 8003e78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <HAL_DMA_IRQHandler+0x1da>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0208 	bic.w	r2, r2, #8
 8003ea8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	223f      	movs	r2, #63	; 0x3f
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d07d      	beq.n	8003fca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	4798      	blx	r3
        }
        return;
 8003ed6:	e078      	b.n	8003fca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01c      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d108      	bne.n	8003f06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d030      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
 8003f04:	e02b      	b.n	8003f5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d027      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	4798      	blx	r3
 8003f16:	e022      	b.n	8003f5e <HAL_DMA_IRQHandler+0x29e>
 8003f18:	20000054 	.word	0x20000054
 8003f1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10f      	bne.n	8003f4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0210 	bic.w	r2, r2, #16
 8003f3c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d032      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d022      	beq.n	8003fb8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2205      	movs	r2, #5
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d307      	bcc.n	8003fa6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f2      	bne.n	8003f8a <HAL_DMA_IRQHandler+0x2ca>
 8003fa4:	e000      	b.n	8003fa8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003fa6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
 8003fc8:	e000      	b.n	8003fcc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003fca:	bf00      	nop
    }
  }
}
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop

08003fd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d108      	bne.n	8004014 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004012:	e007      	b.n	8004024 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	60da      	str	r2, [r3, #12]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	3b10      	subs	r3, #16
 8004040:	4a14      	ldr	r2, [pc, #80]	; (8004094 <DMA_CalcBaseAndBitshift+0x64>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <DMA_CalcBaseAndBitshift+0x68>)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d909      	bls.n	8004072 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004066:	f023 0303 	bic.w	r3, r3, #3
 800406a:	1d1a      	adds	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	659a      	str	r2, [r3, #88]	; 0x58
 8004070:	e007      	b.n	8004082 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	aaaaaaab 	.word	0xaaaaaaab
 8004098:	0800f8ac 	.word	0x0800f8ac

0800409c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d11f      	bne.n	80040f6 <DMA_CheckFifoParam+0x5a>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d856      	bhi.n	800416a <DMA_CheckFifoParam+0xce>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <DMA_CheckFifoParam+0x28>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	080040e7 	.word	0x080040e7
 80040cc:	080040d5 	.word	0x080040d5
 80040d0:	0800416b 	.word	0x0800416b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d046      	beq.n	800416e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e4:	e043      	b.n	800416e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ee:	d140      	bne.n	8004172 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f4:	e03d      	b.n	8004172 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fe:	d121      	bne.n	8004144 <DMA_CheckFifoParam+0xa8>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d837      	bhi.n	8004176 <DMA_CheckFifoParam+0xda>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <DMA_CheckFifoParam+0x70>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	0800411d 	.word	0x0800411d
 8004110:	08004123 	.word	0x08004123
 8004114:	0800411d 	.word	0x0800411d
 8004118:	08004135 	.word	0x08004135
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e030      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d025      	beq.n	800417a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004132:	e022      	b.n	800417a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800413c:	d11f      	bne.n	800417e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004142:	e01c      	b.n	800417e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d903      	bls.n	8004152 <DMA_CheckFifoParam+0xb6>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d003      	beq.n	8004158 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004150:	e018      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
      break;
 8004156:	e015      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00e      	beq.n	8004182 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      break;
 8004168:	e00b      	b.n	8004182 <DMA_CheckFifoParam+0xe6>
      break;
 800416a:	bf00      	nop
 800416c:	e00a      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 800416e:	bf00      	nop
 8004170:	e008      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 8004172:	bf00      	nop
 8004174:	e006      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 8004176:	bf00      	nop
 8004178:	e004      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;   
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <DMA_CheckFifoParam+0xe8>
      break;
 8004182:	bf00      	nop
    }
  } 
  
  return status; 
 8004184:	7bfb      	ldrb	r3, [r7, #15]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop

08004194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	; 0x24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	e16b      	b.n	8004488 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041b0:	2201      	movs	r2, #1
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	f040 815a 	bne.w	8004482 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d005      	beq.n	80041e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d130      	bne.n	8004248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	2203      	movs	r2, #3
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800421c:	2201      	movs	r2, #1
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 0201 	and.w	r2, r3, #1
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b03      	cmp	r3, #3
 8004252:	d017      	beq.n	8004284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	2203      	movs	r2, #3
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4313      	orrs	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d123      	bne.n	80042d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	08da      	lsrs	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3208      	adds	r2, #8
 8004298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	220f      	movs	r2, #15
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4013      	ands	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	08da      	lsrs	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3208      	adds	r2, #8
 80042d2:	69b9      	ldr	r1, [r7, #24]
 80042d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	2203      	movs	r2, #3
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 0203 	and.w	r2, r3, #3
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4313      	orrs	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80b4 	beq.w	8004482 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	4b60      	ldr	r3, [pc, #384]	; (80044a0 <HAL_GPIO_Init+0x30c>)
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	4a5f      	ldr	r2, [pc, #380]	; (80044a0 <HAL_GPIO_Init+0x30c>)
 8004324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004328:	6453      	str	r3, [r2, #68]	; 0x44
 800432a:	4b5d      	ldr	r3, [pc, #372]	; (80044a0 <HAL_GPIO_Init+0x30c>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004336:	4a5b      	ldr	r2, [pc, #364]	; (80044a4 <HAL_GPIO_Init+0x310>)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	089b      	lsrs	r3, r3, #2
 800433c:	3302      	adds	r3, #2
 800433e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	220f      	movs	r2, #15
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4013      	ands	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a52      	ldr	r2, [pc, #328]	; (80044a8 <HAL_GPIO_Init+0x314>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d02b      	beq.n	80043ba <HAL_GPIO_Init+0x226>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a51      	ldr	r2, [pc, #324]	; (80044ac <HAL_GPIO_Init+0x318>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d025      	beq.n	80043b6 <HAL_GPIO_Init+0x222>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a50      	ldr	r2, [pc, #320]	; (80044b0 <HAL_GPIO_Init+0x31c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d01f      	beq.n	80043b2 <HAL_GPIO_Init+0x21e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a4f      	ldr	r2, [pc, #316]	; (80044b4 <HAL_GPIO_Init+0x320>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d019      	beq.n	80043ae <HAL_GPIO_Init+0x21a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a4e      	ldr	r2, [pc, #312]	; (80044b8 <HAL_GPIO_Init+0x324>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <HAL_GPIO_Init+0x216>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a4d      	ldr	r2, [pc, #308]	; (80044bc <HAL_GPIO_Init+0x328>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00d      	beq.n	80043a6 <HAL_GPIO_Init+0x212>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a4c      	ldr	r2, [pc, #304]	; (80044c0 <HAL_GPIO_Init+0x32c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <HAL_GPIO_Init+0x20e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a4b      	ldr	r2, [pc, #300]	; (80044c4 <HAL_GPIO_Init+0x330>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d101      	bne.n	800439e <HAL_GPIO_Init+0x20a>
 800439a:	2307      	movs	r3, #7
 800439c:	e00e      	b.n	80043bc <HAL_GPIO_Init+0x228>
 800439e:	2308      	movs	r3, #8
 80043a0:	e00c      	b.n	80043bc <HAL_GPIO_Init+0x228>
 80043a2:	2306      	movs	r3, #6
 80043a4:	e00a      	b.n	80043bc <HAL_GPIO_Init+0x228>
 80043a6:	2305      	movs	r3, #5
 80043a8:	e008      	b.n	80043bc <HAL_GPIO_Init+0x228>
 80043aa:	2304      	movs	r3, #4
 80043ac:	e006      	b.n	80043bc <HAL_GPIO_Init+0x228>
 80043ae:	2303      	movs	r3, #3
 80043b0:	e004      	b.n	80043bc <HAL_GPIO_Init+0x228>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e002      	b.n	80043bc <HAL_GPIO_Init+0x228>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <HAL_GPIO_Init+0x228>
 80043ba:	2300      	movs	r3, #0
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	f002 0203 	and.w	r2, r2, #3
 80043c2:	0092      	lsls	r2, r2, #2
 80043c4:	4093      	lsls	r3, r2
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043cc:	4935      	ldr	r1, [pc, #212]	; (80044a4 <HAL_GPIO_Init+0x310>)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	089b      	lsrs	r3, r3, #2
 80043d2:	3302      	adds	r3, #2
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043da:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <HAL_GPIO_Init+0x334>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043fe:	4a32      	ldr	r2, [pc, #200]	; (80044c8 <HAL_GPIO_Init+0x334>)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004404:	4b30      	ldr	r3, [pc, #192]	; (80044c8 <HAL_GPIO_Init+0x334>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004428:	4a27      	ldr	r2, [pc, #156]	; (80044c8 <HAL_GPIO_Init+0x334>)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800442e:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <HAL_GPIO_Init+0x334>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	43db      	mvns	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004452:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <HAL_GPIO_Init+0x334>)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <HAL_GPIO_Init+0x334>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800447c:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <HAL_GPIO_Init+0x334>)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3301      	adds	r3, #1
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b0f      	cmp	r3, #15
 800448c:	f67f ae90 	bls.w	80041b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	3724      	adds	r7, #36	; 0x24
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40013800 	.word	0x40013800
 80044a8:	40020000 	.word	0x40020000
 80044ac:	40020400 	.word	0x40020400
 80044b0:	40020800 	.word	0x40020800
 80044b4:	40020c00 	.word	0x40020c00
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40021400 	.word	0x40021400
 80044c0:	40021800 	.word	0x40021800
 80044c4:	40021c00 	.word	0x40021c00
 80044c8:	40013c00 	.word	0x40013c00

080044cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]
 80044d8:	4613      	mov	r3, r2
 80044da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044dc:	787b      	ldrb	r3, [r7, #1]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044e2:	887a      	ldrh	r2, [r7, #2]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044e8:	e003      	b.n	80044f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044ea:	887b      	ldrh	r3, [r7, #2]
 80044ec:	041a      	lsls	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	619a      	str	r2, [r3, #24]
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e12b      	b.n	800476a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fd f8c8 	bl	80016bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2224      	movs	r2, #36	; 0x24
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004552:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004562:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004564:	f001 fcdc 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 8004568:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4a81      	ldr	r2, [pc, #516]	; (8004774 <HAL_I2C_Init+0x274>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d807      	bhi.n	8004584 <HAL_I2C_Init+0x84>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4a80      	ldr	r2, [pc, #512]	; (8004778 <HAL_I2C_Init+0x278>)
 8004578:	4293      	cmp	r3, r2
 800457a:	bf94      	ite	ls
 800457c:	2301      	movls	r3, #1
 800457e:	2300      	movhi	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	e006      	b.n	8004592 <HAL_I2C_Init+0x92>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a7d      	ldr	r2, [pc, #500]	; (800477c <HAL_I2C_Init+0x27c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	bf94      	ite	ls
 800458c:	2301      	movls	r3, #1
 800458e:	2300      	movhi	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e0e7      	b.n	800476a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a78      	ldr	r2, [pc, #480]	; (8004780 <HAL_I2C_Init+0x280>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	0c9b      	lsrs	r3, r3, #18
 80045a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a6a      	ldr	r2, [pc, #424]	; (8004774 <HAL_I2C_Init+0x274>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d802      	bhi.n	80045d4 <HAL_I2C_Init+0xd4>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	3301      	adds	r3, #1
 80045d2:	e009      	b.n	80045e8 <HAL_I2C_Init+0xe8>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	4a69      	ldr	r2, [pc, #420]	; (8004784 <HAL_I2C_Init+0x284>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	099b      	lsrs	r3, r3, #6
 80045e6:	3301      	adds	r3, #1
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	495c      	ldr	r1, [pc, #368]	; (8004774 <HAL_I2C_Init+0x274>)
 8004604:	428b      	cmp	r3, r1
 8004606:	d819      	bhi.n	800463c <HAL_I2C_Init+0x13c>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1e59      	subs	r1, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fbb1 f3f3 	udiv	r3, r1, r3
 8004616:	1c59      	adds	r1, r3, #1
 8004618:	f640 73fc 	movw	r3, #4092	; 0xffc
 800461c:	400b      	ands	r3, r1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_I2C_Init+0x138>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1e59      	subs	r1, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004630:	3301      	adds	r3, #1
 8004632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004636:	e051      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 8004638:	2304      	movs	r3, #4
 800463a:	e04f      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d111      	bne.n	8004668 <HAL_I2C_Init+0x168>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1e58      	subs	r0, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	440b      	add	r3, r1
 8004652:	fbb0 f3f3 	udiv	r3, r0, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e012      	b.n	800468e <HAL_I2C_Init+0x18e>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1e58      	subs	r0, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	0099      	lsls	r1, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	fbb0 f3f3 	udiv	r3, r0, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Init+0x196>
 8004692:	2301      	movs	r3, #1
 8004694:	e022      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10e      	bne.n	80046bc <HAL_I2C_Init+0x1bc>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1e58      	subs	r0, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6859      	ldr	r1, [r3, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	440b      	add	r3, r1
 80046ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b0:	3301      	adds	r3, #1
 80046b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ba:	e00f      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1e58      	subs	r0, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	0099      	lsls	r1, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d2:	3301      	adds	r3, #1
 80046d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	6809      	ldr	r1, [r1, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69da      	ldr	r2, [r3, #28]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800470a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6911      	ldr	r1, [r2, #16]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	4311      	orrs	r1, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	430b      	orrs	r3, r1
 800471e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	000186a0 	.word	0x000186a0
 8004778:	001e847f 	.word	0x001e847f
 800477c:	003d08ff 	.word	0x003d08ff
 8004780:	431bde83 	.word	0x431bde83
 8004784:	10624dd3 	.word	0x10624dd3

08004788 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	461a      	mov	r2, r3
 8004794:	460b      	mov	r3, r1
 8004796:	817b      	strh	r3, [r7, #10]
 8004798:	4613      	mov	r3, r2
 800479a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800479c:	f7fe fc40 	bl	8003020 <HAL_GetTick>
 80047a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	f040 80e0 	bne.w	8004970 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2319      	movs	r3, #25
 80047b6:	2201      	movs	r2, #1
 80047b8:	4970      	ldr	r1, [pc, #448]	; (800497c <HAL_I2C_Master_Transmit+0x1f4>)
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fd86 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0d3      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_I2C_Master_Transmit+0x50>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e0cc      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d007      	beq.n	80047fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2221      	movs	r2, #33	; 0x21
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2210      	movs	r2, #16
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	893a      	ldrh	r2, [r7, #8]
 800482e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a50      	ldr	r2, [pc, #320]	; (8004980 <HAL_I2C_Master_Transmit+0x1f8>)
 800483e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004840:	8979      	ldrh	r1, [r7, #10]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	6a3a      	ldr	r2, [r7, #32]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fbf0 	bl	800502c <I2C_MasterRequestWrite>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e08d      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800486c:	e066      	b.n	800493c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	6a39      	ldr	r1, [r7, #32]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fe00 	bl	8005478 <I2C_WaitOnTXEFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	2b04      	cmp	r3, #4
 8004884:	d107      	bne.n	8004896 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004894:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e06b      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	781a      	ldrb	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d11b      	bne.n	8004910 <HAL_I2C_Master_Transmit+0x188>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d017      	beq.n	8004910 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	6a39      	ldr	r1, [r7, #32]
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fdf0 	bl	80054fa <I2C_WaitOnBTFFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	2b04      	cmp	r3, #4
 8004926:	d107      	bne.n	8004938 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004936:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e01a      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	d194      	bne.n	800486e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	e000      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
  }
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	00100002 	.word	0x00100002
 8004980:	ffff0000 	.word	0xffff0000

08004984 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08c      	sub	sp, #48	; 0x30
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	461a      	mov	r2, r3
 8004990:	460b      	mov	r3, r1
 8004992:	817b      	strh	r3, [r7, #10]
 8004994:	4613      	mov	r3, r2
 8004996:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004998:	f7fe fb42 	bl	8003020 <HAL_GetTick>
 800499c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	f040 820b 	bne.w	8004dc2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	2319      	movs	r3, #25
 80049b2:	2201      	movs	r2, #1
 80049b4:	497c      	ldr	r1, [pc, #496]	; (8004ba8 <HAL_I2C_Master_Receive+0x224>)
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fc88 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80049c2:	2302      	movs	r3, #2
 80049c4:	e1fe      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_I2C_Master_Receive+0x50>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e1f7      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x440>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d007      	beq.n	80049fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2222      	movs	r2, #34	; 0x22
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2210      	movs	r2, #16
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	893a      	ldrh	r2, [r7, #8]
 8004a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a5c      	ldr	r2, [pc, #368]	; (8004bac <HAL_I2C_Master_Receive+0x228>)
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a3c:	8979      	ldrh	r1, [r7, #10]
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fb74 	bl	8005130 <I2C_MasterRequestRead>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e1b8      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d113      	bne.n	8004a82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	623b      	str	r3, [r7, #32]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	623b      	str	r3, [r7, #32]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	623b      	str	r3, [r7, #32]
 8004a6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e18c      	b.n	8004d9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d11b      	bne.n	8004ac2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e16c      	b.n	8004d9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d11b      	bne.n	8004b02 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aea:	2300      	movs	r3, #0
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	e14c      	b.n	8004d9c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b28:	e138      	b.n	8004d9c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	f200 80f1 	bhi.w	8004d16 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d123      	bne.n	8004b84 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fd1b 	bl	800557c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e139      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b82:	e10b      	b.n	8004d9c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d14e      	bne.n	8004c2a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	2200      	movs	r2, #0
 8004b94:	4906      	ldr	r1, [pc, #24]	; (8004bb0 <HAL_I2C_Master_Receive+0x22c>)
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fb98 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e10e      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x440>
 8004ba6:	bf00      	nop
 8004ba8:	00100002 	.word	0x00100002
 8004bac:	ffff0000 	.word	0xffff0000
 8004bb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c28:	e0b8      	b.n	8004d9c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	2200      	movs	r2, #0
 8004c32:	4966      	ldr	r1, [pc, #408]	; (8004dcc <HAL_I2C_Master_Receive+0x448>)
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fb49 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0bf      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	494f      	ldr	r1, [pc, #316]	; (8004dcc <HAL_I2C_Master_Receive+0x448>)
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fb1b 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e091      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d14:	e042      	b.n	8004d9c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fc2e 	bl	800557c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e04c      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d118      	bne.n	8004d9c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f47f aec2 	bne.w	8004b2a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
  }
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3728      	adds	r7, #40	; 0x28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	00010004 	.word	0x00010004

08004dd0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004de0:	f7fe f91e 	bl	8003020 <HAL_GetTick>
 8004de4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	f040 8111 	bne.w	800501a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2319      	movs	r3, #25
 8004dfe:	2201      	movs	r2, #1
 8004e00:	4988      	ldr	r1, [pc, #544]	; (8005024 <HAL_I2C_IsDeviceReady+0x254>)
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fa62 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e104      	b.n	800501c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_I2C_IsDeviceReady+0x50>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0fd      	b.n	800501c <HAL_I2C_IsDeviceReady+0x24c>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d007      	beq.n	8004e46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2224      	movs	r2, #36	; 0x24
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a70      	ldr	r2, [pc, #448]	; (8005028 <HAL_I2C_IsDeviceReady+0x258>)
 8004e68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 fa20 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea0:	d103      	bne.n	8004eaa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e0b6      	b.n	800501c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eae:	897b      	ldrh	r3, [r7, #10]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ebc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004ebe:	f7fe f8af 	bl	8003020 <HAL_GetTick>
 8004ec2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	bf0c      	ite	eq
 8004ed2:	2301      	moveq	r3, #1
 8004ed4:	2300      	movne	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ef2:	e025      	b.n	8004f40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ef4:	f7fe f894 	bl	8003020 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d302      	bcc.n	8004f0a <HAL_I2C_IsDeviceReady+0x13a>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d103      	bne.n	8004f12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	22a0      	movs	r2, #160	; 0xa0
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2ba0      	cmp	r3, #160	; 0xa0
 8004f4a:	d005      	beq.n	8004f58 <HAL_I2C_IsDeviceReady+0x188>
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <HAL_I2C_IsDeviceReady+0x188>
 8004f52:	7dbb      	ldrb	r3, [r7, #22]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0cd      	beq.n	8004ef4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d129      	bne.n	8004fc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	2319      	movs	r3, #25
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	4921      	ldr	r1, [pc, #132]	; (8005024 <HAL_I2C_IsDeviceReady+0x254>)
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f994 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e036      	b.n	800501c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e02c      	b.n	800501c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2319      	movs	r3, #25
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	490f      	ldr	r1, [pc, #60]	; (8005024 <HAL_I2C_IsDeviceReady+0x254>)
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f970 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e012      	b.n	800501c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	f4ff af32 	bcc.w	8004e6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800501a:	2302      	movs	r3, #2
  }
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	00100002 	.word	0x00100002
 8005028:	ffff0000 	.word	0xffff0000

0800502c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	460b      	mov	r3, r1
 800503a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d006      	beq.n	8005056 <I2C_MasterRequestWrite+0x2a>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d003      	beq.n	8005056 <I2C_MasterRequestWrite+0x2a>
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005054:	d108      	bne.n	8005068 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	e00b      	b.n	8005080 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	2b12      	cmp	r3, #18
 800506e:	d107      	bne.n	8005080 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800507e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f91d 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a6:	d103      	bne.n	80050b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e035      	b.n	8005120 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050bc:	d108      	bne.n	80050d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050be:	897b      	ldrh	r3, [r7, #10]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050cc:	611a      	str	r2, [r3, #16]
 80050ce:	e01b      	b.n	8005108 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050d0:	897b      	ldrh	r3, [r7, #10]
 80050d2:	11db      	asrs	r3, r3, #7
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	f003 0306 	and.w	r3, r3, #6
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f063 030f 	orn	r3, r3, #15
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	490e      	ldr	r1, [pc, #56]	; (8005128 <I2C_MasterRequestWrite+0xfc>)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f943 	bl	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e010      	b.n	8005120 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050fe:	897b      	ldrh	r3, [r7, #10]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	4907      	ldr	r1, [pc, #28]	; (800512c <I2C_MasterRequestWrite+0x100>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f933 	bl	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	00010008 	.word	0x00010008
 800512c:	00010002 	.word	0x00010002

08005130 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	460b      	mov	r3, r1
 800513e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005154:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d006      	beq.n	800516a <I2C_MasterRequestRead+0x3a>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d003      	beq.n	800516a <I2C_MasterRequestRead+0x3a>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005168:	d108      	bne.n	800517c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e00b      	b.n	8005194 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005180:	2b11      	cmp	r3, #17
 8005182:	d107      	bne.n	8005194 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005192:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f893 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00d      	beq.n	80051c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ba:	d103      	bne.n	80051c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e079      	b.n	80052bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051d0:	d108      	bne.n	80051e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051d2:	897b      	ldrh	r3, [r7, #10]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	611a      	str	r2, [r3, #16]
 80051e2:	e05f      	b.n	80052a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051e4:	897b      	ldrh	r3, [r7, #10]
 80051e6:	11db      	asrs	r3, r3, #7
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	f003 0306 	and.w	r3, r3, #6
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f063 030f 	orn	r3, r3, #15
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	4930      	ldr	r1, [pc, #192]	; (80052c4 <I2C_MasterRequestRead+0x194>)
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f8b9 	bl	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e054      	b.n	80052bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005212:	897b      	ldrh	r3, [r7, #10]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4929      	ldr	r1, [pc, #164]	; (80052c8 <I2C_MasterRequestRead+0x198>)
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f8a9 	bl	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e044      	b.n	80052bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005256:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f831 	bl	80052cc <I2C_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00d      	beq.n	800528c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527e:	d103      	bne.n	8005288 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e017      	b.n	80052bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800528c:	897b      	ldrh	r3, [r7, #10]
 800528e:	11db      	asrs	r3, r3, #7
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f003 0306 	and.w	r3, r3, #6
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f063 030e 	orn	r3, r3, #14
 800529c:	b2da      	uxtb	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4907      	ldr	r1, [pc, #28]	; (80052c8 <I2C_MasterRequestRead+0x198>)
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f865 	bl	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	00010008 	.word	0x00010008
 80052c8:	00010002 	.word	0x00010002

080052cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052dc:	e025      	b.n	800532a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d021      	beq.n	800532a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e6:	f7fd fe9b 	bl	8003020 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d302      	bcc.n	80052fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d116      	bne.n	800532a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f043 0220 	orr.w	r2, r3, #32
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e023      	b.n	8005372 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d10d      	bne.n	8005350 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	43da      	mvns	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4013      	ands	r3, r2
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	bf0c      	ite	eq
 8005346:	2301      	moveq	r3, #1
 8005348:	2300      	movne	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	461a      	mov	r2, r3
 800534e:	e00c      	b.n	800536a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	43da      	mvns	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4013      	ands	r3, r2
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	bf0c      	ite	eq
 8005362:	2301      	moveq	r3, #1
 8005364:	2300      	movne	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	429a      	cmp	r2, r3
 800536e:	d0b6      	beq.n	80052de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
 8005386:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005388:	e051      	b.n	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005398:	d123      	bne.n	80053e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f043 0204 	orr.w	r2, r3, #4
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e046      	b.n	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d021      	beq.n	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fd fe19 	bl	8003020 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d116      	bne.n	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f043 0220 	orr.w	r2, r3, #32
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e020      	b.n	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	0c1b      	lsrs	r3, r3, #16
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10c      	bne.n	8005452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	43da      	mvns	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	bf14      	ite	ne
 800544a:	2301      	movne	r3, #1
 800544c:	2300      	moveq	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	e00b      	b.n	800546a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	43da      	mvns	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4013      	ands	r3, r2
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	bf14      	ite	ne
 8005464:	2301      	movne	r3, #1
 8005466:	2300      	moveq	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d18d      	bne.n	800538a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005484:	e02d      	b.n	80054e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f8ce 	bl	8005628 <I2C_IsAcknowledgeFailed>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e02d      	b.n	80054f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d021      	beq.n	80054e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549e:	f7fd fdbf 	bl	8003020 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d116      	bne.n	80054e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e007      	b.n	80054f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ec:	2b80      	cmp	r3, #128	; 0x80
 80054ee:	d1ca      	bne.n	8005486 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005506:	e02d      	b.n	8005564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f88d 	bl	8005628 <I2C_IsAcknowledgeFailed>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e02d      	b.n	8005574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d021      	beq.n	8005564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005520:	f7fd fd7e 	bl	8003020 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	429a      	cmp	r2, r3
 800552e:	d302      	bcc.n	8005536 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d116      	bne.n	8005564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	f043 0220 	orr.w	r2, r3, #32
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e007      	b.n	8005574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b04      	cmp	r3, #4
 8005570:	d1ca      	bne.n	8005508 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005588:	e042      	b.n	8005610 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b10      	cmp	r3, #16
 8005596:	d119      	bne.n	80055cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0210 	mvn.w	r2, #16
 80055a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e029      	b.n	8005620 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055cc:	f7fd fd28 	bl	8003020 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d302      	bcc.n	80055e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d116      	bne.n	8005610 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	f043 0220 	orr.w	r2, r3, #32
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e007      	b.n	8005620 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d1b5      	bne.n	800558a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563e:	d11b      	bne.n	8005678 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005648:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	f043 0204 	orr.w	r2, r3, #4
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e264      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d075      	beq.n	8005792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056a6:	4ba3      	ldr	r3, [pc, #652]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 030c 	and.w	r3, r3, #12
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d00c      	beq.n	80056cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056b2:	4ba0      	ldr	r3, [pc, #640]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d112      	bne.n	80056e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056be:	4b9d      	ldr	r3, [pc, #628]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ca:	d10b      	bne.n	80056e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056cc:	4b99      	ldr	r3, [pc, #612]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d05b      	beq.n	8005790 <HAL_RCC_OscConfig+0x108>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d157      	bne.n	8005790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e23f      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ec:	d106      	bne.n	80056fc <HAL_RCC_OscConfig+0x74>
 80056ee:	4b91      	ldr	r3, [pc, #580]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a90      	ldr	r2, [pc, #576]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80056f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	e01d      	b.n	8005738 <HAL_RCC_OscConfig+0xb0>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005704:	d10c      	bne.n	8005720 <HAL_RCC_OscConfig+0x98>
 8005706:	4b8b      	ldr	r3, [pc, #556]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a8a      	ldr	r2, [pc, #552]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 800570c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	4b88      	ldr	r3, [pc, #544]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a87      	ldr	r2, [pc, #540]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 8005718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	e00b      	b.n	8005738 <HAL_RCC_OscConfig+0xb0>
 8005720:	4b84      	ldr	r3, [pc, #528]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a83      	ldr	r2, [pc, #524]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 8005726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	4b81      	ldr	r3, [pc, #516]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a80      	ldr	r2, [pc, #512]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 8005732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d013      	beq.n	8005768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005740:	f7fd fc6e 	bl	8003020 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005748:	f7fd fc6a 	bl	8003020 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b64      	cmp	r3, #100	; 0x64
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e204      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575a:	4b76      	ldr	r3, [pc, #472]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f0      	beq.n	8005748 <HAL_RCC_OscConfig+0xc0>
 8005766:	e014      	b.n	8005792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7fd fc5a 	bl	8003020 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005770:	f7fd fc56 	bl	8003020 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	; 0x64
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e1f0      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005782:	4b6c      	ldr	r3, [pc, #432]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f0      	bne.n	8005770 <HAL_RCC_OscConfig+0xe8>
 800578e:	e000      	b.n	8005792 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d063      	beq.n	8005866 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800579e:	4b65      	ldr	r3, [pc, #404]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 030c 	and.w	r3, r3, #12
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057aa:	4b62      	ldr	r3, [pc, #392]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d11c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057b6:	4b5f      	ldr	r3, [pc, #380]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d116      	bne.n	80057f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c2:	4b5c      	ldr	r3, [pc, #368]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_RCC_OscConfig+0x152>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d001      	beq.n	80057da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e1c4      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057da:	4b56      	ldr	r3, [pc, #344]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4952      	ldr	r1, [pc, #328]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ee:	e03a      	b.n	8005866 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d020      	beq.n	800583a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057f8:	4b4f      	ldr	r3, [pc, #316]	; (8005938 <HAL_RCC_OscConfig+0x2b0>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fe:	f7fd fc0f 	bl	8003020 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005806:	f7fd fc0b 	bl	8003020 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e1a5      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005818:	4b46      	ldr	r3, [pc, #280]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005824:	4b43      	ldr	r3, [pc, #268]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4940      	ldr	r1, [pc, #256]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]
 8005838:	e015      	b.n	8005866 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800583a:	4b3f      	ldr	r3, [pc, #252]	; (8005938 <HAL_RCC_OscConfig+0x2b0>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fd fbee 	bl	8003020 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005848:	f7fd fbea 	bl	8003020 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e184      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585a:	4b36      	ldr	r3, [pc, #216]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f0      	bne.n	8005848 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d030      	beq.n	80058d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d016      	beq.n	80058a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800587a:	4b30      	ldr	r3, [pc, #192]	; (800593c <HAL_RCC_OscConfig+0x2b4>)
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005880:	f7fd fbce 	bl	8003020 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005888:	f7fd fbca 	bl	8003020 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e164      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589a:	4b26      	ldr	r3, [pc, #152]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 800589c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0x200>
 80058a6:	e015      	b.n	80058d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058a8:	4b24      	ldr	r3, [pc, #144]	; (800593c <HAL_RCC_OscConfig+0x2b4>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ae:	f7fd fbb7 	bl	8003020 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b6:	f7fd fbb3 	bl	8003020 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e14d      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058c8:	4b1a      	ldr	r3, [pc, #104]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80058ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f0      	bne.n	80058b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80a0 	beq.w	8005a22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058e2:	2300      	movs	r3, #0
 80058e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058e6:	4b13      	ldr	r3, [pc, #76]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10f      	bne.n	8005912 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058f2:	2300      	movs	r3, #0
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	4a0e      	ldr	r2, [pc, #56]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 80058fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005900:	6413      	str	r3, [r2, #64]	; 0x40
 8005902:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <HAL_RCC_OscConfig+0x2ac>)
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590a:	60bb      	str	r3, [r7, #8]
 800590c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800590e:	2301      	movs	r3, #1
 8005910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCC_OscConfig+0x2b8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591a:	2b00      	cmp	r3, #0
 800591c:	d121      	bne.n	8005962 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800591e:	4b08      	ldr	r3, [pc, #32]	; (8005940 <HAL_RCC_OscConfig+0x2b8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a07      	ldr	r2, [pc, #28]	; (8005940 <HAL_RCC_OscConfig+0x2b8>)
 8005924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800592a:	f7fd fb79 	bl	8003020 <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005930:	e011      	b.n	8005956 <HAL_RCC_OscConfig+0x2ce>
 8005932:	bf00      	nop
 8005934:	40023800 	.word	0x40023800
 8005938:	42470000 	.word	0x42470000
 800593c:	42470e80 	.word	0x42470e80
 8005940:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005944:	f7fd fb6c 	bl	8003020 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e106      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005956:	4b85      	ldr	r3, [pc, #532]	; (8005b6c <HAL_RCC_OscConfig+0x4e4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d106      	bne.n	8005978 <HAL_RCC_OscConfig+0x2f0>
 800596a:	4b81      	ldr	r3, [pc, #516]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596e:	4a80      	ldr	r2, [pc, #512]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	6713      	str	r3, [r2, #112]	; 0x70
 8005976:	e01c      	b.n	80059b2 <HAL_RCC_OscConfig+0x32a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2b05      	cmp	r3, #5
 800597e:	d10c      	bne.n	800599a <HAL_RCC_OscConfig+0x312>
 8005980:	4b7b      	ldr	r3, [pc, #492]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	4a7a      	ldr	r2, [pc, #488]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005986:	f043 0304 	orr.w	r3, r3, #4
 800598a:	6713      	str	r3, [r2, #112]	; 0x70
 800598c:	4b78      	ldr	r3, [pc, #480]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	4a77      	ldr	r2, [pc, #476]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	6713      	str	r3, [r2, #112]	; 0x70
 8005998:	e00b      	b.n	80059b2 <HAL_RCC_OscConfig+0x32a>
 800599a:	4b75      	ldr	r3, [pc, #468]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	4a74      	ldr	r2, [pc, #464]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 80059a0:	f023 0301 	bic.w	r3, r3, #1
 80059a4:	6713      	str	r3, [r2, #112]	; 0x70
 80059a6:	4b72      	ldr	r3, [pc, #456]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	4a71      	ldr	r2, [pc, #452]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 80059ac:	f023 0304 	bic.w	r3, r3, #4
 80059b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d015      	beq.n	80059e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ba:	f7fd fb31 	bl	8003020 <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c0:	e00a      	b.n	80059d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059c2:	f7fd fb2d 	bl	8003020 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e0c5      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d8:	4b65      	ldr	r3, [pc, #404]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 80059da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0ee      	beq.n	80059c2 <HAL_RCC_OscConfig+0x33a>
 80059e4:	e014      	b.n	8005a10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e6:	f7fd fb1b 	bl	8003020 <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ec:	e00a      	b.n	8005a04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ee:	f7fd fb17 	bl	8003020 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e0af      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a04:	4b5a      	ldr	r3, [pc, #360]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1ee      	bne.n	80059ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d105      	bne.n	8005a22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a16:	4b56      	ldr	r3, [pc, #344]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	4a55      	ldr	r2, [pc, #340]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 809b 	beq.w	8005b62 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a2c:	4b50      	ldr	r3, [pc, #320]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f003 030c 	and.w	r3, r3, #12
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d05c      	beq.n	8005af2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d141      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a40:	4b4c      	ldr	r3, [pc, #304]	; (8005b74 <HAL_RCC_OscConfig+0x4ec>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a46:	f7fd faeb 	bl	8003020 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a4e:	f7fd fae7 	bl	8003020 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e081      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a60:	4b43      	ldr	r3, [pc, #268]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	019b      	lsls	r3, r3, #6
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	3b01      	subs	r3, #1
 8005a86:	041b      	lsls	r3, r3, #16
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	061b      	lsls	r3, r3, #24
 8005a90:	4937      	ldr	r1, [pc, #220]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a96:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <HAL_RCC_OscConfig+0x4ec>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9c:	f7fd fac0 	bl	8003020 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa4:	f7fd fabc 	bl	8003020 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e056      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab6:	4b2e      	ldr	r3, [pc, #184]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0f0      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x41c>
 8005ac2:	e04e      	b.n	8005b62 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac4:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <HAL_RCC_OscConfig+0x4ec>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aca:	f7fd faa9 	bl	8003020 <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad2:	f7fd faa5 	bl	8003020 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e03f      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae4:	4b22      	ldr	r3, [pc, #136]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1f0      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x44a>
 8005af0:	e037      	b.n	8005b62 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e032      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005afe:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <HAL_RCC_OscConfig+0x4e8>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d028      	beq.n	8005b5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d121      	bne.n	8005b5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d11a      	bne.n	8005b5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b2e:	4013      	ands	r3, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d111      	bne.n	8005b5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	085b      	lsrs	r3, r3, #1
 8005b46:	3b01      	subs	r3, #1
 8005b48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d107      	bne.n	8005b5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d001      	beq.n	8005b62 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40007000 	.word	0x40007000
 8005b70:	40023800 	.word	0x40023800
 8005b74:	42470060 	.word	0x42470060

08005b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e0cc      	b.n	8005d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b8c:	4b68      	ldr	r3, [pc, #416]	; (8005d30 <HAL_RCC_ClockConfig+0x1b8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d90c      	bls.n	8005bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9a:	4b65      	ldr	r3, [pc, #404]	; (8005d30 <HAL_RCC_ClockConfig+0x1b8>)
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba2:	4b63      	ldr	r3, [pc, #396]	; (8005d30 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d001      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0b8      	b.n	8005d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d020      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bcc:	4b59      	ldr	r3, [pc, #356]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	4a58      	ldr	r2, [pc, #352]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005be4:	4b53      	ldr	r3, [pc, #332]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	4a52      	ldr	r2, [pc, #328]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005bea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf0:	4b50      	ldr	r3, [pc, #320]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	494d      	ldr	r1, [pc, #308]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d044      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d107      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c16:	4b47      	ldr	r3, [pc, #284]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d119      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e07f      	b.n	8005d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d003      	beq.n	8005c36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d107      	bne.n	8005c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c36:	4b3f      	ldr	r3, [pc, #252]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e06f      	b.n	8005d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c46:	4b3b      	ldr	r3, [pc, #236]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e067      	b.n	8005d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c56:	4b37      	ldr	r3, [pc, #220]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f023 0203 	bic.w	r2, r3, #3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	4934      	ldr	r1, [pc, #208]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c68:	f7fd f9da 	bl	8003020 <HAL_GetTick>
 8005c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6e:	e00a      	b.n	8005c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c70:	f7fd f9d6 	bl	8003020 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e04f      	b.n	8005d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c86:	4b2b      	ldr	r3, [pc, #172]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 020c 	and.w	r2, r3, #12
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d1eb      	bne.n	8005c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c98:	4b25      	ldr	r3, [pc, #148]	; (8005d30 <HAL_RCC_ClockConfig+0x1b8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d20c      	bcs.n	8005cc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca6:	4b22      	ldr	r3, [pc, #136]	; (8005d30 <HAL_RCC_ClockConfig+0x1b8>)
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cae:	4b20      	ldr	r3, [pc, #128]	; (8005d30 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d001      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e032      	b.n	8005d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ccc:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4916      	ldr	r1, [pc, #88]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cea:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	490e      	ldr	r1, [pc, #56]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cfe:	f000 f821 	bl	8005d44 <HAL_RCC_GetSysClockFreq>
 8005d02:	4602      	mov	r2, r0
 8005d04:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <HAL_RCC_ClockConfig+0x1bc>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	091b      	lsrs	r3, r3, #4
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	490a      	ldr	r1, [pc, #40]	; (8005d38 <HAL_RCC_ClockConfig+0x1c0>)
 8005d10:	5ccb      	ldrb	r3, [r1, r3]
 8005d12:	fa22 f303 	lsr.w	r3, r2, r3
 8005d16:	4a09      	ldr	r2, [pc, #36]	; (8005d3c <HAL_RCC_ClockConfig+0x1c4>)
 8005d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_RCC_ClockConfig+0x1c8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fd f93a 	bl	8002f98 <HAL_InitTick>

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40023c00 	.word	0x40023c00
 8005d34:	40023800 	.word	0x40023800
 8005d38:	0800f894 	.word	0x0800f894
 8005d3c:	20000054 	.word	0x20000054
 8005d40:	2000005c 	.word	0x2000005c

08005d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	607b      	str	r3, [r7, #4]
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	2300      	movs	r3, #0
 8005d56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d5c:	4b67      	ldr	r3, [pc, #412]	; (8005efc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 030c 	and.w	r3, r3, #12
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d00d      	beq.n	8005d84 <HAL_RCC_GetSysClockFreq+0x40>
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	f200 80bd 	bhi.w	8005ee8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_RCC_GetSysClockFreq+0x34>
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d003      	beq.n	8005d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d76:	e0b7      	b.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d78:	4b61      	ldr	r3, [pc, #388]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d7a:	60bb      	str	r3, [r7, #8]
       break;
 8005d7c:	e0b7      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d7e:	4b61      	ldr	r3, [pc, #388]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005d80:	60bb      	str	r3, [r7, #8]
      break;
 8005d82:	e0b4      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d84:	4b5d      	ldr	r3, [pc, #372]	; (8005efc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d8e:	4b5b      	ldr	r3, [pc, #364]	; (8005efc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d04d      	beq.n	8005e36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d9a:	4b58      	ldr	r3, [pc, #352]	; (8005efc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	099b      	lsrs	r3, r3, #6
 8005da0:	461a      	mov	r2, r3
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005daa:	f04f 0100 	mov.w	r1, #0
 8005dae:	ea02 0800 	and.w	r8, r2, r0
 8005db2:	ea03 0901 	and.w	r9, r3, r1
 8005db6:	4640      	mov	r0, r8
 8005db8:	4649      	mov	r1, r9
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	014b      	lsls	r3, r1, #5
 8005dc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005dc8:	0142      	lsls	r2, r0, #5
 8005dca:	4610      	mov	r0, r2
 8005dcc:	4619      	mov	r1, r3
 8005dce:	ebb0 0008 	subs.w	r0, r0, r8
 8005dd2:	eb61 0109 	sbc.w	r1, r1, r9
 8005dd6:	f04f 0200 	mov.w	r2, #0
 8005dda:	f04f 0300 	mov.w	r3, #0
 8005dde:	018b      	lsls	r3, r1, #6
 8005de0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005de4:	0182      	lsls	r2, r0, #6
 8005de6:	1a12      	subs	r2, r2, r0
 8005de8:	eb63 0301 	sbc.w	r3, r3, r1
 8005dec:	f04f 0000 	mov.w	r0, #0
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	00d9      	lsls	r1, r3, #3
 8005df6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dfa:	00d0      	lsls	r0, r2, #3
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	eb12 0208 	adds.w	r2, r2, r8
 8005e04:	eb43 0309 	adc.w	r3, r3, r9
 8005e08:	f04f 0000 	mov.w	r0, #0
 8005e0c:	f04f 0100 	mov.w	r1, #0
 8005e10:	0259      	lsls	r1, r3, #9
 8005e12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005e16:	0250      	lsls	r0, r2, #9
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	f7fa ff2e 	bl	8000c88 <__aeabi_uldivmod>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4613      	mov	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e04a      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e36:	4b31      	ldr	r3, [pc, #196]	; (8005efc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	099b      	lsrs	r3, r3, #6
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e46:	f04f 0100 	mov.w	r1, #0
 8005e4a:	ea02 0400 	and.w	r4, r2, r0
 8005e4e:	ea03 0501 	and.w	r5, r3, r1
 8005e52:	4620      	mov	r0, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	014b      	lsls	r3, r1, #5
 8005e60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e64:	0142      	lsls	r2, r0, #5
 8005e66:	4610      	mov	r0, r2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	1b00      	subs	r0, r0, r4
 8005e6c:	eb61 0105 	sbc.w	r1, r1, r5
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	018b      	lsls	r3, r1, #6
 8005e7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e7e:	0182      	lsls	r2, r0, #6
 8005e80:	1a12      	subs	r2, r2, r0
 8005e82:	eb63 0301 	sbc.w	r3, r3, r1
 8005e86:	f04f 0000 	mov.w	r0, #0
 8005e8a:	f04f 0100 	mov.w	r1, #0
 8005e8e:	00d9      	lsls	r1, r3, #3
 8005e90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e94:	00d0      	lsls	r0, r2, #3
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	1912      	adds	r2, r2, r4
 8005e9c:	eb45 0303 	adc.w	r3, r5, r3
 8005ea0:	f04f 0000 	mov.w	r0, #0
 8005ea4:	f04f 0100 	mov.w	r1, #0
 8005ea8:	0299      	lsls	r1, r3, #10
 8005eaa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005eae:	0290      	lsls	r0, r2, #10
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	f7fa fee2 	bl	8000c88 <__aeabi_uldivmod>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4613      	mov	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	60bb      	str	r3, [r7, #8]
      break;
 8005ee6:	e002      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005eea:	60bb      	str	r3, [r7, #8]
      break;
 8005eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eee:	68bb      	ldr	r3, [r7, #8]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005efa:	bf00      	nop
 8005efc:	40023800 	.word	0x40023800
 8005f00:	00f42400 	.word	0x00f42400
 8005f04:	007a1200 	.word	0x007a1200

08005f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f0c:	4b03      	ldr	r3, [pc, #12]	; (8005f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000054 	.word	0x20000054

08005f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f24:	f7ff fff0 	bl	8005f08 <HAL_RCC_GetHCLKFreq>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	0a9b      	lsrs	r3, r3, #10
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	4903      	ldr	r1, [pc, #12]	; (8005f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f36:	5ccb      	ldrb	r3, [r1, r3]
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40023800 	.word	0x40023800
 8005f44:	0800f8a4 	.word	0x0800f8a4

08005f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f4c:	f7ff ffdc 	bl	8005f08 <HAL_RCC_GetHCLKFreq>
 8005f50:	4602      	mov	r2, r0
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	0b5b      	lsrs	r3, r3, #13
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	4903      	ldr	r1, [pc, #12]	; (8005f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f5e:	5ccb      	ldrb	r3, [r1, r3]
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	0800f8a4 	.word	0x0800f8a4

08005f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e07b      	b.n	800607a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d108      	bne.n	8005f9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f92:	d009      	beq.n	8005fa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	61da      	str	r2, [r3, #28]
 8005f9a:	e005      	b.n	8005fa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fb ffd0 	bl	8001f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602c:	ea42 0103 	orr.w	r1, r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006034:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	0c1b      	lsrs	r3, r3, #16
 8006046:	f003 0104 	and.w	r1, r3, #4
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	f003 0210 	and.w	r2, r3, #16
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006068:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b08c      	sub	sp, #48	; 0x30
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006090:	2301      	movs	r3, #1
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_SPI_TransmitReceive+0x26>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e18a      	b.n	80063be <HAL_SPI_TransmitReceive+0x33c>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060b0:	f7fc ffb6 	bl	8003020 <HAL_GetTick>
 80060b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80060c6:	887b      	ldrh	r3, [r7, #2]
 80060c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d00f      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x70>
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d8:	d107      	bne.n	80060ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <HAL_SPI_TransmitReceive+0x68>
 80060e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d003      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060ea:	2302      	movs	r3, #2
 80060ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060f0:	e15b      	b.n	80063aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <HAL_SPI_TransmitReceive+0x82>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <HAL_SPI_TransmitReceive+0x82>
 80060fe:	887b      	ldrh	r3, [r7, #2]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800610a:	e14e      	b.n	80063aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b04      	cmp	r3, #4
 8006116:	d003      	beq.n	8006120 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2205      	movs	r2, #5
 800611c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	887a      	ldrh	r2, [r7, #2]
 8006130:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	887a      	ldrh	r2, [r7, #2]
 8006136:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	887a      	ldrh	r2, [r7, #2]
 8006142:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	887a      	ldrh	r2, [r7, #2]
 8006148:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006160:	2b40      	cmp	r3, #64	; 0x40
 8006162:	d007      	beq.n	8006174 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006172:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617c:	d178      	bne.n	8006270 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_SPI_TransmitReceive+0x10a>
 8006186:	8b7b      	ldrh	r3, [r7, #26]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d166      	bne.n	800625a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006190:	881a      	ldrh	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061b0:	e053      	b.n	800625a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d11b      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x176>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d016      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x176>
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d113      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d4:	881a      	ldrh	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e0:	1c9a      	adds	r2, r3, #2
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b01      	cmp	r3, #1
 8006204:	d119      	bne.n	800623a <HAL_SPI_TransmitReceive+0x1b8>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d014      	beq.n	800623a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	b292      	uxth	r2, r2
 800621c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	1c9a      	adds	r2, r3, #2
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006236:	2301      	movs	r3, #1
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800623a:	f7fc fef1 	bl	8003020 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006246:	429a      	cmp	r2, r3
 8006248:	d807      	bhi.n	800625a <HAL_SPI_TransmitReceive+0x1d8>
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006250:	d003      	beq.n	800625a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006258:	e0a7      	b.n	80063aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1a6      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x130>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1a1      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x130>
 800626e:	e07c      	b.n	800636a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_SPI_TransmitReceive+0x1fc>
 8006278:	8b7b      	ldrh	r3, [r7, #26]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d16b      	bne.n	8006356 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	7812      	ldrb	r2, [r2, #0]
 800628a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062a4:	e057      	b.n	8006356 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d11c      	bne.n	80062ee <HAL_SPI_TransmitReceive+0x26c>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d017      	beq.n	80062ee <HAL_SPI_TransmitReceive+0x26c>
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d114      	bne.n	80062ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	330c      	adds	r3, #12
 80062ce:	7812      	ldrb	r2, [r2, #0]
 80062d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d119      	bne.n	8006330 <HAL_SPI_TransmitReceive+0x2ae>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800632c:	2301      	movs	r3, #1
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006330:	f7fc fe76 	bl	8003020 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633c:	429a      	cmp	r2, r3
 800633e:	d803      	bhi.n	8006348 <HAL_SPI_TransmitReceive+0x2c6>
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006346:	d102      	bne.n	800634e <HAL_SPI_TransmitReceive+0x2cc>
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	2b00      	cmp	r3, #0
 800634c:	d103      	bne.n	8006356 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006354:	e029      	b.n	80063aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1a2      	bne.n	80062a6 <HAL_SPI_TransmitReceive+0x224>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d19d      	bne.n	80062a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800636a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 f8b2 	bl	80064d8 <SPI_EndRxTxTransaction>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d006      	beq.n	8006388 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006386:	e010      	b.n	80063aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	e000      	b.n	80063aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80063a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3730      	adds	r7, #48	; 0x30
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063d8:	f7fc fe22 	bl	8003020 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e0:	1a9b      	subs	r3, r3, r2
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	4413      	add	r3, r2
 80063e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063e8:	f7fc fe1a 	bl	8003020 <HAL_GetTick>
 80063ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063ee:	4b39      	ldr	r3, [pc, #228]	; (80064d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	015b      	lsls	r3, r3, #5
 80063f4:	0d1b      	lsrs	r3, r3, #20
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	fb02 f303 	mul.w	r3, r2, r3
 80063fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063fe:	e054      	b.n	80064aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006406:	d050      	beq.n	80064aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006408:	f7fc fe0a 	bl	8003020 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	429a      	cmp	r2, r3
 8006416:	d902      	bls.n	800641e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d13d      	bne.n	800649a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800642c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006436:	d111      	bne.n	800645c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006440:	d004      	beq.n	800644c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644a:	d107      	bne.n	800645c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800645a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006464:	d10f      	bne.n	8006486 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e017      	b.n	80064ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	bf0c      	ite	eq
 80064ba:	2301      	moveq	r3, #1
 80064bc:	2300      	movne	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d19b      	bne.n	8006400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000054 	.word	0x20000054

080064d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af02      	add	r7, sp, #8
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064e4:	4b1b      	ldr	r3, [pc, #108]	; (8006554 <SPI_EndRxTxTransaction+0x7c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <SPI_EndRxTxTransaction+0x80>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	0d5b      	lsrs	r3, r3, #21
 80064f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006502:	d112      	bne.n	800652a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2200      	movs	r2, #0
 800650c:	2180      	movs	r1, #128	; 0x80
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f7ff ff5a 	bl	80063c8 <SPI_WaitFlagStateUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d016      	beq.n	8006548 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	f043 0220 	orr.w	r2, r3, #32
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e00f      	b.n	800654a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	3b01      	subs	r3, #1
 8006534:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006540:	2b80      	cmp	r3, #128	; 0x80
 8006542:	d0f2      	beq.n	800652a <SPI_EndRxTxTransaction+0x52>
 8006544:	e000      	b.n	8006548 <SPI_EndRxTxTransaction+0x70>
        break;
 8006546:	bf00      	nop
  }

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000054 	.word	0x20000054
 8006558:	165e9f81 	.word	0x165e9f81

0800655c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e041      	b.n	80065f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fb ff0e 	bl	80023a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3304      	adds	r3, #4
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f000 fad8 	bl	8006b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e041      	b.n	8006690 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f839 	bl	8006698 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3304      	adds	r3, #4
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f000 fa89 	bl	8006b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d109      	bne.n	80066d0 <HAL_TIM_PWM_Start+0x24>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	bf14      	ite	ne
 80066c8:	2301      	movne	r3, #1
 80066ca:	2300      	moveq	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	e022      	b.n	8006716 <HAL_TIM_PWM_Start+0x6a>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d109      	bne.n	80066ea <HAL_TIM_PWM_Start+0x3e>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	bf14      	ite	ne
 80066e2:	2301      	movne	r3, #1
 80066e4:	2300      	moveq	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	e015      	b.n	8006716 <HAL_TIM_PWM_Start+0x6a>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d109      	bne.n	8006704 <HAL_TIM_PWM_Start+0x58>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	bf14      	ite	ne
 80066fc:	2301      	movne	r3, #1
 80066fe:	2300      	moveq	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	e008      	b.n	8006716 <HAL_TIM_PWM_Start+0x6a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	bf14      	ite	ne
 8006710:	2301      	movne	r3, #1
 8006712:	2300      	moveq	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e07c      	b.n	8006818 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <HAL_TIM_PWM_Start+0x82>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800672c:	e013      	b.n	8006756 <HAL_TIM_PWM_Start+0xaa>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b04      	cmp	r3, #4
 8006732:	d104      	bne.n	800673e <HAL_TIM_PWM_Start+0x92>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800673c:	e00b      	b.n	8006756 <HAL_TIM_PWM_Start+0xaa>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d104      	bne.n	800674e <HAL_TIM_PWM_Start+0xa2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800674c:	e003      	b.n	8006756 <HAL_TIM_PWM_Start+0xaa>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2202      	movs	r2, #2
 8006752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2201      	movs	r2, #1
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fce0 	bl	8007124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a2d      	ldr	r2, [pc, #180]	; (8006820 <HAL_TIM_PWM_Start+0x174>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d004      	beq.n	8006778 <HAL_TIM_PWM_Start+0xcc>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a2c      	ldr	r2, [pc, #176]	; (8006824 <HAL_TIM_PWM_Start+0x178>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d101      	bne.n	800677c <HAL_TIM_PWM_Start+0xd0>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <HAL_TIM_PWM_Start+0xd2>
 800677c:	2300      	movs	r3, #0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006790:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a22      	ldr	r2, [pc, #136]	; (8006820 <HAL_TIM_PWM_Start+0x174>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d022      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a4:	d01d      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1f      	ldr	r2, [pc, #124]	; (8006828 <HAL_TIM_PWM_Start+0x17c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d018      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1d      	ldr	r2, [pc, #116]	; (800682c <HAL_TIM_PWM_Start+0x180>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <HAL_TIM_PWM_Start+0x184>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00e      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a16      	ldr	r2, [pc, #88]	; (8006824 <HAL_TIM_PWM_Start+0x178>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d009      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <HAL_TIM_PWM_Start+0x188>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d004      	beq.n	80067e2 <HAL_TIM_PWM_Start+0x136>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a16      	ldr	r2, [pc, #88]	; (8006838 <HAL_TIM_PWM_Start+0x18c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d111      	bne.n	8006806 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b06      	cmp	r3, #6
 80067f2:	d010      	beq.n	8006816 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006804:	e007      	b.n	8006816 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	40010000 	.word	0x40010000
 8006824:	40010400 	.word	0x40010400
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40014000 	.word	0x40014000
 8006838:	40001800 	.word	0x40001800

0800683c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006856:	2302      	movs	r3, #2
 8006858:	e0ae      	b.n	80069b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b0c      	cmp	r3, #12
 8006866:	f200 809f 	bhi.w	80069a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800686a:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006870:	080068a5 	.word	0x080068a5
 8006874:	080069a9 	.word	0x080069a9
 8006878:	080069a9 	.word	0x080069a9
 800687c:	080069a9 	.word	0x080069a9
 8006880:	080068e5 	.word	0x080068e5
 8006884:	080069a9 	.word	0x080069a9
 8006888:	080069a9 	.word	0x080069a9
 800688c:	080069a9 	.word	0x080069a9
 8006890:	08006927 	.word	0x08006927
 8006894:	080069a9 	.word	0x080069a9
 8006898:	080069a9 	.word	0x080069a9
 800689c:	080069a9 	.word	0x080069a9
 80068a0:	08006967 	.word	0x08006967
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f9f0 	bl	8006c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0208 	orr.w	r2, r2, #8
 80068be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699a      	ldr	r2, [r3, #24]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0204 	bic.w	r2, r2, #4
 80068ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6999      	ldr	r1, [r3, #24]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	619a      	str	r2, [r3, #24]
      break;
 80068e2:	e064      	b.n	80069ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fa40 	bl	8006d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699a      	ldr	r2, [r3, #24]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800690e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6999      	ldr	r1, [r3, #24]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	021a      	lsls	r2, r3, #8
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	619a      	str	r2, [r3, #24]
      break;
 8006924:	e043      	b.n	80069ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fa95 	bl	8006e5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0208 	orr.w	r2, r2, #8
 8006940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0204 	bic.w	r2, r2, #4
 8006950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69d9      	ldr	r1, [r3, #28]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	61da      	str	r2, [r3, #28]
      break;
 8006964:	e023      	b.n	80069ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fae9 	bl	8006f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69da      	ldr	r2, [r3, #28]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69d9      	ldr	r1, [r3, #28]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	021a      	lsls	r2, r3, #8
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	61da      	str	r2, [r3, #28]
      break;
 80069a6:	e002      	b.n	80069ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
      break;
 80069ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d101      	bne.n	80069dc <HAL_TIM_ConfigClockSource+0x1c>
 80069d8:	2302      	movs	r3, #2
 80069da:	e0b4      	b.n	8006b46 <HAL_TIM_ConfigClockSource+0x186>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a14:	d03e      	beq.n	8006a94 <HAL_TIM_ConfigClockSource+0xd4>
 8006a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a1a:	f200 8087 	bhi.w	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a22:	f000 8086 	beq.w	8006b32 <HAL_TIM_ConfigClockSource+0x172>
 8006a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2a:	d87f      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a2c:	2b70      	cmp	r3, #112	; 0x70
 8006a2e:	d01a      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0xa6>
 8006a30:	2b70      	cmp	r3, #112	; 0x70
 8006a32:	d87b      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a34:	2b60      	cmp	r3, #96	; 0x60
 8006a36:	d050      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x11a>
 8006a38:	2b60      	cmp	r3, #96	; 0x60
 8006a3a:	d877      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a3c:	2b50      	cmp	r3, #80	; 0x50
 8006a3e:	d03c      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0xfa>
 8006a40:	2b50      	cmp	r3, #80	; 0x50
 8006a42:	d873      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d058      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x13a>
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	d86f      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	d064      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x15a>
 8006a50:	2b30      	cmp	r3, #48	; 0x30
 8006a52:	d86b      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d060      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x15a>
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d867      	bhi.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d05c      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x15a>
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d05a      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x15a>
 8006a64:	e062      	b.n	8006b2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6899      	ldr	r1, [r3, #8]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f000 fb35 	bl	80070e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	609a      	str	r2, [r3, #8]
      break;
 8006a92:	e04f      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	6899      	ldr	r1, [r3, #8]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f000 fb1e 	bl	80070e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab6:	609a      	str	r2, [r3, #8]
      break;
 8006ab8:	e03c      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f000 fa92 	bl	8006ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2150      	movs	r1, #80	; 0x50
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 faeb 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006ad8:	e02c      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6859      	ldr	r1, [r3, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f000 fab1 	bl	800704e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2160      	movs	r1, #96	; 0x60
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fadb 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006af8:	e01c      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6859      	ldr	r1, [r3, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f000 fa72 	bl	8006ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2140      	movs	r1, #64	; 0x40
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 facb 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006b18:	e00c      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4619      	mov	r1, r3
 8006b24:	4610      	mov	r0, r2
 8006b26:	f000 fac2 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006b2a:	e003      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b30:	e000      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a40      	ldr	r2, [pc, #256]	; (8006c64 <TIM_Base_SetConfig+0x114>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d013      	beq.n	8006b90 <TIM_Base_SetConfig+0x40>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6e:	d00f      	beq.n	8006b90 <TIM_Base_SetConfig+0x40>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a3d      	ldr	r2, [pc, #244]	; (8006c68 <TIM_Base_SetConfig+0x118>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00b      	beq.n	8006b90 <TIM_Base_SetConfig+0x40>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a3c      	ldr	r2, [pc, #240]	; (8006c6c <TIM_Base_SetConfig+0x11c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d007      	beq.n	8006b90 <TIM_Base_SetConfig+0x40>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a3b      	ldr	r2, [pc, #236]	; (8006c70 <TIM_Base_SetConfig+0x120>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d003      	beq.n	8006b90 <TIM_Base_SetConfig+0x40>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a3a      	ldr	r2, [pc, #232]	; (8006c74 <TIM_Base_SetConfig+0x124>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d108      	bne.n	8006ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a2f      	ldr	r2, [pc, #188]	; (8006c64 <TIM_Base_SetConfig+0x114>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d02b      	beq.n	8006c02 <TIM_Base_SetConfig+0xb2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb0:	d027      	beq.n	8006c02 <TIM_Base_SetConfig+0xb2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a2c      	ldr	r2, [pc, #176]	; (8006c68 <TIM_Base_SetConfig+0x118>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d023      	beq.n	8006c02 <TIM_Base_SetConfig+0xb2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a2b      	ldr	r2, [pc, #172]	; (8006c6c <TIM_Base_SetConfig+0x11c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d01f      	beq.n	8006c02 <TIM_Base_SetConfig+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a2a      	ldr	r2, [pc, #168]	; (8006c70 <TIM_Base_SetConfig+0x120>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d01b      	beq.n	8006c02 <TIM_Base_SetConfig+0xb2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a29      	ldr	r2, [pc, #164]	; (8006c74 <TIM_Base_SetConfig+0x124>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d017      	beq.n	8006c02 <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a28      	ldr	r2, [pc, #160]	; (8006c78 <TIM_Base_SetConfig+0x128>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a27      	ldr	r2, [pc, #156]	; (8006c7c <TIM_Base_SetConfig+0x12c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d00f      	beq.n	8006c02 <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a26      	ldr	r2, [pc, #152]	; (8006c80 <TIM_Base_SetConfig+0x130>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00b      	beq.n	8006c02 <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a25      	ldr	r2, [pc, #148]	; (8006c84 <TIM_Base_SetConfig+0x134>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d007      	beq.n	8006c02 <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a24      	ldr	r2, [pc, #144]	; (8006c88 <TIM_Base_SetConfig+0x138>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d003      	beq.n	8006c02 <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a23      	ldr	r2, [pc, #140]	; (8006c8c <TIM_Base_SetConfig+0x13c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d108      	bne.n	8006c14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a0a      	ldr	r2, [pc, #40]	; (8006c64 <TIM_Base_SetConfig+0x114>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d003      	beq.n	8006c48 <TIM_Base_SetConfig+0xf8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a0c      	ldr	r2, [pc, #48]	; (8006c74 <TIM_Base_SetConfig+0x124>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d103      	bne.n	8006c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	615a      	str	r2, [r3, #20]
}
 8006c56:	bf00      	nop
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40010000 	.word	0x40010000
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	40000c00 	.word	0x40000c00
 8006c74:	40010400 	.word	0x40010400
 8006c78:	40014000 	.word	0x40014000
 8006c7c:	40014400 	.word	0x40014400
 8006c80:	40014800 	.word	0x40014800
 8006c84:	40001800 	.word	0x40001800
 8006c88:	40001c00 	.word	0x40001c00
 8006c8c:	40002000 	.word	0x40002000

08006c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f023 0201 	bic.w	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0303 	bic.w	r3, r3, #3
 8006cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f023 0302 	bic.w	r3, r3, #2
 8006cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <TIM_OC1_SetConfig+0xd8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d003      	beq.n	8006cf4 <TIM_OC1_SetConfig+0x64>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a1f      	ldr	r2, [pc, #124]	; (8006d6c <TIM_OC1_SetConfig+0xdc>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d10c      	bne.n	8006d0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 0308 	bic.w	r3, r3, #8
 8006cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f023 0304 	bic.w	r3, r3, #4
 8006d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <TIM_OC1_SetConfig+0xd8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d003      	beq.n	8006d1e <TIM_OC1_SetConfig+0x8e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a14      	ldr	r2, [pc, #80]	; (8006d6c <TIM_OC1_SetConfig+0xdc>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d111      	bne.n	8006d42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	621a      	str	r2, [r3, #32]
}
 8006d5c:	bf00      	nop
 8006d5e:	371c      	adds	r7, #28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	40010000 	.word	0x40010000
 8006d6c:	40010400 	.word	0x40010400

08006d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f023 0210 	bic.w	r2, r3, #16
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f023 0320 	bic.w	r3, r3, #32
 8006dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <TIM_OC2_SetConfig+0xe4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d003      	beq.n	8006dd8 <TIM_OC2_SetConfig+0x68>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <TIM_OC2_SetConfig+0xe8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d10d      	bne.n	8006df4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a17      	ldr	r2, [pc, #92]	; (8006e54 <TIM_OC2_SetConfig+0xe4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC2_SetConfig+0x94>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a16      	ldr	r2, [pc, #88]	; (8006e58 <TIM_OC2_SetConfig+0xe8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d113      	bne.n	8006e2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	621a      	str	r2, [r3, #32]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40010000 	.word	0x40010000
 8006e58:	40010400 	.word	0x40010400

08006e5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0303 	bic.w	r3, r3, #3
 8006e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a21      	ldr	r2, [pc, #132]	; (8006f3c <TIM_OC3_SetConfig+0xe0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <TIM_OC3_SetConfig+0x66>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a20      	ldr	r2, [pc, #128]	; (8006f40 <TIM_OC3_SetConfig+0xe4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d10d      	bne.n	8006ede <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a16      	ldr	r2, [pc, #88]	; (8006f3c <TIM_OC3_SetConfig+0xe0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d003      	beq.n	8006eee <TIM_OC3_SetConfig+0x92>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a15      	ldr	r2, [pc, #84]	; (8006f40 <TIM_OC3_SetConfig+0xe4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d113      	bne.n	8006f16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	011b      	lsls	r3, r3, #4
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	621a      	str	r2, [r3, #32]
}
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40010000 	.word	0x40010000
 8006f40:	40010400 	.word	0x40010400

08006f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	031b      	lsls	r3, r3, #12
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a12      	ldr	r2, [pc, #72]	; (8006fe8 <TIM_OC4_SetConfig+0xa4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d003      	beq.n	8006fac <TIM_OC4_SetConfig+0x68>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a11      	ldr	r2, [pc, #68]	; (8006fec <TIM_OC4_SetConfig+0xa8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d109      	bne.n	8006fc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	019b      	lsls	r3, r3, #6
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40010000 	.word	0x40010000
 8006fec:	40010400 	.word	0x40010400

08006ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f023 0201 	bic.w	r2, r3, #1
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800701a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f023 030a 	bic.w	r3, r3, #10
 800702c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800704e:	b480      	push	{r7}
 8007050:	b087      	sub	sp, #28
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f023 0210 	bic.w	r2, r3, #16
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	031b      	lsls	r3, r3, #12
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800708a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f043 0307 	orr.w	r3, r3, #7
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	609a      	str	r2, [r3, #8]
}
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	021a      	lsls	r2, r3, #8
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	431a      	orrs	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	4313      	orrs	r3, r2
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	609a      	str	r2, [r3, #8]
}
 8007118:	bf00      	nop
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	2201      	movs	r2, #1
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	43db      	mvns	r3, r3
 8007146:	401a      	ands	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a1a      	ldr	r2, [r3, #32]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f003 031f 	and.w	r3, r3, #31
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	fa01 f303 	lsl.w	r3, r1, r3
 800715c:	431a      	orrs	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	621a      	str	r2, [r3, #32]
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007184:	2302      	movs	r3, #2
 8007186:	e05a      	b.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a21      	ldr	r2, [pc, #132]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d022      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d4:	d01d      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a1d      	ldr	r2, [pc, #116]	; (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d018      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a1b      	ldr	r2, [pc, #108]	; (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a1a      	ldr	r2, [pc, #104]	; (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00e      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a18      	ldr	r2, [pc, #96]	; (800725c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d009      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a17      	ldr	r2, [pc, #92]	; (8007260 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d004      	beq.n	8007212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a15      	ldr	r2, [pc, #84]	; (8007264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d10c      	bne.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4313      	orrs	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40010000 	.word	0x40010000
 8007250:	40000400 	.word	0x40000400
 8007254:	40000800 	.word	0x40000800
 8007258:	40000c00 	.word	0x40000c00
 800725c:	40010400 	.word	0x40010400
 8007260:	40014000 	.word	0x40014000
 8007264:	40001800 	.word	0x40001800

08007268 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007280:	2302      	movs	r3, #2
 8007282:	e03d      	b.n	8007300 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e03f      	b.n	800739e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7fb f8bc 	bl	80024b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2224      	movs	r2, #36	; 0x24
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800734e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f9cb 	bl	80076ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695a      	ldr	r2, [r3, #20]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b08a      	sub	sp, #40	; 0x28
 80073aa:	af02      	add	r7, sp, #8
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	60b9      	str	r1, [r7, #8]
 80073b0:	603b      	str	r3, [r7, #0]
 80073b2:	4613      	mov	r3, r2
 80073b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d17c      	bne.n	80074c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <HAL_UART_Transmit+0x2c>
 80073cc:	88fb      	ldrh	r3, [r7, #6]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e075      	b.n	80074c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_UART_Transmit+0x3e>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e06e      	b.n	80074c2 <HAL_UART_Transmit+0x11c>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2221      	movs	r2, #33	; 0x21
 80073f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073fa:	f7fb fe11 	bl	8003020 <HAL_GetTick>
 80073fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	88fa      	ldrh	r2, [r7, #6]
 8007404:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	88fa      	ldrh	r2, [r7, #6]
 800740a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007414:	d108      	bne.n	8007428 <HAL_UART_Transmit+0x82>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d104      	bne.n	8007428 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800741e:	2300      	movs	r3, #0
 8007420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	61bb      	str	r3, [r7, #24]
 8007426:	e003      	b.n	8007430 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800742c:	2300      	movs	r3, #0
 800742e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007438:	e02a      	b.n	8007490 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2200      	movs	r2, #0
 8007442:	2180      	movs	r1, #128	; 0x80
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f8e2 	bl	800760e <UART_WaitOnFlagUntilTimeout>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e036      	b.n	80074c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10b      	bne.n	8007472 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007468:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	3302      	adds	r3, #2
 800746e:	61bb      	str	r3, [r7, #24]
 8007470:	e007      	b.n	8007482 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	781a      	ldrb	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	3301      	adds	r3, #1
 8007480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1cf      	bne.n	800743a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2200      	movs	r2, #0
 80074a2:	2140      	movs	r1, #64	; 0x40
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 f8b2 	bl	800760e <UART_WaitOnFlagUntilTimeout>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e006      	b.n	80074c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	e000      	b.n	80074c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074c0:	2302      	movs	r3, #2
  }
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3720      	adds	r7, #32
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b08a      	sub	sp, #40	; 0x28
 80074ce:	af02      	add	r7, sp, #8
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	603b      	str	r3, [r7, #0]
 80074d6:	4613      	mov	r3, r2
 80074d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	f040 808c 	bne.w	8007604 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <HAL_UART_Receive+0x2e>
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e084      	b.n	8007606 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_UART_Receive+0x40>
 8007506:	2302      	movs	r3, #2
 8007508:	e07d      	b.n	8007606 <HAL_UART_Receive+0x13c>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2222      	movs	r2, #34	; 0x22
 800751c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007526:	f7fb fd7b 	bl	8003020 <HAL_GetTick>
 800752a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	88fa      	ldrh	r2, [r7, #6]
 8007530:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	88fa      	ldrh	r2, [r7, #6]
 8007536:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007540:	d108      	bne.n	8007554 <HAL_UART_Receive+0x8a>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d104      	bne.n	8007554 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800754a:	2300      	movs	r3, #0
 800754c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	61bb      	str	r3, [r7, #24]
 8007552:	e003      	b.n	800755c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007558:	2300      	movs	r3, #0
 800755a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007564:	e043      	b.n	80075ee <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2200      	movs	r2, #0
 800756e:	2120      	movs	r1, #32
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 f84c 	bl	800760e <UART_WaitOnFlagUntilTimeout>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e042      	b.n	8007606 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10c      	bne.n	80075a0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	b29b      	uxth	r3, r3
 800758e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007592:	b29a      	uxth	r2, r3
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	3302      	adds	r3, #2
 800759c:	61bb      	str	r3, [r7, #24]
 800759e:	e01f      	b.n	80075e0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a8:	d007      	beq.n	80075ba <HAL_UART_Receive+0xf0>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <HAL_UART_Receive+0xfe>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d106      	bne.n	80075c8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	e008      	b.n	80075da <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	3301      	adds	r3, #1
 80075de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1b6      	bne.n	8007566 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	e000      	b.n	8007606 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007604:	2302      	movs	r3, #2
  }
}
 8007606:	4618      	mov	r0, r3
 8007608:	3720      	adds	r7, #32
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b090      	sub	sp, #64	; 0x40
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	603b      	str	r3, [r7, #0]
 800761a:	4613      	mov	r3, r2
 800761c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800761e:	e050      	b.n	80076c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d04c      	beq.n	80076c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <UART_WaitOnFlagUntilTimeout+0x30>
 800762e:	f7fb fcf7 	bl	8003020 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800763a:	429a      	cmp	r2, r3
 800763c:	d241      	bcs.n	80076c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	330c      	adds	r3, #12
 8007644:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	330c      	adds	r3, #12
 800765c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800765e:	637a      	str	r2, [r7, #52]	; 0x34
 8007660:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e5      	bne.n	800763e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3314      	adds	r3, #20
 8007678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	613b      	str	r3, [r7, #16]
   return(result);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f023 0301 	bic.w	r3, r3, #1
 8007688:	63bb      	str	r3, [r7, #56]	; 0x38
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3314      	adds	r3, #20
 8007690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007692:	623a      	str	r2, [r7, #32]
 8007694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	69f9      	ldr	r1, [r7, #28]
 8007698:	6a3a      	ldr	r2, [r7, #32]
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	61bb      	str	r3, [r7, #24]
   return(result);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e5      	bne.n	8007672 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2220      	movs	r2, #32
 80076aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2220      	movs	r2, #32
 80076b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e00f      	b.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4013      	ands	r3, r2
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	bf0c      	ite	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	2300      	movne	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	461a      	mov	r2, r3
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d09f      	beq.n	8007620 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3740      	adds	r7, #64	; 0x40
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	b09f      	sub	sp, #124	; 0x7c
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007702:	68d9      	ldr	r1, [r3, #12]
 8007704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	ea40 0301 	orr.w	r3, r0, r1
 800770c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800770e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	431a      	orrs	r2, r3
 8007718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	431a      	orrs	r2, r3
 800771e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	4313      	orrs	r3, r2
 8007724:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007730:	f021 010c 	bic.w	r1, r1, #12
 8007734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800773a:	430b      	orrs	r3, r1
 800773c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800773e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774a:	6999      	ldr	r1, [r3, #24]
 800774c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	ea40 0301 	orr.w	r3, r0, r1
 8007754:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	4bc5      	ldr	r3, [pc, #788]	; (8007a70 <UART_SetConfig+0x384>)
 800775c:	429a      	cmp	r2, r3
 800775e:	d004      	beq.n	800776a <UART_SetConfig+0x7e>
 8007760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	4bc3      	ldr	r3, [pc, #780]	; (8007a74 <UART_SetConfig+0x388>)
 8007766:	429a      	cmp	r2, r3
 8007768:	d103      	bne.n	8007772 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800776a:	f7fe fbed 	bl	8005f48 <HAL_RCC_GetPCLK2Freq>
 800776e:	6778      	str	r0, [r7, #116]	; 0x74
 8007770:	e002      	b.n	8007778 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007772:	f7fe fbd5 	bl	8005f20 <HAL_RCC_GetPCLK1Freq>
 8007776:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007780:	f040 80b6 	bne.w	80078f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007786:	461c      	mov	r4, r3
 8007788:	f04f 0500 	mov.w	r5, #0
 800778c:	4622      	mov	r2, r4
 800778e:	462b      	mov	r3, r5
 8007790:	1891      	adds	r1, r2, r2
 8007792:	6439      	str	r1, [r7, #64]	; 0x40
 8007794:	415b      	adcs	r3, r3
 8007796:	647b      	str	r3, [r7, #68]	; 0x44
 8007798:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800779c:	1912      	adds	r2, r2, r4
 800779e:	eb45 0303 	adc.w	r3, r5, r3
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f04f 0100 	mov.w	r1, #0
 80077aa:	00d9      	lsls	r1, r3, #3
 80077ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077b0:	00d0      	lsls	r0, r2, #3
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	1911      	adds	r1, r2, r4
 80077b8:	6639      	str	r1, [r7, #96]	; 0x60
 80077ba:	416b      	adcs	r3, r5
 80077bc:	667b      	str	r3, [r7, #100]	; 0x64
 80077be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	461a      	mov	r2, r3
 80077c4:	f04f 0300 	mov.w	r3, #0
 80077c8:	1891      	adds	r1, r2, r2
 80077ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80077cc:	415b      	adcs	r3, r3
 80077ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80077d8:	f7f9 fa56 	bl	8000c88 <__aeabi_uldivmod>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4ba5      	ldr	r3, [pc, #660]	; (8007a78 <UART_SetConfig+0x38c>)
 80077e2:	fba3 2302 	umull	r2, r3, r3, r2
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	011e      	lsls	r6, r3, #4
 80077ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ec:	461c      	mov	r4, r3
 80077ee:	f04f 0500 	mov.w	r5, #0
 80077f2:	4622      	mov	r2, r4
 80077f4:	462b      	mov	r3, r5
 80077f6:	1891      	adds	r1, r2, r2
 80077f8:	6339      	str	r1, [r7, #48]	; 0x30
 80077fa:	415b      	adcs	r3, r3
 80077fc:	637b      	str	r3, [r7, #52]	; 0x34
 80077fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007802:	1912      	adds	r2, r2, r4
 8007804:	eb45 0303 	adc.w	r3, r5, r3
 8007808:	f04f 0000 	mov.w	r0, #0
 800780c:	f04f 0100 	mov.w	r1, #0
 8007810:	00d9      	lsls	r1, r3, #3
 8007812:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007816:	00d0      	lsls	r0, r2, #3
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	1911      	adds	r1, r2, r4
 800781e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007820:	416b      	adcs	r3, r5
 8007822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	461a      	mov	r2, r3
 800782a:	f04f 0300 	mov.w	r3, #0
 800782e:	1891      	adds	r1, r2, r2
 8007830:	62b9      	str	r1, [r7, #40]	; 0x28
 8007832:	415b      	adcs	r3, r3
 8007834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800783a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800783e:	f7f9 fa23 	bl	8000c88 <__aeabi_uldivmod>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4b8c      	ldr	r3, [pc, #560]	; (8007a78 <UART_SetConfig+0x38c>)
 8007848:	fba3 1302 	umull	r1, r3, r3, r2
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	2164      	movs	r1, #100	; 0x64
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	3332      	adds	r3, #50	; 0x32
 800785a:	4a87      	ldr	r2, [pc, #540]	; (8007a78 <UART_SetConfig+0x38c>)
 800785c:	fba2 2303 	umull	r2, r3, r2, r3
 8007860:	095b      	lsrs	r3, r3, #5
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007868:	441e      	add	r6, r3
 800786a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800786c:	4618      	mov	r0, r3
 800786e:	f04f 0100 	mov.w	r1, #0
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	1894      	adds	r4, r2, r2
 8007878:	623c      	str	r4, [r7, #32]
 800787a:	415b      	adcs	r3, r3
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
 800787e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007882:	1812      	adds	r2, r2, r0
 8007884:	eb41 0303 	adc.w	r3, r1, r3
 8007888:	f04f 0400 	mov.w	r4, #0
 800788c:	f04f 0500 	mov.w	r5, #0
 8007890:	00dd      	lsls	r5, r3, #3
 8007892:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007896:	00d4      	lsls	r4, r2, #3
 8007898:	4622      	mov	r2, r4
 800789a:	462b      	mov	r3, r5
 800789c:	1814      	adds	r4, r2, r0
 800789e:	653c      	str	r4, [r7, #80]	; 0x50
 80078a0:	414b      	adcs	r3, r1
 80078a2:	657b      	str	r3, [r7, #84]	; 0x54
 80078a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	461a      	mov	r2, r3
 80078aa:	f04f 0300 	mov.w	r3, #0
 80078ae:	1891      	adds	r1, r2, r2
 80078b0:	61b9      	str	r1, [r7, #24]
 80078b2:	415b      	adcs	r3, r3
 80078b4:	61fb      	str	r3, [r7, #28]
 80078b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80078be:	f7f9 f9e3 	bl	8000c88 <__aeabi_uldivmod>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4b6c      	ldr	r3, [pc, #432]	; (8007a78 <UART_SetConfig+0x38c>)
 80078c8:	fba3 1302 	umull	r1, r3, r3, r2
 80078cc:	095b      	lsrs	r3, r3, #5
 80078ce:	2164      	movs	r1, #100	; 0x64
 80078d0:	fb01 f303 	mul.w	r3, r1, r3
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	3332      	adds	r3, #50	; 0x32
 80078da:	4a67      	ldr	r2, [pc, #412]	; (8007a78 <UART_SetConfig+0x38c>)
 80078dc:	fba2 2303 	umull	r2, r3, r2, r3
 80078e0:	095b      	lsrs	r3, r3, #5
 80078e2:	f003 0207 	and.w	r2, r3, #7
 80078e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4432      	add	r2, r6
 80078ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078ee:	e0b9      	b.n	8007a64 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078f2:	461c      	mov	r4, r3
 80078f4:	f04f 0500 	mov.w	r5, #0
 80078f8:	4622      	mov	r2, r4
 80078fa:	462b      	mov	r3, r5
 80078fc:	1891      	adds	r1, r2, r2
 80078fe:	6139      	str	r1, [r7, #16]
 8007900:	415b      	adcs	r3, r3
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007908:	1912      	adds	r2, r2, r4
 800790a:	eb45 0303 	adc.w	r3, r5, r3
 800790e:	f04f 0000 	mov.w	r0, #0
 8007912:	f04f 0100 	mov.w	r1, #0
 8007916:	00d9      	lsls	r1, r3, #3
 8007918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800791c:	00d0      	lsls	r0, r2, #3
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	eb12 0804 	adds.w	r8, r2, r4
 8007926:	eb43 0905 	adc.w	r9, r3, r5
 800792a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	4618      	mov	r0, r3
 8007930:	f04f 0100 	mov.w	r1, #0
 8007934:	f04f 0200 	mov.w	r2, #0
 8007938:	f04f 0300 	mov.w	r3, #0
 800793c:	008b      	lsls	r3, r1, #2
 800793e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007942:	0082      	lsls	r2, r0, #2
 8007944:	4640      	mov	r0, r8
 8007946:	4649      	mov	r1, r9
 8007948:	f7f9 f99e 	bl	8000c88 <__aeabi_uldivmod>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4b49      	ldr	r3, [pc, #292]	; (8007a78 <UART_SetConfig+0x38c>)
 8007952:	fba3 2302 	umull	r2, r3, r3, r2
 8007956:	095b      	lsrs	r3, r3, #5
 8007958:	011e      	lsls	r6, r3, #4
 800795a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800795c:	4618      	mov	r0, r3
 800795e:	f04f 0100 	mov.w	r1, #0
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	1894      	adds	r4, r2, r2
 8007968:	60bc      	str	r4, [r7, #8]
 800796a:	415b      	adcs	r3, r3
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007972:	1812      	adds	r2, r2, r0
 8007974:	eb41 0303 	adc.w	r3, r1, r3
 8007978:	f04f 0400 	mov.w	r4, #0
 800797c:	f04f 0500 	mov.w	r5, #0
 8007980:	00dd      	lsls	r5, r3, #3
 8007982:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007986:	00d4      	lsls	r4, r2, #3
 8007988:	4622      	mov	r2, r4
 800798a:	462b      	mov	r3, r5
 800798c:	1814      	adds	r4, r2, r0
 800798e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007990:	414b      	adcs	r3, r1
 8007992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	4618      	mov	r0, r3
 800799a:	f04f 0100 	mov.w	r1, #0
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	008b      	lsls	r3, r1, #2
 80079a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079ac:	0082      	lsls	r2, r0, #2
 80079ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80079b2:	f7f9 f969 	bl	8000c88 <__aeabi_uldivmod>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4b2f      	ldr	r3, [pc, #188]	; (8007a78 <UART_SetConfig+0x38c>)
 80079bc:	fba3 1302 	umull	r1, r3, r3, r2
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	2164      	movs	r1, #100	; 0x64
 80079c4:	fb01 f303 	mul.w	r3, r1, r3
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	3332      	adds	r3, #50	; 0x32
 80079ce:	4a2a      	ldr	r2, [pc, #168]	; (8007a78 <UART_SetConfig+0x38c>)
 80079d0:	fba2 2303 	umull	r2, r3, r2, r3
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079da:	441e      	add	r6, r3
 80079dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079de:	4618      	mov	r0, r3
 80079e0:	f04f 0100 	mov.w	r1, #0
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	1894      	adds	r4, r2, r2
 80079ea:	603c      	str	r4, [r7, #0]
 80079ec:	415b      	adcs	r3, r3
 80079ee:	607b      	str	r3, [r7, #4]
 80079f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f4:	1812      	adds	r2, r2, r0
 80079f6:	eb41 0303 	adc.w	r3, r1, r3
 80079fa:	f04f 0400 	mov.w	r4, #0
 80079fe:	f04f 0500 	mov.w	r5, #0
 8007a02:	00dd      	lsls	r5, r3, #3
 8007a04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a08:	00d4      	lsls	r4, r2, #3
 8007a0a:	4622      	mov	r2, r4
 8007a0c:	462b      	mov	r3, r5
 8007a0e:	eb12 0a00 	adds.w	sl, r2, r0
 8007a12:	eb43 0b01 	adc.w	fp, r3, r1
 8007a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f04f 0100 	mov.w	r1, #0
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	008b      	lsls	r3, r1, #2
 8007a2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a2e:	0082      	lsls	r2, r0, #2
 8007a30:	4650      	mov	r0, sl
 8007a32:	4659      	mov	r1, fp
 8007a34:	f7f9 f928 	bl	8000c88 <__aeabi_uldivmod>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <UART_SetConfig+0x38c>)
 8007a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8007a42:	095b      	lsrs	r3, r3, #5
 8007a44:	2164      	movs	r1, #100	; 0x64
 8007a46:	fb01 f303 	mul.w	r3, r1, r3
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	3332      	adds	r3, #50	; 0x32
 8007a50:	4a09      	ldr	r2, [pc, #36]	; (8007a78 <UART_SetConfig+0x38c>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	095b      	lsrs	r3, r3, #5
 8007a58:	f003 020f 	and.w	r2, r3, #15
 8007a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4432      	add	r2, r6
 8007a62:	609a      	str	r2, [r3, #8]
}
 8007a64:	bf00      	nop
 8007a66:	377c      	adds	r7, #124	; 0x7c
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	bf00      	nop
 8007a70:	40011000 	.word	0x40011000
 8007a74:	40011400 	.word	0x40011400
 8007a78:	51eb851f 	.word	0x51eb851f

08007a7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007a80:	4904      	ldr	r1, [pc, #16]	; (8007a94 <MX_FATFS_Init+0x18>)
 8007a82:	4805      	ldr	r0, [pc, #20]	; (8007a98 <MX_FATFS_Init+0x1c>)
 8007a84:	f002 fc46 	bl	800a314 <FATFS_LinkDriver>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <MX_FATFS_Init+0x20>)
 8007a8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007a90:	bf00      	nop
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	200006b4 	.word	0x200006b4
 8007a98:	20000064 	.word	0x20000064
 8007a9c:	200006b8 	.word	0x200006b8

08007aa0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007aa4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_initialize(pdrv);
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fa fecb 	bl	8002858 <USER_SPI_initialize>
 8007ac2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return USER_SPI_status(pdrv);
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fa ffa9 	bl	8002a30 <USER_SPI_status>
 8007ade:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	607a      	str	r2, [r7, #4]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8007af8:	7bf8      	ldrb	r0, [r7, #15]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	f7fa ffac 	bl	8002a5c <USER_SPI_read>
 8007b04:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8007b1e:	7bf8      	ldrb	r0, [r7, #15]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	68b9      	ldr	r1, [r7, #8]
 8007b26:	f7fa ffff 	bl	8002b28 <USER_SPI_write>
 8007b2a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	603a      	str	r2, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
 8007b40:	460b      	mov	r3, r1
 8007b42:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007b44:	79b9      	ldrb	r1, [r7, #6]
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fb f868 	bl	8002c20 <USER_SPI_ioctl>
 8007b50:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	4a08      	ldr	r2, [pc, #32]	; (8007b8c <disk_status+0x30>)
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	79fa      	ldrb	r2, [r7, #7]
 8007b74:	4905      	ldr	r1, [pc, #20]	; (8007b8c <disk_status+0x30>)
 8007b76:	440a      	add	r2, r1
 8007b78:	7a12      	ldrb	r2, [r2, #8]
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	4798      	blx	r3
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	200002b4 	.word	0x200002b4

08007b90 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	4a0d      	ldr	r2, [pc, #52]	; (8007bd8 <disk_initialize+0x48>)
 8007ba2:	5cd3      	ldrb	r3, [r2, r3]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d111      	bne.n	8007bcc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	4a0b      	ldr	r2, [pc, #44]	; (8007bd8 <disk_initialize+0x48>)
 8007bac:	2101      	movs	r1, #1
 8007bae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	4a09      	ldr	r2, [pc, #36]	; (8007bd8 <disk_initialize+0x48>)
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	79fa      	ldrb	r2, [r7, #7]
 8007bbe:	4906      	ldr	r1, [pc, #24]	; (8007bd8 <disk_initialize+0x48>)
 8007bc0:	440a      	add	r2, r1
 8007bc2:	7a12      	ldrb	r2, [r2, #8]
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	200002b4 	.word	0x200002b4

08007bdc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007bdc:	b590      	push	{r4, r7, lr}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	607a      	str	r2, [r7, #4]
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	4a0a      	ldr	r2, [pc, #40]	; (8007c18 <disk_read+0x3c>)
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	689c      	ldr	r4, [r3, #8]
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	4a07      	ldr	r2, [pc, #28]	; (8007c18 <disk_read+0x3c>)
 8007bfc:	4413      	add	r3, r2
 8007bfe:	7a18      	ldrb	r0, [r3, #8]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	47a0      	blx	r4
 8007c08:	4603      	mov	r3, r0
 8007c0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	371c      	adds	r7, #28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd90      	pop	{r4, r7, pc}
 8007c16:	bf00      	nop
 8007c18:	200002b4 	.word	0x200002b4

08007c1c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007c1c:	b590      	push	{r4, r7, lr}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	607a      	str	r2, [r7, #4]
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	4a0a      	ldr	r2, [pc, #40]	; (8007c58 <disk_write+0x3c>)
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	68dc      	ldr	r4, [r3, #12]
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	4a07      	ldr	r2, [pc, #28]	; (8007c58 <disk_write+0x3c>)
 8007c3c:	4413      	add	r3, r2
 8007c3e:	7a18      	ldrb	r0, [r3, #8]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	68b9      	ldr	r1, [r7, #8]
 8007c46:	47a0      	blx	r4
 8007c48:	4603      	mov	r3, r0
 8007c4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	371c      	adds	r7, #28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd90      	pop	{r4, r7, pc}
 8007c56:	bf00      	nop
 8007c58:	200002b4 	.word	0x200002b4

08007c5c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	603a      	str	r2, [r7, #0]
 8007c66:	71fb      	strb	r3, [r7, #7]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	4a09      	ldr	r2, [pc, #36]	; (8007c94 <disk_ioctl+0x38>)
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	79fa      	ldrb	r2, [r7, #7]
 8007c7a:	4906      	ldr	r1, [pc, #24]	; (8007c94 <disk_ioctl+0x38>)
 8007c7c:	440a      	add	r2, r1
 8007c7e:	7a10      	ldrb	r0, [r2, #8]
 8007c80:	79b9      	ldrb	r1, [r7, #6]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	4798      	blx	r3
 8007c86:	4603      	mov	r3, r0
 8007c88:	73fb      	strb	r3, [r7, #15]
  return res;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	200002b4 	.word	0x200002b4

08007c98 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007ca8:	89fb      	ldrh	r3, [r7, #14]
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	b21a      	sxth	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	b21b      	sxth	r3, r3
 8007cb8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007cba:	89fb      	ldrh	r3, [r7, #14]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3303      	adds	r3, #3
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	3202      	adds	r2, #2
 8007ce0:	7812      	ldrb	r2, [r2, #0]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	021b      	lsls	r3, r3, #8
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	3201      	adds	r2, #1
 8007cee:	7812      	ldrb	r2, [r2, #0]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7812      	ldrb	r2, [r2, #0]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d00:	68fb      	ldr	r3, [r7, #12]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	887a      	ldrh	r2, [r7, #2]
 8007d22:	b2d2      	uxtb	r2, r2
 8007d24:	701a      	strb	r2, [r3, #0]
 8007d26:	887b      	ldrh	r3, [r7, #2]
 8007d28:	0a1b      	lsrs	r3, r3, #8
 8007d2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	607a      	str	r2, [r7, #4]
 8007d32:	887a      	ldrh	r2, [r7, #2]
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	701a      	strb	r2, [r3, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	0a1b      	lsrs	r3, r3, #8
 8007d5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	b2d2      	uxtb	r2, r2
 8007d6a:	701a      	strb	r2, [r3, #0]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	0a1b      	lsrs	r3, r3, #8
 8007d70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	607a      	str	r2, [r7, #4]
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	0a1b      	lsrs	r3, r3, #8
 8007d82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	607a      	str	r2, [r7, #4]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	b2d2      	uxtb	r2, r2
 8007d8e:	701a      	strb	r2, [r3, #0]
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00d      	beq.n	8007dd2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	1c53      	adds	r3, r2, #1
 8007dba:	613b      	str	r3, [r7, #16]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	1c59      	adds	r1, r3, #1
 8007dc0:	6179      	str	r1, [r7, #20]
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	607b      	str	r3, [r7, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1f1      	bne.n	8007db6 <mem_cpy+0x1a>
	}
}
 8007dd2:	bf00      	nop
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007dde:	b480      	push	{r7}
 8007de0:	b087      	sub	sp, #28
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	617a      	str	r2, [r7, #20]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	607b      	str	r3, [r7, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f3      	bne.n	8007dee <mem_set+0x10>
}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007e14:	b480      	push	{r7}
 8007e16:	b089      	sub	sp, #36	; 0x24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	61fb      	str	r3, [r7, #28]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	61fa      	str	r2, [r7, #28]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	4619      	mov	r1, r3
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	61ba      	str	r2, [r7, #24]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	1acb      	subs	r3, r1, r3
 8007e40:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <mem_cmp+0x40>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0eb      	beq.n	8007e2c <mem_cmp+0x18>

	return r;
 8007e54:	697b      	ldr	r3, [r7, #20]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3724      	adds	r7, #36	; 0x24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007e6c:	e002      	b.n	8007e74 <chk_chr+0x12>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3301      	adds	r3, #1
 8007e72:	607b      	str	r3, [r7, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <chk_chr+0x26>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d1f2      	bne.n	8007e6e <chk_chr+0xc>
	return *str;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60bb      	str	r3, [r7, #8]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	e029      	b.n	8007f00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007eac:	4a27      	ldr	r2, [pc, #156]	; (8007f4c <chk_lock+0xb4>)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	011b      	lsls	r3, r3, #4
 8007eb2:	4413      	add	r3, r2
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d01d      	beq.n	8007ef6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007eba:	4a24      	ldr	r2, [pc, #144]	; (8007f4c <chk_lock+0xb4>)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	4413      	add	r3, r2
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d116      	bne.n	8007efa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007ecc:	4a1f      	ldr	r2, [pc, #124]	; (8007f4c <chk_lock+0xb4>)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d10c      	bne.n	8007efa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007ee0:	4a1a      	ldr	r2, [pc, #104]	; (8007f4c <chk_lock+0xb4>)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3308      	adds	r3, #8
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d102      	bne.n	8007efa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007ef4:	e007      	b.n	8007f06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3301      	adds	r3, #1
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d9d2      	bls.n	8007eac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d109      	bne.n	8007f20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d102      	bne.n	8007f18 <chk_lock+0x80>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d101      	bne.n	8007f1c <chk_lock+0x84>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e010      	b.n	8007f3e <chk_lock+0xa6>
 8007f1c:	2312      	movs	r3, #18
 8007f1e:	e00e      	b.n	8007f3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d108      	bne.n	8007f38 <chk_lock+0xa0>
 8007f26:	4a09      	ldr	r2, [pc, #36]	; (8007f4c <chk_lock+0xb4>)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	4413      	add	r3, r2
 8007f2e:	330c      	adds	r3, #12
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f36:	d101      	bne.n	8007f3c <chk_lock+0xa4>
 8007f38:	2310      	movs	r3, #16
 8007f3a:	e000      	b.n	8007f3e <chk_lock+0xa6>
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20000294 	.word	0x20000294

08007f50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f56:	2300      	movs	r3, #0
 8007f58:	607b      	str	r3, [r7, #4]
 8007f5a:	e002      	b.n	8007f62 <enq_lock+0x12>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	607b      	str	r3, [r7, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d806      	bhi.n	8007f76 <enq_lock+0x26>
 8007f68:	4a09      	ldr	r2, [pc, #36]	; (8007f90 <enq_lock+0x40>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	011b      	lsls	r3, r3, #4
 8007f6e:	4413      	add	r3, r2
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1f2      	bne.n	8007f5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	bf14      	ite	ne
 8007f7c:	2301      	movne	r3, #1
 8007f7e:	2300      	moveq	r3, #0
 8007f80:	b2db      	uxtb	r3, r3
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	20000294 	.word	0x20000294

08007f94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	e01f      	b.n	8007fe4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007fa4:	4a41      	ldr	r2, [pc, #260]	; (80080ac <inc_lock+0x118>)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	4413      	add	r3, r2
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d113      	bne.n	8007fde <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007fb6:	4a3d      	ldr	r2, [pc, #244]	; (80080ac <inc_lock+0x118>)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	4413      	add	r3, r2
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d109      	bne.n	8007fde <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007fca:	4a38      	ldr	r2, [pc, #224]	; (80080ac <inc_lock+0x118>)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	011b      	lsls	r3, r3, #4
 8007fd0:	4413      	add	r3, r2
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d006      	beq.n	8007fec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d9dc      	bls.n	8007fa4 <inc_lock+0x10>
 8007fea:	e000      	b.n	8007fee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007fec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d132      	bne.n	800805a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	e002      	b.n	8008000 <inc_lock+0x6c>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d806      	bhi.n	8008014 <inc_lock+0x80>
 8008006:	4a29      	ldr	r2, [pc, #164]	; (80080ac <inc_lock+0x118>)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	4413      	add	r3, r2
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1f2      	bne.n	8007ffa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d101      	bne.n	800801e <inc_lock+0x8a>
 800801a:	2300      	movs	r3, #0
 800801c:	e040      	b.n	80080a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4922      	ldr	r1, [pc, #136]	; (80080ac <inc_lock+0x118>)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	440b      	add	r3, r1
 800802a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689a      	ldr	r2, [r3, #8]
 8008030:	491e      	ldr	r1, [pc, #120]	; (80080ac <inc_lock+0x118>)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	440b      	add	r3, r1
 8008038:	3304      	adds	r3, #4
 800803a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	695a      	ldr	r2, [r3, #20]
 8008040:	491a      	ldr	r1, [pc, #104]	; (80080ac <inc_lock+0x118>)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	440b      	add	r3, r1
 8008048:	3308      	adds	r3, #8
 800804a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800804c:	4a17      	ldr	r2, [pc, #92]	; (80080ac <inc_lock+0x118>)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	4413      	add	r3, r2
 8008054:	330c      	adds	r3, #12
 8008056:	2200      	movs	r2, #0
 8008058:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d009      	beq.n	8008074 <inc_lock+0xe0>
 8008060:	4a12      	ldr	r2, [pc, #72]	; (80080ac <inc_lock+0x118>)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	011b      	lsls	r3, r3, #4
 8008066:	4413      	add	r3, r2
 8008068:	330c      	adds	r3, #12
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <inc_lock+0xe0>
 8008070:	2300      	movs	r3, #0
 8008072:	e015      	b.n	80080a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d108      	bne.n	800808c <inc_lock+0xf8>
 800807a:	4a0c      	ldr	r2, [pc, #48]	; (80080ac <inc_lock+0x118>)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	011b      	lsls	r3, r3, #4
 8008080:	4413      	add	r3, r2
 8008082:	330c      	adds	r3, #12
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	3301      	adds	r3, #1
 8008088:	b29a      	uxth	r2, r3
 800808a:	e001      	b.n	8008090 <inc_lock+0xfc>
 800808c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008090:	4906      	ldr	r1, [pc, #24]	; (80080ac <inc_lock+0x118>)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	011b      	lsls	r3, r3, #4
 8008096:	440b      	add	r3, r1
 8008098:	330c      	adds	r3, #12
 800809a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3301      	adds	r3, #1
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20000294 	.word	0x20000294

080080b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	607b      	str	r3, [r7, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d825      	bhi.n	8008110 <dec_lock+0x60>
		n = Files[i].ctr;
 80080c4:	4a17      	ldr	r2, [pc, #92]	; (8008124 <dec_lock+0x74>)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	4413      	add	r3, r2
 80080cc:	330c      	adds	r3, #12
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80080d2:	89fb      	ldrh	r3, [r7, #14]
 80080d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d8:	d101      	bne.n	80080de <dec_lock+0x2e>
 80080da:	2300      	movs	r3, #0
 80080dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80080de:	89fb      	ldrh	r3, [r7, #14]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <dec_lock+0x3a>
 80080e4:	89fb      	ldrh	r3, [r7, #14]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80080ea:	4a0e      	ldr	r2, [pc, #56]	; (8008124 <dec_lock+0x74>)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	011b      	lsls	r3, r3, #4
 80080f0:	4413      	add	r3, r2
 80080f2:	330c      	adds	r3, #12
 80080f4:	89fa      	ldrh	r2, [r7, #14]
 80080f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80080f8:	89fb      	ldrh	r3, [r7, #14]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d105      	bne.n	800810a <dec_lock+0x5a>
 80080fe:	4a09      	ldr	r2, [pc, #36]	; (8008124 <dec_lock+0x74>)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	4413      	add	r3, r2
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	737b      	strb	r3, [r7, #13]
 800810e:	e001      	b.n	8008114 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008110:	2302      	movs	r3, #2
 8008112:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008114:	7b7b      	ldrb	r3, [r7, #13]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20000294 	.word	0x20000294

08008128 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008130:	2300      	movs	r3, #0
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	e010      	b.n	8008158 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008136:	4a0d      	ldr	r2, [pc, #52]	; (800816c <clear_lock+0x44>)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	4413      	add	r3, r2
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	d105      	bne.n	8008152 <clear_lock+0x2a>
 8008146:	4a09      	ldr	r2, [pc, #36]	; (800816c <clear_lock+0x44>)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	4413      	add	r3, r2
 800814e:	2200      	movs	r2, #0
 8008150:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3301      	adds	r3, #1
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d9eb      	bls.n	8008136 <clear_lock+0xe>
	}
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	20000294 	.word	0x20000294

08008170 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	78db      	ldrb	r3, [r3, #3]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d034      	beq.n	80081ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	7858      	ldrb	r0, [r3, #1]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008194:	2301      	movs	r3, #1
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	f7ff fd40 	bl	8007c1c <disk_write>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	73fb      	strb	r3, [r7, #15]
 80081a6:	e022      	b.n	80081ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	1ad2      	subs	r2, r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d217      	bcs.n	80081ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	789b      	ldrb	r3, [r3, #2]
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	e010      	b.n	80081e8 <sync_window+0x78>
					wsect += fs->fsize;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	4413      	add	r3, r2
 80081ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7858      	ldrb	r0, [r3, #1]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80081da:	2301      	movs	r3, #1
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	f7ff fd1d 	bl	8007c1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d8eb      	bhi.n	80081c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80081ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d01b      	beq.n	8008248 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff ffad 	bl	8008170 <sync_window>
 8008216:	4603      	mov	r3, r0
 8008218:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d113      	bne.n	8008248 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	7858      	ldrb	r0, [r3, #1]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800822a:	2301      	movs	r3, #1
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	f7ff fcd5 	bl	8007bdc <disk_read>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d004      	beq.n	8008242 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008238:	f04f 33ff 	mov.w	r3, #4294967295
 800823c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800823e:	2301      	movs	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff ff87 	bl	8008170 <sync_window>
 8008262:	4603      	mov	r3, r0
 8008264:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d158      	bne.n	800831e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	2b03      	cmp	r3, #3
 8008272:	d148      	bne.n	8008306 <sync_fs+0xb2>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	791b      	ldrb	r3, [r3, #4]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d144      	bne.n	8008306 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3330      	adds	r3, #48	; 0x30
 8008280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008284:	2100      	movs	r1, #0
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff fda9 	bl	8007dde <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3330      	adds	r3, #48	; 0x30
 8008290:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008294:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff fd38 	bl	8007d0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3330      	adds	r3, #48	; 0x30
 80082a2:	4921      	ldr	r1, [pc, #132]	; (8008328 <sync_fs+0xd4>)
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff fd4d 	bl	8007d44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3330      	adds	r3, #48	; 0x30
 80082ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80082b2:	491e      	ldr	r1, [pc, #120]	; (800832c <sync_fs+0xd8>)
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff fd45 	bl	8007d44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3330      	adds	r3, #48	; 0x30
 80082be:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f7ff fd3b 	bl	8007d44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3330      	adds	r3, #48	; 0x30
 80082d2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	4619      	mov	r1, r3
 80082dc:	4610      	mov	r0, r2
 80082de:	f7ff fd31 	bl	8007d44 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	7858      	ldrb	r0, [r3, #1]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fa:	2301      	movs	r3, #1
 80082fc:	f7ff fc8e 	bl	8007c1c <disk_write>
			fs->fsi_flag = 0;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	2200      	movs	r2, #0
 800830c:	2100      	movs	r1, #0
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff fca4 	bl	8007c5c <disk_ioctl>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <sync_fs+0xca>
 800831a:	2301      	movs	r3, #1
 800831c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	41615252 	.word	0x41615252
 800832c:	61417272 	.word	0x61417272

08008330 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	3b02      	subs	r3, #2
 800833e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	3b02      	subs	r3, #2
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	429a      	cmp	r2, r3
 800834a:	d301      	bcc.n	8008350 <clust2sect+0x20>
 800834c:	2300      	movs	r3, #0
 800834e:	e008      	b.n	8008362 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	895b      	ldrh	r3, [r3, #10]
 8008354:	461a      	mov	r2, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	fb03 f202 	mul.w	r2, r3, r2
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008360:	4413      	add	r3, r2
}
 8008362:	4618      	mov	r0, r3
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b086      	sub	sp, #24
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d904      	bls.n	800838e <get_fat+0x20>
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d302      	bcc.n	8008394 <get_fat+0x26>
		val = 1;	/* Internal error */
 800838e:	2301      	movs	r3, #1
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	e08f      	b.n	80084b4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008394:	f04f 33ff 	mov.w	r3, #4294967295
 8008398:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d062      	beq.n	8008468 <get_fat+0xfa>
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	dc7c      	bgt.n	80084a0 <get_fat+0x132>
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d002      	beq.n	80083b0 <get_fat+0x42>
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d042      	beq.n	8008434 <get_fat+0xc6>
 80083ae:	e077      	b.n	80084a0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	085b      	lsrs	r3, r3, #1
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	6a1a      	ldr	r2, [r3, #32]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	0a5b      	lsrs	r3, r3, #9
 80083c6:	4413      	add	r3, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	6938      	ldr	r0, [r7, #16]
 80083cc:	f7ff ff14 	bl	80081f8 <move_window>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d167      	bne.n	80084a6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	60fa      	str	r2, [r7, #12]
 80083dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	4413      	add	r3, r2
 80083e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	6a1a      	ldr	r2, [r3, #32]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	0a5b      	lsrs	r3, r3, #9
 80083f2:	4413      	add	r3, r2
 80083f4:	4619      	mov	r1, r3
 80083f6:	6938      	ldr	r0, [r7, #16]
 80083f8:	f7ff fefe 	bl	80081f8 <move_window>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d153      	bne.n	80084aa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	4413      	add	r3, r2
 800840c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008410:	021b      	lsls	r3, r3, #8
 8008412:	461a      	mov	r2, r3
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	4313      	orrs	r3, r2
 8008418:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <get_fat+0xbc>
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	091b      	lsrs	r3, r3, #4
 8008428:	e002      	b.n	8008430 <get_fat+0xc2>
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008430:	617b      	str	r3, [r7, #20]
			break;
 8008432:	e03f      	b.n	80084b4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	6a1a      	ldr	r2, [r3, #32]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	0a1b      	lsrs	r3, r3, #8
 800843c:	4413      	add	r3, r2
 800843e:	4619      	mov	r1, r3
 8008440:	6938      	ldr	r0, [r7, #16]
 8008442:	f7ff fed9 	bl	80081f8 <move_window>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d130      	bne.n	80084ae <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800845a:	4413      	add	r3, r2
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff fc1b 	bl	8007c98 <ld_word>
 8008462:	4603      	mov	r3, r0
 8008464:	617b      	str	r3, [r7, #20]
			break;
 8008466:	e025      	b.n	80084b4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	6a1a      	ldr	r2, [r3, #32]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	09db      	lsrs	r3, r3, #7
 8008470:	4413      	add	r3, r2
 8008472:	4619      	mov	r1, r3
 8008474:	6938      	ldr	r0, [r7, #16]
 8008476:	f7ff febf 	bl	80081f8 <move_window>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d118      	bne.n	80084b2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800848e:	4413      	add	r3, r2
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff fc19 	bl	8007cc8 <ld_dword>
 8008496:	4603      	mov	r3, r0
 8008498:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800849c:	617b      	str	r3, [r7, #20]
			break;
 800849e:	e009      	b.n	80084b4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80084a0:	2301      	movs	r3, #1
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	e006      	b.n	80084b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084a6:	bf00      	nop
 80084a8:	e004      	b.n	80084b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084aa:	bf00      	nop
 80084ac:	e002      	b.n	80084b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084ae:	bf00      	nop
 80084b0:	e000      	b.n	80084b4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084b2:	bf00      	nop
		}
	}

	return val;
 80084b4:	697b      	ldr	r3, [r7, #20]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80084be:	b590      	push	{r4, r7, lr}
 80084c0:	b089      	sub	sp, #36	; 0x24
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	60f8      	str	r0, [r7, #12]
 80084c6:	60b9      	str	r1, [r7, #8]
 80084c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80084ca:	2302      	movs	r3, #2
 80084cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	f240 80d2 	bls.w	800867a <put_fat+0x1bc>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	429a      	cmp	r2, r3
 80084de:	f080 80cc 	bcs.w	800867a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	f000 8096 	beq.w	8008618 <put_fat+0x15a>
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	f300 80cd 	bgt.w	800868c <put_fat+0x1ce>
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d002      	beq.n	80084fc <put_fat+0x3e>
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d06e      	beq.n	80085d8 <put_fat+0x11a>
 80084fa:	e0c7      	b.n	800868c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	61bb      	str	r3, [r7, #24]
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	085b      	lsrs	r3, r3, #1
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	4413      	add	r3, r2
 8008508:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a1a      	ldr	r2, [r3, #32]
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	0a5b      	lsrs	r3, r3, #9
 8008512:	4413      	add	r3, r2
 8008514:	4619      	mov	r1, r3
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f7ff fe6e 	bl	80081f8 <move_window>
 800851c:	4603      	mov	r3, r0
 800851e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008520:	7ffb      	ldrb	r3, [r7, #31]
 8008522:	2b00      	cmp	r3, #0
 8008524:	f040 80ab 	bne.w	800867e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	1c59      	adds	r1, r3, #1
 8008532:	61b9      	str	r1, [r7, #24]
 8008534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008538:	4413      	add	r3, r2
 800853a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00d      	beq.n	8008562 <put_fat+0xa4>
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	b25b      	sxtb	r3, r3
 800854c:	f003 030f 	and.w	r3, r3, #15
 8008550:	b25a      	sxtb	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	b2db      	uxtb	r3, r3
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	b25b      	sxtb	r3, r3
 800855a:	4313      	orrs	r3, r2
 800855c:	b25b      	sxtb	r3, r3
 800855e:	b2db      	uxtb	r3, r3
 8008560:	e001      	b.n	8008566 <put_fat+0xa8>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2201      	movs	r2, #1
 800856e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6a1a      	ldr	r2, [r3, #32]
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	0a5b      	lsrs	r3, r3, #9
 8008578:	4413      	add	r3, r2
 800857a:	4619      	mov	r1, r3
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff fe3b 	bl	80081f8 <move_window>
 8008582:	4603      	mov	r3, r0
 8008584:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008586:	7ffb      	ldrb	r3, [r7, #31]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d17a      	bne.n	8008682 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008598:	4413      	add	r3, r2
 800859a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <put_fat+0xf0>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	091b      	lsrs	r3, r3, #4
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	e00e      	b.n	80085cc <put_fat+0x10e>
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	b25b      	sxtb	r3, r3
 80085b4:	f023 030f 	bic.w	r3, r3, #15
 80085b8:	b25a      	sxtb	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	0a1b      	lsrs	r3, r3, #8
 80085be:	b25b      	sxtb	r3, r3
 80085c0:	f003 030f 	and.w	r3, r3, #15
 80085c4:	b25b      	sxtb	r3, r3
 80085c6:	4313      	orrs	r3, r2
 80085c8:	b25b      	sxtb	r3, r3
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	70da      	strb	r2, [r3, #3]
			break;
 80085d6:	e059      	b.n	800868c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a1a      	ldr	r2, [r3, #32]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	0a1b      	lsrs	r3, r3, #8
 80085e0:	4413      	add	r3, r2
 80085e2:	4619      	mov	r1, r3
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f7ff fe07 	bl	80081f8 <move_window>
 80085ea:	4603      	mov	r3, r0
 80085ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085ee:	7ffb      	ldrb	r3, [r7, #31]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d148      	bne.n	8008686 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008602:	4413      	add	r3, r2
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	b292      	uxth	r2, r2
 8008608:	4611      	mov	r1, r2
 800860a:	4618      	mov	r0, r3
 800860c:	f7ff fb7f 	bl	8007d0e <st_word>
			fs->wflag = 1;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	70da      	strb	r2, [r3, #3]
			break;
 8008616:	e039      	b.n	800868c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a1a      	ldr	r2, [r3, #32]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	09db      	lsrs	r3, r3, #7
 8008620:	4413      	add	r3, r2
 8008622:	4619      	mov	r1, r3
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7ff fde7 	bl	80081f8 <move_window>
 800862a:	4603      	mov	r3, r0
 800862c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800862e:	7ffb      	ldrb	r3, [r7, #31]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d12a      	bne.n	800868a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008648:	4413      	add	r3, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff fb3c 	bl	8007cc8 <ld_dword>
 8008650:	4603      	mov	r3, r0
 8008652:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008656:	4323      	orrs	r3, r4
 8008658:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008668:	4413      	add	r3, r2
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff fb69 	bl	8007d44 <st_dword>
			fs->wflag = 1;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	70da      	strb	r2, [r3, #3]
			break;
 8008678:	e008      	b.n	800868c <put_fat+0x1ce>
		}
	}
 800867a:	bf00      	nop
 800867c:	e006      	b.n	800868c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800867e:	bf00      	nop
 8008680:	e004      	b.n	800868c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008682:	bf00      	nop
 8008684:	e002      	b.n	800868c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008686:	bf00      	nop
 8008688:	e000      	b.n	800868c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800868a:	bf00      	nop
	return res;
 800868c:	7ffb      	ldrb	r3, [r7, #31]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3724      	adds	r7, #36	; 0x24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd90      	pop	{r4, r7, pc}

08008696 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b088      	sub	sp, #32
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d904      	bls.n	80086bc <remove_chain+0x26>
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d301      	bcc.n	80086c0 <remove_chain+0x2a>
 80086bc:	2302      	movs	r3, #2
 80086be:	e04b      	b.n	8008758 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00c      	beq.n	80086e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80086c6:	f04f 32ff 	mov.w	r2, #4294967295
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	69b8      	ldr	r0, [r7, #24]
 80086ce:	f7ff fef6 	bl	80084be <put_fat>
 80086d2:	4603      	mov	r3, r0
 80086d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80086d6:	7ffb      	ldrb	r3, [r7, #31]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <remove_chain+0x4a>
 80086dc:	7ffb      	ldrb	r3, [r7, #31]
 80086de:	e03b      	b.n	8008758 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80086e0:	68b9      	ldr	r1, [r7, #8]
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f7ff fe43 	bl	800836e <get_fat>
 80086e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d031      	beq.n	8008754 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d101      	bne.n	80086fa <remove_chain+0x64>
 80086f6:	2302      	movs	r3, #2
 80086f8:	e02e      	b.n	8008758 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d101      	bne.n	8008706 <remove_chain+0x70>
 8008702:	2301      	movs	r3, #1
 8008704:	e028      	b.n	8008758 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008706:	2200      	movs	r2, #0
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	69b8      	ldr	r0, [r7, #24]
 800870c:	f7ff fed7 	bl	80084be <put_fat>
 8008710:	4603      	mov	r3, r0
 8008712:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008714:	7ffb      	ldrb	r3, [r7, #31]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <remove_chain+0x88>
 800871a:	7ffb      	ldrb	r3, [r7, #31]
 800871c:	e01c      	b.n	8008758 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	691a      	ldr	r2, [r3, #16]
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	3b02      	subs	r3, #2
 8008728:	429a      	cmp	r2, r3
 800872a:	d20b      	bcs.n	8008744 <remove_chain+0xae>
			fs->free_clst++;
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	1c5a      	adds	r2, r3, #1
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	791b      	ldrb	r3, [r3, #4]
 800873a:	f043 0301 	orr.w	r3, r3, #1
 800873e:	b2da      	uxtb	r2, r3
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	429a      	cmp	r2, r3
 8008750:	d3c6      	bcc.n	80086e0 <remove_chain+0x4a>
 8008752:	e000      	b.n	8008756 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008754:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3720      	adds	r7, #32
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10d      	bne.n	8008792 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d004      	beq.n	800878c <create_chain+0x2c>
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	429a      	cmp	r2, r3
 800878a:	d31b      	bcc.n	80087c4 <create_chain+0x64>
 800878c:	2301      	movs	r3, #1
 800878e:	61bb      	str	r3, [r7, #24]
 8008790:	e018      	b.n	80087c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff fdea 	bl	800836e <get_fat>
 800879a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d801      	bhi.n	80087a6 <create_chain+0x46>
 80087a2:	2301      	movs	r3, #1
 80087a4:	e070      	b.n	8008888 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ac:	d101      	bne.n	80087b2 <create_chain+0x52>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	e06a      	b.n	8008888 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d201      	bcs.n	80087c0 <create_chain+0x60>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	e063      	b.n	8008888 <create_chain+0x128>
		scl = clst;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	3301      	adds	r3, #1
 80087cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	69fa      	ldr	r2, [r7, #28]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d307      	bcc.n	80087e8 <create_chain+0x88>
				ncl = 2;
 80087d8:	2302      	movs	r3, #2
 80087da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80087dc:	69fa      	ldr	r2, [r7, #28]
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d901      	bls.n	80087e8 <create_chain+0x88>
 80087e4:	2300      	movs	r3, #0
 80087e6:	e04f      	b.n	8008888 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80087e8:	69f9      	ldr	r1, [r7, #28]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7ff fdbf 	bl	800836e <get_fat>
 80087f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00e      	beq.n	8008816 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d003      	beq.n	8008806 <create_chain+0xa6>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d101      	bne.n	800880a <create_chain+0xaa>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	e03e      	b.n	8008888 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	429a      	cmp	r2, r3
 8008810:	d1da      	bne.n	80087c8 <create_chain+0x68>
 8008812:	2300      	movs	r3, #0
 8008814:	e038      	b.n	8008888 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008816:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008818:	f04f 32ff 	mov.w	r2, #4294967295
 800881c:	69f9      	ldr	r1, [r7, #28]
 800881e:	6938      	ldr	r0, [r7, #16]
 8008820:	f7ff fe4d 	bl	80084be <put_fat>
 8008824:	4603      	mov	r3, r0
 8008826:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008828:	7dfb      	ldrb	r3, [r7, #23]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <create_chain+0xe2>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d006      	beq.n	8008842 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008834:	69fa      	ldr	r2, [r7, #28]
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6938      	ldr	r0, [r7, #16]
 800883a:	f7ff fe40 	bl	80084be <put_fat>
 800883e:	4603      	mov	r3, r0
 8008840:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d116      	bne.n	8008876 <create_chain+0x116>
		fs->last_clst = ncl;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	69fa      	ldr	r2, [r7, #28]
 800884c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	691a      	ldr	r2, [r3, #16]
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	3b02      	subs	r3, #2
 8008858:	429a      	cmp	r2, r3
 800885a:	d804      	bhi.n	8008866 <create_chain+0x106>
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	1e5a      	subs	r2, r3, #1
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	791b      	ldrb	r3, [r3, #4]
 800886a:	f043 0301 	orr.w	r3, r3, #1
 800886e:	b2da      	uxtb	r2, r3
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	711a      	strb	r2, [r3, #4]
 8008874:	e007      	b.n	8008886 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d102      	bne.n	8008882 <create_chain+0x122>
 800887c:	f04f 33ff 	mov.w	r3, #4294967295
 8008880:	e000      	b.n	8008884 <create_chain+0x124>
 8008882:	2301      	movs	r3, #1
 8008884:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008886:	69fb      	ldr	r3, [r7, #28]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3720      	adds	r7, #32
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	3304      	adds	r3, #4
 80088a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	0a5b      	lsrs	r3, r3, #9
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	8952      	ldrh	r2, [r2, #10]
 80088b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	1d1a      	adds	r2, r3, #4
 80088ba:	613a      	str	r2, [r7, #16]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <clmt_clust+0x3a>
 80088c6:	2300      	movs	r3, #0
 80088c8:	e010      	b.n	80088ec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d307      	bcc.n	80088e2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	617b      	str	r3, [r7, #20]
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	3304      	adds	r3, #4
 80088de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80088e0:	e7e9      	b.n	80088b6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80088e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	4413      	add	r3, r2
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800890e:	d204      	bcs.n	800891a <dir_sdi+0x22>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	f003 031f 	and.w	r3, r3, #31
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <dir_sdi+0x26>
		return FR_INT_ERR;
 800891a:	2302      	movs	r3, #2
 800891c:	e063      	b.n	80089e6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d106      	bne.n	800893e <dir_sdi+0x46>
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d902      	bls.n	800893e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10c      	bne.n	800895e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	095b      	lsrs	r3, r3, #5
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	8912      	ldrh	r2, [r2, #8]
 800894c:	4293      	cmp	r3, r2
 800894e:	d301      	bcc.n	8008954 <dir_sdi+0x5c>
 8008950:	2302      	movs	r3, #2
 8008952:	e048      	b.n	80089e6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	61da      	str	r2, [r3, #28]
 800895c:	e029      	b.n	80089b2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	895b      	ldrh	r3, [r3, #10]
 8008962:	025b      	lsls	r3, r3, #9
 8008964:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008966:	e019      	b.n	800899c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6979      	ldr	r1, [r7, #20]
 800896c:	4618      	mov	r0, r3
 800896e:	f7ff fcfe 	bl	800836e <get_fat>
 8008972:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d101      	bne.n	8008980 <dir_sdi+0x88>
 800897c:	2301      	movs	r3, #1
 800897e:	e032      	b.n	80089e6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d904      	bls.n	8008990 <dir_sdi+0x98>
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	429a      	cmp	r2, r3
 800898e:	d301      	bcc.n	8008994 <dir_sdi+0x9c>
 8008990:	2302      	movs	r3, #2
 8008992:	e028      	b.n	80089e6 <dir_sdi+0xee>
			ofs -= csz;
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d2e1      	bcs.n	8008968 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80089a4:	6979      	ldr	r1, [r7, #20]
 80089a6:	6938      	ldr	r0, [r7, #16]
 80089a8:	f7ff fcc2 	bl	8008330 <clust2sect>
 80089ac:	4602      	mov	r2, r0
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <dir_sdi+0xcc>
 80089c0:	2302      	movs	r3, #2
 80089c2:	e010      	b.n	80089e6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	69da      	ldr	r2, [r3, #28]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	0a5b      	lsrs	r3, r3, #9
 80089cc:	441a      	add	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089de:	441a      	add	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b086      	sub	sp, #24
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	3320      	adds	r3, #32
 8008a04:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <dir_next+0x28>
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a14:	d301      	bcc.n	8008a1a <dir_next+0x2c>
 8008a16:	2304      	movs	r3, #4
 8008a18:	e0aa      	b.n	8008b70 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f040 8098 	bne.w	8008b56 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10b      	bne.n	8008a50 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	095b      	lsrs	r3, r3, #5
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	8912      	ldrh	r2, [r2, #8]
 8008a40:	4293      	cmp	r3, r2
 8008a42:	f0c0 8088 	bcc.w	8008b56 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	61da      	str	r2, [r3, #28]
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	e08f      	b.n	8008b70 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	0a5b      	lsrs	r3, r3, #9
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	8952      	ldrh	r2, [r2, #10]
 8008a58:	3a01      	subs	r2, #1
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d17a      	bne.n	8008b56 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	4619      	mov	r1, r3
 8008a68:	4610      	mov	r0, r2
 8008a6a:	f7ff fc80 	bl	800836e <get_fat>
 8008a6e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d801      	bhi.n	8008a7a <dir_next+0x8c>
 8008a76:	2302      	movs	r3, #2
 8008a78:	e07a      	b.n	8008b70 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d101      	bne.n	8008a86 <dir_next+0x98>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e074      	b.n	8008b70 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d358      	bcc.n	8008b42 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d104      	bne.n	8008aa0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	61da      	str	r2, [r3, #28]
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	e067      	b.n	8008b70 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	f7ff fe59 	bl	8008760 <create_chain>
 8008aae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <dir_next+0xcc>
 8008ab6:	2307      	movs	r3, #7
 8008ab8:	e05a      	b.n	8008b70 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d101      	bne.n	8008ac4 <dir_next+0xd6>
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e055      	b.n	8008b70 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d101      	bne.n	8008ad0 <dir_next+0xe2>
 8008acc:	2301      	movs	r3, #1
 8008ace:	e04f      	b.n	8008b70 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7ff fb4d 	bl	8008170 <sync_window>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <dir_next+0xf2>
 8008adc:	2301      	movs	r3, #1
 8008ade:	e047      	b.n	8008b70 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3330      	adds	r3, #48	; 0x30
 8008ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ae8:	2100      	movs	r1, #0
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff f977 	bl	8007dde <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008af0:	2300      	movs	r3, #0
 8008af2:	613b      	str	r3, [r7, #16]
 8008af4:	6979      	ldr	r1, [r7, #20]
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7ff fc1a 	bl	8008330 <clust2sect>
 8008afc:	4602      	mov	r2, r0
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b02:	e012      	b.n	8008b2a <dir_next+0x13c>
						fs->wflag = 1;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2201      	movs	r2, #1
 8008b08:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff fb30 	bl	8008170 <sync_window>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <dir_next+0x12c>
 8008b16:	2301      	movs	r3, #1
 8008b18:	e02a      	b.n	8008b70 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	613b      	str	r3, [r7, #16]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	895b      	ldrh	r3, [r3, #10]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d3e6      	bcc.n	8008b04 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	1ad2      	subs	r2, r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008b48:	6979      	ldr	r1, [r7, #20]
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7ff fbf0 	bl	8008330 <clust2sect>
 8008b50:	4602      	mov	r2, r0
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b68:	441a      	add	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008b88:	2100      	movs	r1, #0
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff feb4 	bl	80088f8 <dir_sdi>
 8008b90:	4603      	mov	r3, r0
 8008b92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d12b      	bne.n	8008bf2 <dir_alloc+0x7a>
		n = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7ff fb27 	bl	80081f8 <move_window>
 8008baa:	4603      	mov	r3, r0
 8008bac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d11d      	bne.n	8008bf0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	2be5      	cmp	r3, #229	; 0xe5
 8008bbc:	d004      	beq.n	8008bc8 <dir_alloc+0x50>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d107      	bne.n	8008bd8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	613b      	str	r3, [r7, #16]
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d102      	bne.n	8008bdc <dir_alloc+0x64>
 8008bd6:	e00c      	b.n	8008bf2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008bd8:	2300      	movs	r3, #0
 8008bda:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008bdc:	2101      	movs	r1, #1
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7ff ff05 	bl	80089ee <dir_next>
 8008be4:	4603      	mov	r3, r0
 8008be6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0d7      	beq.n	8008b9e <dir_alloc+0x26>
 8008bee:	e000      	b.n	8008bf2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008bf0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d101      	bne.n	8008bfc <dir_alloc+0x84>
 8008bf8:	2307      	movs	r3, #7
 8008bfa:	75fb      	strb	r3, [r7, #23]
	return res;
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	331a      	adds	r3, #26
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7ff f83f 	bl	8007c98 <ld_word>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d109      	bne.n	8008c3a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	3314      	adds	r3, #20
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff f834 	bl	8007c98 <ld_word>
 8008c30:	4603      	mov	r3, r0
 8008c32:	041b      	lsls	r3, r3, #16
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	331a      	adds	r3, #26
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	b292      	uxth	r2, r2
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff f857 	bl	8007d0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d109      	bne.n	8008c7c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f103 0214 	add.w	r2, r3, #20
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	0c1b      	lsrs	r3, r3, #16
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f7ff f849 	bl	8007d0e <st_word>
	}
}
 8008c7c:	bf00      	nop
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008c92:	2100      	movs	r1, #0
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff fe2f 	bl	80088f8 <dir_sdi>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <dir_find+0x24>
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
 8008ca6:	e03e      	b.n	8008d26 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	4619      	mov	r1, r3
 8008cae:	6938      	ldr	r0, [r7, #16]
 8008cb0:	f7ff faa2 	bl	80081f8 <move_window>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d12f      	bne.n	8008d1e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d102      	bne.n	8008cd2 <dir_find+0x4e>
 8008ccc:	2304      	movs	r3, #4
 8008cce:	75fb      	strb	r3, [r7, #23]
 8008cd0:	e028      	b.n	8008d24 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	330b      	adds	r3, #11
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	330b      	adds	r3, #11
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	f003 0308 	and.w	r3, r3, #8
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <dir_find+0x86>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a18      	ldr	r0, [r3, #32]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3324      	adds	r3, #36	; 0x24
 8008cfc:	220b      	movs	r2, #11
 8008cfe:	4619      	mov	r1, r3
 8008d00:	f7ff f888 	bl	8007e14 <mem_cmp>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00b      	beq.n	8008d22 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff fe6e 	bl	80089ee <dir_next>
 8008d12:	4603      	mov	r3, r0
 8008d14:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0c5      	beq.n	8008ca8 <dir_find+0x24>
 8008d1c:	e002      	b.n	8008d24 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008d1e:	bf00      	nop
 8008d20:	e000      	b.n	8008d24 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008d22:	bf00      	nop

	return res;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff ff1a 	bl	8008b78 <dir_alloc>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d11c      	bne.n	8008d88 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	4619      	mov	r1, r3
 8008d54:	68b8      	ldr	r0, [r7, #8]
 8008d56:	f7ff fa4f 	bl	80081f8 <move_window>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d111      	bne.n	8008d88 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a1b      	ldr	r3, [r3, #32]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff f836 	bl	8007dde <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a18      	ldr	r0, [r3, #32]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3324      	adds	r3, #36	; 0x24
 8008d7a:	220b      	movs	r2, #11
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f7ff f80d 	bl	8007d9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2201      	movs	r2, #1
 8008d86:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3324      	adds	r3, #36	; 0x24
 8008da8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008daa:	220b      	movs	r2, #11
 8008dac:	2120      	movs	r1, #32
 8008dae:	68b8      	ldr	r0, [r7, #8]
 8008db0:	f7ff f815 	bl	8007dde <mem_set>
	si = i = 0; ni = 8;
 8008db4:	2300      	movs	r3, #0
 8008db6:	613b      	str	r3, [r7, #16]
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	61fb      	str	r3, [r7, #28]
 8008dbc:	2308      	movs	r3, #8
 8008dbe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	61fa      	str	r2, [r7, #28]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	4413      	add	r3, r2
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008dce:	7efb      	ldrb	r3, [r7, #27]
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d94e      	bls.n	8008e72 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008dd4:	7efb      	ldrb	r3, [r7, #27]
 8008dd6:	2b2f      	cmp	r3, #47	; 0x2f
 8008dd8:	d006      	beq.n	8008de8 <create_name+0x54>
 8008dda:	7efb      	ldrb	r3, [r7, #27]
 8008ddc:	2b5c      	cmp	r3, #92	; 0x5c
 8008dde:	d110      	bne.n	8008e02 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008de0:	e002      	b.n	8008de8 <create_name+0x54>
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	3301      	adds	r3, #1
 8008de6:	61fb      	str	r3, [r7, #28]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	4413      	add	r3, r2
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	2b2f      	cmp	r3, #47	; 0x2f
 8008df2:	d0f6      	beq.n	8008de2 <create_name+0x4e>
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	4413      	add	r3, r2
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b5c      	cmp	r3, #92	; 0x5c
 8008dfe:	d0f0      	beq.n	8008de2 <create_name+0x4e>
			break;
 8008e00:	e038      	b.n	8008e74 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008e02:	7efb      	ldrb	r3, [r7, #27]
 8008e04:	2b2e      	cmp	r3, #46	; 0x2e
 8008e06:	d003      	beq.n	8008e10 <create_name+0x7c>
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d30c      	bcc.n	8008e2a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b0b      	cmp	r3, #11
 8008e14:	d002      	beq.n	8008e1c <create_name+0x88>
 8008e16:	7efb      	ldrb	r3, [r7, #27]
 8008e18:	2b2e      	cmp	r3, #46	; 0x2e
 8008e1a:	d001      	beq.n	8008e20 <create_name+0x8c>
 8008e1c:	2306      	movs	r3, #6
 8008e1e:	e044      	b.n	8008eaa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008e20:	2308      	movs	r3, #8
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	230b      	movs	r3, #11
 8008e26:	617b      	str	r3, [r7, #20]
			continue;
 8008e28:	e022      	b.n	8008e70 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008e2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	da04      	bge.n	8008e3c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008e32:	7efb      	ldrb	r3, [r7, #27]
 8008e34:	3b80      	subs	r3, #128	; 0x80
 8008e36:	4a1f      	ldr	r2, [pc, #124]	; (8008eb4 <create_name+0x120>)
 8008e38:	5cd3      	ldrb	r3, [r2, r3]
 8008e3a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008e3c:	7efb      	ldrb	r3, [r7, #27]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	481d      	ldr	r0, [pc, #116]	; (8008eb8 <create_name+0x124>)
 8008e42:	f7ff f80e 	bl	8007e62 <chk_chr>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <create_name+0xbc>
 8008e4c:	2306      	movs	r3, #6
 8008e4e:	e02c      	b.n	8008eaa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008e50:	7efb      	ldrb	r3, [r7, #27]
 8008e52:	2b60      	cmp	r3, #96	; 0x60
 8008e54:	d905      	bls.n	8008e62 <create_name+0xce>
 8008e56:	7efb      	ldrb	r3, [r7, #27]
 8008e58:	2b7a      	cmp	r3, #122	; 0x7a
 8008e5a:	d802      	bhi.n	8008e62 <create_name+0xce>
 8008e5c:	7efb      	ldrb	r3, [r7, #27]
 8008e5e:	3b20      	subs	r3, #32
 8008e60:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	613a      	str	r2, [r7, #16]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	7efa      	ldrb	r2, [r7, #27]
 8008e6e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008e70:	e7a6      	b.n	8008dc0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008e72:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	441a      	add	r2, r3
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <create_name+0xf4>
 8008e84:	2306      	movs	r3, #6
 8008e86:	e010      	b.n	8008eaa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2be5      	cmp	r3, #229	; 0xe5
 8008e8e:	d102      	bne.n	8008e96 <create_name+0x102>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2205      	movs	r2, #5
 8008e94:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008e96:	7efb      	ldrb	r3, [r7, #27]
 8008e98:	2b20      	cmp	r3, #32
 8008e9a:	d801      	bhi.n	8008ea0 <create_name+0x10c>
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	e000      	b.n	8008ea2 <create_name+0x10e>
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	330b      	adds	r3, #11
 8008ea6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008ea8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3720      	adds	r7, #32
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	0800f8b4 	.word	0x0800f8b4
 8008eb8:	0800f844 	.word	0x0800f844

08008ebc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008ed0:	e002      	b.n	8008ed8 <follow_path+0x1c>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b2f      	cmp	r3, #47	; 0x2f
 8008ede:	d0f8      	beq.n	8008ed2 <follow_path+0x16>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b5c      	cmp	r3, #92	; 0x5c
 8008ee6:	d0f4      	beq.n	8008ed2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	2200      	movs	r2, #0
 8008eec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b1f      	cmp	r3, #31
 8008ef4:	d80a      	bhi.n	8008f0c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2280      	movs	r2, #128	; 0x80
 8008efa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008efe:	2100      	movs	r1, #0
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff fcf9 	bl	80088f8 <dir_sdi>
 8008f06:	4603      	mov	r3, r0
 8008f08:	75fb      	strb	r3, [r7, #23]
 8008f0a:	e043      	b.n	8008f94 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f0c:	463b      	mov	r3, r7
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff ff3f 	bl	8008d94 <create_name>
 8008f16:	4603      	mov	r3, r0
 8008f18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d134      	bne.n	8008f8a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff feaf 	bl	8008c84 <dir_find>
 8008f26:	4603      	mov	r3, r0
 8008f28:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f30:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00a      	beq.n	8008f4e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d127      	bne.n	8008f8e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008f3e:	7afb      	ldrb	r3, [r7, #11]
 8008f40:	f003 0304 	and.w	r3, r3, #4
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d122      	bne.n	8008f8e <follow_path+0xd2>
 8008f48:	2305      	movs	r3, #5
 8008f4a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008f4c:	e01f      	b.n	8008f8e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f4e:	7afb      	ldrb	r3, [r7, #11]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d11c      	bne.n	8008f92 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	799b      	ldrb	r3, [r3, #6]
 8008f5c:	f003 0310 	and.w	r3, r3, #16
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d102      	bne.n	8008f6a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008f64:	2305      	movs	r3, #5
 8008f66:	75fb      	strb	r3, [r7, #23]
 8008f68:	e014      	b.n	8008f94 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f78:	4413      	add	r3, r2
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7ff fe42 	bl	8008c06 <ld_clust>
 8008f82:	4602      	mov	r2, r0
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f88:	e7c0      	b.n	8008f0c <follow_path+0x50>
			if (res != FR_OK) break;
 8008f8a:	bf00      	nop
 8008f8c:	e002      	b.n	8008f94 <follow_path+0xd8>
				break;
 8008f8e:	bf00      	nop
 8008f90:	e000      	b.n	8008f94 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f92:	bf00      	nop
			}
		}
	}

	return res;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b087      	sub	sp, #28
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008faa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d031      	beq.n	8009018 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	e002      	b.n	8008fc2 <get_ldnumber+0x24>
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	617b      	str	r3, [r7, #20]
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d903      	bls.n	8008fd2 <get_ldnumber+0x34>
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	2b3a      	cmp	r3, #58	; 0x3a
 8008fd0:	d1f4      	bne.n	8008fbc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2b3a      	cmp	r3, #58	; 0x3a
 8008fd8:	d11c      	bne.n	8009014 <get_ldnumber+0x76>
			tp = *path;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	60fa      	str	r2, [r7, #12]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	3b30      	subs	r3, #48	; 0x30
 8008fea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	2b09      	cmp	r3, #9
 8008ff0:	d80e      	bhi.n	8009010 <get_ldnumber+0x72>
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d10a      	bne.n	8009010 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d107      	bne.n	8009010 <get_ldnumber+0x72>
					vol = (int)i;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	3301      	adds	r3, #1
 8009008:	617b      	str	r3, [r7, #20]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	e002      	b.n	800901a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009014:	2300      	movs	r3, #0
 8009016:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009018:	693b      	ldr	r3, [r7, #16]
}
 800901a:	4618      	mov	r0, r3
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
	...

08009028 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	70da      	strb	r2, [r3, #3]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f04f 32ff 	mov.w	r2, #4294967295
 800903e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff f8d8 	bl	80081f8 <move_window>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <check_fs+0x2a>
 800904e:	2304      	movs	r3, #4
 8009050:	e038      	b.n	80090c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3330      	adds	r3, #48	; 0x30
 8009056:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fe1c 	bl	8007c98 <ld_word>
 8009060:	4603      	mov	r3, r0
 8009062:	461a      	mov	r2, r3
 8009064:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009068:	429a      	cmp	r2, r3
 800906a:	d001      	beq.n	8009070 <check_fs+0x48>
 800906c:	2303      	movs	r3, #3
 800906e:	e029      	b.n	80090c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009076:	2be9      	cmp	r3, #233	; 0xe9
 8009078:	d009      	beq.n	800908e <check_fs+0x66>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009080:	2beb      	cmp	r3, #235	; 0xeb
 8009082:	d11e      	bne.n	80090c2 <check_fs+0x9a>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800908a:	2b90      	cmp	r3, #144	; 0x90
 800908c:	d119      	bne.n	80090c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3330      	adds	r3, #48	; 0x30
 8009092:	3336      	adds	r3, #54	; 0x36
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fe17 	bl	8007cc8 <ld_dword>
 800909a:	4603      	mov	r3, r0
 800909c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090a0:	4a0a      	ldr	r2, [pc, #40]	; (80090cc <check_fs+0xa4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d101      	bne.n	80090aa <check_fs+0x82>
 80090a6:	2300      	movs	r3, #0
 80090a8:	e00c      	b.n	80090c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3330      	adds	r3, #48	; 0x30
 80090ae:	3352      	adds	r3, #82	; 0x52
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe fe09 	bl	8007cc8 <ld_dword>
 80090b6:	4603      	mov	r3, r0
 80090b8:	4a05      	ldr	r2, [pc, #20]	; (80090d0 <check_fs+0xa8>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d101      	bne.n	80090c2 <check_fs+0x9a>
 80090be:	2300      	movs	r3, #0
 80090c0:	e000      	b.n	80090c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80090c2:	2302      	movs	r3, #2
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	00544146 	.word	0x00544146
 80090d0:	33544146 	.word	0x33544146

080090d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b096      	sub	sp, #88	; 0x58
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	4613      	mov	r3, r2
 80090e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	2200      	movs	r2, #0
 80090e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f7ff ff58 	bl	8008f9e <get_ldnumber>
 80090ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80090f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	da01      	bge.n	80090fa <find_volume+0x26>
 80090f6:	230b      	movs	r3, #11
 80090f8:	e22e      	b.n	8009558 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80090fa:	4aa8      	ldr	r2, [pc, #672]	; (800939c <find_volume+0x2c8>)
 80090fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009102:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <find_volume+0x3a>
 800910a:	230c      	movs	r3, #12
 800910c:	e224      	b.n	8009558 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009112:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	f023 0301 	bic.w	r3, r3, #1
 800911a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d01a      	beq.n	800915a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	785b      	ldrb	r3, [r3, #1]
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe fd17 	bl	8007b5c <disk_status>
 800912e:	4603      	mov	r3, r0
 8009130:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009134:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10c      	bne.n	800915a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009140:	79fb      	ldrb	r3, [r7, #7]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d007      	beq.n	8009156 <find_volume+0x82>
 8009146:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800914a:	f003 0304 	and.w	r3, r3, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009152:	230a      	movs	r3, #10
 8009154:	e200      	b.n	8009558 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8009156:	2300      	movs	r3, #0
 8009158:	e1fe      	b.n	8009558 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	2200      	movs	r2, #0
 800915e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009162:	b2da      	uxtb	r2, r3
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	785b      	ldrb	r3, [r3, #1]
 800916c:	4618      	mov	r0, r3
 800916e:	f7fe fd0f 	bl	8007b90 <disk_initialize>
 8009172:	4603      	mov	r3, r0
 8009174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009184:	2303      	movs	r3, #3
 8009186:	e1e7      	b.n	8009558 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <find_volume+0xca>
 800918e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009192:	f003 0304 	and.w	r3, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	d001      	beq.n	800919e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800919a:	230a      	movs	r3, #10
 800919c:	e1dc      	b.n	8009558 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800919e:	2300      	movs	r3, #0
 80091a0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80091a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091a6:	f7ff ff3f 	bl	8009028 <check_fs>
 80091aa:	4603      	mov	r3, r0
 80091ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80091b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d14b      	bne.n	8009250 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80091b8:	2300      	movs	r3, #0
 80091ba:	643b      	str	r3, [r7, #64]	; 0x40
 80091bc:	e01f      	b.n	80091fe <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80091c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c6:	011b      	lsls	r3, r3, #4
 80091c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80091cc:	4413      	add	r3, r2
 80091ce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80091d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d2:	3304      	adds	r3, #4
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d006      	beq.n	80091e8 <find_volume+0x114>
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	3308      	adds	r3, #8
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fe fd72 	bl	8007cc8 <ld_dword>
 80091e4:	4602      	mov	r2, r0
 80091e6:	e000      	b.n	80091ea <find_volume+0x116>
 80091e8:	2200      	movs	r2, #0
 80091ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80091f2:	440b      	add	r3, r1
 80091f4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80091f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091fa:	3301      	adds	r3, #1
 80091fc:	643b      	str	r3, [r7, #64]	; 0x40
 80091fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009200:	2b03      	cmp	r3, #3
 8009202:	d9dc      	bls.n	80091be <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009204:	2300      	movs	r3, #0
 8009206:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <find_volume+0x140>
 800920e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009210:	3b01      	subs	r3, #1
 8009212:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800921c:	4413      	add	r3, r2
 800921e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009222:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009226:	2b00      	cmp	r3, #0
 8009228:	d005      	beq.n	8009236 <find_volume+0x162>
 800922a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800922c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800922e:	f7ff fefb 	bl	8009028 <check_fs>
 8009232:	4603      	mov	r3, r0
 8009234:	e000      	b.n	8009238 <find_volume+0x164>
 8009236:	2303      	movs	r3, #3
 8009238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800923c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009240:	2b01      	cmp	r3, #1
 8009242:	d905      	bls.n	8009250 <find_volume+0x17c>
 8009244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009246:	3301      	adds	r3, #1
 8009248:	643b      	str	r3, [r7, #64]	; 0x40
 800924a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800924c:	2b03      	cmp	r3, #3
 800924e:	d9e1      	bls.n	8009214 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009254:	2b04      	cmp	r3, #4
 8009256:	d101      	bne.n	800925c <find_volume+0x188>
 8009258:	2301      	movs	r3, #1
 800925a:	e17d      	b.n	8009558 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800925c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009260:	2b01      	cmp	r3, #1
 8009262:	d901      	bls.n	8009268 <find_volume+0x194>
 8009264:	230d      	movs	r3, #13
 8009266:	e177      	b.n	8009558 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926a:	3330      	adds	r3, #48	; 0x30
 800926c:	330b      	adds	r3, #11
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe fd12 	bl	8007c98 <ld_word>
 8009274:	4603      	mov	r3, r0
 8009276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800927a:	d001      	beq.n	8009280 <find_volume+0x1ac>
 800927c:	230d      	movs	r3, #13
 800927e:	e16b      	b.n	8009558 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	3330      	adds	r3, #48	; 0x30
 8009284:	3316      	adds	r3, #22
 8009286:	4618      	mov	r0, r3
 8009288:	f7fe fd06 	bl	8007c98 <ld_word>
 800928c:	4603      	mov	r3, r0
 800928e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009292:	2b00      	cmp	r3, #0
 8009294:	d106      	bne.n	80092a4 <find_volume+0x1d0>
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	3330      	adds	r3, #48	; 0x30
 800929a:	3324      	adds	r3, #36	; 0x24
 800929c:	4618      	mov	r0, r3
 800929e:	f7fe fd13 	bl	8007cc8 <ld_dword>
 80092a2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092a8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80092b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b6:	789b      	ldrb	r3, [r3, #2]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d005      	beq.n	80092c8 <find_volume+0x1f4>
 80092bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092be:	789b      	ldrb	r3, [r3, #2]
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d001      	beq.n	80092c8 <find_volume+0x1f4>
 80092c4:	230d      	movs	r3, #13
 80092c6:	e147      	b.n	8009558 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80092c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ca:	789b      	ldrb	r3, [r3, #2]
 80092cc:	461a      	mov	r2, r3
 80092ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d0:	fb02 f303 	mul.w	r3, r2, r3
 80092d4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092dc:	b29a      	uxth	r2, r3
 80092de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80092e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e4:	895b      	ldrh	r3, [r3, #10]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d008      	beq.n	80092fc <find_volume+0x228>
 80092ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ec:	895b      	ldrh	r3, [r3, #10]
 80092ee:	461a      	mov	r2, r3
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	895b      	ldrh	r3, [r3, #10]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	4013      	ands	r3, r2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <find_volume+0x22c>
 80092fc:	230d      	movs	r3, #13
 80092fe:	e12b      	b.n	8009558 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009302:	3330      	adds	r3, #48	; 0x30
 8009304:	3311      	adds	r3, #17
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fcc6 	bl	8007c98 <ld_word>
 800930c:	4603      	mov	r3, r0
 800930e:	461a      	mov	r2, r3
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	891b      	ldrh	r3, [r3, #8]
 8009318:	f003 030f 	and.w	r3, r3, #15
 800931c:	b29b      	uxth	r3, r3
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <find_volume+0x252>
 8009322:	230d      	movs	r3, #13
 8009324:	e118      	b.n	8009558 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	3330      	adds	r3, #48	; 0x30
 800932a:	3313      	adds	r3, #19
 800932c:	4618      	mov	r0, r3
 800932e:	f7fe fcb3 	bl	8007c98 <ld_word>
 8009332:	4603      	mov	r3, r0
 8009334:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009338:	2b00      	cmp	r3, #0
 800933a:	d106      	bne.n	800934a <find_volume+0x276>
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	3330      	adds	r3, #48	; 0x30
 8009340:	3320      	adds	r3, #32
 8009342:	4618      	mov	r0, r3
 8009344:	f7fe fcc0 	bl	8007cc8 <ld_dword>
 8009348:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800934a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934c:	3330      	adds	r3, #48	; 0x30
 800934e:	330e      	adds	r3, #14
 8009350:	4618      	mov	r0, r3
 8009352:	f7fe fca1 	bl	8007c98 <ld_word>
 8009356:	4603      	mov	r3, r0
 8009358:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800935a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <find_volume+0x290>
 8009360:	230d      	movs	r3, #13
 8009362:	e0f9      	b.n	8009558 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009364:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009368:	4413      	add	r3, r2
 800936a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800936c:	8912      	ldrh	r2, [r2, #8]
 800936e:	0912      	lsrs	r2, r2, #4
 8009370:	b292      	uxth	r2, r2
 8009372:	4413      	add	r3, r2
 8009374:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	429a      	cmp	r2, r3
 800937c:	d201      	bcs.n	8009382 <find_volume+0x2ae>
 800937e:	230d      	movs	r3, #13
 8009380:	e0ea      	b.n	8009558 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800938a:	8952      	ldrh	r2, [r2, #10]
 800938c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009390:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	2b00      	cmp	r3, #0
 8009396:	d103      	bne.n	80093a0 <find_volume+0x2cc>
 8009398:	230d      	movs	r3, #13
 800939a:	e0dd      	b.n	8009558 <find_volume+0x484>
 800939c:	2000028c 	.word	0x2000028c
		fmt = FS_FAT32;
 80093a0:	2303      	movs	r3, #3
 80093a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d802      	bhi.n	80093b6 <find_volume+0x2e2>
 80093b0:	2302      	movs	r3, #2
 80093b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80093bc:	4293      	cmp	r3, r2
 80093be:	d802      	bhi.n	80093c6 <find_volume+0x2f2>
 80093c0:	2301      	movs	r3, #1
 80093c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	1c9a      	adds	r2, r3, #2
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80093ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093d2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80093d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093d8:	441a      	add	r2, r3
 80093da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093dc:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80093de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	441a      	add	r2, r3
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80093e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d11e      	bne.n	800942e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	3330      	adds	r3, #48	; 0x30
 80093f4:	332a      	adds	r3, #42	; 0x2a
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe fc4e 	bl	8007c98 <ld_word>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <find_volume+0x332>
 8009402:	230d      	movs	r3, #13
 8009404:	e0a8      	b.n	8009558 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009408:	891b      	ldrh	r3, [r3, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <find_volume+0x33e>
 800940e:	230d      	movs	r3, #13
 8009410:	e0a2      	b.n	8009558 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009414:	3330      	adds	r3, #48	; 0x30
 8009416:	332c      	adds	r3, #44	; 0x2c
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe fc55 	bl	8007cc8 <ld_dword>
 800941e:	4602      	mov	r2, r0
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	647b      	str	r3, [r7, #68]	; 0x44
 800942c:	e01f      	b.n	800946e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	891b      	ldrh	r3, [r3, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <find_volume+0x366>
 8009436:	230d      	movs	r3, #13
 8009438:	e08e      	b.n	8009558 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943c:	6a1a      	ldr	r2, [r3, #32]
 800943e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009440:	441a      	add	r2, r3
 8009442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009444:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009446:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800944a:	2b02      	cmp	r3, #2
 800944c:	d103      	bne.n	8009456 <find_volume+0x382>
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	e00a      	b.n	800946c <find_volume+0x398>
 8009456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009458:	695a      	ldr	r2, [r3, #20]
 800945a:	4613      	mov	r3, r2
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	4413      	add	r3, r2
 8009460:	085a      	lsrs	r2, r3, #1
 8009462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800946c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	699a      	ldr	r2, [r3, #24]
 8009472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009474:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009478:	0a5b      	lsrs	r3, r3, #9
 800947a:	429a      	cmp	r2, r3
 800947c:	d201      	bcs.n	8009482 <find_volume+0x3ae>
 800947e:	230d      	movs	r3, #13
 8009480:	e06a      	b.n	8009558 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009484:	f04f 32ff 	mov.w	r2, #4294967295
 8009488:	611a      	str	r2, [r3, #16]
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	691a      	ldr	r2, [r3, #16]
 800948e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009490:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009494:	2280      	movs	r2, #128	; 0x80
 8009496:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009498:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800949c:	2b03      	cmp	r3, #3
 800949e:	d149      	bne.n	8009534 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	3330      	adds	r3, #48	; 0x30
 80094a4:	3330      	adds	r3, #48	; 0x30
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fbf6 	bl	8007c98 <ld_word>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d140      	bne.n	8009534 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80094b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094b4:	3301      	adds	r3, #1
 80094b6:	4619      	mov	r1, r3
 80094b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094ba:	f7fe fe9d 	bl	80081f8 <move_window>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d137      	bne.n	8009534 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	2200      	movs	r2, #0
 80094c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80094ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094cc:	3330      	adds	r3, #48	; 0x30
 80094ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fe fbe0 	bl	8007c98 <ld_word>
 80094d8:	4603      	mov	r3, r0
 80094da:	461a      	mov	r2, r3
 80094dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d127      	bne.n	8009534 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	3330      	adds	r3, #48	; 0x30
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe fbed 	bl	8007cc8 <ld_dword>
 80094ee:	4603      	mov	r3, r0
 80094f0:	4a1b      	ldr	r2, [pc, #108]	; (8009560 <find_volume+0x48c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d11e      	bne.n	8009534 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	3330      	adds	r3, #48	; 0x30
 80094fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fe fbe2 	bl	8007cc8 <ld_dword>
 8009504:	4603      	mov	r3, r0
 8009506:	4a17      	ldr	r2, [pc, #92]	; (8009564 <find_volume+0x490>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d113      	bne.n	8009534 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	3330      	adds	r3, #48	; 0x30
 8009510:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009514:	4618      	mov	r0, r3
 8009516:	f7fe fbd7 	bl	8007cc8 <ld_dword>
 800951a:	4602      	mov	r2, r0
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	3330      	adds	r3, #48	; 0x30
 8009524:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009528:	4618      	mov	r0, r3
 800952a:	f7fe fbcd 	bl	8007cc8 <ld_dword>
 800952e:	4602      	mov	r2, r0
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800953a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800953c:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <find_volume+0x494>)
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	3301      	adds	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	4b08      	ldr	r3, [pc, #32]	; (8009568 <find_volume+0x494>)
 8009546:	801a      	strh	r2, [r3, #0]
 8009548:	4b07      	ldr	r3, [pc, #28]	; (8009568 <find_volume+0x494>)
 800954a:	881a      	ldrh	r2, [r3, #0]
 800954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009550:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009552:	f7fe fde9 	bl	8008128 <clear_lock>
#endif
	return FR_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3758      	adds	r7, #88	; 0x58
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	41615252 	.word	0x41615252
 8009564:	61417272 	.word	0x61417272
 8009568:	20000290 	.word	0x20000290

0800956c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009576:	2309      	movs	r3, #9
 8009578:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d01c      	beq.n	80095ba <validate+0x4e>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d018      	beq.n	80095ba <validate+0x4e>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d013      	beq.n	80095ba <validate+0x4e>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	889a      	ldrh	r2, [r3, #4]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	88db      	ldrh	r3, [r3, #6]
 800959c:	429a      	cmp	r2, r3
 800959e:	d10c      	bne.n	80095ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	785b      	ldrb	r3, [r3, #1]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fe fad8 	bl	8007b5c <disk_status>
 80095ac:	4603      	mov	r3, r0
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <validate+0x4e>
			res = FR_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <validate+0x5a>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	e000      	b.n	80095c8 <validate+0x5c>
 80095c6:	2300      	movs	r3, #0
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	6013      	str	r3, [r2, #0]
	return res;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	4613      	mov	r3, r2
 80095e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80095ea:	f107 0310 	add.w	r3, r7, #16
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7ff fcd5 	bl	8008f9e <get_ldnumber>
 80095f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	da01      	bge.n	8009600 <f_mount+0x28>
 80095fc:	230b      	movs	r3, #11
 80095fe:	e02b      	b.n	8009658 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009600:	4a17      	ldr	r2, [pc, #92]	; (8009660 <f_mount+0x88>)
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009608:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d005      	beq.n	800961c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009610:	69b8      	ldr	r0, [r7, #24]
 8009612:	f7fe fd89 	bl	8008128 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	2200      	movs	r2, #0
 800961a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	490d      	ldr	r1, [pc, #52]	; (8009660 <f_mount+0x88>)
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <f_mount+0x66>
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d001      	beq.n	8009642 <f_mount+0x6a>
 800963e:	2300      	movs	r3, #0
 8009640:	e00a      	b.n	8009658 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009642:	f107 010c 	add.w	r1, r7, #12
 8009646:	f107 0308 	add.w	r3, r7, #8
 800964a:	2200      	movs	r2, #0
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff fd41 	bl	80090d4 <find_volume>
 8009652:	4603      	mov	r3, r0
 8009654:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009656:	7dfb      	ldrb	r3, [r7, #23]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3720      	adds	r7, #32
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	2000028c 	.word	0x2000028c

08009664 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b098      	sub	sp, #96	; 0x60
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	4613      	mov	r3, r2
 8009670:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <f_open+0x18>
 8009678:	2309      	movs	r3, #9
 800967a:	e1ad      	b.n	80099d8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009682:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009684:	79fa      	ldrb	r2, [r7, #7]
 8009686:	f107 0110 	add.w	r1, r7, #16
 800968a:	f107 0308 	add.w	r3, r7, #8
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff fd20 	bl	80090d4 <find_volume>
 8009694:	4603      	mov	r3, r0
 8009696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800969a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f040 8191 	bne.w	80099c6 <f_open+0x362>
		dj.obj.fs = fs;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	f107 0314 	add.w	r3, r7, #20
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7ff fc03 	bl	8008ebc <follow_path>
 80096b6:	4603      	mov	r3, r0
 80096b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80096bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d11a      	bne.n	80096fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80096c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80096c8:	b25b      	sxtb	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	da03      	bge.n	80096d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80096ce:	2306      	movs	r3, #6
 80096d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80096d4:	e011      	b.n	80096fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	f023 0301 	bic.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bf14      	ite	ne
 80096e0:	2301      	movne	r3, #1
 80096e2:	2300      	moveq	r3, #0
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	461a      	mov	r2, r3
 80096e8:	f107 0314 	add.w	r3, r7, #20
 80096ec:	4611      	mov	r1, r2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fbd2 	bl	8007e98 <chk_lock>
 80096f4:	4603      	mov	r3, r0
 80096f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	f003 031c 	and.w	r3, r3, #28
 8009700:	2b00      	cmp	r3, #0
 8009702:	d07f      	beq.n	8009804 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009708:	2b00      	cmp	r3, #0
 800970a:	d017      	beq.n	800973c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800970c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009710:	2b04      	cmp	r3, #4
 8009712:	d10e      	bne.n	8009732 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009714:	f7fe fc1c 	bl	8007f50 <enq_lock>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d006      	beq.n	800972c <f_open+0xc8>
 800971e:	f107 0314 	add.w	r3, r7, #20
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff fb03 	bl	8008d2e <dir_register>
 8009728:	4603      	mov	r3, r0
 800972a:	e000      	b.n	800972e <f_open+0xca>
 800972c:	2312      	movs	r3, #18
 800972e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	f043 0308 	orr.w	r3, r3, #8
 8009738:	71fb      	strb	r3, [r7, #7]
 800973a:	e010      	b.n	800975e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800973c:	7ebb      	ldrb	r3, [r7, #26]
 800973e:	f003 0311 	and.w	r3, r3, #17
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <f_open+0xea>
					res = FR_DENIED;
 8009746:	2307      	movs	r3, #7
 8009748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800974c:	e007      	b.n	800975e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <f_open+0xfa>
 8009758:	2308      	movs	r3, #8
 800975a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800975e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009762:	2b00      	cmp	r3, #0
 8009764:	d168      	bne.n	8009838 <f_open+0x1d4>
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	f003 0308 	and.w	r3, r3, #8
 800976c:	2b00      	cmp	r3, #0
 800976e:	d063      	beq.n	8009838 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009770:	f7fe f996 	bl	8007aa0 <get_fattime>
 8009774:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009778:	330e      	adds	r3, #14
 800977a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800977c:	4618      	mov	r0, r3
 800977e:	f7fe fae1 	bl	8007d44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009784:	3316      	adds	r3, #22
 8009786:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009788:	4618      	mov	r0, r3
 800978a:	f7fe fadb 	bl	8007d44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800978e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009790:	330b      	adds	r3, #11
 8009792:	2220      	movs	r2, #32
 8009794:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff fa32 	bl	8008c06 <ld_clust>
 80097a2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097a8:	2200      	movs	r2, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fa4a 	bl	8008c44 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80097b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b2:	331c      	adds	r3, #28
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe fac4 	bl	8007d44 <st_dword>
					fs->wflag = 1;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	2201      	movs	r2, #1
 80097c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80097c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d037      	beq.n	8009838 <f_open+0x1d4>
						dw = fs->winsect;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097cc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80097ce:	f107 0314 	add.w	r3, r7, #20
 80097d2:	2200      	movs	r2, #0
 80097d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe ff5d 	bl	8008696 <remove_chain>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80097e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d126      	bne.n	8009838 <f_open+0x1d4>
							res = move_window(fs, dw);
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe fd02 	bl	80081f8 <move_window>
 80097f4:	4603      	mov	r3, r0
 80097f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097fe:	3a01      	subs	r2, #1
 8009800:	60da      	str	r2, [r3, #12]
 8009802:	e019      	b.n	8009838 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009804:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009808:	2b00      	cmp	r3, #0
 800980a:	d115      	bne.n	8009838 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800980c:	7ebb      	ldrb	r3, [r7, #26]
 800980e:	f003 0310 	and.w	r3, r3, #16
 8009812:	2b00      	cmp	r3, #0
 8009814:	d003      	beq.n	800981e <f_open+0x1ba>
					res = FR_NO_FILE;
 8009816:	2304      	movs	r3, #4
 8009818:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800981c:	e00c      	b.n	8009838 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	f003 0302 	and.w	r3, r3, #2
 8009824:	2b00      	cmp	r3, #0
 8009826:	d007      	beq.n	8009838 <f_open+0x1d4>
 8009828:	7ebb      	ldrb	r3, [r7, #26]
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d002      	beq.n	8009838 <f_open+0x1d4>
						res = FR_DENIED;
 8009832:	2307      	movs	r3, #7
 8009834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009838:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800983c:	2b00      	cmp	r3, #0
 800983e:	d128      	bne.n	8009892 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	f003 0308 	and.w	r3, r3, #8
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009850:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800985a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	f023 0301 	bic.w	r3, r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	bf14      	ite	ne
 800986a:	2301      	movne	r3, #1
 800986c:	2300      	moveq	r3, #0
 800986e:	b2db      	uxtb	r3, r3
 8009870:	461a      	mov	r2, r3
 8009872:	f107 0314 	add.w	r3, r7, #20
 8009876:	4611      	mov	r1, r2
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fb8b 	bl	8007f94 <inc_lock>
 800987e:	4602      	mov	r2, r0
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d102      	bne.n	8009892 <f_open+0x22e>
 800988c:	2302      	movs	r3, #2
 800988e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009896:	2b00      	cmp	r3, #0
 8009898:	f040 8095 	bne.w	80099c6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098a0:	4611      	mov	r1, r2
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7ff f9af 	bl	8008c06 <ld_clust>
 80098a8:	4602      	mov	r2, r0
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80098ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b0:	331c      	adds	r3, #28
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fa08 	bl	8007cc8 <ld_dword>
 80098b8:	4602      	mov	r2, r0
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	88da      	ldrh	r2, [r3, #6]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	79fa      	ldrb	r2, [r7, #7]
 80098d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3330      	adds	r3, #48	; 0x30
 80098ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098f2:	2100      	movs	r1, #0
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fe fa72 	bl	8007dde <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80098fa:	79fb      	ldrb	r3, [r7, #7]
 80098fc:	f003 0320 	and.w	r3, r3, #32
 8009900:	2b00      	cmp	r3, #0
 8009902:	d060      	beq.n	80099c6 <f_open+0x362>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d05c      	beq.n	80099c6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	68da      	ldr	r2, [r3, #12]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	895b      	ldrh	r3, [r3, #10]
 8009918:	025b      	lsls	r3, r3, #9
 800991a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	657b      	str	r3, [r7, #84]	; 0x54
 8009928:	e016      	b.n	8009958 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800992e:	4618      	mov	r0, r3
 8009930:	f7fe fd1d 	bl	800836e <get_fat>
 8009934:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009938:	2b01      	cmp	r3, #1
 800993a:	d802      	bhi.n	8009942 <f_open+0x2de>
 800993c:	2302      	movs	r3, #2
 800993e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009948:	d102      	bne.n	8009950 <f_open+0x2ec>
 800994a:	2301      	movs	r3, #1
 800994c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009950:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	657b      	str	r3, [r7, #84]	; 0x54
 8009958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800995c:	2b00      	cmp	r3, #0
 800995e:	d103      	bne.n	8009968 <f_open+0x304>
 8009960:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009964:	429a      	cmp	r2, r3
 8009966:	d8e0      	bhi.n	800992a <f_open+0x2c6>
				}
				fp->clust = clst;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800996c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800996e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009972:	2b00      	cmp	r3, #0
 8009974:	d127      	bne.n	80099c6 <f_open+0x362>
 8009976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997c:	2b00      	cmp	r3, #0
 800997e:	d022      	beq.n	80099c6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe fcd3 	bl	8008330 <clust2sect>
 800998a:	6478      	str	r0, [r7, #68]	; 0x44
 800998c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800998e:	2b00      	cmp	r3, #0
 8009990:	d103      	bne.n	800999a <f_open+0x336>
						res = FR_INT_ERR;
 8009992:	2302      	movs	r3, #2
 8009994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009998:	e015      	b.n	80099c6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800999a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800999c:	0a5a      	lsrs	r2, r3, #9
 800999e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099a0:	441a      	add	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	7858      	ldrb	r0, [r3, #1]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a1a      	ldr	r2, [r3, #32]
 80099b4:	2301      	movs	r3, #1
 80099b6:	f7fe f911 	bl	8007bdc <disk_read>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <f_open+0x362>
 80099c0:	2301      	movs	r3, #1
 80099c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80099c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <f_open+0x370>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80099d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3760      	adds	r7, #96	; 0x60
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b08e      	sub	sp, #56	; 0x38
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f107 0214 	add.w	r2, r7, #20
 80099fe:	4611      	mov	r1, r2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7ff fdb3 	bl	800956c <validate>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d107      	bne.n	8009a24 <f_read+0x44>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	7d5b      	ldrb	r3, [r3, #21]
 8009a18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <f_read+0x4a>
 8009a24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a28:	e115      	b.n	8009c56 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	7d1b      	ldrb	r3, [r3, #20]
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <f_read+0x5a>
 8009a36:	2307      	movs	r3, #7
 8009a38:	e10d      	b.n	8009c56 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	f240 80fe 	bls.w	8009c4c <f_read+0x26c>
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009a54:	e0fa      	b.n	8009c4c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f040 80c6 	bne.w	8009bf0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	0a5b      	lsrs	r3, r3, #9
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	8952      	ldrh	r2, [r2, #10]
 8009a6e:	3a01      	subs	r2, #1
 8009a70:	4013      	ands	r3, r2
 8009a72:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d12f      	bne.n	8009ada <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d103      	bne.n	8009a8a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	633b      	str	r3, [r7, #48]	; 0x30
 8009a88:	e013      	b.n	8009ab2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d007      	beq.n	8009aa2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	4619      	mov	r1, r3
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f7fe fef9 	bl	8008890 <clmt_clust>
 8009a9e:	6338      	str	r0, [r7, #48]	; 0x30
 8009aa0:	e007      	b.n	8009ab2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	69db      	ldr	r3, [r3, #28]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f7fe fc5f 	bl	800836e <get_fat>
 8009ab0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d804      	bhi.n	8009ac2 <f_read+0xe2>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2202      	movs	r2, #2
 8009abc:	755a      	strb	r2, [r3, #21]
 8009abe:	2302      	movs	r3, #2
 8009ac0:	e0c9      	b.n	8009c56 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac8:	d104      	bne.n	8009ad4 <f_read+0xf4>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	755a      	strb	r2, [r3, #21]
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e0c0      	b.n	8009c56 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	69db      	ldr	r3, [r3, #28]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f7fe fc24 	bl	8008330 <clust2sect>
 8009ae8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d104      	bne.n	8009afa <f_read+0x11a>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2202      	movs	r2, #2
 8009af4:	755a      	strb	r2, [r3, #21]
 8009af6:	2302      	movs	r3, #2
 8009af8:	e0ad      	b.n	8009c56 <f_read+0x276>
			sect += csect;
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	4413      	add	r3, r2
 8009b00:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	0a5b      	lsrs	r3, r3, #9
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d039      	beq.n	8009b82 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	4413      	add	r3, r2
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	8952      	ldrh	r2, [r2, #10]
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d905      	bls.n	8009b28 <f_read+0x148>
					cc = fs->csize - csect;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	895b      	ldrh	r3, [r3, #10]
 8009b20:	461a      	mov	r2, r3
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	7858      	ldrb	r0, [r3, #1]
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b32:	f7fe f853 	bl	8007bdc <disk_read>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d004      	beq.n	8009b46 <f_read+0x166>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	755a      	strb	r2, [r3, #21]
 8009b42:	2301      	movs	r3, #1
 8009b44:	e087      	b.n	8009c56 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	7d1b      	ldrb	r3, [r3, #20]
 8009b4a:	b25b      	sxtb	r3, r3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	da14      	bge.n	8009b7a <f_read+0x19a>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6a1a      	ldr	r2, [r3, #32]
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d90d      	bls.n	8009b7a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6a1a      	ldr	r2, [r3, #32]
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	025b      	lsls	r3, r3, #9
 8009b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6a:	18d0      	adds	r0, r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3330      	adds	r3, #48	; 0x30
 8009b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b74:	4619      	mov	r1, r3
 8009b76:	f7fe f911 	bl	8007d9c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7c:	025b      	lsls	r3, r3, #9
 8009b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009b80:	e050      	b.n	8009c24 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d02e      	beq.n	8009bea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	7d1b      	ldrb	r3, [r3, #20]
 8009b90:	b25b      	sxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	da18      	bge.n	8009bc8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	7858      	ldrb	r0, [r3, #1]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6a1a      	ldr	r2, [r3, #32]
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f7fe f839 	bl	8007c1c <disk_write>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d004      	beq.n	8009bba <f_read+0x1da>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	755a      	strb	r2, [r3, #21]
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e04d      	b.n	8009c56 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	7d1b      	ldrb	r3, [r3, #20]
 8009bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	7858      	ldrb	r0, [r3, #1]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	f7fe f801 	bl	8007bdc <disk_read>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d004      	beq.n	8009bea <f_read+0x20a>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2201      	movs	r2, #1
 8009be4:	755a      	strb	r2, [r3, #21]
 8009be6:	2301      	movs	r3, #1
 8009be8:	e035      	b.n	8009c56 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	69ba      	ldr	r2, [r7, #24]
 8009bee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d901      	bls.n	8009c0a <f_read+0x22a>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c18:	4413      	add	r3, r2
 8009c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c20:	f7fe f8bc 	bl	8007d9c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c28:	4413      	add	r3, r2
 8009c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	699a      	ldr	r2, [r3, #24]
 8009c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c32:	441a      	add	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	619a      	str	r2, [r3, #24]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3e:	441a      	add	r2, r3
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f47f af01 	bne.w	8009a56 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3738      	adds	r7, #56	; 0x38
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b08c      	sub	sp, #48	; 0x30
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	607a      	str	r2, [r7, #4]
 8009c6a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f107 0210 	add.w	r2, r7, #16
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7ff fc74 	bl	800956c <validate>
 8009c84:	4603      	mov	r3, r0
 8009c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d107      	bne.n	8009ca2 <f_write+0x44>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	7d5b      	ldrb	r3, [r3, #21]
 8009c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <f_write+0x4a>
 8009ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ca6:	e14b      	b.n	8009f40 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	7d1b      	ldrb	r3, [r3, #20]
 8009cac:	f003 0302 	and.w	r3, r3, #2
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <f_write+0x5a>
 8009cb4:	2307      	movs	r3, #7
 8009cb6:	e143      	b.n	8009f40 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	699a      	ldr	r2, [r3, #24]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	441a      	add	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	f080 812d 	bcs.w	8009f24 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	43db      	mvns	r3, r3
 8009cd0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009cd2:	e127      	b.n	8009f24 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f040 80e3 	bne.w	8009ea8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	0a5b      	lsrs	r3, r3, #9
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	8952      	ldrh	r2, [r2, #10]
 8009cec:	3a01      	subs	r2, #1
 8009cee:	4013      	ands	r3, r2
 8009cf0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d143      	bne.n	8009d80 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10c      	bne.n	8009d1a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d11a      	bne.n	8009d42 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fe fd25 	bl	8008760 <create_chain>
 8009d16:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d18:	e013      	b.n	8009d42 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d007      	beq.n	8009d32 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	4619      	mov	r1, r3
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f7fe fdb1 	bl	8008890 <clmt_clust>
 8009d2e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d30:	e007      	b.n	8009d42 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	f7fe fd10 	bl	8008760 <create_chain>
 8009d40:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 80f2 	beq.w	8009f2e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d104      	bne.n	8009d5a <f_write+0xfc>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2202      	movs	r2, #2
 8009d54:	755a      	strb	r2, [r3, #21]
 8009d56:	2302      	movs	r3, #2
 8009d58:	e0f2      	b.n	8009f40 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d60:	d104      	bne.n	8009d6c <f_write+0x10e>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2201      	movs	r2, #1
 8009d66:	755a      	strb	r2, [r3, #21]
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e0e9      	b.n	8009f40 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d70:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d102      	bne.n	8009d80 <f_write+0x122>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d7e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	7d1b      	ldrb	r3, [r3, #20]
 8009d84:	b25b      	sxtb	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	da18      	bge.n	8009dbc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	7858      	ldrb	r0, [r3, #1]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6a1a      	ldr	r2, [r3, #32]
 8009d98:	2301      	movs	r3, #1
 8009d9a:	f7fd ff3f 	bl	8007c1c <disk_write>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d004      	beq.n	8009dae <f_write+0x150>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2201      	movs	r2, #1
 8009da8:	755a      	strb	r2, [r3, #21]
 8009daa:	2301      	movs	r3, #1
 8009dac:	e0c8      	b.n	8009f40 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	7d1b      	ldrb	r3, [r3, #20]
 8009db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	f7fe fab3 	bl	8008330 <clust2sect>
 8009dca:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d104      	bne.n	8009ddc <f_write+0x17e>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	755a      	strb	r2, [r3, #21]
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e0b1      	b.n	8009f40 <f_write+0x2e2>
			sect += csect;
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	4413      	add	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	0a5b      	lsrs	r3, r3, #9
 8009de8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d03c      	beq.n	8009e6a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	4413      	add	r3, r2
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	8952      	ldrh	r2, [r2, #10]
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d905      	bls.n	8009e0a <f_write+0x1ac>
					cc = fs->csize - csect;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	895b      	ldrh	r3, [r3, #10]
 8009e02:	461a      	mov	r2, r3
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	7858      	ldrb	r0, [r3, #1]
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	69f9      	ldr	r1, [r7, #28]
 8009e14:	f7fd ff02 	bl	8007c1c <disk_write>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d004      	beq.n	8009e28 <f_write+0x1ca>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2201      	movs	r2, #1
 8009e22:	755a      	strb	r2, [r3, #21]
 8009e24:	2301      	movs	r3, #1
 8009e26:	e08b      	b.n	8009f40 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1a      	ldr	r2, [r3, #32]
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	6a3a      	ldr	r2, [r7, #32]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d915      	bls.n	8009e62 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a1a      	ldr	r2, [r3, #32]
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	025b      	lsls	r3, r3, #9
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e4e:	4619      	mov	r1, r3
 8009e50:	f7fd ffa4 	bl	8007d9c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	7d1b      	ldrb	r3, [r3, #20]
 8009e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	025b      	lsls	r3, r3, #9
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009e68:	e03f      	b.n	8009eea <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d016      	beq.n	8009ea2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	699a      	ldr	r2, [r3, #24]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d210      	bcs.n	8009ea2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	7858      	ldrb	r0, [r3, #1]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	f7fd fea5 	bl	8007bdc <disk_read>
 8009e92:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d004      	beq.n	8009ea2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	755a      	strb	r2, [r3, #21]
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e04e      	b.n	8009f40 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d901      	bls.n	8009ec2 <f_write+0x264>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed0:	4413      	add	r3, r2
 8009ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed4:	69f9      	ldr	r1, [r7, #28]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fd ff60 	bl	8007d9c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	7d1b      	ldrb	r3, [r3, #20]
 8009ee0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ee4:	b2da      	uxtb	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009eea:	69fa      	ldr	r2, [r7, #28]
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	4413      	add	r3, r2
 8009ef0:	61fb      	str	r3, [r7, #28]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	699a      	ldr	r2, [r3, #24]
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	441a      	add	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	619a      	str	r2, [r3, #24]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	68da      	ldr	r2, [r3, #12]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	bf38      	it	cc
 8009f0a:	461a      	movcc	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	60da      	str	r2, [r3, #12]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	441a      	add	r2, r3
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f47f aed4 	bne.w	8009cd4 <f_write+0x76>
 8009f2c:	e000      	b.n	8009f30 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009f2e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	7d1b      	ldrb	r3, [r3, #20]
 8009f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3730      	adds	r7, #48	; 0x30
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f107 0208 	add.w	r2, r7, #8
 8009f56:	4611      	mov	r1, r2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7ff fb07 	bl	800956c <validate>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d168      	bne.n	800a03a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	7d1b      	ldrb	r3, [r3, #20]
 8009f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d062      	beq.n	800a03a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	7d1b      	ldrb	r3, [r3, #20]
 8009f78:	b25b      	sxtb	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	da15      	bge.n	8009faa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	7858      	ldrb	r0, [r3, #1]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a1a      	ldr	r2, [r3, #32]
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f7fd fe45 	bl	8007c1c <disk_write>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <f_sync+0x54>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e04f      	b.n	800a03c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	7d1b      	ldrb	r3, [r3, #20]
 8009fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009faa:	f7fd fd79 	bl	8007aa0 <get_fattime>
 8009fae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f7fe f91d 	bl	80081f8 <move_window>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d138      	bne.n	800a03a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fcc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	330b      	adds	r3, #11
 8009fd2:	781a      	ldrb	r2, [r3, #0]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	330b      	adds	r3, #11
 8009fd8:	f042 0220 	orr.w	r2, r2, #32
 8009fdc:	b2d2      	uxtb	r2, r2
 8009fde:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6818      	ldr	r0, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	68f9      	ldr	r1, [r7, #12]
 8009fec:	f7fe fe2a 	bl	8008c44 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f103 021c 	add.w	r2, r3, #28
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	f7fd fea1 	bl	8007d44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3316      	adds	r3, #22
 800a006:	6939      	ldr	r1, [r7, #16]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fd fe9b 	bl	8007d44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3312      	adds	r3, #18
 800a012:	2100      	movs	r1, #0
 800a014:	4618      	mov	r0, r3
 800a016:	f7fd fe7a 	bl	8007d0e <st_word>
					fs->wflag = 1;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2201      	movs	r2, #1
 800a01e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe f916 	bl	8008254 <sync_fs>
 800a028:	4603      	mov	r3, r0
 800a02a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	7d1b      	ldrb	r3, [r3, #20]
 800a030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a034:	b2da      	uxtb	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7ff ff7b 	bl	8009f48 <f_sync>
 800a052:	4603      	mov	r3, r0
 800a054:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d118      	bne.n	800a08e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f107 0208 	add.w	r2, r7, #8
 800a062:	4611      	mov	r1, r2
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fa81 	bl	800956c <validate>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10c      	bne.n	800a08e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fe f819 	bl	80080b0 <dec_lock>
 800a07e:	4603      	mov	r3, r0
 800a080:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b092      	sub	sp, #72	; 0x48
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a0a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a0a8:	f107 030c 	add.w	r3, r7, #12
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff f810 	bl	80090d4 <find_volume>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a0ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f040 8099 	bne.w	800a1f6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a0c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	691a      	ldr	r2, [r3, #16]
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	3b02      	subs	r3, #2
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d804      	bhi.n	800a0e2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0da:	691a      	ldr	r2, [r3, #16]
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	e089      	b.n	800a1f6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d128      	bne.n	800a140 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a0f6:	f107 0314 	add.w	r3, r7, #20
 800a0fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fe f936 	bl	800836e <get_fat>
 800a102:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10a:	d103      	bne.n	800a114 <f_getfree+0x7c>
 800a10c:	2301      	movs	r3, #1
 800a10e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a112:	e063      	b.n	800a1dc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a116:	2b01      	cmp	r3, #1
 800a118:	d103      	bne.n	800a122 <f_getfree+0x8a>
 800a11a:	2302      	movs	r3, #2
 800a11c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a120:	e05c      	b.n	800a1dc <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d102      	bne.n	800a12e <f_getfree+0x96>
 800a128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a12a:	3301      	adds	r3, #1
 800a12c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a130:	3301      	adds	r3, #1
 800a132:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d3db      	bcc.n	800a0f6 <f_getfree+0x5e>
 800a13e:	e04d      	b.n	800a1dc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	637b      	str	r3, [r7, #52]	; 0x34
 800a150:	2300      	movs	r3, #0
 800a152:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a156:	2b00      	cmp	r3, #0
 800a158:	d113      	bne.n	800a182 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a15a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	63ba      	str	r2, [r7, #56]	; 0x38
 800a162:	4619      	mov	r1, r3
 800a164:	f7fe f848 	bl	80081f8 <move_window>
 800a168:	4603      	mov	r3, r0
 800a16a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a16e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a172:	2b00      	cmp	r3, #0
 800a174:	d131      	bne.n	800a1da <f_getfree+0x142>
							p = fs->win;
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	3330      	adds	r3, #48	; 0x30
 800a17a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a17c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a180:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	2b02      	cmp	r3, #2
 800a188:	d10f      	bne.n	800a1aa <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a18a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a18c:	f7fd fd84 	bl	8007c98 <ld_word>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <f_getfree+0x104>
 800a196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a198:	3301      	adds	r3, #1
 800a19a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19e:	3302      	adds	r3, #2
 800a1a0:	633b      	str	r3, [r7, #48]	; 0x30
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a4:	3b02      	subs	r3, #2
 800a1a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a1a8:	e010      	b.n	800a1cc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a1aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ac:	f7fd fd8c 	bl	8007cc8 <ld_dword>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d102      	bne.n	800a1c0 <f_getfree+0x128>
 800a1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1bc:	3301      	adds	r3, #1
 800a1be:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	633b      	str	r3, [r7, #48]	; 0x30
 800a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c8:	3b04      	subs	r3, #4
 800a1ca:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1bd      	bne.n	800a154 <f_getfree+0xbc>
 800a1d8:	e000      	b.n	800a1dc <f_getfree+0x144>
							if (res != FR_OK) break;
 800a1da:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1e0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1e6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	791a      	ldrb	r2, [r3, #4]
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	f042 0201 	orr.w	r2, r2, #1
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a1f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3748      	adds	r7, #72	; 0x48
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b088      	sub	sp, #32
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a216:	e01b      	b.n	800a250 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a218:	f107 0310 	add.w	r3, r7, #16
 800a21c:	f107 0114 	add.w	r1, r7, #20
 800a220:	2201      	movs	r2, #1
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7ff fbdc 	bl	80099e0 <f_read>
		if (rc != 1) break;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d116      	bne.n	800a25c <f_gets+0x5a>
		c = s[0];
 800a22e:	7d3b      	ldrb	r3, [r7, #20]
 800a230:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	2b0d      	cmp	r3, #13
 800a236:	d100      	bne.n	800a23a <f_gets+0x38>
 800a238:	e00a      	b.n	800a250 <f_gets+0x4e>
		*p++ = c;
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	61ba      	str	r2, [r7, #24]
 800a240:	7dfa      	ldrb	r2, [r7, #23]
 800a242:	701a      	strb	r2, [r3, #0]
		n++;
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	3301      	adds	r3, #1
 800a248:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
 800a24c:	2b0a      	cmp	r3, #10
 800a24e:	d007      	beq.n	800a260 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	3b01      	subs	r3, #1
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	429a      	cmp	r2, r3
 800a258:	dbde      	blt.n	800a218 <f_gets+0x16>
 800a25a:	e002      	b.n	800a262 <f_gets+0x60>
		if (rc != 1) break;
 800a25c:	bf00      	nop
 800a25e:	e000      	b.n	800a262 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800a260:	bf00      	nop
	}
	*p = 0;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <f_gets+0x70>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	e000      	b.n	800a274 <f_gets+0x72>
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3720      	adds	r7, #32
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b087      	sub	sp, #28
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	4613      	mov	r3, r2
 800a288:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a28a:	2301      	movs	r3, #1
 800a28c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a292:	4b1f      	ldr	r3, [pc, #124]	; (800a310 <FATFS_LinkDriverEx+0x94>)
 800a294:	7a5b      	ldrb	r3, [r3, #9]
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d131      	bne.n	800a300 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a29c:	4b1c      	ldr	r3, [pc, #112]	; (800a310 <FATFS_LinkDriverEx+0x94>)
 800a29e:	7a5b      	ldrb	r3, [r3, #9]
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	4b1a      	ldr	r3, [pc, #104]	; (800a310 <FATFS_LinkDriverEx+0x94>)
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a2aa:	4b19      	ldr	r3, [pc, #100]	; (800a310 <FATFS_LinkDriverEx+0x94>)
 800a2ac:	7a5b      	ldrb	r3, [r3, #9]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	4a17      	ldr	r2, [pc, #92]	; (800a310 <FATFS_LinkDriverEx+0x94>)
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a2ba:	4b15      	ldr	r3, [pc, #84]	; (800a310 <FATFS_LinkDriverEx+0x94>)
 800a2bc:	7a5b      	ldrb	r3, [r3, #9]
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	4b13      	ldr	r3, [pc, #76]	; (800a310 <FATFS_LinkDriverEx+0x94>)
 800a2c4:	4413      	add	r3, r2
 800a2c6:	79fa      	ldrb	r2, [r7, #7]
 800a2c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a2ca:	4b11      	ldr	r3, [pc, #68]	; (800a310 <FATFS_LinkDriverEx+0x94>)
 800a2cc:	7a5b      	ldrb	r3, [r3, #9]
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	b2d1      	uxtb	r1, r2
 800a2d4:	4a0e      	ldr	r2, [pc, #56]	; (800a310 <FATFS_LinkDriverEx+0x94>)
 800a2d6:	7251      	strb	r1, [r2, #9]
 800a2d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a2da:	7dbb      	ldrb	r3, [r7, #22]
 800a2dc:	3330      	adds	r3, #48	; 0x30
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	223a      	movs	r2, #58	; 0x3a
 800a2ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	3302      	adds	r3, #2
 800a2f0:	222f      	movs	r2, #47	; 0x2f
 800a2f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	3303      	adds	r3, #3
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a300:	7dfb      	ldrb	r3, [r7, #23]
}
 800a302:	4618      	mov	r0, r3
 800a304:	371c      	adds	r7, #28
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	200002b4 	.word	0x200002b4

0800a314 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a31e:	2200      	movs	r2, #0
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7ff ffaa 	bl	800a27c <FATFS_LinkDriverEx>
 800a328:	4603      	mov	r3, r0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
	...

0800a334 <__errno>:
 800a334:	4b01      	ldr	r3, [pc, #4]	; (800a33c <__errno+0x8>)
 800a336:	6818      	ldr	r0, [r3, #0]
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	20000078 	.word	0x20000078

0800a340 <__libc_init_array>:
 800a340:	b570      	push	{r4, r5, r6, lr}
 800a342:	4d0d      	ldr	r5, [pc, #52]	; (800a378 <__libc_init_array+0x38>)
 800a344:	4c0d      	ldr	r4, [pc, #52]	; (800a37c <__libc_init_array+0x3c>)
 800a346:	1b64      	subs	r4, r4, r5
 800a348:	10a4      	asrs	r4, r4, #2
 800a34a:	2600      	movs	r6, #0
 800a34c:	42a6      	cmp	r6, r4
 800a34e:	d109      	bne.n	800a364 <__libc_init_array+0x24>
 800a350:	4d0b      	ldr	r5, [pc, #44]	; (800a380 <__libc_init_array+0x40>)
 800a352:	4c0c      	ldr	r4, [pc, #48]	; (800a384 <__libc_init_array+0x44>)
 800a354:	f005 f91a 	bl	800f58c <_init>
 800a358:	1b64      	subs	r4, r4, r5
 800a35a:	10a4      	asrs	r4, r4, #2
 800a35c:	2600      	movs	r6, #0
 800a35e:	42a6      	cmp	r6, r4
 800a360:	d105      	bne.n	800a36e <__libc_init_array+0x2e>
 800a362:	bd70      	pop	{r4, r5, r6, pc}
 800a364:	f855 3b04 	ldr.w	r3, [r5], #4
 800a368:	4798      	blx	r3
 800a36a:	3601      	adds	r6, #1
 800a36c:	e7ee      	b.n	800a34c <__libc_init_array+0xc>
 800a36e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a372:	4798      	blx	r3
 800a374:	3601      	adds	r6, #1
 800a376:	e7f2      	b.n	800a35e <__libc_init_array+0x1e>
 800a378:	0800fe60 	.word	0x0800fe60
 800a37c:	0800fe60 	.word	0x0800fe60
 800a380:	0800fe60 	.word	0x0800fe60
 800a384:	0800fe64 	.word	0x0800fe64

0800a388 <memset>:
 800a388:	4402      	add	r2, r0
 800a38a:	4603      	mov	r3, r0
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d100      	bne.n	800a392 <memset+0xa>
 800a390:	4770      	bx	lr
 800a392:	f803 1b01 	strb.w	r1, [r3], #1
 800a396:	e7f9      	b.n	800a38c <memset+0x4>

0800a398 <__cvt>:
 800a398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a39c:	ec55 4b10 	vmov	r4, r5, d0
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	460e      	mov	r6, r1
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	462b      	mov	r3, r5
 800a3a8:	bfbb      	ittet	lt
 800a3aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a3ae:	461d      	movlt	r5, r3
 800a3b0:	2300      	movge	r3, #0
 800a3b2:	232d      	movlt	r3, #45	; 0x2d
 800a3b4:	700b      	strb	r3, [r1, #0]
 800a3b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a3bc:	4691      	mov	r9, r2
 800a3be:	f023 0820 	bic.w	r8, r3, #32
 800a3c2:	bfbc      	itt	lt
 800a3c4:	4622      	movlt	r2, r4
 800a3c6:	4614      	movlt	r4, r2
 800a3c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3cc:	d005      	beq.n	800a3da <__cvt+0x42>
 800a3ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a3d2:	d100      	bne.n	800a3d6 <__cvt+0x3e>
 800a3d4:	3601      	adds	r6, #1
 800a3d6:	2102      	movs	r1, #2
 800a3d8:	e000      	b.n	800a3dc <__cvt+0x44>
 800a3da:	2103      	movs	r1, #3
 800a3dc:	ab03      	add	r3, sp, #12
 800a3de:	9301      	str	r3, [sp, #4]
 800a3e0:	ab02      	add	r3, sp, #8
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	ec45 4b10 	vmov	d0, r4, r5
 800a3e8:	4653      	mov	r3, sl
 800a3ea:	4632      	mov	r2, r6
 800a3ec:	f001 fefc 	bl	800c1e8 <_dtoa_r>
 800a3f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	d102      	bne.n	800a3fe <__cvt+0x66>
 800a3f8:	f019 0f01 	tst.w	r9, #1
 800a3fc:	d022      	beq.n	800a444 <__cvt+0xac>
 800a3fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a402:	eb07 0906 	add.w	r9, r7, r6
 800a406:	d110      	bne.n	800a42a <__cvt+0x92>
 800a408:	783b      	ldrb	r3, [r7, #0]
 800a40a:	2b30      	cmp	r3, #48	; 0x30
 800a40c:	d10a      	bne.n	800a424 <__cvt+0x8c>
 800a40e:	2200      	movs	r2, #0
 800a410:	2300      	movs	r3, #0
 800a412:	4620      	mov	r0, r4
 800a414:	4629      	mov	r1, r5
 800a416:	f7f6 fb57 	bl	8000ac8 <__aeabi_dcmpeq>
 800a41a:	b918      	cbnz	r0, 800a424 <__cvt+0x8c>
 800a41c:	f1c6 0601 	rsb	r6, r6, #1
 800a420:	f8ca 6000 	str.w	r6, [sl]
 800a424:	f8da 3000 	ldr.w	r3, [sl]
 800a428:	4499      	add	r9, r3
 800a42a:	2200      	movs	r2, #0
 800a42c:	2300      	movs	r3, #0
 800a42e:	4620      	mov	r0, r4
 800a430:	4629      	mov	r1, r5
 800a432:	f7f6 fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 800a436:	b108      	cbz	r0, 800a43c <__cvt+0xa4>
 800a438:	f8cd 900c 	str.w	r9, [sp, #12]
 800a43c:	2230      	movs	r2, #48	; 0x30
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	454b      	cmp	r3, r9
 800a442:	d307      	bcc.n	800a454 <__cvt+0xbc>
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a448:	1bdb      	subs	r3, r3, r7
 800a44a:	4638      	mov	r0, r7
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	b004      	add	sp, #16
 800a450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a454:	1c59      	adds	r1, r3, #1
 800a456:	9103      	str	r1, [sp, #12]
 800a458:	701a      	strb	r2, [r3, #0]
 800a45a:	e7f0      	b.n	800a43e <__cvt+0xa6>

0800a45c <__exponent>:
 800a45c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a45e:	4603      	mov	r3, r0
 800a460:	2900      	cmp	r1, #0
 800a462:	bfb8      	it	lt
 800a464:	4249      	neglt	r1, r1
 800a466:	f803 2b02 	strb.w	r2, [r3], #2
 800a46a:	bfb4      	ite	lt
 800a46c:	222d      	movlt	r2, #45	; 0x2d
 800a46e:	222b      	movge	r2, #43	; 0x2b
 800a470:	2909      	cmp	r1, #9
 800a472:	7042      	strb	r2, [r0, #1]
 800a474:	dd2a      	ble.n	800a4cc <__exponent+0x70>
 800a476:	f10d 0407 	add.w	r4, sp, #7
 800a47a:	46a4      	mov	ip, r4
 800a47c:	270a      	movs	r7, #10
 800a47e:	46a6      	mov	lr, r4
 800a480:	460a      	mov	r2, r1
 800a482:	fb91 f6f7 	sdiv	r6, r1, r7
 800a486:	fb07 1516 	mls	r5, r7, r6, r1
 800a48a:	3530      	adds	r5, #48	; 0x30
 800a48c:	2a63      	cmp	r2, #99	; 0x63
 800a48e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a492:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a496:	4631      	mov	r1, r6
 800a498:	dcf1      	bgt.n	800a47e <__exponent+0x22>
 800a49a:	3130      	adds	r1, #48	; 0x30
 800a49c:	f1ae 0502 	sub.w	r5, lr, #2
 800a4a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a4a4:	1c44      	adds	r4, r0, #1
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	4561      	cmp	r1, ip
 800a4aa:	d30a      	bcc.n	800a4c2 <__exponent+0x66>
 800a4ac:	f10d 0209 	add.w	r2, sp, #9
 800a4b0:	eba2 020e 	sub.w	r2, r2, lr
 800a4b4:	4565      	cmp	r5, ip
 800a4b6:	bf88      	it	hi
 800a4b8:	2200      	movhi	r2, #0
 800a4ba:	4413      	add	r3, r2
 800a4bc:	1a18      	subs	r0, r3, r0
 800a4be:	b003      	add	sp, #12
 800a4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a4ca:	e7ed      	b.n	800a4a8 <__exponent+0x4c>
 800a4cc:	2330      	movs	r3, #48	; 0x30
 800a4ce:	3130      	adds	r1, #48	; 0x30
 800a4d0:	7083      	strb	r3, [r0, #2]
 800a4d2:	70c1      	strb	r1, [r0, #3]
 800a4d4:	1d03      	adds	r3, r0, #4
 800a4d6:	e7f1      	b.n	800a4bc <__exponent+0x60>

0800a4d8 <_printf_float>:
 800a4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4dc:	ed2d 8b02 	vpush	{d8}
 800a4e0:	b08d      	sub	sp, #52	; 0x34
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a4e8:	4616      	mov	r6, r2
 800a4ea:	461f      	mov	r7, r3
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	f002 ffe9 	bl	800d4c4 <_localeconv_r>
 800a4f2:	f8d0 a000 	ldr.w	sl, [r0]
 800a4f6:	4650      	mov	r0, sl
 800a4f8:	f7f5 fe6a 	bl	80001d0 <strlen>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	9305      	str	r3, [sp, #20]
 800a504:	f8d8 3000 	ldr.w	r3, [r8]
 800a508:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a50c:	3307      	adds	r3, #7
 800a50e:	f023 0307 	bic.w	r3, r3, #7
 800a512:	f103 0208 	add.w	r2, r3, #8
 800a516:	f8c8 2000 	str.w	r2, [r8]
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a522:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a526:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a52a:	9307      	str	r3, [sp, #28]
 800a52c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a530:	ee08 0a10 	vmov	s16, r0
 800a534:	4b9f      	ldr	r3, [pc, #636]	; (800a7b4 <_printf_float+0x2dc>)
 800a536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a53a:	f04f 32ff 	mov.w	r2, #4294967295
 800a53e:	f7f6 faf5 	bl	8000b2c <__aeabi_dcmpun>
 800a542:	bb88      	cbnz	r0, 800a5a8 <_printf_float+0xd0>
 800a544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a548:	4b9a      	ldr	r3, [pc, #616]	; (800a7b4 <_printf_float+0x2dc>)
 800a54a:	f04f 32ff 	mov.w	r2, #4294967295
 800a54e:	f7f6 facf 	bl	8000af0 <__aeabi_dcmple>
 800a552:	bb48      	cbnz	r0, 800a5a8 <_printf_float+0xd0>
 800a554:	2200      	movs	r2, #0
 800a556:	2300      	movs	r3, #0
 800a558:	4640      	mov	r0, r8
 800a55a:	4649      	mov	r1, r9
 800a55c:	f7f6 fabe 	bl	8000adc <__aeabi_dcmplt>
 800a560:	b110      	cbz	r0, 800a568 <_printf_float+0x90>
 800a562:	232d      	movs	r3, #45	; 0x2d
 800a564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a568:	4b93      	ldr	r3, [pc, #588]	; (800a7b8 <_printf_float+0x2e0>)
 800a56a:	4894      	ldr	r0, [pc, #592]	; (800a7bc <_printf_float+0x2e4>)
 800a56c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a570:	bf94      	ite	ls
 800a572:	4698      	movls	r8, r3
 800a574:	4680      	movhi	r8, r0
 800a576:	2303      	movs	r3, #3
 800a578:	6123      	str	r3, [r4, #16]
 800a57a:	9b05      	ldr	r3, [sp, #20]
 800a57c:	f023 0204 	bic.w	r2, r3, #4
 800a580:	6022      	str	r2, [r4, #0]
 800a582:	f04f 0900 	mov.w	r9, #0
 800a586:	9700      	str	r7, [sp, #0]
 800a588:	4633      	mov	r3, r6
 800a58a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a58c:	4621      	mov	r1, r4
 800a58e:	4628      	mov	r0, r5
 800a590:	f000 f9d8 	bl	800a944 <_printf_common>
 800a594:	3001      	adds	r0, #1
 800a596:	f040 8090 	bne.w	800a6ba <_printf_float+0x1e2>
 800a59a:	f04f 30ff 	mov.w	r0, #4294967295
 800a59e:	b00d      	add	sp, #52	; 0x34
 800a5a0:	ecbd 8b02 	vpop	{d8}
 800a5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a8:	4642      	mov	r2, r8
 800a5aa:	464b      	mov	r3, r9
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	f7f6 fabc 	bl	8000b2c <__aeabi_dcmpun>
 800a5b4:	b140      	cbz	r0, 800a5c8 <_printf_float+0xf0>
 800a5b6:	464b      	mov	r3, r9
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	bfbc      	itt	lt
 800a5bc:	232d      	movlt	r3, #45	; 0x2d
 800a5be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a5c2:	487f      	ldr	r0, [pc, #508]	; (800a7c0 <_printf_float+0x2e8>)
 800a5c4:	4b7f      	ldr	r3, [pc, #508]	; (800a7c4 <_printf_float+0x2ec>)
 800a5c6:	e7d1      	b.n	800a56c <_printf_float+0x94>
 800a5c8:	6863      	ldr	r3, [r4, #4]
 800a5ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a5ce:	9206      	str	r2, [sp, #24]
 800a5d0:	1c5a      	adds	r2, r3, #1
 800a5d2:	d13f      	bne.n	800a654 <_printf_float+0x17c>
 800a5d4:	2306      	movs	r3, #6
 800a5d6:	6063      	str	r3, [r4, #4]
 800a5d8:	9b05      	ldr	r3, [sp, #20]
 800a5da:	6861      	ldr	r1, [r4, #4]
 800a5dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	9303      	str	r3, [sp, #12]
 800a5e4:	ab0a      	add	r3, sp, #40	; 0x28
 800a5e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a5ea:	ab09      	add	r3, sp, #36	; 0x24
 800a5ec:	ec49 8b10 	vmov	d0, r8, r9
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	6022      	str	r2, [r4, #0]
 800a5f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f7ff fecd 	bl	800a398 <__cvt>
 800a5fe:	9b06      	ldr	r3, [sp, #24]
 800a600:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a602:	2b47      	cmp	r3, #71	; 0x47
 800a604:	4680      	mov	r8, r0
 800a606:	d108      	bne.n	800a61a <_printf_float+0x142>
 800a608:	1cc8      	adds	r0, r1, #3
 800a60a:	db02      	blt.n	800a612 <_printf_float+0x13a>
 800a60c:	6863      	ldr	r3, [r4, #4]
 800a60e:	4299      	cmp	r1, r3
 800a610:	dd41      	ble.n	800a696 <_printf_float+0x1be>
 800a612:	f1ab 0b02 	sub.w	fp, fp, #2
 800a616:	fa5f fb8b 	uxtb.w	fp, fp
 800a61a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a61e:	d820      	bhi.n	800a662 <_printf_float+0x18a>
 800a620:	3901      	subs	r1, #1
 800a622:	465a      	mov	r2, fp
 800a624:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a628:	9109      	str	r1, [sp, #36]	; 0x24
 800a62a:	f7ff ff17 	bl	800a45c <__exponent>
 800a62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a630:	1813      	adds	r3, r2, r0
 800a632:	2a01      	cmp	r2, #1
 800a634:	4681      	mov	r9, r0
 800a636:	6123      	str	r3, [r4, #16]
 800a638:	dc02      	bgt.n	800a640 <_printf_float+0x168>
 800a63a:	6822      	ldr	r2, [r4, #0]
 800a63c:	07d2      	lsls	r2, r2, #31
 800a63e:	d501      	bpl.n	800a644 <_printf_float+0x16c>
 800a640:	3301      	adds	r3, #1
 800a642:	6123      	str	r3, [r4, #16]
 800a644:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d09c      	beq.n	800a586 <_printf_float+0xae>
 800a64c:	232d      	movs	r3, #45	; 0x2d
 800a64e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a652:	e798      	b.n	800a586 <_printf_float+0xae>
 800a654:	9a06      	ldr	r2, [sp, #24]
 800a656:	2a47      	cmp	r2, #71	; 0x47
 800a658:	d1be      	bne.n	800a5d8 <_printf_float+0x100>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1bc      	bne.n	800a5d8 <_printf_float+0x100>
 800a65e:	2301      	movs	r3, #1
 800a660:	e7b9      	b.n	800a5d6 <_printf_float+0xfe>
 800a662:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a666:	d118      	bne.n	800a69a <_printf_float+0x1c2>
 800a668:	2900      	cmp	r1, #0
 800a66a:	6863      	ldr	r3, [r4, #4]
 800a66c:	dd0b      	ble.n	800a686 <_printf_float+0x1ae>
 800a66e:	6121      	str	r1, [r4, #16]
 800a670:	b913      	cbnz	r3, 800a678 <_printf_float+0x1a0>
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	07d0      	lsls	r0, r2, #31
 800a676:	d502      	bpl.n	800a67e <_printf_float+0x1a6>
 800a678:	3301      	adds	r3, #1
 800a67a:	440b      	add	r3, r1
 800a67c:	6123      	str	r3, [r4, #16]
 800a67e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a680:	f04f 0900 	mov.w	r9, #0
 800a684:	e7de      	b.n	800a644 <_printf_float+0x16c>
 800a686:	b913      	cbnz	r3, 800a68e <_printf_float+0x1b6>
 800a688:	6822      	ldr	r2, [r4, #0]
 800a68a:	07d2      	lsls	r2, r2, #31
 800a68c:	d501      	bpl.n	800a692 <_printf_float+0x1ba>
 800a68e:	3302      	adds	r3, #2
 800a690:	e7f4      	b.n	800a67c <_printf_float+0x1a4>
 800a692:	2301      	movs	r3, #1
 800a694:	e7f2      	b.n	800a67c <_printf_float+0x1a4>
 800a696:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a69c:	4299      	cmp	r1, r3
 800a69e:	db05      	blt.n	800a6ac <_printf_float+0x1d4>
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	6121      	str	r1, [r4, #16]
 800a6a4:	07d8      	lsls	r0, r3, #31
 800a6a6:	d5ea      	bpl.n	800a67e <_printf_float+0x1a6>
 800a6a8:	1c4b      	adds	r3, r1, #1
 800a6aa:	e7e7      	b.n	800a67c <_printf_float+0x1a4>
 800a6ac:	2900      	cmp	r1, #0
 800a6ae:	bfd4      	ite	le
 800a6b0:	f1c1 0202 	rsble	r2, r1, #2
 800a6b4:	2201      	movgt	r2, #1
 800a6b6:	4413      	add	r3, r2
 800a6b8:	e7e0      	b.n	800a67c <_printf_float+0x1a4>
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	055a      	lsls	r2, r3, #21
 800a6be:	d407      	bmi.n	800a6d0 <_printf_float+0x1f8>
 800a6c0:	6923      	ldr	r3, [r4, #16]
 800a6c2:	4642      	mov	r2, r8
 800a6c4:	4631      	mov	r1, r6
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	47b8      	blx	r7
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	d12c      	bne.n	800a728 <_printf_float+0x250>
 800a6ce:	e764      	b.n	800a59a <_printf_float+0xc2>
 800a6d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6d4:	f240 80e0 	bls.w	800a898 <_printf_float+0x3c0>
 800a6d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f7f6 f9f2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d034      	beq.n	800a752 <_printf_float+0x27a>
 800a6e8:	4a37      	ldr	r2, [pc, #220]	; (800a7c8 <_printf_float+0x2f0>)
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	47b8      	blx	r7
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	f43f af51 	beq.w	800a59a <_printf_float+0xc2>
 800a6f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	db02      	blt.n	800a706 <_printf_float+0x22e>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	07d8      	lsls	r0, r3, #31
 800a704:	d510      	bpl.n	800a728 <_printf_float+0x250>
 800a706:	ee18 3a10 	vmov	r3, s16
 800a70a:	4652      	mov	r2, sl
 800a70c:	4631      	mov	r1, r6
 800a70e:	4628      	mov	r0, r5
 800a710:	47b8      	blx	r7
 800a712:	3001      	adds	r0, #1
 800a714:	f43f af41 	beq.w	800a59a <_printf_float+0xc2>
 800a718:	f04f 0800 	mov.w	r8, #0
 800a71c:	f104 091a 	add.w	r9, r4, #26
 800a720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a722:	3b01      	subs	r3, #1
 800a724:	4543      	cmp	r3, r8
 800a726:	dc09      	bgt.n	800a73c <_printf_float+0x264>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	079b      	lsls	r3, r3, #30
 800a72c:	f100 8105 	bmi.w	800a93a <_printf_float+0x462>
 800a730:	68e0      	ldr	r0, [r4, #12]
 800a732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a734:	4298      	cmp	r0, r3
 800a736:	bfb8      	it	lt
 800a738:	4618      	movlt	r0, r3
 800a73a:	e730      	b.n	800a59e <_printf_float+0xc6>
 800a73c:	2301      	movs	r3, #1
 800a73e:	464a      	mov	r2, r9
 800a740:	4631      	mov	r1, r6
 800a742:	4628      	mov	r0, r5
 800a744:	47b8      	blx	r7
 800a746:	3001      	adds	r0, #1
 800a748:	f43f af27 	beq.w	800a59a <_printf_float+0xc2>
 800a74c:	f108 0801 	add.w	r8, r8, #1
 800a750:	e7e6      	b.n	800a720 <_printf_float+0x248>
 800a752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	dc39      	bgt.n	800a7cc <_printf_float+0x2f4>
 800a758:	4a1b      	ldr	r2, [pc, #108]	; (800a7c8 <_printf_float+0x2f0>)
 800a75a:	2301      	movs	r3, #1
 800a75c:	4631      	mov	r1, r6
 800a75e:	4628      	mov	r0, r5
 800a760:	47b8      	blx	r7
 800a762:	3001      	adds	r0, #1
 800a764:	f43f af19 	beq.w	800a59a <_printf_float+0xc2>
 800a768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a76c:	4313      	orrs	r3, r2
 800a76e:	d102      	bne.n	800a776 <_printf_float+0x29e>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	07d9      	lsls	r1, r3, #31
 800a774:	d5d8      	bpl.n	800a728 <_printf_float+0x250>
 800a776:	ee18 3a10 	vmov	r3, s16
 800a77a:	4652      	mov	r2, sl
 800a77c:	4631      	mov	r1, r6
 800a77e:	4628      	mov	r0, r5
 800a780:	47b8      	blx	r7
 800a782:	3001      	adds	r0, #1
 800a784:	f43f af09 	beq.w	800a59a <_printf_float+0xc2>
 800a788:	f04f 0900 	mov.w	r9, #0
 800a78c:	f104 0a1a 	add.w	sl, r4, #26
 800a790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a792:	425b      	negs	r3, r3
 800a794:	454b      	cmp	r3, r9
 800a796:	dc01      	bgt.n	800a79c <_printf_float+0x2c4>
 800a798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a79a:	e792      	b.n	800a6c2 <_printf_float+0x1ea>
 800a79c:	2301      	movs	r3, #1
 800a79e:	4652      	mov	r2, sl
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	47b8      	blx	r7
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	f43f aef7 	beq.w	800a59a <_printf_float+0xc2>
 800a7ac:	f109 0901 	add.w	r9, r9, #1
 800a7b0:	e7ee      	b.n	800a790 <_printf_float+0x2b8>
 800a7b2:	bf00      	nop
 800a7b4:	7fefffff 	.word	0x7fefffff
 800a7b8:	0800f938 	.word	0x0800f938
 800a7bc:	0800f93c 	.word	0x0800f93c
 800a7c0:	0800f944 	.word	0x0800f944
 800a7c4:	0800f940 	.word	0x0800f940
 800a7c8:	0800fde1 	.word	0x0800fde1
 800a7cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	bfa8      	it	ge
 800a7d4:	461a      	movge	r2, r3
 800a7d6:	2a00      	cmp	r2, #0
 800a7d8:	4691      	mov	r9, r2
 800a7da:	dc37      	bgt.n	800a84c <_printf_float+0x374>
 800a7dc:	f04f 0b00 	mov.w	fp, #0
 800a7e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7e4:	f104 021a 	add.w	r2, r4, #26
 800a7e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7ea:	9305      	str	r3, [sp, #20]
 800a7ec:	eba3 0309 	sub.w	r3, r3, r9
 800a7f0:	455b      	cmp	r3, fp
 800a7f2:	dc33      	bgt.n	800a85c <_printf_float+0x384>
 800a7f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	db3b      	blt.n	800a874 <_printf_float+0x39c>
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	07da      	lsls	r2, r3, #31
 800a800:	d438      	bmi.n	800a874 <_printf_float+0x39c>
 800a802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a804:	9b05      	ldr	r3, [sp, #20]
 800a806:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	eba2 0901 	sub.w	r9, r2, r1
 800a80e:	4599      	cmp	r9, r3
 800a810:	bfa8      	it	ge
 800a812:	4699      	movge	r9, r3
 800a814:	f1b9 0f00 	cmp.w	r9, #0
 800a818:	dc35      	bgt.n	800a886 <_printf_float+0x3ae>
 800a81a:	f04f 0800 	mov.w	r8, #0
 800a81e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a822:	f104 0a1a 	add.w	sl, r4, #26
 800a826:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a82a:	1a9b      	subs	r3, r3, r2
 800a82c:	eba3 0309 	sub.w	r3, r3, r9
 800a830:	4543      	cmp	r3, r8
 800a832:	f77f af79 	ble.w	800a728 <_printf_float+0x250>
 800a836:	2301      	movs	r3, #1
 800a838:	4652      	mov	r2, sl
 800a83a:	4631      	mov	r1, r6
 800a83c:	4628      	mov	r0, r5
 800a83e:	47b8      	blx	r7
 800a840:	3001      	adds	r0, #1
 800a842:	f43f aeaa 	beq.w	800a59a <_printf_float+0xc2>
 800a846:	f108 0801 	add.w	r8, r8, #1
 800a84a:	e7ec      	b.n	800a826 <_printf_float+0x34e>
 800a84c:	4613      	mov	r3, r2
 800a84e:	4631      	mov	r1, r6
 800a850:	4642      	mov	r2, r8
 800a852:	4628      	mov	r0, r5
 800a854:	47b8      	blx	r7
 800a856:	3001      	adds	r0, #1
 800a858:	d1c0      	bne.n	800a7dc <_printf_float+0x304>
 800a85a:	e69e      	b.n	800a59a <_printf_float+0xc2>
 800a85c:	2301      	movs	r3, #1
 800a85e:	4631      	mov	r1, r6
 800a860:	4628      	mov	r0, r5
 800a862:	9205      	str	r2, [sp, #20]
 800a864:	47b8      	blx	r7
 800a866:	3001      	adds	r0, #1
 800a868:	f43f ae97 	beq.w	800a59a <_printf_float+0xc2>
 800a86c:	9a05      	ldr	r2, [sp, #20]
 800a86e:	f10b 0b01 	add.w	fp, fp, #1
 800a872:	e7b9      	b.n	800a7e8 <_printf_float+0x310>
 800a874:	ee18 3a10 	vmov	r3, s16
 800a878:	4652      	mov	r2, sl
 800a87a:	4631      	mov	r1, r6
 800a87c:	4628      	mov	r0, r5
 800a87e:	47b8      	blx	r7
 800a880:	3001      	adds	r0, #1
 800a882:	d1be      	bne.n	800a802 <_printf_float+0x32a>
 800a884:	e689      	b.n	800a59a <_printf_float+0xc2>
 800a886:	9a05      	ldr	r2, [sp, #20]
 800a888:	464b      	mov	r3, r9
 800a88a:	4442      	add	r2, r8
 800a88c:	4631      	mov	r1, r6
 800a88e:	4628      	mov	r0, r5
 800a890:	47b8      	blx	r7
 800a892:	3001      	adds	r0, #1
 800a894:	d1c1      	bne.n	800a81a <_printf_float+0x342>
 800a896:	e680      	b.n	800a59a <_printf_float+0xc2>
 800a898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a89a:	2a01      	cmp	r2, #1
 800a89c:	dc01      	bgt.n	800a8a2 <_printf_float+0x3ca>
 800a89e:	07db      	lsls	r3, r3, #31
 800a8a0:	d538      	bpl.n	800a914 <_printf_float+0x43c>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4642      	mov	r2, r8
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	47b8      	blx	r7
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	f43f ae74 	beq.w	800a59a <_printf_float+0xc2>
 800a8b2:	ee18 3a10 	vmov	r3, s16
 800a8b6:	4652      	mov	r2, sl
 800a8b8:	4631      	mov	r1, r6
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	47b8      	blx	r7
 800a8be:	3001      	adds	r0, #1
 800a8c0:	f43f ae6b 	beq.w	800a59a <_printf_float+0xc2>
 800a8c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f7f6 f8fc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8d0:	b9d8      	cbnz	r0, 800a90a <_printf_float+0x432>
 800a8d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d4:	f108 0201 	add.w	r2, r8, #1
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4628      	mov	r0, r5
 800a8de:	47b8      	blx	r7
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	d10e      	bne.n	800a902 <_printf_float+0x42a>
 800a8e4:	e659      	b.n	800a59a <_printf_float+0xc2>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	4652      	mov	r2, sl
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	47b8      	blx	r7
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	f43f ae52 	beq.w	800a59a <_printf_float+0xc2>
 800a8f6:	f108 0801 	add.w	r8, r8, #1
 800a8fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	4543      	cmp	r3, r8
 800a900:	dcf1      	bgt.n	800a8e6 <_printf_float+0x40e>
 800a902:	464b      	mov	r3, r9
 800a904:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a908:	e6dc      	b.n	800a6c4 <_printf_float+0x1ec>
 800a90a:	f04f 0800 	mov.w	r8, #0
 800a90e:	f104 0a1a 	add.w	sl, r4, #26
 800a912:	e7f2      	b.n	800a8fa <_printf_float+0x422>
 800a914:	2301      	movs	r3, #1
 800a916:	4642      	mov	r2, r8
 800a918:	e7df      	b.n	800a8da <_printf_float+0x402>
 800a91a:	2301      	movs	r3, #1
 800a91c:	464a      	mov	r2, r9
 800a91e:	4631      	mov	r1, r6
 800a920:	4628      	mov	r0, r5
 800a922:	47b8      	blx	r7
 800a924:	3001      	adds	r0, #1
 800a926:	f43f ae38 	beq.w	800a59a <_printf_float+0xc2>
 800a92a:	f108 0801 	add.w	r8, r8, #1
 800a92e:	68e3      	ldr	r3, [r4, #12]
 800a930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a932:	1a5b      	subs	r3, r3, r1
 800a934:	4543      	cmp	r3, r8
 800a936:	dcf0      	bgt.n	800a91a <_printf_float+0x442>
 800a938:	e6fa      	b.n	800a730 <_printf_float+0x258>
 800a93a:	f04f 0800 	mov.w	r8, #0
 800a93e:	f104 0919 	add.w	r9, r4, #25
 800a942:	e7f4      	b.n	800a92e <_printf_float+0x456>

0800a944 <_printf_common>:
 800a944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a948:	4616      	mov	r6, r2
 800a94a:	4699      	mov	r9, r3
 800a94c:	688a      	ldr	r2, [r1, #8]
 800a94e:	690b      	ldr	r3, [r1, #16]
 800a950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a954:	4293      	cmp	r3, r2
 800a956:	bfb8      	it	lt
 800a958:	4613      	movlt	r3, r2
 800a95a:	6033      	str	r3, [r6, #0]
 800a95c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a960:	4607      	mov	r7, r0
 800a962:	460c      	mov	r4, r1
 800a964:	b10a      	cbz	r2, 800a96a <_printf_common+0x26>
 800a966:	3301      	adds	r3, #1
 800a968:	6033      	str	r3, [r6, #0]
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	0699      	lsls	r1, r3, #26
 800a96e:	bf42      	ittt	mi
 800a970:	6833      	ldrmi	r3, [r6, #0]
 800a972:	3302      	addmi	r3, #2
 800a974:	6033      	strmi	r3, [r6, #0]
 800a976:	6825      	ldr	r5, [r4, #0]
 800a978:	f015 0506 	ands.w	r5, r5, #6
 800a97c:	d106      	bne.n	800a98c <_printf_common+0x48>
 800a97e:	f104 0a19 	add.w	sl, r4, #25
 800a982:	68e3      	ldr	r3, [r4, #12]
 800a984:	6832      	ldr	r2, [r6, #0]
 800a986:	1a9b      	subs	r3, r3, r2
 800a988:	42ab      	cmp	r3, r5
 800a98a:	dc26      	bgt.n	800a9da <_printf_common+0x96>
 800a98c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a990:	1e13      	subs	r3, r2, #0
 800a992:	6822      	ldr	r2, [r4, #0]
 800a994:	bf18      	it	ne
 800a996:	2301      	movne	r3, #1
 800a998:	0692      	lsls	r2, r2, #26
 800a99a:	d42b      	bmi.n	800a9f4 <_printf_common+0xb0>
 800a99c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	47c0      	blx	r8
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	d01e      	beq.n	800a9e8 <_printf_common+0xa4>
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	68e5      	ldr	r5, [r4, #12]
 800a9ae:	6832      	ldr	r2, [r6, #0]
 800a9b0:	f003 0306 	and.w	r3, r3, #6
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	bf08      	it	eq
 800a9b8:	1aad      	subeq	r5, r5, r2
 800a9ba:	68a3      	ldr	r3, [r4, #8]
 800a9bc:	6922      	ldr	r2, [r4, #16]
 800a9be:	bf0c      	ite	eq
 800a9c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9c4:	2500      	movne	r5, #0
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	bfc4      	itt	gt
 800a9ca:	1a9b      	subgt	r3, r3, r2
 800a9cc:	18ed      	addgt	r5, r5, r3
 800a9ce:	2600      	movs	r6, #0
 800a9d0:	341a      	adds	r4, #26
 800a9d2:	42b5      	cmp	r5, r6
 800a9d4:	d11a      	bne.n	800aa0c <_printf_common+0xc8>
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	e008      	b.n	800a9ec <_printf_common+0xa8>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	4652      	mov	r2, sl
 800a9de:	4649      	mov	r1, r9
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	47c0      	blx	r8
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d103      	bne.n	800a9f0 <_printf_common+0xac>
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f0:	3501      	adds	r5, #1
 800a9f2:	e7c6      	b.n	800a982 <_printf_common+0x3e>
 800a9f4:	18e1      	adds	r1, r4, r3
 800a9f6:	1c5a      	adds	r2, r3, #1
 800a9f8:	2030      	movs	r0, #48	; 0x30
 800a9fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9fe:	4422      	add	r2, r4
 800aa00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa08:	3302      	adds	r3, #2
 800aa0a:	e7c7      	b.n	800a99c <_printf_common+0x58>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	4622      	mov	r2, r4
 800aa10:	4649      	mov	r1, r9
 800aa12:	4638      	mov	r0, r7
 800aa14:	47c0      	blx	r8
 800aa16:	3001      	adds	r0, #1
 800aa18:	d0e6      	beq.n	800a9e8 <_printf_common+0xa4>
 800aa1a:	3601      	adds	r6, #1
 800aa1c:	e7d9      	b.n	800a9d2 <_printf_common+0x8e>
	...

0800aa20 <_printf_i>:
 800aa20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa24:	460c      	mov	r4, r1
 800aa26:	4691      	mov	r9, r2
 800aa28:	7e27      	ldrb	r7, [r4, #24]
 800aa2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa2c:	2f78      	cmp	r7, #120	; 0x78
 800aa2e:	4680      	mov	r8, r0
 800aa30:	469a      	mov	sl, r3
 800aa32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa36:	d807      	bhi.n	800aa48 <_printf_i+0x28>
 800aa38:	2f62      	cmp	r7, #98	; 0x62
 800aa3a:	d80a      	bhi.n	800aa52 <_printf_i+0x32>
 800aa3c:	2f00      	cmp	r7, #0
 800aa3e:	f000 80d8 	beq.w	800abf2 <_printf_i+0x1d2>
 800aa42:	2f58      	cmp	r7, #88	; 0x58
 800aa44:	f000 80a3 	beq.w	800ab8e <_printf_i+0x16e>
 800aa48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa50:	e03a      	b.n	800aac8 <_printf_i+0xa8>
 800aa52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa56:	2b15      	cmp	r3, #21
 800aa58:	d8f6      	bhi.n	800aa48 <_printf_i+0x28>
 800aa5a:	a001      	add	r0, pc, #4	; (adr r0, 800aa60 <_printf_i+0x40>)
 800aa5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aa60:	0800aab9 	.word	0x0800aab9
 800aa64:	0800aacd 	.word	0x0800aacd
 800aa68:	0800aa49 	.word	0x0800aa49
 800aa6c:	0800aa49 	.word	0x0800aa49
 800aa70:	0800aa49 	.word	0x0800aa49
 800aa74:	0800aa49 	.word	0x0800aa49
 800aa78:	0800aacd 	.word	0x0800aacd
 800aa7c:	0800aa49 	.word	0x0800aa49
 800aa80:	0800aa49 	.word	0x0800aa49
 800aa84:	0800aa49 	.word	0x0800aa49
 800aa88:	0800aa49 	.word	0x0800aa49
 800aa8c:	0800abd9 	.word	0x0800abd9
 800aa90:	0800aafd 	.word	0x0800aafd
 800aa94:	0800abbb 	.word	0x0800abbb
 800aa98:	0800aa49 	.word	0x0800aa49
 800aa9c:	0800aa49 	.word	0x0800aa49
 800aaa0:	0800abfb 	.word	0x0800abfb
 800aaa4:	0800aa49 	.word	0x0800aa49
 800aaa8:	0800aafd 	.word	0x0800aafd
 800aaac:	0800aa49 	.word	0x0800aa49
 800aab0:	0800aa49 	.word	0x0800aa49
 800aab4:	0800abc3 	.word	0x0800abc3
 800aab8:	680b      	ldr	r3, [r1, #0]
 800aaba:	1d1a      	adds	r2, r3, #4
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	600a      	str	r2, [r1, #0]
 800aac0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aac8:	2301      	movs	r3, #1
 800aaca:	e0a3      	b.n	800ac14 <_printf_i+0x1f4>
 800aacc:	6825      	ldr	r5, [r4, #0]
 800aace:	6808      	ldr	r0, [r1, #0]
 800aad0:	062e      	lsls	r6, r5, #24
 800aad2:	f100 0304 	add.w	r3, r0, #4
 800aad6:	d50a      	bpl.n	800aaee <_printf_i+0xce>
 800aad8:	6805      	ldr	r5, [r0, #0]
 800aada:	600b      	str	r3, [r1, #0]
 800aadc:	2d00      	cmp	r5, #0
 800aade:	da03      	bge.n	800aae8 <_printf_i+0xc8>
 800aae0:	232d      	movs	r3, #45	; 0x2d
 800aae2:	426d      	negs	r5, r5
 800aae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aae8:	485e      	ldr	r0, [pc, #376]	; (800ac64 <_printf_i+0x244>)
 800aaea:	230a      	movs	r3, #10
 800aaec:	e019      	b.n	800ab22 <_printf_i+0x102>
 800aaee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aaf2:	6805      	ldr	r5, [r0, #0]
 800aaf4:	600b      	str	r3, [r1, #0]
 800aaf6:	bf18      	it	ne
 800aaf8:	b22d      	sxthne	r5, r5
 800aafa:	e7ef      	b.n	800aadc <_printf_i+0xbc>
 800aafc:	680b      	ldr	r3, [r1, #0]
 800aafe:	6825      	ldr	r5, [r4, #0]
 800ab00:	1d18      	adds	r0, r3, #4
 800ab02:	6008      	str	r0, [r1, #0]
 800ab04:	0628      	lsls	r0, r5, #24
 800ab06:	d501      	bpl.n	800ab0c <_printf_i+0xec>
 800ab08:	681d      	ldr	r5, [r3, #0]
 800ab0a:	e002      	b.n	800ab12 <_printf_i+0xf2>
 800ab0c:	0669      	lsls	r1, r5, #25
 800ab0e:	d5fb      	bpl.n	800ab08 <_printf_i+0xe8>
 800ab10:	881d      	ldrh	r5, [r3, #0]
 800ab12:	4854      	ldr	r0, [pc, #336]	; (800ac64 <_printf_i+0x244>)
 800ab14:	2f6f      	cmp	r7, #111	; 0x6f
 800ab16:	bf0c      	ite	eq
 800ab18:	2308      	moveq	r3, #8
 800ab1a:	230a      	movne	r3, #10
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab22:	6866      	ldr	r6, [r4, #4]
 800ab24:	60a6      	str	r6, [r4, #8]
 800ab26:	2e00      	cmp	r6, #0
 800ab28:	bfa2      	ittt	ge
 800ab2a:	6821      	ldrge	r1, [r4, #0]
 800ab2c:	f021 0104 	bicge.w	r1, r1, #4
 800ab30:	6021      	strge	r1, [r4, #0]
 800ab32:	b90d      	cbnz	r5, 800ab38 <_printf_i+0x118>
 800ab34:	2e00      	cmp	r6, #0
 800ab36:	d04d      	beq.n	800abd4 <_printf_i+0x1b4>
 800ab38:	4616      	mov	r6, r2
 800ab3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab3e:	fb03 5711 	mls	r7, r3, r1, r5
 800ab42:	5dc7      	ldrb	r7, [r0, r7]
 800ab44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab48:	462f      	mov	r7, r5
 800ab4a:	42bb      	cmp	r3, r7
 800ab4c:	460d      	mov	r5, r1
 800ab4e:	d9f4      	bls.n	800ab3a <_printf_i+0x11a>
 800ab50:	2b08      	cmp	r3, #8
 800ab52:	d10b      	bne.n	800ab6c <_printf_i+0x14c>
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	07df      	lsls	r7, r3, #31
 800ab58:	d508      	bpl.n	800ab6c <_printf_i+0x14c>
 800ab5a:	6923      	ldr	r3, [r4, #16]
 800ab5c:	6861      	ldr	r1, [r4, #4]
 800ab5e:	4299      	cmp	r1, r3
 800ab60:	bfde      	ittt	le
 800ab62:	2330      	movle	r3, #48	; 0x30
 800ab64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab6c:	1b92      	subs	r2, r2, r6
 800ab6e:	6122      	str	r2, [r4, #16]
 800ab70:	f8cd a000 	str.w	sl, [sp]
 800ab74:	464b      	mov	r3, r9
 800ab76:	aa03      	add	r2, sp, #12
 800ab78:	4621      	mov	r1, r4
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	f7ff fee2 	bl	800a944 <_printf_common>
 800ab80:	3001      	adds	r0, #1
 800ab82:	d14c      	bne.n	800ac1e <_printf_i+0x1fe>
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	b004      	add	sp, #16
 800ab8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab8e:	4835      	ldr	r0, [pc, #212]	; (800ac64 <_printf_i+0x244>)
 800ab90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	680e      	ldr	r6, [r1, #0]
 800ab98:	061f      	lsls	r7, r3, #24
 800ab9a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ab9e:	600e      	str	r6, [r1, #0]
 800aba0:	d514      	bpl.n	800abcc <_printf_i+0x1ac>
 800aba2:	07d9      	lsls	r1, r3, #31
 800aba4:	bf44      	itt	mi
 800aba6:	f043 0320 	orrmi.w	r3, r3, #32
 800abaa:	6023      	strmi	r3, [r4, #0]
 800abac:	b91d      	cbnz	r5, 800abb6 <_printf_i+0x196>
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	f023 0320 	bic.w	r3, r3, #32
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	2310      	movs	r3, #16
 800abb8:	e7b0      	b.n	800ab1c <_printf_i+0xfc>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	f043 0320 	orr.w	r3, r3, #32
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	2378      	movs	r3, #120	; 0x78
 800abc4:	4828      	ldr	r0, [pc, #160]	; (800ac68 <_printf_i+0x248>)
 800abc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abca:	e7e3      	b.n	800ab94 <_printf_i+0x174>
 800abcc:	065e      	lsls	r6, r3, #25
 800abce:	bf48      	it	mi
 800abd0:	b2ad      	uxthmi	r5, r5
 800abd2:	e7e6      	b.n	800aba2 <_printf_i+0x182>
 800abd4:	4616      	mov	r6, r2
 800abd6:	e7bb      	b.n	800ab50 <_printf_i+0x130>
 800abd8:	680b      	ldr	r3, [r1, #0]
 800abda:	6826      	ldr	r6, [r4, #0]
 800abdc:	6960      	ldr	r0, [r4, #20]
 800abde:	1d1d      	adds	r5, r3, #4
 800abe0:	600d      	str	r5, [r1, #0]
 800abe2:	0635      	lsls	r5, r6, #24
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	d501      	bpl.n	800abec <_printf_i+0x1cc>
 800abe8:	6018      	str	r0, [r3, #0]
 800abea:	e002      	b.n	800abf2 <_printf_i+0x1d2>
 800abec:	0671      	lsls	r1, r6, #25
 800abee:	d5fb      	bpl.n	800abe8 <_printf_i+0x1c8>
 800abf0:	8018      	strh	r0, [r3, #0]
 800abf2:	2300      	movs	r3, #0
 800abf4:	6123      	str	r3, [r4, #16]
 800abf6:	4616      	mov	r6, r2
 800abf8:	e7ba      	b.n	800ab70 <_printf_i+0x150>
 800abfa:	680b      	ldr	r3, [r1, #0]
 800abfc:	1d1a      	adds	r2, r3, #4
 800abfe:	600a      	str	r2, [r1, #0]
 800ac00:	681e      	ldr	r6, [r3, #0]
 800ac02:	6862      	ldr	r2, [r4, #4]
 800ac04:	2100      	movs	r1, #0
 800ac06:	4630      	mov	r0, r6
 800ac08:	f7f5 faea 	bl	80001e0 <memchr>
 800ac0c:	b108      	cbz	r0, 800ac12 <_printf_i+0x1f2>
 800ac0e:	1b80      	subs	r0, r0, r6
 800ac10:	6060      	str	r0, [r4, #4]
 800ac12:	6863      	ldr	r3, [r4, #4]
 800ac14:	6123      	str	r3, [r4, #16]
 800ac16:	2300      	movs	r3, #0
 800ac18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac1c:	e7a8      	b.n	800ab70 <_printf_i+0x150>
 800ac1e:	6923      	ldr	r3, [r4, #16]
 800ac20:	4632      	mov	r2, r6
 800ac22:	4649      	mov	r1, r9
 800ac24:	4640      	mov	r0, r8
 800ac26:	47d0      	blx	sl
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d0ab      	beq.n	800ab84 <_printf_i+0x164>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	079b      	lsls	r3, r3, #30
 800ac30:	d413      	bmi.n	800ac5a <_printf_i+0x23a>
 800ac32:	68e0      	ldr	r0, [r4, #12]
 800ac34:	9b03      	ldr	r3, [sp, #12]
 800ac36:	4298      	cmp	r0, r3
 800ac38:	bfb8      	it	lt
 800ac3a:	4618      	movlt	r0, r3
 800ac3c:	e7a4      	b.n	800ab88 <_printf_i+0x168>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	4632      	mov	r2, r6
 800ac42:	4649      	mov	r1, r9
 800ac44:	4640      	mov	r0, r8
 800ac46:	47d0      	blx	sl
 800ac48:	3001      	adds	r0, #1
 800ac4a:	d09b      	beq.n	800ab84 <_printf_i+0x164>
 800ac4c:	3501      	adds	r5, #1
 800ac4e:	68e3      	ldr	r3, [r4, #12]
 800ac50:	9903      	ldr	r1, [sp, #12]
 800ac52:	1a5b      	subs	r3, r3, r1
 800ac54:	42ab      	cmp	r3, r5
 800ac56:	dcf2      	bgt.n	800ac3e <_printf_i+0x21e>
 800ac58:	e7eb      	b.n	800ac32 <_printf_i+0x212>
 800ac5a:	2500      	movs	r5, #0
 800ac5c:	f104 0619 	add.w	r6, r4, #25
 800ac60:	e7f5      	b.n	800ac4e <_printf_i+0x22e>
 800ac62:	bf00      	nop
 800ac64:	0800f948 	.word	0x0800f948
 800ac68:	0800f959 	.word	0x0800f959

0800ac6c <_scanf_float>:
 800ac6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac70:	b087      	sub	sp, #28
 800ac72:	4617      	mov	r7, r2
 800ac74:	9303      	str	r3, [sp, #12]
 800ac76:	688b      	ldr	r3, [r1, #8]
 800ac78:	1e5a      	subs	r2, r3, #1
 800ac7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ac7e:	bf83      	ittte	hi
 800ac80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ac84:	195b      	addhi	r3, r3, r5
 800ac86:	9302      	strhi	r3, [sp, #8]
 800ac88:	2300      	movls	r3, #0
 800ac8a:	bf86      	itte	hi
 800ac8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac90:	608b      	strhi	r3, [r1, #8]
 800ac92:	9302      	strls	r3, [sp, #8]
 800ac94:	680b      	ldr	r3, [r1, #0]
 800ac96:	468b      	mov	fp, r1
 800ac98:	2500      	movs	r5, #0
 800ac9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ac9e:	f84b 3b1c 	str.w	r3, [fp], #28
 800aca2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aca6:	4680      	mov	r8, r0
 800aca8:	460c      	mov	r4, r1
 800acaa:	465e      	mov	r6, fp
 800acac:	46aa      	mov	sl, r5
 800acae:	46a9      	mov	r9, r5
 800acb0:	9501      	str	r5, [sp, #4]
 800acb2:	68a2      	ldr	r2, [r4, #8]
 800acb4:	b152      	cbz	r2, 800accc <_scanf_float+0x60>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2b4e      	cmp	r3, #78	; 0x4e
 800acbc:	d864      	bhi.n	800ad88 <_scanf_float+0x11c>
 800acbe:	2b40      	cmp	r3, #64	; 0x40
 800acc0:	d83c      	bhi.n	800ad3c <_scanf_float+0xd0>
 800acc2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800acc6:	b2c8      	uxtb	r0, r1
 800acc8:	280e      	cmp	r0, #14
 800acca:	d93a      	bls.n	800ad42 <_scanf_float+0xd6>
 800accc:	f1b9 0f00 	cmp.w	r9, #0
 800acd0:	d003      	beq.n	800acda <_scanf_float+0x6e>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acde:	f1ba 0f01 	cmp.w	sl, #1
 800ace2:	f200 8113 	bhi.w	800af0c <_scanf_float+0x2a0>
 800ace6:	455e      	cmp	r6, fp
 800ace8:	f200 8105 	bhi.w	800aef6 <_scanf_float+0x28a>
 800acec:	2501      	movs	r5, #1
 800acee:	4628      	mov	r0, r5
 800acf0:	b007      	add	sp, #28
 800acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800acfa:	2a0d      	cmp	r2, #13
 800acfc:	d8e6      	bhi.n	800accc <_scanf_float+0x60>
 800acfe:	a101      	add	r1, pc, #4	; (adr r1, 800ad04 <_scanf_float+0x98>)
 800ad00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad04:	0800ae43 	.word	0x0800ae43
 800ad08:	0800accd 	.word	0x0800accd
 800ad0c:	0800accd 	.word	0x0800accd
 800ad10:	0800accd 	.word	0x0800accd
 800ad14:	0800aea3 	.word	0x0800aea3
 800ad18:	0800ae7b 	.word	0x0800ae7b
 800ad1c:	0800accd 	.word	0x0800accd
 800ad20:	0800accd 	.word	0x0800accd
 800ad24:	0800ae51 	.word	0x0800ae51
 800ad28:	0800accd 	.word	0x0800accd
 800ad2c:	0800accd 	.word	0x0800accd
 800ad30:	0800accd 	.word	0x0800accd
 800ad34:	0800accd 	.word	0x0800accd
 800ad38:	0800ae09 	.word	0x0800ae09
 800ad3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ad40:	e7db      	b.n	800acfa <_scanf_float+0x8e>
 800ad42:	290e      	cmp	r1, #14
 800ad44:	d8c2      	bhi.n	800accc <_scanf_float+0x60>
 800ad46:	a001      	add	r0, pc, #4	; (adr r0, 800ad4c <_scanf_float+0xe0>)
 800ad48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ad4c:	0800adfb 	.word	0x0800adfb
 800ad50:	0800accd 	.word	0x0800accd
 800ad54:	0800adfb 	.word	0x0800adfb
 800ad58:	0800ae8f 	.word	0x0800ae8f
 800ad5c:	0800accd 	.word	0x0800accd
 800ad60:	0800ada9 	.word	0x0800ada9
 800ad64:	0800ade5 	.word	0x0800ade5
 800ad68:	0800ade5 	.word	0x0800ade5
 800ad6c:	0800ade5 	.word	0x0800ade5
 800ad70:	0800ade5 	.word	0x0800ade5
 800ad74:	0800ade5 	.word	0x0800ade5
 800ad78:	0800ade5 	.word	0x0800ade5
 800ad7c:	0800ade5 	.word	0x0800ade5
 800ad80:	0800ade5 	.word	0x0800ade5
 800ad84:	0800ade5 	.word	0x0800ade5
 800ad88:	2b6e      	cmp	r3, #110	; 0x6e
 800ad8a:	d809      	bhi.n	800ada0 <_scanf_float+0x134>
 800ad8c:	2b60      	cmp	r3, #96	; 0x60
 800ad8e:	d8b2      	bhi.n	800acf6 <_scanf_float+0x8a>
 800ad90:	2b54      	cmp	r3, #84	; 0x54
 800ad92:	d077      	beq.n	800ae84 <_scanf_float+0x218>
 800ad94:	2b59      	cmp	r3, #89	; 0x59
 800ad96:	d199      	bne.n	800accc <_scanf_float+0x60>
 800ad98:	2d07      	cmp	r5, #7
 800ad9a:	d197      	bne.n	800accc <_scanf_float+0x60>
 800ad9c:	2508      	movs	r5, #8
 800ad9e:	e029      	b.n	800adf4 <_scanf_float+0x188>
 800ada0:	2b74      	cmp	r3, #116	; 0x74
 800ada2:	d06f      	beq.n	800ae84 <_scanf_float+0x218>
 800ada4:	2b79      	cmp	r3, #121	; 0x79
 800ada6:	e7f6      	b.n	800ad96 <_scanf_float+0x12a>
 800ada8:	6821      	ldr	r1, [r4, #0]
 800adaa:	05c8      	lsls	r0, r1, #23
 800adac:	d51a      	bpl.n	800ade4 <_scanf_float+0x178>
 800adae:	9b02      	ldr	r3, [sp, #8]
 800adb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800adb4:	6021      	str	r1, [r4, #0]
 800adb6:	f109 0901 	add.w	r9, r9, #1
 800adba:	b11b      	cbz	r3, 800adc4 <_scanf_float+0x158>
 800adbc:	3b01      	subs	r3, #1
 800adbe:	3201      	adds	r2, #1
 800adc0:	9302      	str	r3, [sp, #8]
 800adc2:	60a2      	str	r2, [r4, #8]
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	60a3      	str	r3, [r4, #8]
 800adca:	6923      	ldr	r3, [r4, #16]
 800adcc:	3301      	adds	r3, #1
 800adce:	6123      	str	r3, [r4, #16]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	3b01      	subs	r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	607b      	str	r3, [r7, #4]
 800add8:	f340 8084 	ble.w	800aee4 <_scanf_float+0x278>
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	3301      	adds	r3, #1
 800ade0:	603b      	str	r3, [r7, #0]
 800ade2:	e766      	b.n	800acb2 <_scanf_float+0x46>
 800ade4:	eb1a 0f05 	cmn.w	sl, r5
 800ade8:	f47f af70 	bne.w	800accc <_scanf_float+0x60>
 800adec:	6822      	ldr	r2, [r4, #0]
 800adee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800adf2:	6022      	str	r2, [r4, #0]
 800adf4:	f806 3b01 	strb.w	r3, [r6], #1
 800adf8:	e7e4      	b.n	800adc4 <_scanf_float+0x158>
 800adfa:	6822      	ldr	r2, [r4, #0]
 800adfc:	0610      	lsls	r0, r2, #24
 800adfe:	f57f af65 	bpl.w	800accc <_scanf_float+0x60>
 800ae02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae06:	e7f4      	b.n	800adf2 <_scanf_float+0x186>
 800ae08:	f1ba 0f00 	cmp.w	sl, #0
 800ae0c:	d10e      	bne.n	800ae2c <_scanf_float+0x1c0>
 800ae0e:	f1b9 0f00 	cmp.w	r9, #0
 800ae12:	d10e      	bne.n	800ae32 <_scanf_float+0x1c6>
 800ae14:	6822      	ldr	r2, [r4, #0]
 800ae16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ae1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae1e:	d108      	bne.n	800ae32 <_scanf_float+0x1c6>
 800ae20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae24:	6022      	str	r2, [r4, #0]
 800ae26:	f04f 0a01 	mov.w	sl, #1
 800ae2a:	e7e3      	b.n	800adf4 <_scanf_float+0x188>
 800ae2c:	f1ba 0f02 	cmp.w	sl, #2
 800ae30:	d055      	beq.n	800aede <_scanf_float+0x272>
 800ae32:	2d01      	cmp	r5, #1
 800ae34:	d002      	beq.n	800ae3c <_scanf_float+0x1d0>
 800ae36:	2d04      	cmp	r5, #4
 800ae38:	f47f af48 	bne.w	800accc <_scanf_float+0x60>
 800ae3c:	3501      	adds	r5, #1
 800ae3e:	b2ed      	uxtb	r5, r5
 800ae40:	e7d8      	b.n	800adf4 <_scanf_float+0x188>
 800ae42:	f1ba 0f01 	cmp.w	sl, #1
 800ae46:	f47f af41 	bne.w	800accc <_scanf_float+0x60>
 800ae4a:	f04f 0a02 	mov.w	sl, #2
 800ae4e:	e7d1      	b.n	800adf4 <_scanf_float+0x188>
 800ae50:	b97d      	cbnz	r5, 800ae72 <_scanf_float+0x206>
 800ae52:	f1b9 0f00 	cmp.w	r9, #0
 800ae56:	f47f af3c 	bne.w	800acd2 <_scanf_float+0x66>
 800ae5a:	6822      	ldr	r2, [r4, #0]
 800ae5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ae60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae64:	f47f af39 	bne.w	800acda <_scanf_float+0x6e>
 800ae68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae6c:	6022      	str	r2, [r4, #0]
 800ae6e:	2501      	movs	r5, #1
 800ae70:	e7c0      	b.n	800adf4 <_scanf_float+0x188>
 800ae72:	2d03      	cmp	r5, #3
 800ae74:	d0e2      	beq.n	800ae3c <_scanf_float+0x1d0>
 800ae76:	2d05      	cmp	r5, #5
 800ae78:	e7de      	b.n	800ae38 <_scanf_float+0x1cc>
 800ae7a:	2d02      	cmp	r5, #2
 800ae7c:	f47f af26 	bne.w	800accc <_scanf_float+0x60>
 800ae80:	2503      	movs	r5, #3
 800ae82:	e7b7      	b.n	800adf4 <_scanf_float+0x188>
 800ae84:	2d06      	cmp	r5, #6
 800ae86:	f47f af21 	bne.w	800accc <_scanf_float+0x60>
 800ae8a:	2507      	movs	r5, #7
 800ae8c:	e7b2      	b.n	800adf4 <_scanf_float+0x188>
 800ae8e:	6822      	ldr	r2, [r4, #0]
 800ae90:	0591      	lsls	r1, r2, #22
 800ae92:	f57f af1b 	bpl.w	800accc <_scanf_float+0x60>
 800ae96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ae9a:	6022      	str	r2, [r4, #0]
 800ae9c:	f8cd 9004 	str.w	r9, [sp, #4]
 800aea0:	e7a8      	b.n	800adf4 <_scanf_float+0x188>
 800aea2:	6822      	ldr	r2, [r4, #0]
 800aea4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aea8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aeac:	d006      	beq.n	800aebc <_scanf_float+0x250>
 800aeae:	0550      	lsls	r0, r2, #21
 800aeb0:	f57f af0c 	bpl.w	800accc <_scanf_float+0x60>
 800aeb4:	f1b9 0f00 	cmp.w	r9, #0
 800aeb8:	f43f af0f 	beq.w	800acda <_scanf_float+0x6e>
 800aebc:	0591      	lsls	r1, r2, #22
 800aebe:	bf58      	it	pl
 800aec0:	9901      	ldrpl	r1, [sp, #4]
 800aec2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aec6:	bf58      	it	pl
 800aec8:	eba9 0101 	subpl.w	r1, r9, r1
 800aecc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aed0:	bf58      	it	pl
 800aed2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aed6:	6022      	str	r2, [r4, #0]
 800aed8:	f04f 0900 	mov.w	r9, #0
 800aedc:	e78a      	b.n	800adf4 <_scanf_float+0x188>
 800aede:	f04f 0a03 	mov.w	sl, #3
 800aee2:	e787      	b.n	800adf4 <_scanf_float+0x188>
 800aee4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aee8:	4639      	mov	r1, r7
 800aeea:	4640      	mov	r0, r8
 800aeec:	4798      	blx	r3
 800aeee:	2800      	cmp	r0, #0
 800aef0:	f43f aedf 	beq.w	800acb2 <_scanf_float+0x46>
 800aef4:	e6ea      	b.n	800accc <_scanf_float+0x60>
 800aef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aefa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aefe:	463a      	mov	r2, r7
 800af00:	4640      	mov	r0, r8
 800af02:	4798      	blx	r3
 800af04:	6923      	ldr	r3, [r4, #16]
 800af06:	3b01      	subs	r3, #1
 800af08:	6123      	str	r3, [r4, #16]
 800af0a:	e6ec      	b.n	800ace6 <_scanf_float+0x7a>
 800af0c:	1e6b      	subs	r3, r5, #1
 800af0e:	2b06      	cmp	r3, #6
 800af10:	d825      	bhi.n	800af5e <_scanf_float+0x2f2>
 800af12:	2d02      	cmp	r5, #2
 800af14:	d836      	bhi.n	800af84 <_scanf_float+0x318>
 800af16:	455e      	cmp	r6, fp
 800af18:	f67f aee8 	bls.w	800acec <_scanf_float+0x80>
 800af1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af24:	463a      	mov	r2, r7
 800af26:	4640      	mov	r0, r8
 800af28:	4798      	blx	r3
 800af2a:	6923      	ldr	r3, [r4, #16]
 800af2c:	3b01      	subs	r3, #1
 800af2e:	6123      	str	r3, [r4, #16]
 800af30:	e7f1      	b.n	800af16 <_scanf_float+0x2aa>
 800af32:	9802      	ldr	r0, [sp, #8]
 800af34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800af3c:	9002      	str	r0, [sp, #8]
 800af3e:	463a      	mov	r2, r7
 800af40:	4640      	mov	r0, r8
 800af42:	4798      	blx	r3
 800af44:	6923      	ldr	r3, [r4, #16]
 800af46:	3b01      	subs	r3, #1
 800af48:	6123      	str	r3, [r4, #16]
 800af4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af4e:	fa5f fa8a 	uxtb.w	sl, sl
 800af52:	f1ba 0f02 	cmp.w	sl, #2
 800af56:	d1ec      	bne.n	800af32 <_scanf_float+0x2c6>
 800af58:	3d03      	subs	r5, #3
 800af5a:	b2ed      	uxtb	r5, r5
 800af5c:	1b76      	subs	r6, r6, r5
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	05da      	lsls	r2, r3, #23
 800af62:	d52f      	bpl.n	800afc4 <_scanf_float+0x358>
 800af64:	055b      	lsls	r3, r3, #21
 800af66:	d510      	bpl.n	800af8a <_scanf_float+0x31e>
 800af68:	455e      	cmp	r6, fp
 800af6a:	f67f aebf 	bls.w	800acec <_scanf_float+0x80>
 800af6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af76:	463a      	mov	r2, r7
 800af78:	4640      	mov	r0, r8
 800af7a:	4798      	blx	r3
 800af7c:	6923      	ldr	r3, [r4, #16]
 800af7e:	3b01      	subs	r3, #1
 800af80:	6123      	str	r3, [r4, #16]
 800af82:	e7f1      	b.n	800af68 <_scanf_float+0x2fc>
 800af84:	46aa      	mov	sl, r5
 800af86:	9602      	str	r6, [sp, #8]
 800af88:	e7df      	b.n	800af4a <_scanf_float+0x2de>
 800af8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	2965      	cmp	r1, #101	; 0x65
 800af92:	f103 33ff 	add.w	r3, r3, #4294967295
 800af96:	f106 35ff 	add.w	r5, r6, #4294967295
 800af9a:	6123      	str	r3, [r4, #16]
 800af9c:	d00c      	beq.n	800afb8 <_scanf_float+0x34c>
 800af9e:	2945      	cmp	r1, #69	; 0x45
 800afa0:	d00a      	beq.n	800afb8 <_scanf_float+0x34c>
 800afa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afa6:	463a      	mov	r2, r7
 800afa8:	4640      	mov	r0, r8
 800afaa:	4798      	blx	r3
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	1eb5      	subs	r5, r6, #2
 800afb6:	6123      	str	r3, [r4, #16]
 800afb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afbc:	463a      	mov	r2, r7
 800afbe:	4640      	mov	r0, r8
 800afc0:	4798      	blx	r3
 800afc2:	462e      	mov	r6, r5
 800afc4:	6825      	ldr	r5, [r4, #0]
 800afc6:	f015 0510 	ands.w	r5, r5, #16
 800afca:	d158      	bne.n	800b07e <_scanf_float+0x412>
 800afcc:	7035      	strb	r5, [r6, #0]
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800afd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afd8:	d11c      	bne.n	800b014 <_scanf_float+0x3a8>
 800afda:	9b01      	ldr	r3, [sp, #4]
 800afdc:	454b      	cmp	r3, r9
 800afde:	eba3 0209 	sub.w	r2, r3, r9
 800afe2:	d124      	bne.n	800b02e <_scanf_float+0x3c2>
 800afe4:	2200      	movs	r2, #0
 800afe6:	4659      	mov	r1, fp
 800afe8:	4640      	mov	r0, r8
 800afea:	f000 ff0f 	bl	800be0c <_strtod_r>
 800afee:	9b03      	ldr	r3, [sp, #12]
 800aff0:	6821      	ldr	r1, [r4, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f011 0f02 	tst.w	r1, #2
 800aff8:	ec57 6b10 	vmov	r6, r7, d0
 800affc:	f103 0204 	add.w	r2, r3, #4
 800b000:	d020      	beq.n	800b044 <_scanf_float+0x3d8>
 800b002:	9903      	ldr	r1, [sp, #12]
 800b004:	600a      	str	r2, [r1, #0]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	e9c3 6700 	strd	r6, r7, [r3]
 800b00c:	68e3      	ldr	r3, [r4, #12]
 800b00e:	3301      	adds	r3, #1
 800b010:	60e3      	str	r3, [r4, #12]
 800b012:	e66c      	b.n	800acee <_scanf_float+0x82>
 800b014:	9b04      	ldr	r3, [sp, #16]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0e4      	beq.n	800afe4 <_scanf_float+0x378>
 800b01a:	9905      	ldr	r1, [sp, #20]
 800b01c:	230a      	movs	r3, #10
 800b01e:	462a      	mov	r2, r5
 800b020:	3101      	adds	r1, #1
 800b022:	4640      	mov	r0, r8
 800b024:	f000 ffd8 	bl	800bfd8 <_strtol_r>
 800b028:	9b04      	ldr	r3, [sp, #16]
 800b02a:	9e05      	ldr	r6, [sp, #20]
 800b02c:	1ac2      	subs	r2, r0, r3
 800b02e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b032:	429e      	cmp	r6, r3
 800b034:	bf28      	it	cs
 800b036:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b03a:	4912      	ldr	r1, [pc, #72]	; (800b084 <_scanf_float+0x418>)
 800b03c:	4630      	mov	r0, r6
 800b03e:	f000 f82b 	bl	800b098 <siprintf>
 800b042:	e7cf      	b.n	800afe4 <_scanf_float+0x378>
 800b044:	f011 0f04 	tst.w	r1, #4
 800b048:	9903      	ldr	r1, [sp, #12]
 800b04a:	600a      	str	r2, [r1, #0]
 800b04c:	d1db      	bne.n	800b006 <_scanf_float+0x39a>
 800b04e:	f8d3 8000 	ldr.w	r8, [r3]
 800b052:	ee10 2a10 	vmov	r2, s0
 800b056:	ee10 0a10 	vmov	r0, s0
 800b05a:	463b      	mov	r3, r7
 800b05c:	4639      	mov	r1, r7
 800b05e:	f7f5 fd65 	bl	8000b2c <__aeabi_dcmpun>
 800b062:	b128      	cbz	r0, 800b070 <_scanf_float+0x404>
 800b064:	4808      	ldr	r0, [pc, #32]	; (800b088 <_scanf_float+0x41c>)
 800b066:	f000 f811 	bl	800b08c <nanf>
 800b06a:	ed88 0a00 	vstr	s0, [r8]
 800b06e:	e7cd      	b.n	800b00c <_scanf_float+0x3a0>
 800b070:	4630      	mov	r0, r6
 800b072:	4639      	mov	r1, r7
 800b074:	f7f5 fdb8 	bl	8000be8 <__aeabi_d2f>
 800b078:	f8c8 0000 	str.w	r0, [r8]
 800b07c:	e7c6      	b.n	800b00c <_scanf_float+0x3a0>
 800b07e:	2500      	movs	r5, #0
 800b080:	e635      	b.n	800acee <_scanf_float+0x82>
 800b082:	bf00      	nop
 800b084:	0800f96a 	.word	0x0800f96a
 800b088:	0800fa73 	.word	0x0800fa73

0800b08c <nanf>:
 800b08c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b094 <nanf+0x8>
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	7fc00000 	.word	0x7fc00000

0800b098 <siprintf>:
 800b098:	b40e      	push	{r1, r2, r3}
 800b09a:	b500      	push	{lr}
 800b09c:	b09c      	sub	sp, #112	; 0x70
 800b09e:	ab1d      	add	r3, sp, #116	; 0x74
 800b0a0:	9002      	str	r0, [sp, #8]
 800b0a2:	9006      	str	r0, [sp, #24]
 800b0a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0a8:	4809      	ldr	r0, [pc, #36]	; (800b0d0 <siprintf+0x38>)
 800b0aa:	9107      	str	r1, [sp, #28]
 800b0ac:	9104      	str	r1, [sp, #16]
 800b0ae:	4909      	ldr	r1, [pc, #36]	; (800b0d4 <siprintf+0x3c>)
 800b0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0b4:	9105      	str	r1, [sp, #20]
 800b0b6:	6800      	ldr	r0, [r0, #0]
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	a902      	add	r1, sp, #8
 800b0bc:	f003 f810 	bl	800e0e0 <_svfiprintf_r>
 800b0c0:	9b02      	ldr	r3, [sp, #8]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	701a      	strb	r2, [r3, #0]
 800b0c6:	b01c      	add	sp, #112	; 0x70
 800b0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0cc:	b003      	add	sp, #12
 800b0ce:	4770      	bx	lr
 800b0d0:	20000078 	.word	0x20000078
 800b0d4:	ffff0208 	.word	0xffff0208

0800b0d8 <siscanf>:
 800b0d8:	b40e      	push	{r1, r2, r3}
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	b09f      	sub	sp, #124	; 0x7c
 800b0de:	ac21      	add	r4, sp, #132	; 0x84
 800b0e0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b0e4:	f854 2b04 	ldr.w	r2, [r4], #4
 800b0e8:	9201      	str	r2, [sp, #4]
 800b0ea:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b0ee:	9004      	str	r0, [sp, #16]
 800b0f0:	9008      	str	r0, [sp, #32]
 800b0f2:	f7f5 f86d 	bl	80001d0 <strlen>
 800b0f6:	4b0c      	ldr	r3, [pc, #48]	; (800b128 <siscanf+0x50>)
 800b0f8:	9005      	str	r0, [sp, #20]
 800b0fa:	9009      	str	r0, [sp, #36]	; 0x24
 800b0fc:	930d      	str	r3, [sp, #52]	; 0x34
 800b0fe:	480b      	ldr	r0, [pc, #44]	; (800b12c <siscanf+0x54>)
 800b100:	9a01      	ldr	r2, [sp, #4]
 800b102:	6800      	ldr	r0, [r0, #0]
 800b104:	9403      	str	r4, [sp, #12]
 800b106:	2300      	movs	r3, #0
 800b108:	9311      	str	r3, [sp, #68]	; 0x44
 800b10a:	9316      	str	r3, [sp, #88]	; 0x58
 800b10c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b110:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b114:	a904      	add	r1, sp, #16
 800b116:	4623      	mov	r3, r4
 800b118:	f003 f93c 	bl	800e394 <__ssvfiscanf_r>
 800b11c:	b01f      	add	sp, #124	; 0x7c
 800b11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b122:	b003      	add	sp, #12
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	0800b153 	.word	0x0800b153
 800b12c:	20000078 	.word	0x20000078

0800b130 <__sread>:
 800b130:	b510      	push	{r4, lr}
 800b132:	460c      	mov	r4, r1
 800b134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b138:	f003 fd4a 	bl	800ebd0 <_read_r>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	bfab      	itete	ge
 800b140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b142:	89a3      	ldrhlt	r3, [r4, #12]
 800b144:	181b      	addge	r3, r3, r0
 800b146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b14a:	bfac      	ite	ge
 800b14c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b14e:	81a3      	strhlt	r3, [r4, #12]
 800b150:	bd10      	pop	{r4, pc}

0800b152 <__seofread>:
 800b152:	2000      	movs	r0, #0
 800b154:	4770      	bx	lr

0800b156 <__swrite>:
 800b156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b15a:	461f      	mov	r7, r3
 800b15c:	898b      	ldrh	r3, [r1, #12]
 800b15e:	05db      	lsls	r3, r3, #23
 800b160:	4605      	mov	r5, r0
 800b162:	460c      	mov	r4, r1
 800b164:	4616      	mov	r6, r2
 800b166:	d505      	bpl.n	800b174 <__swrite+0x1e>
 800b168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b16c:	2302      	movs	r3, #2
 800b16e:	2200      	movs	r2, #0
 800b170:	f002 f9ac 	bl	800d4cc <_lseek_r>
 800b174:	89a3      	ldrh	r3, [r4, #12]
 800b176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b17a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b17e:	81a3      	strh	r3, [r4, #12]
 800b180:	4632      	mov	r2, r6
 800b182:	463b      	mov	r3, r7
 800b184:	4628      	mov	r0, r5
 800b186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b18a:	f000 bf61 	b.w	800c050 <_write_r>

0800b18e <__sseek>:
 800b18e:	b510      	push	{r4, lr}
 800b190:	460c      	mov	r4, r1
 800b192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b196:	f002 f999 	bl	800d4cc <_lseek_r>
 800b19a:	1c43      	adds	r3, r0, #1
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	bf15      	itete	ne
 800b1a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1aa:	81a3      	strheq	r3, [r4, #12]
 800b1ac:	bf18      	it	ne
 800b1ae:	81a3      	strhne	r3, [r4, #12]
 800b1b0:	bd10      	pop	{r4, pc}

0800b1b2 <__sclose>:
 800b1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b6:	f000 bf7b 	b.w	800c0b0 <_close_r>

0800b1ba <sulp>:
 800b1ba:	b570      	push	{r4, r5, r6, lr}
 800b1bc:	4604      	mov	r4, r0
 800b1be:	460d      	mov	r5, r1
 800b1c0:	ec45 4b10 	vmov	d0, r4, r5
 800b1c4:	4616      	mov	r6, r2
 800b1c6:	f002 fd27 	bl	800dc18 <__ulp>
 800b1ca:	ec51 0b10 	vmov	r0, r1, d0
 800b1ce:	b17e      	cbz	r6, 800b1f0 <sulp+0x36>
 800b1d0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b1d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	dd09      	ble.n	800b1f0 <sulp+0x36>
 800b1dc:	051b      	lsls	r3, r3, #20
 800b1de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b1e2:	2400      	movs	r4, #0
 800b1e4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b1e8:	4622      	mov	r2, r4
 800b1ea:	462b      	mov	r3, r5
 800b1ec:	f7f5 fa04 	bl	80005f8 <__aeabi_dmul>
 800b1f0:	bd70      	pop	{r4, r5, r6, pc}
 800b1f2:	0000      	movs	r0, r0
 800b1f4:	0000      	movs	r0, r0
	...

0800b1f8 <_strtod_l>:
 800b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	b0a3      	sub	sp, #140	; 0x8c
 800b1fe:	461f      	mov	r7, r3
 800b200:	2300      	movs	r3, #0
 800b202:	931e      	str	r3, [sp, #120]	; 0x78
 800b204:	4ba4      	ldr	r3, [pc, #656]	; (800b498 <_strtod_l+0x2a0>)
 800b206:	9219      	str	r2, [sp, #100]	; 0x64
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	9307      	str	r3, [sp, #28]
 800b20c:	4604      	mov	r4, r0
 800b20e:	4618      	mov	r0, r3
 800b210:	4688      	mov	r8, r1
 800b212:	f7f4 ffdd 	bl	80001d0 <strlen>
 800b216:	f04f 0a00 	mov.w	sl, #0
 800b21a:	4605      	mov	r5, r0
 800b21c:	f04f 0b00 	mov.w	fp, #0
 800b220:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b226:	781a      	ldrb	r2, [r3, #0]
 800b228:	2a2b      	cmp	r2, #43	; 0x2b
 800b22a:	d04c      	beq.n	800b2c6 <_strtod_l+0xce>
 800b22c:	d839      	bhi.n	800b2a2 <_strtod_l+0xaa>
 800b22e:	2a0d      	cmp	r2, #13
 800b230:	d832      	bhi.n	800b298 <_strtod_l+0xa0>
 800b232:	2a08      	cmp	r2, #8
 800b234:	d832      	bhi.n	800b29c <_strtod_l+0xa4>
 800b236:	2a00      	cmp	r2, #0
 800b238:	d03c      	beq.n	800b2b4 <_strtod_l+0xbc>
 800b23a:	2300      	movs	r3, #0
 800b23c:	930e      	str	r3, [sp, #56]	; 0x38
 800b23e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b240:	7833      	ldrb	r3, [r6, #0]
 800b242:	2b30      	cmp	r3, #48	; 0x30
 800b244:	f040 80b4 	bne.w	800b3b0 <_strtod_l+0x1b8>
 800b248:	7873      	ldrb	r3, [r6, #1]
 800b24a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b24e:	2b58      	cmp	r3, #88	; 0x58
 800b250:	d16c      	bne.n	800b32c <_strtod_l+0x134>
 800b252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b254:	9301      	str	r3, [sp, #4]
 800b256:	ab1e      	add	r3, sp, #120	; 0x78
 800b258:	9702      	str	r7, [sp, #8]
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	4a8f      	ldr	r2, [pc, #572]	; (800b49c <_strtod_l+0x2a4>)
 800b25e:	ab1f      	add	r3, sp, #124	; 0x7c
 800b260:	a91d      	add	r1, sp, #116	; 0x74
 800b262:	4620      	mov	r0, r4
 800b264:	f001 fe26 	bl	800ceb4 <__gethex>
 800b268:	f010 0707 	ands.w	r7, r0, #7
 800b26c:	4605      	mov	r5, r0
 800b26e:	d005      	beq.n	800b27c <_strtod_l+0x84>
 800b270:	2f06      	cmp	r7, #6
 800b272:	d12a      	bne.n	800b2ca <_strtod_l+0xd2>
 800b274:	3601      	adds	r6, #1
 800b276:	2300      	movs	r3, #0
 800b278:	961d      	str	r6, [sp, #116]	; 0x74
 800b27a:	930e      	str	r3, [sp, #56]	; 0x38
 800b27c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f040 8596 	bne.w	800bdb0 <_strtod_l+0xbb8>
 800b284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b286:	b1db      	cbz	r3, 800b2c0 <_strtod_l+0xc8>
 800b288:	4652      	mov	r2, sl
 800b28a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b28e:	ec43 2b10 	vmov	d0, r2, r3
 800b292:	b023      	add	sp, #140	; 0x8c
 800b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b298:	2a20      	cmp	r2, #32
 800b29a:	d1ce      	bne.n	800b23a <_strtod_l+0x42>
 800b29c:	3301      	adds	r3, #1
 800b29e:	931d      	str	r3, [sp, #116]	; 0x74
 800b2a0:	e7c0      	b.n	800b224 <_strtod_l+0x2c>
 800b2a2:	2a2d      	cmp	r2, #45	; 0x2d
 800b2a4:	d1c9      	bne.n	800b23a <_strtod_l+0x42>
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	920e      	str	r2, [sp, #56]	; 0x38
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	921d      	str	r2, [sp, #116]	; 0x74
 800b2ae:	785b      	ldrb	r3, [r3, #1]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1c4      	bne.n	800b23e <_strtod_l+0x46>
 800b2b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f040 8576 	bne.w	800bdac <_strtod_l+0xbb4>
 800b2c0:	4652      	mov	r2, sl
 800b2c2:	465b      	mov	r3, fp
 800b2c4:	e7e3      	b.n	800b28e <_strtod_l+0x96>
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	e7ee      	b.n	800b2a8 <_strtod_l+0xb0>
 800b2ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b2cc:	b13a      	cbz	r2, 800b2de <_strtod_l+0xe6>
 800b2ce:	2135      	movs	r1, #53	; 0x35
 800b2d0:	a820      	add	r0, sp, #128	; 0x80
 800b2d2:	f002 fdac 	bl	800de2e <__copybits>
 800b2d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f002 f971 	bl	800d5c0 <_Bfree>
 800b2de:	3f01      	subs	r7, #1
 800b2e0:	2f05      	cmp	r7, #5
 800b2e2:	d807      	bhi.n	800b2f4 <_strtod_l+0xfc>
 800b2e4:	e8df f007 	tbb	[pc, r7]
 800b2e8:	1d180b0e 	.word	0x1d180b0e
 800b2ec:	030e      	.short	0x030e
 800b2ee:	f04f 0b00 	mov.w	fp, #0
 800b2f2:	46da      	mov	sl, fp
 800b2f4:	0728      	lsls	r0, r5, #28
 800b2f6:	d5c1      	bpl.n	800b27c <_strtod_l+0x84>
 800b2f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b2fc:	e7be      	b.n	800b27c <_strtod_l+0x84>
 800b2fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b302:	e7f7      	b.n	800b2f4 <_strtod_l+0xfc>
 800b304:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b308:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b30a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b30e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b312:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b316:	e7ed      	b.n	800b2f4 <_strtod_l+0xfc>
 800b318:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b4a0 <_strtod_l+0x2a8>
 800b31c:	f04f 0a00 	mov.w	sl, #0
 800b320:	e7e8      	b.n	800b2f4 <_strtod_l+0xfc>
 800b322:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b326:	f04f 3aff 	mov.w	sl, #4294967295
 800b32a:	e7e3      	b.n	800b2f4 <_strtod_l+0xfc>
 800b32c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	921d      	str	r2, [sp, #116]	; 0x74
 800b332:	785b      	ldrb	r3, [r3, #1]
 800b334:	2b30      	cmp	r3, #48	; 0x30
 800b336:	d0f9      	beq.n	800b32c <_strtod_l+0x134>
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d09f      	beq.n	800b27c <_strtod_l+0x84>
 800b33c:	2301      	movs	r3, #1
 800b33e:	f04f 0900 	mov.w	r9, #0
 800b342:	9304      	str	r3, [sp, #16]
 800b344:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b346:	930a      	str	r3, [sp, #40]	; 0x28
 800b348:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b34c:	464f      	mov	r7, r9
 800b34e:	220a      	movs	r2, #10
 800b350:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b352:	7806      	ldrb	r6, [r0, #0]
 800b354:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b358:	b2d9      	uxtb	r1, r3
 800b35a:	2909      	cmp	r1, #9
 800b35c:	d92a      	bls.n	800b3b4 <_strtod_l+0x1bc>
 800b35e:	9907      	ldr	r1, [sp, #28]
 800b360:	462a      	mov	r2, r5
 800b362:	f003 fc9b 	bl	800ec9c <strncmp>
 800b366:	b398      	cbz	r0, 800b3d0 <_strtod_l+0x1d8>
 800b368:	2000      	movs	r0, #0
 800b36a:	4633      	mov	r3, r6
 800b36c:	463d      	mov	r5, r7
 800b36e:	9007      	str	r0, [sp, #28]
 800b370:	4602      	mov	r2, r0
 800b372:	2b65      	cmp	r3, #101	; 0x65
 800b374:	d001      	beq.n	800b37a <_strtod_l+0x182>
 800b376:	2b45      	cmp	r3, #69	; 0x45
 800b378:	d118      	bne.n	800b3ac <_strtod_l+0x1b4>
 800b37a:	b91d      	cbnz	r5, 800b384 <_strtod_l+0x18c>
 800b37c:	9b04      	ldr	r3, [sp, #16]
 800b37e:	4303      	orrs	r3, r0
 800b380:	d098      	beq.n	800b2b4 <_strtod_l+0xbc>
 800b382:	2500      	movs	r5, #0
 800b384:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b388:	f108 0301 	add.w	r3, r8, #1
 800b38c:	931d      	str	r3, [sp, #116]	; 0x74
 800b38e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b392:	2b2b      	cmp	r3, #43	; 0x2b
 800b394:	d075      	beq.n	800b482 <_strtod_l+0x28a>
 800b396:	2b2d      	cmp	r3, #45	; 0x2d
 800b398:	d07b      	beq.n	800b492 <_strtod_l+0x29a>
 800b39a:	f04f 0c00 	mov.w	ip, #0
 800b39e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b3a2:	2909      	cmp	r1, #9
 800b3a4:	f240 8082 	bls.w	800b4ac <_strtod_l+0x2b4>
 800b3a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b3ac:	2600      	movs	r6, #0
 800b3ae:	e09d      	b.n	800b4ec <_strtod_l+0x2f4>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e7c4      	b.n	800b33e <_strtod_l+0x146>
 800b3b4:	2f08      	cmp	r7, #8
 800b3b6:	bfd8      	it	le
 800b3b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b3ba:	f100 0001 	add.w	r0, r0, #1
 800b3be:	bfda      	itte	le
 800b3c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b3c4:	9309      	strle	r3, [sp, #36]	; 0x24
 800b3c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b3ca:	3701      	adds	r7, #1
 800b3cc:	901d      	str	r0, [sp, #116]	; 0x74
 800b3ce:	e7bf      	b.n	800b350 <_strtod_l+0x158>
 800b3d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3d2:	195a      	adds	r2, r3, r5
 800b3d4:	921d      	str	r2, [sp, #116]	; 0x74
 800b3d6:	5d5b      	ldrb	r3, [r3, r5]
 800b3d8:	2f00      	cmp	r7, #0
 800b3da:	d037      	beq.n	800b44c <_strtod_l+0x254>
 800b3dc:	9007      	str	r0, [sp, #28]
 800b3de:	463d      	mov	r5, r7
 800b3e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b3e4:	2a09      	cmp	r2, #9
 800b3e6:	d912      	bls.n	800b40e <_strtod_l+0x216>
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	e7c2      	b.n	800b372 <_strtod_l+0x17a>
 800b3ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3ee:	1c5a      	adds	r2, r3, #1
 800b3f0:	921d      	str	r2, [sp, #116]	; 0x74
 800b3f2:	785b      	ldrb	r3, [r3, #1]
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	2b30      	cmp	r3, #48	; 0x30
 800b3f8:	d0f8      	beq.n	800b3ec <_strtod_l+0x1f4>
 800b3fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b3fe:	2a08      	cmp	r2, #8
 800b400:	f200 84db 	bhi.w	800bdba <_strtod_l+0xbc2>
 800b404:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b406:	9007      	str	r0, [sp, #28]
 800b408:	2000      	movs	r0, #0
 800b40a:	920a      	str	r2, [sp, #40]	; 0x28
 800b40c:	4605      	mov	r5, r0
 800b40e:	3b30      	subs	r3, #48	; 0x30
 800b410:	f100 0201 	add.w	r2, r0, #1
 800b414:	d014      	beq.n	800b440 <_strtod_l+0x248>
 800b416:	9907      	ldr	r1, [sp, #28]
 800b418:	4411      	add	r1, r2
 800b41a:	9107      	str	r1, [sp, #28]
 800b41c:	462a      	mov	r2, r5
 800b41e:	eb00 0e05 	add.w	lr, r0, r5
 800b422:	210a      	movs	r1, #10
 800b424:	4572      	cmp	r2, lr
 800b426:	d113      	bne.n	800b450 <_strtod_l+0x258>
 800b428:	182a      	adds	r2, r5, r0
 800b42a:	2a08      	cmp	r2, #8
 800b42c:	f105 0501 	add.w	r5, r5, #1
 800b430:	4405      	add	r5, r0
 800b432:	dc1c      	bgt.n	800b46e <_strtod_l+0x276>
 800b434:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b436:	220a      	movs	r2, #10
 800b438:	fb02 3301 	mla	r3, r2, r1, r3
 800b43c:	9309      	str	r3, [sp, #36]	; 0x24
 800b43e:	2200      	movs	r2, #0
 800b440:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b442:	1c59      	adds	r1, r3, #1
 800b444:	911d      	str	r1, [sp, #116]	; 0x74
 800b446:	785b      	ldrb	r3, [r3, #1]
 800b448:	4610      	mov	r0, r2
 800b44a:	e7c9      	b.n	800b3e0 <_strtod_l+0x1e8>
 800b44c:	4638      	mov	r0, r7
 800b44e:	e7d2      	b.n	800b3f6 <_strtod_l+0x1fe>
 800b450:	2a08      	cmp	r2, #8
 800b452:	dc04      	bgt.n	800b45e <_strtod_l+0x266>
 800b454:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b456:	434e      	muls	r6, r1
 800b458:	9609      	str	r6, [sp, #36]	; 0x24
 800b45a:	3201      	adds	r2, #1
 800b45c:	e7e2      	b.n	800b424 <_strtod_l+0x22c>
 800b45e:	f102 0c01 	add.w	ip, r2, #1
 800b462:	f1bc 0f10 	cmp.w	ip, #16
 800b466:	bfd8      	it	le
 800b468:	fb01 f909 	mulle.w	r9, r1, r9
 800b46c:	e7f5      	b.n	800b45a <_strtod_l+0x262>
 800b46e:	2d10      	cmp	r5, #16
 800b470:	bfdc      	itt	le
 800b472:	220a      	movle	r2, #10
 800b474:	fb02 3909 	mlale	r9, r2, r9, r3
 800b478:	e7e1      	b.n	800b43e <_strtod_l+0x246>
 800b47a:	2300      	movs	r3, #0
 800b47c:	9307      	str	r3, [sp, #28]
 800b47e:	2201      	movs	r2, #1
 800b480:	e77c      	b.n	800b37c <_strtod_l+0x184>
 800b482:	f04f 0c00 	mov.w	ip, #0
 800b486:	f108 0302 	add.w	r3, r8, #2
 800b48a:	931d      	str	r3, [sp, #116]	; 0x74
 800b48c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b490:	e785      	b.n	800b39e <_strtod_l+0x1a6>
 800b492:	f04f 0c01 	mov.w	ip, #1
 800b496:	e7f6      	b.n	800b486 <_strtod_l+0x28e>
 800b498:	0800fc5c 	.word	0x0800fc5c
 800b49c:	0800f970 	.word	0x0800f970
 800b4a0:	7ff00000 	.word	0x7ff00000
 800b4a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4a6:	1c59      	adds	r1, r3, #1
 800b4a8:	911d      	str	r1, [sp, #116]	; 0x74
 800b4aa:	785b      	ldrb	r3, [r3, #1]
 800b4ac:	2b30      	cmp	r3, #48	; 0x30
 800b4ae:	d0f9      	beq.n	800b4a4 <_strtod_l+0x2ac>
 800b4b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b4b4:	2908      	cmp	r1, #8
 800b4b6:	f63f af79 	bhi.w	800b3ac <_strtod_l+0x1b4>
 800b4ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b4be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4c0:	9308      	str	r3, [sp, #32]
 800b4c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4c4:	1c59      	adds	r1, r3, #1
 800b4c6:	911d      	str	r1, [sp, #116]	; 0x74
 800b4c8:	785b      	ldrb	r3, [r3, #1]
 800b4ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b4ce:	2e09      	cmp	r6, #9
 800b4d0:	d937      	bls.n	800b542 <_strtod_l+0x34a>
 800b4d2:	9e08      	ldr	r6, [sp, #32]
 800b4d4:	1b89      	subs	r1, r1, r6
 800b4d6:	2908      	cmp	r1, #8
 800b4d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b4dc:	dc02      	bgt.n	800b4e4 <_strtod_l+0x2ec>
 800b4de:	4576      	cmp	r6, lr
 800b4e0:	bfa8      	it	ge
 800b4e2:	4676      	movge	r6, lr
 800b4e4:	f1bc 0f00 	cmp.w	ip, #0
 800b4e8:	d000      	beq.n	800b4ec <_strtod_l+0x2f4>
 800b4ea:	4276      	negs	r6, r6
 800b4ec:	2d00      	cmp	r5, #0
 800b4ee:	d14f      	bne.n	800b590 <_strtod_l+0x398>
 800b4f0:	9904      	ldr	r1, [sp, #16]
 800b4f2:	4301      	orrs	r1, r0
 800b4f4:	f47f aec2 	bne.w	800b27c <_strtod_l+0x84>
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	f47f aedb 	bne.w	800b2b4 <_strtod_l+0xbc>
 800b4fe:	2b69      	cmp	r3, #105	; 0x69
 800b500:	d027      	beq.n	800b552 <_strtod_l+0x35a>
 800b502:	dc24      	bgt.n	800b54e <_strtod_l+0x356>
 800b504:	2b49      	cmp	r3, #73	; 0x49
 800b506:	d024      	beq.n	800b552 <_strtod_l+0x35a>
 800b508:	2b4e      	cmp	r3, #78	; 0x4e
 800b50a:	f47f aed3 	bne.w	800b2b4 <_strtod_l+0xbc>
 800b50e:	499e      	ldr	r1, [pc, #632]	; (800b788 <_strtod_l+0x590>)
 800b510:	a81d      	add	r0, sp, #116	; 0x74
 800b512:	f001 ff27 	bl	800d364 <__match>
 800b516:	2800      	cmp	r0, #0
 800b518:	f43f aecc 	beq.w	800b2b4 <_strtod_l+0xbc>
 800b51c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b28      	cmp	r3, #40	; 0x28
 800b522:	d12d      	bne.n	800b580 <_strtod_l+0x388>
 800b524:	4999      	ldr	r1, [pc, #612]	; (800b78c <_strtod_l+0x594>)
 800b526:	aa20      	add	r2, sp, #128	; 0x80
 800b528:	a81d      	add	r0, sp, #116	; 0x74
 800b52a:	f001 ff2f 	bl	800d38c <__hexnan>
 800b52e:	2805      	cmp	r0, #5
 800b530:	d126      	bne.n	800b580 <_strtod_l+0x388>
 800b532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b534:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b538:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b53c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b540:	e69c      	b.n	800b27c <_strtod_l+0x84>
 800b542:	210a      	movs	r1, #10
 800b544:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b548:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b54c:	e7b9      	b.n	800b4c2 <_strtod_l+0x2ca>
 800b54e:	2b6e      	cmp	r3, #110	; 0x6e
 800b550:	e7db      	b.n	800b50a <_strtod_l+0x312>
 800b552:	498f      	ldr	r1, [pc, #572]	; (800b790 <_strtod_l+0x598>)
 800b554:	a81d      	add	r0, sp, #116	; 0x74
 800b556:	f001 ff05 	bl	800d364 <__match>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	f43f aeaa 	beq.w	800b2b4 <_strtod_l+0xbc>
 800b560:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b562:	498c      	ldr	r1, [pc, #560]	; (800b794 <_strtod_l+0x59c>)
 800b564:	3b01      	subs	r3, #1
 800b566:	a81d      	add	r0, sp, #116	; 0x74
 800b568:	931d      	str	r3, [sp, #116]	; 0x74
 800b56a:	f001 fefb 	bl	800d364 <__match>
 800b56e:	b910      	cbnz	r0, 800b576 <_strtod_l+0x37e>
 800b570:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b572:	3301      	adds	r3, #1
 800b574:	931d      	str	r3, [sp, #116]	; 0x74
 800b576:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b7a4 <_strtod_l+0x5ac>
 800b57a:	f04f 0a00 	mov.w	sl, #0
 800b57e:	e67d      	b.n	800b27c <_strtod_l+0x84>
 800b580:	4885      	ldr	r0, [pc, #532]	; (800b798 <_strtod_l+0x5a0>)
 800b582:	f003 fb39 	bl	800ebf8 <nan>
 800b586:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b58a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b58e:	e675      	b.n	800b27c <_strtod_l+0x84>
 800b590:	9b07      	ldr	r3, [sp, #28]
 800b592:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b594:	1af3      	subs	r3, r6, r3
 800b596:	2f00      	cmp	r7, #0
 800b598:	bf08      	it	eq
 800b59a:	462f      	moveq	r7, r5
 800b59c:	2d10      	cmp	r5, #16
 800b59e:	9308      	str	r3, [sp, #32]
 800b5a0:	46a8      	mov	r8, r5
 800b5a2:	bfa8      	it	ge
 800b5a4:	f04f 0810 	movge.w	r8, #16
 800b5a8:	f7f4 ffac 	bl	8000504 <__aeabi_ui2d>
 800b5ac:	2d09      	cmp	r5, #9
 800b5ae:	4682      	mov	sl, r0
 800b5b0:	468b      	mov	fp, r1
 800b5b2:	dd13      	ble.n	800b5dc <_strtod_l+0x3e4>
 800b5b4:	4b79      	ldr	r3, [pc, #484]	; (800b79c <_strtod_l+0x5a4>)
 800b5b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b5ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b5be:	f7f5 f81b 	bl	80005f8 <__aeabi_dmul>
 800b5c2:	4682      	mov	sl, r0
 800b5c4:	4648      	mov	r0, r9
 800b5c6:	468b      	mov	fp, r1
 800b5c8:	f7f4 ff9c 	bl	8000504 <__aeabi_ui2d>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4650      	mov	r0, sl
 800b5d2:	4659      	mov	r1, fp
 800b5d4:	f7f4 fe5a 	bl	800028c <__adddf3>
 800b5d8:	4682      	mov	sl, r0
 800b5da:	468b      	mov	fp, r1
 800b5dc:	2d0f      	cmp	r5, #15
 800b5de:	dc38      	bgt.n	800b652 <_strtod_l+0x45a>
 800b5e0:	9b08      	ldr	r3, [sp, #32]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f43f ae4a 	beq.w	800b27c <_strtod_l+0x84>
 800b5e8:	dd24      	ble.n	800b634 <_strtod_l+0x43c>
 800b5ea:	2b16      	cmp	r3, #22
 800b5ec:	dc0b      	bgt.n	800b606 <_strtod_l+0x40e>
 800b5ee:	4d6b      	ldr	r5, [pc, #428]	; (800b79c <_strtod_l+0x5a4>)
 800b5f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b5f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b5f8:	4652      	mov	r2, sl
 800b5fa:	465b      	mov	r3, fp
 800b5fc:	f7f4 fffc 	bl	80005f8 <__aeabi_dmul>
 800b600:	4682      	mov	sl, r0
 800b602:	468b      	mov	fp, r1
 800b604:	e63a      	b.n	800b27c <_strtod_l+0x84>
 800b606:	9a08      	ldr	r2, [sp, #32]
 800b608:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b60c:	4293      	cmp	r3, r2
 800b60e:	db20      	blt.n	800b652 <_strtod_l+0x45a>
 800b610:	4c62      	ldr	r4, [pc, #392]	; (800b79c <_strtod_l+0x5a4>)
 800b612:	f1c5 050f 	rsb	r5, r5, #15
 800b616:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b61a:	4652      	mov	r2, sl
 800b61c:	465b      	mov	r3, fp
 800b61e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b622:	f7f4 ffe9 	bl	80005f8 <__aeabi_dmul>
 800b626:	9b08      	ldr	r3, [sp, #32]
 800b628:	1b5d      	subs	r5, r3, r5
 800b62a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b62e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b632:	e7e3      	b.n	800b5fc <_strtod_l+0x404>
 800b634:	9b08      	ldr	r3, [sp, #32]
 800b636:	3316      	adds	r3, #22
 800b638:	db0b      	blt.n	800b652 <_strtod_l+0x45a>
 800b63a:	9b07      	ldr	r3, [sp, #28]
 800b63c:	4a57      	ldr	r2, [pc, #348]	; (800b79c <_strtod_l+0x5a4>)
 800b63e:	1b9e      	subs	r6, r3, r6
 800b640:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b644:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b648:	4650      	mov	r0, sl
 800b64a:	4659      	mov	r1, fp
 800b64c:	f7f5 f8fe 	bl	800084c <__aeabi_ddiv>
 800b650:	e7d6      	b.n	800b600 <_strtod_l+0x408>
 800b652:	9b08      	ldr	r3, [sp, #32]
 800b654:	eba5 0808 	sub.w	r8, r5, r8
 800b658:	4498      	add	r8, r3
 800b65a:	f1b8 0f00 	cmp.w	r8, #0
 800b65e:	dd71      	ble.n	800b744 <_strtod_l+0x54c>
 800b660:	f018 030f 	ands.w	r3, r8, #15
 800b664:	d00a      	beq.n	800b67c <_strtod_l+0x484>
 800b666:	494d      	ldr	r1, [pc, #308]	; (800b79c <_strtod_l+0x5a4>)
 800b668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b66c:	4652      	mov	r2, sl
 800b66e:	465b      	mov	r3, fp
 800b670:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b674:	f7f4 ffc0 	bl	80005f8 <__aeabi_dmul>
 800b678:	4682      	mov	sl, r0
 800b67a:	468b      	mov	fp, r1
 800b67c:	f038 080f 	bics.w	r8, r8, #15
 800b680:	d04d      	beq.n	800b71e <_strtod_l+0x526>
 800b682:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b686:	dd22      	ble.n	800b6ce <_strtod_l+0x4d6>
 800b688:	2500      	movs	r5, #0
 800b68a:	462e      	mov	r6, r5
 800b68c:	9509      	str	r5, [sp, #36]	; 0x24
 800b68e:	9507      	str	r5, [sp, #28]
 800b690:	2322      	movs	r3, #34	; 0x22
 800b692:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b7a4 <_strtod_l+0x5ac>
 800b696:	6023      	str	r3, [r4, #0]
 800b698:	f04f 0a00 	mov.w	sl, #0
 800b69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	f43f adec 	beq.w	800b27c <_strtod_l+0x84>
 800b6a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f001 ff8a 	bl	800d5c0 <_Bfree>
 800b6ac:	9907      	ldr	r1, [sp, #28]
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f001 ff86 	bl	800d5c0 <_Bfree>
 800b6b4:	4631      	mov	r1, r6
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f001 ff82 	bl	800d5c0 <_Bfree>
 800b6bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f001 ff7e 	bl	800d5c0 <_Bfree>
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f001 ff7a 	bl	800d5c0 <_Bfree>
 800b6cc:	e5d6      	b.n	800b27c <_strtod_l+0x84>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b6d4:	4650      	mov	r0, sl
 800b6d6:	4659      	mov	r1, fp
 800b6d8:	4699      	mov	r9, r3
 800b6da:	f1b8 0f01 	cmp.w	r8, #1
 800b6de:	dc21      	bgt.n	800b724 <_strtod_l+0x52c>
 800b6e0:	b10b      	cbz	r3, 800b6e6 <_strtod_l+0x4ee>
 800b6e2:	4682      	mov	sl, r0
 800b6e4:	468b      	mov	fp, r1
 800b6e6:	4b2e      	ldr	r3, [pc, #184]	; (800b7a0 <_strtod_l+0x5a8>)
 800b6e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b6ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b6f0:	4652      	mov	r2, sl
 800b6f2:	465b      	mov	r3, fp
 800b6f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b6f8:	f7f4 ff7e 	bl	80005f8 <__aeabi_dmul>
 800b6fc:	4b29      	ldr	r3, [pc, #164]	; (800b7a4 <_strtod_l+0x5ac>)
 800b6fe:	460a      	mov	r2, r1
 800b700:	400b      	ands	r3, r1
 800b702:	4929      	ldr	r1, [pc, #164]	; (800b7a8 <_strtod_l+0x5b0>)
 800b704:	428b      	cmp	r3, r1
 800b706:	4682      	mov	sl, r0
 800b708:	d8be      	bhi.n	800b688 <_strtod_l+0x490>
 800b70a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b70e:	428b      	cmp	r3, r1
 800b710:	bf86      	itte	hi
 800b712:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b7ac <_strtod_l+0x5b4>
 800b716:	f04f 3aff 	movhi.w	sl, #4294967295
 800b71a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b71e:	2300      	movs	r3, #0
 800b720:	9304      	str	r3, [sp, #16]
 800b722:	e081      	b.n	800b828 <_strtod_l+0x630>
 800b724:	f018 0f01 	tst.w	r8, #1
 800b728:	d007      	beq.n	800b73a <_strtod_l+0x542>
 800b72a:	4b1d      	ldr	r3, [pc, #116]	; (800b7a0 <_strtod_l+0x5a8>)
 800b72c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	f7f4 ff60 	bl	80005f8 <__aeabi_dmul>
 800b738:	2301      	movs	r3, #1
 800b73a:	f109 0901 	add.w	r9, r9, #1
 800b73e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b742:	e7ca      	b.n	800b6da <_strtod_l+0x4e2>
 800b744:	d0eb      	beq.n	800b71e <_strtod_l+0x526>
 800b746:	f1c8 0800 	rsb	r8, r8, #0
 800b74a:	f018 020f 	ands.w	r2, r8, #15
 800b74e:	d00a      	beq.n	800b766 <_strtod_l+0x56e>
 800b750:	4b12      	ldr	r3, [pc, #72]	; (800b79c <_strtod_l+0x5a4>)
 800b752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b756:	4650      	mov	r0, sl
 800b758:	4659      	mov	r1, fp
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	f7f5 f875 	bl	800084c <__aeabi_ddiv>
 800b762:	4682      	mov	sl, r0
 800b764:	468b      	mov	fp, r1
 800b766:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b76a:	d0d8      	beq.n	800b71e <_strtod_l+0x526>
 800b76c:	f1b8 0f1f 	cmp.w	r8, #31
 800b770:	dd1e      	ble.n	800b7b0 <_strtod_l+0x5b8>
 800b772:	2500      	movs	r5, #0
 800b774:	462e      	mov	r6, r5
 800b776:	9509      	str	r5, [sp, #36]	; 0x24
 800b778:	9507      	str	r5, [sp, #28]
 800b77a:	2322      	movs	r3, #34	; 0x22
 800b77c:	f04f 0a00 	mov.w	sl, #0
 800b780:	f04f 0b00 	mov.w	fp, #0
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	e789      	b.n	800b69c <_strtod_l+0x4a4>
 800b788:	0800f945 	.word	0x0800f945
 800b78c:	0800f984 	.word	0x0800f984
 800b790:	0800f93d 	.word	0x0800f93d
 800b794:	0800fb78 	.word	0x0800fb78
 800b798:	0800fa73 	.word	0x0800fa73
 800b79c:	0800fcf8 	.word	0x0800fcf8
 800b7a0:	0800fcd0 	.word	0x0800fcd0
 800b7a4:	7ff00000 	.word	0x7ff00000
 800b7a8:	7ca00000 	.word	0x7ca00000
 800b7ac:	7fefffff 	.word	0x7fefffff
 800b7b0:	f018 0310 	ands.w	r3, r8, #16
 800b7b4:	bf18      	it	ne
 800b7b6:	236a      	movne	r3, #106	; 0x6a
 800b7b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800bb70 <_strtod_l+0x978>
 800b7bc:	9304      	str	r3, [sp, #16]
 800b7be:	4650      	mov	r0, sl
 800b7c0:	4659      	mov	r1, fp
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	f018 0f01 	tst.w	r8, #1
 800b7c8:	d004      	beq.n	800b7d4 <_strtod_l+0x5dc>
 800b7ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b7ce:	f7f4 ff13 	bl	80005f8 <__aeabi_dmul>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b7d8:	f109 0908 	add.w	r9, r9, #8
 800b7dc:	d1f2      	bne.n	800b7c4 <_strtod_l+0x5cc>
 800b7de:	b10b      	cbz	r3, 800b7e4 <_strtod_l+0x5ec>
 800b7e0:	4682      	mov	sl, r0
 800b7e2:	468b      	mov	fp, r1
 800b7e4:	9b04      	ldr	r3, [sp, #16]
 800b7e6:	b1bb      	cbz	r3, 800b818 <_strtod_l+0x620>
 800b7e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b7ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	4659      	mov	r1, fp
 800b7f4:	dd10      	ble.n	800b818 <_strtod_l+0x620>
 800b7f6:	2b1f      	cmp	r3, #31
 800b7f8:	f340 8128 	ble.w	800ba4c <_strtod_l+0x854>
 800b7fc:	2b34      	cmp	r3, #52	; 0x34
 800b7fe:	bfde      	ittt	le
 800b800:	3b20      	suble	r3, #32
 800b802:	f04f 32ff 	movle.w	r2, #4294967295
 800b806:	fa02 f303 	lslle.w	r3, r2, r3
 800b80a:	f04f 0a00 	mov.w	sl, #0
 800b80e:	bfcc      	ite	gt
 800b810:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b814:	ea03 0b01 	andle.w	fp, r3, r1
 800b818:	2200      	movs	r2, #0
 800b81a:	2300      	movs	r3, #0
 800b81c:	4650      	mov	r0, sl
 800b81e:	4659      	mov	r1, fp
 800b820:	f7f5 f952 	bl	8000ac8 <__aeabi_dcmpeq>
 800b824:	2800      	cmp	r0, #0
 800b826:	d1a4      	bne.n	800b772 <_strtod_l+0x57a>
 800b828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b82e:	462b      	mov	r3, r5
 800b830:	463a      	mov	r2, r7
 800b832:	4620      	mov	r0, r4
 800b834:	f001 ff30 	bl	800d698 <__s2b>
 800b838:	9009      	str	r0, [sp, #36]	; 0x24
 800b83a:	2800      	cmp	r0, #0
 800b83c:	f43f af24 	beq.w	800b688 <_strtod_l+0x490>
 800b840:	9b07      	ldr	r3, [sp, #28]
 800b842:	1b9e      	subs	r6, r3, r6
 800b844:	9b08      	ldr	r3, [sp, #32]
 800b846:	2b00      	cmp	r3, #0
 800b848:	bfb4      	ite	lt
 800b84a:	4633      	movlt	r3, r6
 800b84c:	2300      	movge	r3, #0
 800b84e:	9310      	str	r3, [sp, #64]	; 0x40
 800b850:	9b08      	ldr	r3, [sp, #32]
 800b852:	2500      	movs	r5, #0
 800b854:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b858:	9318      	str	r3, [sp, #96]	; 0x60
 800b85a:	462e      	mov	r6, r5
 800b85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b85e:	4620      	mov	r0, r4
 800b860:	6859      	ldr	r1, [r3, #4]
 800b862:	f001 fe6d 	bl	800d540 <_Balloc>
 800b866:	9007      	str	r0, [sp, #28]
 800b868:	2800      	cmp	r0, #0
 800b86a:	f43f af11 	beq.w	800b690 <_strtod_l+0x498>
 800b86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b870:	691a      	ldr	r2, [r3, #16]
 800b872:	3202      	adds	r2, #2
 800b874:	f103 010c 	add.w	r1, r3, #12
 800b878:	0092      	lsls	r2, r2, #2
 800b87a:	300c      	adds	r0, #12
 800b87c:	f001 fe52 	bl	800d524 <memcpy>
 800b880:	ec4b ab10 	vmov	d0, sl, fp
 800b884:	aa20      	add	r2, sp, #128	; 0x80
 800b886:	a91f      	add	r1, sp, #124	; 0x7c
 800b888:	4620      	mov	r0, r4
 800b88a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b88e:	f002 fa3f 	bl	800dd10 <__d2b>
 800b892:	901e      	str	r0, [sp, #120]	; 0x78
 800b894:	2800      	cmp	r0, #0
 800b896:	f43f aefb 	beq.w	800b690 <_strtod_l+0x498>
 800b89a:	2101      	movs	r1, #1
 800b89c:	4620      	mov	r0, r4
 800b89e:	f001 ff95 	bl	800d7cc <__i2b>
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	f43f aef3 	beq.w	800b690 <_strtod_l+0x498>
 800b8aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b8ac:	9904      	ldr	r1, [sp, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	bfab      	itete	ge
 800b8b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b8b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b8b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b8b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b8bc:	bfac      	ite	ge
 800b8be:	eb03 0902 	addge.w	r9, r3, r2
 800b8c2:	1ad7      	sublt	r7, r2, r3
 800b8c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b8c6:	eba3 0801 	sub.w	r8, r3, r1
 800b8ca:	4490      	add	r8, r2
 800b8cc:	4ba3      	ldr	r3, [pc, #652]	; (800bb5c <_strtod_l+0x964>)
 800b8ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800b8d2:	4598      	cmp	r8, r3
 800b8d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b8d8:	f280 80cc 	bge.w	800ba74 <_strtod_l+0x87c>
 800b8dc:	eba3 0308 	sub.w	r3, r3, r8
 800b8e0:	2b1f      	cmp	r3, #31
 800b8e2:	eba2 0203 	sub.w	r2, r2, r3
 800b8e6:	f04f 0101 	mov.w	r1, #1
 800b8ea:	f300 80b6 	bgt.w	800ba5a <_strtod_l+0x862>
 800b8ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b8f2:	9311      	str	r3, [sp, #68]	; 0x44
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b8f8:	eb09 0802 	add.w	r8, r9, r2
 800b8fc:	9b04      	ldr	r3, [sp, #16]
 800b8fe:	45c1      	cmp	r9, r8
 800b900:	4417      	add	r7, r2
 800b902:	441f      	add	r7, r3
 800b904:	464b      	mov	r3, r9
 800b906:	bfa8      	it	ge
 800b908:	4643      	movge	r3, r8
 800b90a:	42bb      	cmp	r3, r7
 800b90c:	bfa8      	it	ge
 800b90e:	463b      	movge	r3, r7
 800b910:	2b00      	cmp	r3, #0
 800b912:	bfc2      	ittt	gt
 800b914:	eba8 0803 	subgt.w	r8, r8, r3
 800b918:	1aff      	subgt	r7, r7, r3
 800b91a:	eba9 0903 	subgt.w	r9, r9, r3
 800b91e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b920:	2b00      	cmp	r3, #0
 800b922:	dd17      	ble.n	800b954 <_strtod_l+0x75c>
 800b924:	4631      	mov	r1, r6
 800b926:	461a      	mov	r2, r3
 800b928:	4620      	mov	r0, r4
 800b92a:	f002 f80b 	bl	800d944 <__pow5mult>
 800b92e:	4606      	mov	r6, r0
 800b930:	2800      	cmp	r0, #0
 800b932:	f43f aead 	beq.w	800b690 <_strtod_l+0x498>
 800b936:	4601      	mov	r1, r0
 800b938:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b93a:	4620      	mov	r0, r4
 800b93c:	f001 ff5c 	bl	800d7f8 <__multiply>
 800b940:	900f      	str	r0, [sp, #60]	; 0x3c
 800b942:	2800      	cmp	r0, #0
 800b944:	f43f aea4 	beq.w	800b690 <_strtod_l+0x498>
 800b948:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b94a:	4620      	mov	r0, r4
 800b94c:	f001 fe38 	bl	800d5c0 <_Bfree>
 800b950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b952:	931e      	str	r3, [sp, #120]	; 0x78
 800b954:	f1b8 0f00 	cmp.w	r8, #0
 800b958:	f300 8091 	bgt.w	800ba7e <_strtod_l+0x886>
 800b95c:	9b08      	ldr	r3, [sp, #32]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	dd08      	ble.n	800b974 <_strtod_l+0x77c>
 800b962:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b964:	9907      	ldr	r1, [sp, #28]
 800b966:	4620      	mov	r0, r4
 800b968:	f001 ffec 	bl	800d944 <__pow5mult>
 800b96c:	9007      	str	r0, [sp, #28]
 800b96e:	2800      	cmp	r0, #0
 800b970:	f43f ae8e 	beq.w	800b690 <_strtod_l+0x498>
 800b974:	2f00      	cmp	r7, #0
 800b976:	dd08      	ble.n	800b98a <_strtod_l+0x792>
 800b978:	9907      	ldr	r1, [sp, #28]
 800b97a:	463a      	mov	r2, r7
 800b97c:	4620      	mov	r0, r4
 800b97e:	f002 f83b 	bl	800d9f8 <__lshift>
 800b982:	9007      	str	r0, [sp, #28]
 800b984:	2800      	cmp	r0, #0
 800b986:	f43f ae83 	beq.w	800b690 <_strtod_l+0x498>
 800b98a:	f1b9 0f00 	cmp.w	r9, #0
 800b98e:	dd08      	ble.n	800b9a2 <_strtod_l+0x7aa>
 800b990:	4631      	mov	r1, r6
 800b992:	464a      	mov	r2, r9
 800b994:	4620      	mov	r0, r4
 800b996:	f002 f82f 	bl	800d9f8 <__lshift>
 800b99a:	4606      	mov	r6, r0
 800b99c:	2800      	cmp	r0, #0
 800b99e:	f43f ae77 	beq.w	800b690 <_strtod_l+0x498>
 800b9a2:	9a07      	ldr	r2, [sp, #28]
 800b9a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f002 f8ae 	bl	800db08 <__mdiff>
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	f43f ae6e 	beq.w	800b690 <_strtod_l+0x498>
 800b9b4:	68c3      	ldr	r3, [r0, #12]
 800b9b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	60c3      	str	r3, [r0, #12]
 800b9bc:	4631      	mov	r1, r6
 800b9be:	f002 f887 	bl	800dad0 <__mcmp>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	da65      	bge.n	800ba92 <_strtod_l+0x89a>
 800b9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9c8:	ea53 030a 	orrs.w	r3, r3, sl
 800b9cc:	f040 8087 	bne.w	800bade <_strtod_l+0x8e6>
 800b9d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f040 8082 	bne.w	800bade <_strtod_l+0x8e6>
 800b9da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9de:	0d1b      	lsrs	r3, r3, #20
 800b9e0:	051b      	lsls	r3, r3, #20
 800b9e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b9e6:	d97a      	bls.n	800bade <_strtod_l+0x8e6>
 800b9e8:	696b      	ldr	r3, [r5, #20]
 800b9ea:	b913      	cbnz	r3, 800b9f2 <_strtod_l+0x7fa>
 800b9ec:	692b      	ldr	r3, [r5, #16]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	dd75      	ble.n	800bade <_strtod_l+0x8e6>
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f001 fffe 	bl	800d9f8 <__lshift>
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4605      	mov	r5, r0
 800ba00:	f002 f866 	bl	800dad0 <__mcmp>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	dd6a      	ble.n	800bade <_strtod_l+0x8e6>
 800ba08:	9904      	ldr	r1, [sp, #16]
 800ba0a:	4a55      	ldr	r2, [pc, #340]	; (800bb60 <_strtod_l+0x968>)
 800ba0c:	465b      	mov	r3, fp
 800ba0e:	2900      	cmp	r1, #0
 800ba10:	f000 8085 	beq.w	800bb1e <_strtod_l+0x926>
 800ba14:	ea02 010b 	and.w	r1, r2, fp
 800ba18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ba1c:	dc7f      	bgt.n	800bb1e <_strtod_l+0x926>
 800ba1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ba22:	f77f aeaa 	ble.w	800b77a <_strtod_l+0x582>
 800ba26:	4a4f      	ldr	r2, [pc, #316]	; (800bb64 <_strtod_l+0x96c>)
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ba2e:	4650      	mov	r0, sl
 800ba30:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ba34:	4659      	mov	r1, fp
 800ba36:	f7f4 fddf 	bl	80005f8 <__aeabi_dmul>
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4303      	orrs	r3, r0
 800ba3e:	bf08      	it	eq
 800ba40:	2322      	moveq	r3, #34	; 0x22
 800ba42:	4682      	mov	sl, r0
 800ba44:	468b      	mov	fp, r1
 800ba46:	bf08      	it	eq
 800ba48:	6023      	streq	r3, [r4, #0]
 800ba4a:	e62b      	b.n	800b6a4 <_strtod_l+0x4ac>
 800ba4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba50:	fa02 f303 	lsl.w	r3, r2, r3
 800ba54:	ea03 0a0a 	and.w	sl, r3, sl
 800ba58:	e6de      	b.n	800b818 <_strtod_l+0x620>
 800ba5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ba5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ba62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ba66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ba6a:	fa01 f308 	lsl.w	r3, r1, r8
 800ba6e:	930c      	str	r3, [sp, #48]	; 0x30
 800ba70:	9111      	str	r1, [sp, #68]	; 0x44
 800ba72:	e741      	b.n	800b8f8 <_strtod_l+0x700>
 800ba74:	2300      	movs	r3, #0
 800ba76:	930c      	str	r3, [sp, #48]	; 0x30
 800ba78:	2301      	movs	r3, #1
 800ba7a:	9311      	str	r3, [sp, #68]	; 0x44
 800ba7c:	e73c      	b.n	800b8f8 <_strtod_l+0x700>
 800ba7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ba80:	4642      	mov	r2, r8
 800ba82:	4620      	mov	r0, r4
 800ba84:	f001 ffb8 	bl	800d9f8 <__lshift>
 800ba88:	901e      	str	r0, [sp, #120]	; 0x78
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	f47f af66 	bne.w	800b95c <_strtod_l+0x764>
 800ba90:	e5fe      	b.n	800b690 <_strtod_l+0x498>
 800ba92:	465f      	mov	r7, fp
 800ba94:	d16e      	bne.n	800bb74 <_strtod_l+0x97c>
 800ba96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba9c:	b342      	cbz	r2, 800baf0 <_strtod_l+0x8f8>
 800ba9e:	4a32      	ldr	r2, [pc, #200]	; (800bb68 <_strtod_l+0x970>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d128      	bne.n	800baf6 <_strtod_l+0x8fe>
 800baa4:	9b04      	ldr	r3, [sp, #16]
 800baa6:	4650      	mov	r0, sl
 800baa8:	b1eb      	cbz	r3, 800bae6 <_strtod_l+0x8ee>
 800baaa:	4a2d      	ldr	r2, [pc, #180]	; (800bb60 <_strtod_l+0x968>)
 800baac:	403a      	ands	r2, r7
 800baae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bab2:	f04f 31ff 	mov.w	r1, #4294967295
 800bab6:	d819      	bhi.n	800baec <_strtod_l+0x8f4>
 800bab8:	0d12      	lsrs	r2, r2, #20
 800baba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800babe:	fa01 f303 	lsl.w	r3, r1, r3
 800bac2:	4298      	cmp	r0, r3
 800bac4:	d117      	bne.n	800baf6 <_strtod_l+0x8fe>
 800bac6:	4b29      	ldr	r3, [pc, #164]	; (800bb6c <_strtod_l+0x974>)
 800bac8:	429f      	cmp	r7, r3
 800baca:	d102      	bne.n	800bad2 <_strtod_l+0x8da>
 800bacc:	3001      	adds	r0, #1
 800bace:	f43f addf 	beq.w	800b690 <_strtod_l+0x498>
 800bad2:	4b23      	ldr	r3, [pc, #140]	; (800bb60 <_strtod_l+0x968>)
 800bad4:	403b      	ands	r3, r7
 800bad6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bada:	f04f 0a00 	mov.w	sl, #0
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1a0      	bne.n	800ba26 <_strtod_l+0x82e>
 800bae4:	e5de      	b.n	800b6a4 <_strtod_l+0x4ac>
 800bae6:	f04f 33ff 	mov.w	r3, #4294967295
 800baea:	e7ea      	b.n	800bac2 <_strtod_l+0x8ca>
 800baec:	460b      	mov	r3, r1
 800baee:	e7e8      	b.n	800bac2 <_strtod_l+0x8ca>
 800baf0:	ea53 030a 	orrs.w	r3, r3, sl
 800baf4:	d088      	beq.n	800ba08 <_strtod_l+0x810>
 800baf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baf8:	b1db      	cbz	r3, 800bb32 <_strtod_l+0x93a>
 800bafa:	423b      	tst	r3, r7
 800bafc:	d0ef      	beq.n	800bade <_strtod_l+0x8e6>
 800bafe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb00:	9a04      	ldr	r2, [sp, #16]
 800bb02:	4650      	mov	r0, sl
 800bb04:	4659      	mov	r1, fp
 800bb06:	b1c3      	cbz	r3, 800bb3a <_strtod_l+0x942>
 800bb08:	f7ff fb57 	bl	800b1ba <sulp>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb14:	f7f4 fbba 	bl	800028c <__adddf3>
 800bb18:	4682      	mov	sl, r0
 800bb1a:	468b      	mov	fp, r1
 800bb1c:	e7df      	b.n	800bade <_strtod_l+0x8e6>
 800bb1e:	4013      	ands	r3, r2
 800bb20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bb24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bb28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bb2c:	f04f 3aff 	mov.w	sl, #4294967295
 800bb30:	e7d5      	b.n	800bade <_strtod_l+0x8e6>
 800bb32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb34:	ea13 0f0a 	tst.w	r3, sl
 800bb38:	e7e0      	b.n	800bafc <_strtod_l+0x904>
 800bb3a:	f7ff fb3e 	bl	800b1ba <sulp>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb46:	f7f4 fb9f 	bl	8000288 <__aeabi_dsub>
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	4682      	mov	sl, r0
 800bb50:	468b      	mov	fp, r1
 800bb52:	f7f4 ffb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d0c1      	beq.n	800bade <_strtod_l+0x8e6>
 800bb5a:	e60e      	b.n	800b77a <_strtod_l+0x582>
 800bb5c:	fffffc02 	.word	0xfffffc02
 800bb60:	7ff00000 	.word	0x7ff00000
 800bb64:	39500000 	.word	0x39500000
 800bb68:	000fffff 	.word	0x000fffff
 800bb6c:	7fefffff 	.word	0x7fefffff
 800bb70:	0800f998 	.word	0x0800f998
 800bb74:	4631      	mov	r1, r6
 800bb76:	4628      	mov	r0, r5
 800bb78:	f002 f926 	bl	800ddc8 <__ratio>
 800bb7c:	ec59 8b10 	vmov	r8, r9, d0
 800bb80:	ee10 0a10 	vmov	r0, s0
 800bb84:	2200      	movs	r2, #0
 800bb86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	f7f4 ffb0 	bl	8000af0 <__aeabi_dcmple>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d07c      	beq.n	800bc8e <_strtod_l+0xa96>
 800bb94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d04c      	beq.n	800bc34 <_strtod_l+0xa3c>
 800bb9a:	4b95      	ldr	r3, [pc, #596]	; (800bdf0 <_strtod_l+0xbf8>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bba2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bdf0 <_strtod_l+0xbf8>
 800bba6:	f04f 0800 	mov.w	r8, #0
 800bbaa:	4b92      	ldr	r3, [pc, #584]	; (800bdf4 <_strtod_l+0xbfc>)
 800bbac:	403b      	ands	r3, r7
 800bbae:	9311      	str	r3, [sp, #68]	; 0x44
 800bbb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbb2:	4b91      	ldr	r3, [pc, #580]	; (800bdf8 <_strtod_l+0xc00>)
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	f040 80b2 	bne.w	800bd1e <_strtod_l+0xb26>
 800bbba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bbbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbc2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bbc6:	ec4b ab10 	vmov	d0, sl, fp
 800bbca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800bbce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bbd2:	f002 f821 	bl	800dc18 <__ulp>
 800bbd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbda:	ec53 2b10 	vmov	r2, r3, d0
 800bbde:	f7f4 fd0b 	bl	80005f8 <__aeabi_dmul>
 800bbe2:	4652      	mov	r2, sl
 800bbe4:	465b      	mov	r3, fp
 800bbe6:	f7f4 fb51 	bl	800028c <__adddf3>
 800bbea:	460b      	mov	r3, r1
 800bbec:	4981      	ldr	r1, [pc, #516]	; (800bdf4 <_strtod_l+0xbfc>)
 800bbee:	4a83      	ldr	r2, [pc, #524]	; (800bdfc <_strtod_l+0xc04>)
 800bbf0:	4019      	ands	r1, r3
 800bbf2:	4291      	cmp	r1, r2
 800bbf4:	4682      	mov	sl, r0
 800bbf6:	d95e      	bls.n	800bcb6 <_strtod_l+0xabe>
 800bbf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbfa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d103      	bne.n	800bc0a <_strtod_l+0xa12>
 800bc02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc04:	3301      	adds	r3, #1
 800bc06:	f43f ad43 	beq.w	800b690 <_strtod_l+0x498>
 800bc0a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800be08 <_strtod_l+0xc10>
 800bc0e:	f04f 3aff 	mov.w	sl, #4294967295
 800bc12:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bc14:	4620      	mov	r0, r4
 800bc16:	f001 fcd3 	bl	800d5c0 <_Bfree>
 800bc1a:	9907      	ldr	r1, [sp, #28]
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f001 fccf 	bl	800d5c0 <_Bfree>
 800bc22:	4631      	mov	r1, r6
 800bc24:	4620      	mov	r0, r4
 800bc26:	f001 fccb 	bl	800d5c0 <_Bfree>
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f001 fcc7 	bl	800d5c0 <_Bfree>
 800bc32:	e613      	b.n	800b85c <_strtod_l+0x664>
 800bc34:	f1ba 0f00 	cmp.w	sl, #0
 800bc38:	d11b      	bne.n	800bc72 <_strtod_l+0xa7a>
 800bc3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc3e:	b9f3      	cbnz	r3, 800bc7e <_strtod_l+0xa86>
 800bc40:	4b6b      	ldr	r3, [pc, #428]	; (800bdf0 <_strtod_l+0xbf8>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	4640      	mov	r0, r8
 800bc46:	4649      	mov	r1, r9
 800bc48:	f7f4 ff48 	bl	8000adc <__aeabi_dcmplt>
 800bc4c:	b9d0      	cbnz	r0, 800bc84 <_strtod_l+0xa8c>
 800bc4e:	4640      	mov	r0, r8
 800bc50:	4649      	mov	r1, r9
 800bc52:	4b6b      	ldr	r3, [pc, #428]	; (800be00 <_strtod_l+0xc08>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	f7f4 fccf 	bl	80005f8 <__aeabi_dmul>
 800bc5a:	4680      	mov	r8, r0
 800bc5c:	4689      	mov	r9, r1
 800bc5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc62:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800bc66:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc68:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800bc6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bc70:	e79b      	b.n	800bbaa <_strtod_l+0x9b2>
 800bc72:	f1ba 0f01 	cmp.w	sl, #1
 800bc76:	d102      	bne.n	800bc7e <_strtod_l+0xa86>
 800bc78:	2f00      	cmp	r7, #0
 800bc7a:	f43f ad7e 	beq.w	800b77a <_strtod_l+0x582>
 800bc7e:	4b61      	ldr	r3, [pc, #388]	; (800be04 <_strtod_l+0xc0c>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	e78c      	b.n	800bb9e <_strtod_l+0x9a6>
 800bc84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800be00 <_strtod_l+0xc08>
 800bc88:	f04f 0800 	mov.w	r8, #0
 800bc8c:	e7e7      	b.n	800bc5e <_strtod_l+0xa66>
 800bc8e:	4b5c      	ldr	r3, [pc, #368]	; (800be00 <_strtod_l+0xc08>)
 800bc90:	4640      	mov	r0, r8
 800bc92:	4649      	mov	r1, r9
 800bc94:	2200      	movs	r2, #0
 800bc96:	f7f4 fcaf 	bl	80005f8 <__aeabi_dmul>
 800bc9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc9c:	4680      	mov	r8, r0
 800bc9e:	4689      	mov	r9, r1
 800bca0:	b933      	cbnz	r3, 800bcb0 <_strtod_l+0xab8>
 800bca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bca6:	9012      	str	r0, [sp, #72]	; 0x48
 800bca8:	9313      	str	r3, [sp, #76]	; 0x4c
 800bcaa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bcae:	e7dd      	b.n	800bc6c <_strtod_l+0xa74>
 800bcb0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800bcb4:	e7f9      	b.n	800bcaa <_strtod_l+0xab2>
 800bcb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1a8      	bne.n	800bc12 <_strtod_l+0xa1a>
 800bcc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bcc6:	0d1b      	lsrs	r3, r3, #20
 800bcc8:	051b      	lsls	r3, r3, #20
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d1a1      	bne.n	800bc12 <_strtod_l+0xa1a>
 800bcce:	4640      	mov	r0, r8
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	f7f4 fff1 	bl	8000cb8 <__aeabi_d2lz>
 800bcd6:	f7f4 fc61 	bl	800059c <__aeabi_l2d>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4640      	mov	r0, r8
 800bce0:	4649      	mov	r1, r9
 800bce2:	f7f4 fad1 	bl	8000288 <__aeabi_dsub>
 800bce6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bce8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcec:	ea43 030a 	orr.w	r3, r3, sl
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	4680      	mov	r8, r0
 800bcf4:	4689      	mov	r9, r1
 800bcf6:	d053      	beq.n	800bda0 <_strtod_l+0xba8>
 800bcf8:	a335      	add	r3, pc, #212	; (adr r3, 800bdd0 <_strtod_l+0xbd8>)
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	f7f4 feed 	bl	8000adc <__aeabi_dcmplt>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	f47f acce 	bne.w	800b6a4 <_strtod_l+0x4ac>
 800bd08:	a333      	add	r3, pc, #204	; (adr r3, 800bdd8 <_strtod_l+0xbe0>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4649      	mov	r1, r9
 800bd12:	f7f4 ff01 	bl	8000b18 <__aeabi_dcmpgt>
 800bd16:	2800      	cmp	r0, #0
 800bd18:	f43f af7b 	beq.w	800bc12 <_strtod_l+0xa1a>
 800bd1c:	e4c2      	b.n	800b6a4 <_strtod_l+0x4ac>
 800bd1e:	9b04      	ldr	r3, [sp, #16]
 800bd20:	b333      	cbz	r3, 800bd70 <_strtod_l+0xb78>
 800bd22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd28:	d822      	bhi.n	800bd70 <_strtod_l+0xb78>
 800bd2a:	a32d      	add	r3, pc, #180	; (adr r3, 800bde0 <_strtod_l+0xbe8>)
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	4640      	mov	r0, r8
 800bd32:	4649      	mov	r1, r9
 800bd34:	f7f4 fedc 	bl	8000af0 <__aeabi_dcmple>
 800bd38:	b1a0      	cbz	r0, 800bd64 <_strtod_l+0xb6c>
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	4640      	mov	r0, r8
 800bd3e:	f7f4 ff33 	bl	8000ba8 <__aeabi_d2uiz>
 800bd42:	2801      	cmp	r0, #1
 800bd44:	bf38      	it	cc
 800bd46:	2001      	movcc	r0, #1
 800bd48:	f7f4 fbdc 	bl	8000504 <__aeabi_ui2d>
 800bd4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd4e:	4680      	mov	r8, r0
 800bd50:	4689      	mov	r9, r1
 800bd52:	bb13      	cbnz	r3, 800bd9a <_strtod_l+0xba2>
 800bd54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd58:	9014      	str	r0, [sp, #80]	; 0x50
 800bd5a:	9315      	str	r3, [sp, #84]	; 0x54
 800bd5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bd60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bd64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bd6c:	1a9b      	subs	r3, r3, r2
 800bd6e:	930d      	str	r3, [sp, #52]	; 0x34
 800bd70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd74:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bd78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd7c:	f001 ff4c 	bl	800dc18 <__ulp>
 800bd80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd84:	ec53 2b10 	vmov	r2, r3, d0
 800bd88:	f7f4 fc36 	bl	80005f8 <__aeabi_dmul>
 800bd8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bd90:	f7f4 fa7c 	bl	800028c <__adddf3>
 800bd94:	4682      	mov	sl, r0
 800bd96:	468b      	mov	fp, r1
 800bd98:	e78f      	b.n	800bcba <_strtod_l+0xac2>
 800bd9a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800bd9e:	e7dd      	b.n	800bd5c <_strtod_l+0xb64>
 800bda0:	a311      	add	r3, pc, #68	; (adr r3, 800bde8 <_strtod_l+0xbf0>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	f7f4 fe99 	bl	8000adc <__aeabi_dcmplt>
 800bdaa:	e7b4      	b.n	800bd16 <_strtod_l+0xb1e>
 800bdac:	2300      	movs	r3, #0
 800bdae:	930e      	str	r3, [sp, #56]	; 0x38
 800bdb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bdb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bdb4:	6013      	str	r3, [r2, #0]
 800bdb6:	f7ff ba65 	b.w	800b284 <_strtod_l+0x8c>
 800bdba:	2b65      	cmp	r3, #101	; 0x65
 800bdbc:	f43f ab5d 	beq.w	800b47a <_strtod_l+0x282>
 800bdc0:	2b45      	cmp	r3, #69	; 0x45
 800bdc2:	f43f ab5a 	beq.w	800b47a <_strtod_l+0x282>
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f7ff bb92 	b.w	800b4f0 <_strtod_l+0x2f8>
 800bdcc:	f3af 8000 	nop.w
 800bdd0:	94a03595 	.word	0x94a03595
 800bdd4:	3fdfffff 	.word	0x3fdfffff
 800bdd8:	35afe535 	.word	0x35afe535
 800bddc:	3fe00000 	.word	0x3fe00000
 800bde0:	ffc00000 	.word	0xffc00000
 800bde4:	41dfffff 	.word	0x41dfffff
 800bde8:	94a03595 	.word	0x94a03595
 800bdec:	3fcfffff 	.word	0x3fcfffff
 800bdf0:	3ff00000 	.word	0x3ff00000
 800bdf4:	7ff00000 	.word	0x7ff00000
 800bdf8:	7fe00000 	.word	0x7fe00000
 800bdfc:	7c9fffff 	.word	0x7c9fffff
 800be00:	3fe00000 	.word	0x3fe00000
 800be04:	bff00000 	.word	0xbff00000
 800be08:	7fefffff 	.word	0x7fefffff

0800be0c <_strtod_r>:
 800be0c:	4b01      	ldr	r3, [pc, #4]	; (800be14 <_strtod_r+0x8>)
 800be0e:	f7ff b9f3 	b.w	800b1f8 <_strtod_l>
 800be12:	bf00      	nop
 800be14:	200000e0 	.word	0x200000e0

0800be18 <strtok>:
 800be18:	4b16      	ldr	r3, [pc, #88]	; (800be74 <strtok+0x5c>)
 800be1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be1c:	681e      	ldr	r6, [r3, #0]
 800be1e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800be20:	4605      	mov	r5, r0
 800be22:	b9fc      	cbnz	r4, 800be64 <strtok+0x4c>
 800be24:	2050      	movs	r0, #80	; 0x50
 800be26:	9101      	str	r1, [sp, #4]
 800be28:	f001 fb62 	bl	800d4f0 <malloc>
 800be2c:	9901      	ldr	r1, [sp, #4]
 800be2e:	65b0      	str	r0, [r6, #88]	; 0x58
 800be30:	4602      	mov	r2, r0
 800be32:	b920      	cbnz	r0, 800be3e <strtok+0x26>
 800be34:	4b10      	ldr	r3, [pc, #64]	; (800be78 <strtok+0x60>)
 800be36:	4811      	ldr	r0, [pc, #68]	; (800be7c <strtok+0x64>)
 800be38:	2157      	movs	r1, #87	; 0x57
 800be3a:	f000 f91b 	bl	800c074 <__assert_func>
 800be3e:	e9c0 4400 	strd	r4, r4, [r0]
 800be42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800be46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800be4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800be4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800be52:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800be56:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800be5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800be5e:	6184      	str	r4, [r0, #24]
 800be60:	7704      	strb	r4, [r0, #28]
 800be62:	6244      	str	r4, [r0, #36]	; 0x24
 800be64:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800be66:	2301      	movs	r3, #1
 800be68:	4628      	mov	r0, r5
 800be6a:	b002      	add	sp, #8
 800be6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be70:	f000 b806 	b.w	800be80 <__strtok_r>
 800be74:	20000078 	.word	0x20000078
 800be78:	0800f9c0 	.word	0x0800f9c0
 800be7c:	0800f9d7 	.word	0x0800f9d7

0800be80 <__strtok_r>:
 800be80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be82:	b908      	cbnz	r0, 800be88 <__strtok_r+0x8>
 800be84:	6810      	ldr	r0, [r2, #0]
 800be86:	b188      	cbz	r0, 800beac <__strtok_r+0x2c>
 800be88:	4604      	mov	r4, r0
 800be8a:	4620      	mov	r0, r4
 800be8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800be90:	460f      	mov	r7, r1
 800be92:	f817 6b01 	ldrb.w	r6, [r7], #1
 800be96:	b91e      	cbnz	r6, 800bea0 <__strtok_r+0x20>
 800be98:	b965      	cbnz	r5, 800beb4 <__strtok_r+0x34>
 800be9a:	6015      	str	r5, [r2, #0]
 800be9c:	4628      	mov	r0, r5
 800be9e:	e005      	b.n	800beac <__strtok_r+0x2c>
 800bea0:	42b5      	cmp	r5, r6
 800bea2:	d1f6      	bne.n	800be92 <__strtok_r+0x12>
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1f0      	bne.n	800be8a <__strtok_r+0xa>
 800bea8:	6014      	str	r4, [r2, #0]
 800beaa:	7003      	strb	r3, [r0, #0]
 800beac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beae:	461c      	mov	r4, r3
 800beb0:	e00c      	b.n	800becc <__strtok_r+0x4c>
 800beb2:	b915      	cbnz	r5, 800beba <__strtok_r+0x3a>
 800beb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800beb8:	460e      	mov	r6, r1
 800beba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bebe:	42ab      	cmp	r3, r5
 800bec0:	d1f7      	bne.n	800beb2 <__strtok_r+0x32>
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d0f3      	beq.n	800beae <__strtok_r+0x2e>
 800bec6:	2300      	movs	r3, #0
 800bec8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800becc:	6014      	str	r4, [r2, #0]
 800bece:	e7ed      	b.n	800beac <__strtok_r+0x2c>

0800bed0 <_strtol_l.isra.0>:
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bed6:	d001      	beq.n	800bedc <_strtol_l.isra.0+0xc>
 800bed8:	2b24      	cmp	r3, #36	; 0x24
 800beda:	d906      	bls.n	800beea <_strtol_l.isra.0+0x1a>
 800bedc:	f7fe fa2a 	bl	800a334 <__errno>
 800bee0:	2316      	movs	r3, #22
 800bee2:	6003      	str	r3, [r0, #0]
 800bee4:	2000      	movs	r0, #0
 800bee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beea:	4f3a      	ldr	r7, [pc, #232]	; (800bfd4 <_strtol_l.isra.0+0x104>)
 800beec:	468e      	mov	lr, r1
 800beee:	4676      	mov	r6, lr
 800bef0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bef4:	5de5      	ldrb	r5, [r4, r7]
 800bef6:	f015 0508 	ands.w	r5, r5, #8
 800befa:	d1f8      	bne.n	800beee <_strtol_l.isra.0+0x1e>
 800befc:	2c2d      	cmp	r4, #45	; 0x2d
 800befe:	d134      	bne.n	800bf6a <_strtol_l.isra.0+0x9a>
 800bf00:	f89e 4000 	ldrb.w	r4, [lr]
 800bf04:	f04f 0801 	mov.w	r8, #1
 800bf08:	f106 0e02 	add.w	lr, r6, #2
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d05c      	beq.n	800bfca <_strtol_l.isra.0+0xfa>
 800bf10:	2b10      	cmp	r3, #16
 800bf12:	d10c      	bne.n	800bf2e <_strtol_l.isra.0+0x5e>
 800bf14:	2c30      	cmp	r4, #48	; 0x30
 800bf16:	d10a      	bne.n	800bf2e <_strtol_l.isra.0+0x5e>
 800bf18:	f89e 4000 	ldrb.w	r4, [lr]
 800bf1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bf20:	2c58      	cmp	r4, #88	; 0x58
 800bf22:	d14d      	bne.n	800bfc0 <_strtol_l.isra.0+0xf0>
 800bf24:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800bf28:	2310      	movs	r3, #16
 800bf2a:	f10e 0e02 	add.w	lr, lr, #2
 800bf2e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800bf32:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf36:	2600      	movs	r6, #0
 800bf38:	fbbc f9f3 	udiv	r9, ip, r3
 800bf3c:	4635      	mov	r5, r6
 800bf3e:	fb03 ca19 	mls	sl, r3, r9, ip
 800bf42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bf46:	2f09      	cmp	r7, #9
 800bf48:	d818      	bhi.n	800bf7c <_strtol_l.isra.0+0xac>
 800bf4a:	463c      	mov	r4, r7
 800bf4c:	42a3      	cmp	r3, r4
 800bf4e:	dd24      	ble.n	800bf9a <_strtol_l.isra.0+0xca>
 800bf50:	2e00      	cmp	r6, #0
 800bf52:	db1f      	blt.n	800bf94 <_strtol_l.isra.0+0xc4>
 800bf54:	45a9      	cmp	r9, r5
 800bf56:	d31d      	bcc.n	800bf94 <_strtol_l.isra.0+0xc4>
 800bf58:	d101      	bne.n	800bf5e <_strtol_l.isra.0+0x8e>
 800bf5a:	45a2      	cmp	sl, r4
 800bf5c:	db1a      	blt.n	800bf94 <_strtol_l.isra.0+0xc4>
 800bf5e:	fb05 4503 	mla	r5, r5, r3, r4
 800bf62:	2601      	movs	r6, #1
 800bf64:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bf68:	e7eb      	b.n	800bf42 <_strtol_l.isra.0+0x72>
 800bf6a:	2c2b      	cmp	r4, #43	; 0x2b
 800bf6c:	bf08      	it	eq
 800bf6e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800bf72:	46a8      	mov	r8, r5
 800bf74:	bf08      	it	eq
 800bf76:	f106 0e02 	addeq.w	lr, r6, #2
 800bf7a:	e7c7      	b.n	800bf0c <_strtol_l.isra.0+0x3c>
 800bf7c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bf80:	2f19      	cmp	r7, #25
 800bf82:	d801      	bhi.n	800bf88 <_strtol_l.isra.0+0xb8>
 800bf84:	3c37      	subs	r4, #55	; 0x37
 800bf86:	e7e1      	b.n	800bf4c <_strtol_l.isra.0+0x7c>
 800bf88:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bf8c:	2f19      	cmp	r7, #25
 800bf8e:	d804      	bhi.n	800bf9a <_strtol_l.isra.0+0xca>
 800bf90:	3c57      	subs	r4, #87	; 0x57
 800bf92:	e7db      	b.n	800bf4c <_strtol_l.isra.0+0x7c>
 800bf94:	f04f 36ff 	mov.w	r6, #4294967295
 800bf98:	e7e4      	b.n	800bf64 <_strtol_l.isra.0+0x94>
 800bf9a:	2e00      	cmp	r6, #0
 800bf9c:	da05      	bge.n	800bfaa <_strtol_l.isra.0+0xda>
 800bf9e:	2322      	movs	r3, #34	; 0x22
 800bfa0:	6003      	str	r3, [r0, #0]
 800bfa2:	4665      	mov	r5, ip
 800bfa4:	b942      	cbnz	r2, 800bfb8 <_strtol_l.isra.0+0xe8>
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	e79d      	b.n	800bee6 <_strtol_l.isra.0+0x16>
 800bfaa:	f1b8 0f00 	cmp.w	r8, #0
 800bfae:	d000      	beq.n	800bfb2 <_strtol_l.isra.0+0xe2>
 800bfb0:	426d      	negs	r5, r5
 800bfb2:	2a00      	cmp	r2, #0
 800bfb4:	d0f7      	beq.n	800bfa6 <_strtol_l.isra.0+0xd6>
 800bfb6:	b10e      	cbz	r6, 800bfbc <_strtol_l.isra.0+0xec>
 800bfb8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800bfbc:	6011      	str	r1, [r2, #0]
 800bfbe:	e7f2      	b.n	800bfa6 <_strtol_l.isra.0+0xd6>
 800bfc0:	2430      	movs	r4, #48	; 0x30
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1b3      	bne.n	800bf2e <_strtol_l.isra.0+0x5e>
 800bfc6:	2308      	movs	r3, #8
 800bfc8:	e7b1      	b.n	800bf2e <_strtol_l.isra.0+0x5e>
 800bfca:	2c30      	cmp	r4, #48	; 0x30
 800bfcc:	d0a4      	beq.n	800bf18 <_strtol_l.isra.0+0x48>
 800bfce:	230a      	movs	r3, #10
 800bfd0:	e7ad      	b.n	800bf2e <_strtol_l.isra.0+0x5e>
 800bfd2:	bf00      	nop
 800bfd4:	0800fa75 	.word	0x0800fa75

0800bfd8 <_strtol_r>:
 800bfd8:	f7ff bf7a 	b.w	800bed0 <_strtol_l.isra.0>

0800bfdc <_vsniprintf_r>:
 800bfdc:	b530      	push	{r4, r5, lr}
 800bfde:	1e14      	subs	r4, r2, #0
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	b09b      	sub	sp, #108	; 0x6c
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	da05      	bge.n	800bff4 <_vsniprintf_r+0x18>
 800bfe8:	238b      	movs	r3, #139	; 0x8b
 800bfea:	602b      	str	r3, [r5, #0]
 800bfec:	f04f 30ff 	mov.w	r0, #4294967295
 800bff0:	b01b      	add	sp, #108	; 0x6c
 800bff2:	bd30      	pop	{r4, r5, pc}
 800bff4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bff8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bffc:	bf14      	ite	ne
 800bffe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c002:	4623      	moveq	r3, r4
 800c004:	9302      	str	r3, [sp, #8]
 800c006:	9305      	str	r3, [sp, #20]
 800c008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c00c:	9100      	str	r1, [sp, #0]
 800c00e:	9104      	str	r1, [sp, #16]
 800c010:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c014:	4602      	mov	r2, r0
 800c016:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c018:	4669      	mov	r1, sp
 800c01a:	4628      	mov	r0, r5
 800c01c:	f002 f860 	bl	800e0e0 <_svfiprintf_r>
 800c020:	1c43      	adds	r3, r0, #1
 800c022:	bfbc      	itt	lt
 800c024:	238b      	movlt	r3, #139	; 0x8b
 800c026:	602b      	strlt	r3, [r5, #0]
 800c028:	2c00      	cmp	r4, #0
 800c02a:	d0e1      	beq.n	800bff0 <_vsniprintf_r+0x14>
 800c02c:	9b00      	ldr	r3, [sp, #0]
 800c02e:	2200      	movs	r2, #0
 800c030:	701a      	strb	r2, [r3, #0]
 800c032:	e7dd      	b.n	800bff0 <_vsniprintf_r+0x14>

0800c034 <vsniprintf>:
 800c034:	b507      	push	{r0, r1, r2, lr}
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	4613      	mov	r3, r2
 800c03a:	460a      	mov	r2, r1
 800c03c:	4601      	mov	r1, r0
 800c03e:	4803      	ldr	r0, [pc, #12]	; (800c04c <vsniprintf+0x18>)
 800c040:	6800      	ldr	r0, [r0, #0]
 800c042:	f7ff ffcb 	bl	800bfdc <_vsniprintf_r>
 800c046:	b003      	add	sp, #12
 800c048:	f85d fb04 	ldr.w	pc, [sp], #4
 800c04c:	20000078 	.word	0x20000078

0800c050 <_write_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4d07      	ldr	r5, [pc, #28]	; (800c070 <_write_r+0x20>)
 800c054:	4604      	mov	r4, r0
 800c056:	4608      	mov	r0, r1
 800c058:	4611      	mov	r1, r2
 800c05a:	2200      	movs	r2, #0
 800c05c:	602a      	str	r2, [r5, #0]
 800c05e:	461a      	mov	r2, r3
 800c060:	f7f6 f865 	bl	800212e <_write>
 800c064:	1c43      	adds	r3, r0, #1
 800c066:	d102      	bne.n	800c06e <_write_r+0x1e>
 800c068:	682b      	ldr	r3, [r5, #0]
 800c06a:	b103      	cbz	r3, 800c06e <_write_r+0x1e>
 800c06c:	6023      	str	r3, [r4, #0]
 800c06e:	bd38      	pop	{r3, r4, r5, pc}
 800c070:	20000b1c 	.word	0x20000b1c

0800c074 <__assert_func>:
 800c074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c076:	4614      	mov	r4, r2
 800c078:	461a      	mov	r2, r3
 800c07a:	4b09      	ldr	r3, [pc, #36]	; (800c0a0 <__assert_func+0x2c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4605      	mov	r5, r0
 800c080:	68d8      	ldr	r0, [r3, #12]
 800c082:	b14c      	cbz	r4, 800c098 <__assert_func+0x24>
 800c084:	4b07      	ldr	r3, [pc, #28]	; (800c0a4 <__assert_func+0x30>)
 800c086:	9100      	str	r1, [sp, #0]
 800c088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c08c:	4906      	ldr	r1, [pc, #24]	; (800c0a8 <__assert_func+0x34>)
 800c08e:	462b      	mov	r3, r5
 800c090:	f000 fe96 	bl	800cdc0 <fiprintf>
 800c094:	f002 ff9a 	bl	800efcc <abort>
 800c098:	4b04      	ldr	r3, [pc, #16]	; (800c0ac <__assert_func+0x38>)
 800c09a:	461c      	mov	r4, r3
 800c09c:	e7f3      	b.n	800c086 <__assert_func+0x12>
 800c09e:	bf00      	nop
 800c0a0:	20000078 	.word	0x20000078
 800c0a4:	0800fa38 	.word	0x0800fa38
 800c0a8:	0800fa45 	.word	0x0800fa45
 800c0ac:	0800fa73 	.word	0x0800fa73

0800c0b0 <_close_r>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	4d06      	ldr	r5, [pc, #24]	; (800c0cc <_close_r+0x1c>)
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	602b      	str	r3, [r5, #0]
 800c0bc:	f7f6 f853 	bl	8002166 <_close>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d102      	bne.n	800c0ca <_close_r+0x1a>
 800c0c4:	682b      	ldr	r3, [r5, #0]
 800c0c6:	b103      	cbz	r3, 800c0ca <_close_r+0x1a>
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	20000b1c 	.word	0x20000b1c

0800c0d0 <quorem>:
 800c0d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d4:	6903      	ldr	r3, [r0, #16]
 800c0d6:	690c      	ldr	r4, [r1, #16]
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	4607      	mov	r7, r0
 800c0dc:	f2c0 8081 	blt.w	800c1e2 <quorem+0x112>
 800c0e0:	3c01      	subs	r4, #1
 800c0e2:	f101 0814 	add.w	r8, r1, #20
 800c0e6:	f100 0514 	add.w	r5, r0, #20
 800c0ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0ee:	9301      	str	r3, [sp, #4]
 800c0f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c0f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c100:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c104:	fbb2 f6f3 	udiv	r6, r2, r3
 800c108:	d331      	bcc.n	800c16e <quorem+0x9e>
 800c10a:	f04f 0e00 	mov.w	lr, #0
 800c10e:	4640      	mov	r0, r8
 800c110:	46ac      	mov	ip, r5
 800c112:	46f2      	mov	sl, lr
 800c114:	f850 2b04 	ldr.w	r2, [r0], #4
 800c118:	b293      	uxth	r3, r2
 800c11a:	fb06 e303 	mla	r3, r6, r3, lr
 800c11e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c122:	b29b      	uxth	r3, r3
 800c124:	ebaa 0303 	sub.w	r3, sl, r3
 800c128:	0c12      	lsrs	r2, r2, #16
 800c12a:	f8dc a000 	ldr.w	sl, [ip]
 800c12e:	fb06 e202 	mla	r2, r6, r2, lr
 800c132:	fa13 f38a 	uxtah	r3, r3, sl
 800c136:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c13a:	fa1f fa82 	uxth.w	sl, r2
 800c13e:	f8dc 2000 	ldr.w	r2, [ip]
 800c142:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c146:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c150:	4581      	cmp	r9, r0
 800c152:	f84c 3b04 	str.w	r3, [ip], #4
 800c156:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c15a:	d2db      	bcs.n	800c114 <quorem+0x44>
 800c15c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c160:	b92b      	cbnz	r3, 800c16e <quorem+0x9e>
 800c162:	9b01      	ldr	r3, [sp, #4]
 800c164:	3b04      	subs	r3, #4
 800c166:	429d      	cmp	r5, r3
 800c168:	461a      	mov	r2, r3
 800c16a:	d32e      	bcc.n	800c1ca <quorem+0xfa>
 800c16c:	613c      	str	r4, [r7, #16]
 800c16e:	4638      	mov	r0, r7
 800c170:	f001 fcae 	bl	800dad0 <__mcmp>
 800c174:	2800      	cmp	r0, #0
 800c176:	db24      	blt.n	800c1c2 <quorem+0xf2>
 800c178:	3601      	adds	r6, #1
 800c17a:	4628      	mov	r0, r5
 800c17c:	f04f 0c00 	mov.w	ip, #0
 800c180:	f858 2b04 	ldr.w	r2, [r8], #4
 800c184:	f8d0 e000 	ldr.w	lr, [r0]
 800c188:	b293      	uxth	r3, r2
 800c18a:	ebac 0303 	sub.w	r3, ip, r3
 800c18e:	0c12      	lsrs	r2, r2, #16
 800c190:	fa13 f38e 	uxtah	r3, r3, lr
 800c194:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1a2:	45c1      	cmp	r9, r8
 800c1a4:	f840 3b04 	str.w	r3, [r0], #4
 800c1a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c1ac:	d2e8      	bcs.n	800c180 <quorem+0xb0>
 800c1ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1b6:	b922      	cbnz	r2, 800c1c2 <quorem+0xf2>
 800c1b8:	3b04      	subs	r3, #4
 800c1ba:	429d      	cmp	r5, r3
 800c1bc:	461a      	mov	r2, r3
 800c1be:	d30a      	bcc.n	800c1d6 <quorem+0x106>
 800c1c0:	613c      	str	r4, [r7, #16]
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	b003      	add	sp, #12
 800c1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ca:	6812      	ldr	r2, [r2, #0]
 800c1cc:	3b04      	subs	r3, #4
 800c1ce:	2a00      	cmp	r2, #0
 800c1d0:	d1cc      	bne.n	800c16c <quorem+0x9c>
 800c1d2:	3c01      	subs	r4, #1
 800c1d4:	e7c7      	b.n	800c166 <quorem+0x96>
 800c1d6:	6812      	ldr	r2, [r2, #0]
 800c1d8:	3b04      	subs	r3, #4
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	d1f0      	bne.n	800c1c0 <quorem+0xf0>
 800c1de:	3c01      	subs	r4, #1
 800c1e0:	e7eb      	b.n	800c1ba <quorem+0xea>
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	e7ee      	b.n	800c1c4 <quorem+0xf4>
	...

0800c1e8 <_dtoa_r>:
 800c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	ed2d 8b02 	vpush	{d8}
 800c1f0:	ec57 6b10 	vmov	r6, r7, d0
 800c1f4:	b095      	sub	sp, #84	; 0x54
 800c1f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c1f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c1fc:	9105      	str	r1, [sp, #20]
 800c1fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c202:	4604      	mov	r4, r0
 800c204:	9209      	str	r2, [sp, #36]	; 0x24
 800c206:	930f      	str	r3, [sp, #60]	; 0x3c
 800c208:	b975      	cbnz	r5, 800c228 <_dtoa_r+0x40>
 800c20a:	2010      	movs	r0, #16
 800c20c:	f001 f970 	bl	800d4f0 <malloc>
 800c210:	4602      	mov	r2, r0
 800c212:	6260      	str	r0, [r4, #36]	; 0x24
 800c214:	b920      	cbnz	r0, 800c220 <_dtoa_r+0x38>
 800c216:	4bb2      	ldr	r3, [pc, #712]	; (800c4e0 <_dtoa_r+0x2f8>)
 800c218:	21ea      	movs	r1, #234	; 0xea
 800c21a:	48b2      	ldr	r0, [pc, #712]	; (800c4e4 <_dtoa_r+0x2fc>)
 800c21c:	f7ff ff2a 	bl	800c074 <__assert_func>
 800c220:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c224:	6005      	str	r5, [r0, #0]
 800c226:	60c5      	str	r5, [r0, #12]
 800c228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c22a:	6819      	ldr	r1, [r3, #0]
 800c22c:	b151      	cbz	r1, 800c244 <_dtoa_r+0x5c>
 800c22e:	685a      	ldr	r2, [r3, #4]
 800c230:	604a      	str	r2, [r1, #4]
 800c232:	2301      	movs	r3, #1
 800c234:	4093      	lsls	r3, r2
 800c236:	608b      	str	r3, [r1, #8]
 800c238:	4620      	mov	r0, r4
 800c23a:	f001 f9c1 	bl	800d5c0 <_Bfree>
 800c23e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c240:	2200      	movs	r2, #0
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	1e3b      	subs	r3, r7, #0
 800c246:	bfb9      	ittee	lt
 800c248:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c24c:	9303      	strlt	r3, [sp, #12]
 800c24e:	2300      	movge	r3, #0
 800c250:	f8c8 3000 	strge.w	r3, [r8]
 800c254:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c258:	4ba3      	ldr	r3, [pc, #652]	; (800c4e8 <_dtoa_r+0x300>)
 800c25a:	bfbc      	itt	lt
 800c25c:	2201      	movlt	r2, #1
 800c25e:	f8c8 2000 	strlt.w	r2, [r8]
 800c262:	ea33 0309 	bics.w	r3, r3, r9
 800c266:	d11b      	bne.n	800c2a0 <_dtoa_r+0xb8>
 800c268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c26a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c26e:	6013      	str	r3, [r2, #0]
 800c270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c274:	4333      	orrs	r3, r6
 800c276:	f000 857a 	beq.w	800cd6e <_dtoa_r+0xb86>
 800c27a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c27c:	b963      	cbnz	r3, 800c298 <_dtoa_r+0xb0>
 800c27e:	4b9b      	ldr	r3, [pc, #620]	; (800c4ec <_dtoa_r+0x304>)
 800c280:	e024      	b.n	800c2cc <_dtoa_r+0xe4>
 800c282:	4b9b      	ldr	r3, [pc, #620]	; (800c4f0 <_dtoa_r+0x308>)
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	3308      	adds	r3, #8
 800c288:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c28a:	6013      	str	r3, [r2, #0]
 800c28c:	9800      	ldr	r0, [sp, #0]
 800c28e:	b015      	add	sp, #84	; 0x54
 800c290:	ecbd 8b02 	vpop	{d8}
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c298:	4b94      	ldr	r3, [pc, #592]	; (800c4ec <_dtoa_r+0x304>)
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	3303      	adds	r3, #3
 800c29e:	e7f3      	b.n	800c288 <_dtoa_r+0xa0>
 800c2a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	ec51 0b17 	vmov	r0, r1, d7
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c2b0:	f7f4 fc0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2b4:	4680      	mov	r8, r0
 800c2b6:	b158      	cbz	r0, 800c2d0 <_dtoa_r+0xe8>
 800c2b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	6013      	str	r3, [r2, #0]
 800c2be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f000 8551 	beq.w	800cd68 <_dtoa_r+0xb80>
 800c2c6:	488b      	ldr	r0, [pc, #556]	; (800c4f4 <_dtoa_r+0x30c>)
 800c2c8:	6018      	str	r0, [r3, #0]
 800c2ca:	1e43      	subs	r3, r0, #1
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	e7dd      	b.n	800c28c <_dtoa_r+0xa4>
 800c2d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c2d4:	aa12      	add	r2, sp, #72	; 0x48
 800c2d6:	a913      	add	r1, sp, #76	; 0x4c
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f001 fd19 	bl	800dd10 <__d2b>
 800c2de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c2e2:	4683      	mov	fp, r0
 800c2e4:	2d00      	cmp	r5, #0
 800c2e6:	d07c      	beq.n	800c3e2 <_dtoa_r+0x1fa>
 800c2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c2ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c2f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c2fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c2fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c302:	4b7d      	ldr	r3, [pc, #500]	; (800c4f8 <_dtoa_r+0x310>)
 800c304:	2200      	movs	r2, #0
 800c306:	4630      	mov	r0, r6
 800c308:	4639      	mov	r1, r7
 800c30a:	f7f3 ffbd 	bl	8000288 <__aeabi_dsub>
 800c30e:	a36e      	add	r3, pc, #440	; (adr r3, 800c4c8 <_dtoa_r+0x2e0>)
 800c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c314:	f7f4 f970 	bl	80005f8 <__aeabi_dmul>
 800c318:	a36d      	add	r3, pc, #436	; (adr r3, 800c4d0 <_dtoa_r+0x2e8>)
 800c31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31e:	f7f3 ffb5 	bl	800028c <__adddf3>
 800c322:	4606      	mov	r6, r0
 800c324:	4628      	mov	r0, r5
 800c326:	460f      	mov	r7, r1
 800c328:	f7f4 f8fc 	bl	8000524 <__aeabi_i2d>
 800c32c:	a36a      	add	r3, pc, #424	; (adr r3, 800c4d8 <_dtoa_r+0x2f0>)
 800c32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c332:	f7f4 f961 	bl	80005f8 <__aeabi_dmul>
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	4630      	mov	r0, r6
 800c33c:	4639      	mov	r1, r7
 800c33e:	f7f3 ffa5 	bl	800028c <__adddf3>
 800c342:	4606      	mov	r6, r0
 800c344:	460f      	mov	r7, r1
 800c346:	f7f4 fc07 	bl	8000b58 <__aeabi_d2iz>
 800c34a:	2200      	movs	r2, #0
 800c34c:	4682      	mov	sl, r0
 800c34e:	2300      	movs	r3, #0
 800c350:	4630      	mov	r0, r6
 800c352:	4639      	mov	r1, r7
 800c354:	f7f4 fbc2 	bl	8000adc <__aeabi_dcmplt>
 800c358:	b148      	cbz	r0, 800c36e <_dtoa_r+0x186>
 800c35a:	4650      	mov	r0, sl
 800c35c:	f7f4 f8e2 	bl	8000524 <__aeabi_i2d>
 800c360:	4632      	mov	r2, r6
 800c362:	463b      	mov	r3, r7
 800c364:	f7f4 fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c368:	b908      	cbnz	r0, 800c36e <_dtoa_r+0x186>
 800c36a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c36e:	f1ba 0f16 	cmp.w	sl, #22
 800c372:	d854      	bhi.n	800c41e <_dtoa_r+0x236>
 800c374:	4b61      	ldr	r3, [pc, #388]	; (800c4fc <_dtoa_r+0x314>)
 800c376:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c382:	f7f4 fbab 	bl	8000adc <__aeabi_dcmplt>
 800c386:	2800      	cmp	r0, #0
 800c388:	d04b      	beq.n	800c422 <_dtoa_r+0x23a>
 800c38a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c38e:	2300      	movs	r3, #0
 800c390:	930e      	str	r3, [sp, #56]	; 0x38
 800c392:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c394:	1b5d      	subs	r5, r3, r5
 800c396:	1e6b      	subs	r3, r5, #1
 800c398:	9304      	str	r3, [sp, #16]
 800c39a:	bf43      	ittte	mi
 800c39c:	2300      	movmi	r3, #0
 800c39e:	f1c5 0801 	rsbmi	r8, r5, #1
 800c3a2:	9304      	strmi	r3, [sp, #16]
 800c3a4:	f04f 0800 	movpl.w	r8, #0
 800c3a8:	f1ba 0f00 	cmp.w	sl, #0
 800c3ac:	db3b      	blt.n	800c426 <_dtoa_r+0x23e>
 800c3ae:	9b04      	ldr	r3, [sp, #16]
 800c3b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c3b4:	4453      	add	r3, sl
 800c3b6:	9304      	str	r3, [sp, #16]
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	9306      	str	r3, [sp, #24]
 800c3bc:	9b05      	ldr	r3, [sp, #20]
 800c3be:	2b09      	cmp	r3, #9
 800c3c0:	d869      	bhi.n	800c496 <_dtoa_r+0x2ae>
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	bfc4      	itt	gt
 800c3c6:	3b04      	subgt	r3, #4
 800c3c8:	9305      	strgt	r3, [sp, #20]
 800c3ca:	9b05      	ldr	r3, [sp, #20]
 800c3cc:	f1a3 0302 	sub.w	r3, r3, #2
 800c3d0:	bfcc      	ite	gt
 800c3d2:	2500      	movgt	r5, #0
 800c3d4:	2501      	movle	r5, #1
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	d869      	bhi.n	800c4ae <_dtoa_r+0x2c6>
 800c3da:	e8df f003 	tbb	[pc, r3]
 800c3de:	4e2c      	.short	0x4e2c
 800c3e0:	5a4c      	.short	0x5a4c
 800c3e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c3e6:	441d      	add	r5, r3
 800c3e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c3ec:	2b20      	cmp	r3, #32
 800c3ee:	bfc1      	itttt	gt
 800c3f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c3f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c3f8:	fa09 f303 	lslgt.w	r3, r9, r3
 800c3fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c400:	bfda      	itte	le
 800c402:	f1c3 0320 	rsble	r3, r3, #32
 800c406:	fa06 f003 	lslle.w	r0, r6, r3
 800c40a:	4318      	orrgt	r0, r3
 800c40c:	f7f4 f87a 	bl	8000504 <__aeabi_ui2d>
 800c410:	2301      	movs	r3, #1
 800c412:	4606      	mov	r6, r0
 800c414:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c418:	3d01      	subs	r5, #1
 800c41a:	9310      	str	r3, [sp, #64]	; 0x40
 800c41c:	e771      	b.n	800c302 <_dtoa_r+0x11a>
 800c41e:	2301      	movs	r3, #1
 800c420:	e7b6      	b.n	800c390 <_dtoa_r+0x1a8>
 800c422:	900e      	str	r0, [sp, #56]	; 0x38
 800c424:	e7b5      	b.n	800c392 <_dtoa_r+0x1aa>
 800c426:	f1ca 0300 	rsb	r3, sl, #0
 800c42a:	9306      	str	r3, [sp, #24]
 800c42c:	2300      	movs	r3, #0
 800c42e:	eba8 080a 	sub.w	r8, r8, sl
 800c432:	930d      	str	r3, [sp, #52]	; 0x34
 800c434:	e7c2      	b.n	800c3bc <_dtoa_r+0x1d4>
 800c436:	2300      	movs	r3, #0
 800c438:	9308      	str	r3, [sp, #32]
 800c43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	dc39      	bgt.n	800c4b4 <_dtoa_r+0x2cc>
 800c440:	f04f 0901 	mov.w	r9, #1
 800c444:	f8cd 9004 	str.w	r9, [sp, #4]
 800c448:	464b      	mov	r3, r9
 800c44a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c44e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c450:	2200      	movs	r2, #0
 800c452:	6042      	str	r2, [r0, #4]
 800c454:	2204      	movs	r2, #4
 800c456:	f102 0614 	add.w	r6, r2, #20
 800c45a:	429e      	cmp	r6, r3
 800c45c:	6841      	ldr	r1, [r0, #4]
 800c45e:	d92f      	bls.n	800c4c0 <_dtoa_r+0x2d8>
 800c460:	4620      	mov	r0, r4
 800c462:	f001 f86d 	bl	800d540 <_Balloc>
 800c466:	9000      	str	r0, [sp, #0]
 800c468:	2800      	cmp	r0, #0
 800c46a:	d14b      	bne.n	800c504 <_dtoa_r+0x31c>
 800c46c:	4b24      	ldr	r3, [pc, #144]	; (800c500 <_dtoa_r+0x318>)
 800c46e:	4602      	mov	r2, r0
 800c470:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c474:	e6d1      	b.n	800c21a <_dtoa_r+0x32>
 800c476:	2301      	movs	r3, #1
 800c478:	e7de      	b.n	800c438 <_dtoa_r+0x250>
 800c47a:	2300      	movs	r3, #0
 800c47c:	9308      	str	r3, [sp, #32]
 800c47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c480:	eb0a 0903 	add.w	r9, sl, r3
 800c484:	f109 0301 	add.w	r3, r9, #1
 800c488:	2b01      	cmp	r3, #1
 800c48a:	9301      	str	r3, [sp, #4]
 800c48c:	bfb8      	it	lt
 800c48e:	2301      	movlt	r3, #1
 800c490:	e7dd      	b.n	800c44e <_dtoa_r+0x266>
 800c492:	2301      	movs	r3, #1
 800c494:	e7f2      	b.n	800c47c <_dtoa_r+0x294>
 800c496:	2501      	movs	r5, #1
 800c498:	2300      	movs	r3, #0
 800c49a:	9305      	str	r3, [sp, #20]
 800c49c:	9508      	str	r5, [sp, #32]
 800c49e:	f04f 39ff 	mov.w	r9, #4294967295
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c4a8:	2312      	movs	r3, #18
 800c4aa:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ac:	e7cf      	b.n	800c44e <_dtoa_r+0x266>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	9308      	str	r3, [sp, #32]
 800c4b2:	e7f4      	b.n	800c49e <_dtoa_r+0x2b6>
 800c4b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c4b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800c4bc:	464b      	mov	r3, r9
 800c4be:	e7c6      	b.n	800c44e <_dtoa_r+0x266>
 800c4c0:	3101      	adds	r1, #1
 800c4c2:	6041      	str	r1, [r0, #4]
 800c4c4:	0052      	lsls	r2, r2, #1
 800c4c6:	e7c6      	b.n	800c456 <_dtoa_r+0x26e>
 800c4c8:	636f4361 	.word	0x636f4361
 800c4cc:	3fd287a7 	.word	0x3fd287a7
 800c4d0:	8b60c8b3 	.word	0x8b60c8b3
 800c4d4:	3fc68a28 	.word	0x3fc68a28
 800c4d8:	509f79fb 	.word	0x509f79fb
 800c4dc:	3fd34413 	.word	0x3fd34413
 800c4e0:	0800f9c0 	.word	0x0800f9c0
 800c4e4:	0800fb82 	.word	0x0800fb82
 800c4e8:	7ff00000 	.word	0x7ff00000
 800c4ec:	0800fb7e 	.word	0x0800fb7e
 800c4f0:	0800fb75 	.word	0x0800fb75
 800c4f4:	0800fde2 	.word	0x0800fde2
 800c4f8:	3ff80000 	.word	0x3ff80000
 800c4fc:	0800fcf8 	.word	0x0800fcf8
 800c500:	0800fbe1 	.word	0x0800fbe1
 800c504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c506:	9a00      	ldr	r2, [sp, #0]
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	9b01      	ldr	r3, [sp, #4]
 800c50c:	2b0e      	cmp	r3, #14
 800c50e:	f200 80ad 	bhi.w	800c66c <_dtoa_r+0x484>
 800c512:	2d00      	cmp	r5, #0
 800c514:	f000 80aa 	beq.w	800c66c <_dtoa_r+0x484>
 800c518:	f1ba 0f00 	cmp.w	sl, #0
 800c51c:	dd36      	ble.n	800c58c <_dtoa_r+0x3a4>
 800c51e:	4ac3      	ldr	r2, [pc, #780]	; (800c82c <_dtoa_r+0x644>)
 800c520:	f00a 030f 	and.w	r3, sl, #15
 800c524:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c528:	ed93 7b00 	vldr	d7, [r3]
 800c52c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c530:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c534:	eeb0 8a47 	vmov.f32	s16, s14
 800c538:	eef0 8a67 	vmov.f32	s17, s15
 800c53c:	d016      	beq.n	800c56c <_dtoa_r+0x384>
 800c53e:	4bbc      	ldr	r3, [pc, #752]	; (800c830 <_dtoa_r+0x648>)
 800c540:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c544:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c548:	f7f4 f980 	bl	800084c <__aeabi_ddiv>
 800c54c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c550:	f007 070f 	and.w	r7, r7, #15
 800c554:	2503      	movs	r5, #3
 800c556:	4eb6      	ldr	r6, [pc, #728]	; (800c830 <_dtoa_r+0x648>)
 800c558:	b957      	cbnz	r7, 800c570 <_dtoa_r+0x388>
 800c55a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c55e:	ec53 2b18 	vmov	r2, r3, d8
 800c562:	f7f4 f973 	bl	800084c <__aeabi_ddiv>
 800c566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c56a:	e029      	b.n	800c5c0 <_dtoa_r+0x3d8>
 800c56c:	2502      	movs	r5, #2
 800c56e:	e7f2      	b.n	800c556 <_dtoa_r+0x36e>
 800c570:	07f9      	lsls	r1, r7, #31
 800c572:	d508      	bpl.n	800c586 <_dtoa_r+0x39e>
 800c574:	ec51 0b18 	vmov	r0, r1, d8
 800c578:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c57c:	f7f4 f83c 	bl	80005f8 <__aeabi_dmul>
 800c580:	ec41 0b18 	vmov	d8, r0, r1
 800c584:	3501      	adds	r5, #1
 800c586:	107f      	asrs	r7, r7, #1
 800c588:	3608      	adds	r6, #8
 800c58a:	e7e5      	b.n	800c558 <_dtoa_r+0x370>
 800c58c:	f000 80a6 	beq.w	800c6dc <_dtoa_r+0x4f4>
 800c590:	f1ca 0600 	rsb	r6, sl, #0
 800c594:	4ba5      	ldr	r3, [pc, #660]	; (800c82c <_dtoa_r+0x644>)
 800c596:	4fa6      	ldr	r7, [pc, #664]	; (800c830 <_dtoa_r+0x648>)
 800c598:	f006 020f 	and.w	r2, r6, #15
 800c59c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c5a8:	f7f4 f826 	bl	80005f8 <__aeabi_dmul>
 800c5ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5b0:	1136      	asrs	r6, r6, #4
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	2502      	movs	r5, #2
 800c5b6:	2e00      	cmp	r6, #0
 800c5b8:	f040 8085 	bne.w	800c6c6 <_dtoa_r+0x4de>
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1d2      	bne.n	800c566 <_dtoa_r+0x37e>
 800c5c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f000 808c 	beq.w	800c6e0 <_dtoa_r+0x4f8>
 800c5c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c5cc:	4b99      	ldr	r3, [pc, #612]	; (800c834 <_dtoa_r+0x64c>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	4639      	mov	r1, r7
 800c5d4:	f7f4 fa82 	bl	8000adc <__aeabi_dcmplt>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	f000 8081 	beq.w	800c6e0 <_dtoa_r+0x4f8>
 800c5de:	9b01      	ldr	r3, [sp, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d07d      	beq.n	800c6e0 <_dtoa_r+0x4f8>
 800c5e4:	f1b9 0f00 	cmp.w	r9, #0
 800c5e8:	dd3c      	ble.n	800c664 <_dtoa_r+0x47c>
 800c5ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c5ee:	9307      	str	r3, [sp, #28]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	4b91      	ldr	r3, [pc, #580]	; (800c838 <_dtoa_r+0x650>)
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	f7f3 fffe 	bl	80005f8 <__aeabi_dmul>
 800c5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c600:	3501      	adds	r5, #1
 800c602:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c606:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c60a:	4628      	mov	r0, r5
 800c60c:	f7f3 ff8a 	bl	8000524 <__aeabi_i2d>
 800c610:	4632      	mov	r2, r6
 800c612:	463b      	mov	r3, r7
 800c614:	f7f3 fff0 	bl	80005f8 <__aeabi_dmul>
 800c618:	4b88      	ldr	r3, [pc, #544]	; (800c83c <_dtoa_r+0x654>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	f7f3 fe36 	bl	800028c <__adddf3>
 800c620:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c628:	9303      	str	r3, [sp, #12]
 800c62a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d15c      	bne.n	800c6ea <_dtoa_r+0x502>
 800c630:	4b83      	ldr	r3, [pc, #524]	; (800c840 <_dtoa_r+0x658>)
 800c632:	2200      	movs	r2, #0
 800c634:	4630      	mov	r0, r6
 800c636:	4639      	mov	r1, r7
 800c638:	f7f3 fe26 	bl	8000288 <__aeabi_dsub>
 800c63c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c640:	4606      	mov	r6, r0
 800c642:	460f      	mov	r7, r1
 800c644:	f7f4 fa68 	bl	8000b18 <__aeabi_dcmpgt>
 800c648:	2800      	cmp	r0, #0
 800c64a:	f040 8296 	bne.w	800cb7a <_dtoa_r+0x992>
 800c64e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c652:	4630      	mov	r0, r6
 800c654:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c658:	4639      	mov	r1, r7
 800c65a:	f7f4 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800c65e:	2800      	cmp	r0, #0
 800c660:	f040 8288 	bne.w	800cb74 <_dtoa_r+0x98c>
 800c664:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c668:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c66c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f2c0 8158 	blt.w	800c924 <_dtoa_r+0x73c>
 800c674:	f1ba 0f0e 	cmp.w	sl, #14
 800c678:	f300 8154 	bgt.w	800c924 <_dtoa_r+0x73c>
 800c67c:	4b6b      	ldr	r3, [pc, #428]	; (800c82c <_dtoa_r+0x644>)
 800c67e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c682:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c688:	2b00      	cmp	r3, #0
 800c68a:	f280 80e3 	bge.w	800c854 <_dtoa_r+0x66c>
 800c68e:	9b01      	ldr	r3, [sp, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	f300 80df 	bgt.w	800c854 <_dtoa_r+0x66c>
 800c696:	f040 826d 	bne.w	800cb74 <_dtoa_r+0x98c>
 800c69a:	4b69      	ldr	r3, [pc, #420]	; (800c840 <_dtoa_r+0x658>)
 800c69c:	2200      	movs	r2, #0
 800c69e:	4640      	mov	r0, r8
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	f7f3 ffa9 	bl	80005f8 <__aeabi_dmul>
 800c6a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6aa:	f7f4 fa2b 	bl	8000b04 <__aeabi_dcmpge>
 800c6ae:	9e01      	ldr	r6, [sp, #4]
 800c6b0:	4637      	mov	r7, r6
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	f040 8243 	bne.w	800cb3e <_dtoa_r+0x956>
 800c6b8:	9d00      	ldr	r5, [sp, #0]
 800c6ba:	2331      	movs	r3, #49	; 0x31
 800c6bc:	f805 3b01 	strb.w	r3, [r5], #1
 800c6c0:	f10a 0a01 	add.w	sl, sl, #1
 800c6c4:	e23f      	b.n	800cb46 <_dtoa_r+0x95e>
 800c6c6:	07f2      	lsls	r2, r6, #31
 800c6c8:	d505      	bpl.n	800c6d6 <_dtoa_r+0x4ee>
 800c6ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6ce:	f7f3 ff93 	bl	80005f8 <__aeabi_dmul>
 800c6d2:	3501      	adds	r5, #1
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	1076      	asrs	r6, r6, #1
 800c6d8:	3708      	adds	r7, #8
 800c6da:	e76c      	b.n	800c5b6 <_dtoa_r+0x3ce>
 800c6dc:	2502      	movs	r5, #2
 800c6de:	e76f      	b.n	800c5c0 <_dtoa_r+0x3d8>
 800c6e0:	9b01      	ldr	r3, [sp, #4]
 800c6e2:	f8cd a01c 	str.w	sl, [sp, #28]
 800c6e6:	930c      	str	r3, [sp, #48]	; 0x30
 800c6e8:	e78d      	b.n	800c606 <_dtoa_r+0x41e>
 800c6ea:	9900      	ldr	r1, [sp, #0]
 800c6ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c6ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6f0:	4b4e      	ldr	r3, [pc, #312]	; (800c82c <_dtoa_r+0x644>)
 800c6f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6f6:	4401      	add	r1, r0
 800c6f8:	9102      	str	r1, [sp, #8]
 800c6fa:	9908      	ldr	r1, [sp, #32]
 800c6fc:	eeb0 8a47 	vmov.f32	s16, s14
 800c700:	eef0 8a67 	vmov.f32	s17, s15
 800c704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c708:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c70c:	2900      	cmp	r1, #0
 800c70e:	d045      	beq.n	800c79c <_dtoa_r+0x5b4>
 800c710:	494c      	ldr	r1, [pc, #304]	; (800c844 <_dtoa_r+0x65c>)
 800c712:	2000      	movs	r0, #0
 800c714:	f7f4 f89a 	bl	800084c <__aeabi_ddiv>
 800c718:	ec53 2b18 	vmov	r2, r3, d8
 800c71c:	f7f3 fdb4 	bl	8000288 <__aeabi_dsub>
 800c720:	9d00      	ldr	r5, [sp, #0]
 800c722:	ec41 0b18 	vmov	d8, r0, r1
 800c726:	4639      	mov	r1, r7
 800c728:	4630      	mov	r0, r6
 800c72a:	f7f4 fa15 	bl	8000b58 <__aeabi_d2iz>
 800c72e:	900c      	str	r0, [sp, #48]	; 0x30
 800c730:	f7f3 fef8 	bl	8000524 <__aeabi_i2d>
 800c734:	4602      	mov	r2, r0
 800c736:	460b      	mov	r3, r1
 800c738:	4630      	mov	r0, r6
 800c73a:	4639      	mov	r1, r7
 800c73c:	f7f3 fda4 	bl	8000288 <__aeabi_dsub>
 800c740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c742:	3330      	adds	r3, #48	; 0x30
 800c744:	f805 3b01 	strb.w	r3, [r5], #1
 800c748:	ec53 2b18 	vmov	r2, r3, d8
 800c74c:	4606      	mov	r6, r0
 800c74e:	460f      	mov	r7, r1
 800c750:	f7f4 f9c4 	bl	8000adc <__aeabi_dcmplt>
 800c754:	2800      	cmp	r0, #0
 800c756:	d165      	bne.n	800c824 <_dtoa_r+0x63c>
 800c758:	4632      	mov	r2, r6
 800c75a:	463b      	mov	r3, r7
 800c75c:	4935      	ldr	r1, [pc, #212]	; (800c834 <_dtoa_r+0x64c>)
 800c75e:	2000      	movs	r0, #0
 800c760:	f7f3 fd92 	bl	8000288 <__aeabi_dsub>
 800c764:	ec53 2b18 	vmov	r2, r3, d8
 800c768:	f7f4 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	f040 80b9 	bne.w	800c8e4 <_dtoa_r+0x6fc>
 800c772:	9b02      	ldr	r3, [sp, #8]
 800c774:	429d      	cmp	r5, r3
 800c776:	f43f af75 	beq.w	800c664 <_dtoa_r+0x47c>
 800c77a:	4b2f      	ldr	r3, [pc, #188]	; (800c838 <_dtoa_r+0x650>)
 800c77c:	ec51 0b18 	vmov	r0, r1, d8
 800c780:	2200      	movs	r2, #0
 800c782:	f7f3 ff39 	bl	80005f8 <__aeabi_dmul>
 800c786:	4b2c      	ldr	r3, [pc, #176]	; (800c838 <_dtoa_r+0x650>)
 800c788:	ec41 0b18 	vmov	d8, r0, r1
 800c78c:	2200      	movs	r2, #0
 800c78e:	4630      	mov	r0, r6
 800c790:	4639      	mov	r1, r7
 800c792:	f7f3 ff31 	bl	80005f8 <__aeabi_dmul>
 800c796:	4606      	mov	r6, r0
 800c798:	460f      	mov	r7, r1
 800c79a:	e7c4      	b.n	800c726 <_dtoa_r+0x53e>
 800c79c:	ec51 0b17 	vmov	r0, r1, d7
 800c7a0:	f7f3 ff2a 	bl	80005f8 <__aeabi_dmul>
 800c7a4:	9b02      	ldr	r3, [sp, #8]
 800c7a6:	9d00      	ldr	r5, [sp, #0]
 800c7a8:	930c      	str	r3, [sp, #48]	; 0x30
 800c7aa:	ec41 0b18 	vmov	d8, r0, r1
 800c7ae:	4639      	mov	r1, r7
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f7f4 f9d1 	bl	8000b58 <__aeabi_d2iz>
 800c7b6:	9011      	str	r0, [sp, #68]	; 0x44
 800c7b8:	f7f3 feb4 	bl	8000524 <__aeabi_i2d>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	460b      	mov	r3, r1
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	4639      	mov	r1, r7
 800c7c4:	f7f3 fd60 	bl	8000288 <__aeabi_dsub>
 800c7c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7ca:	3330      	adds	r3, #48	; 0x30
 800c7cc:	f805 3b01 	strb.w	r3, [r5], #1
 800c7d0:	9b02      	ldr	r3, [sp, #8]
 800c7d2:	429d      	cmp	r5, r3
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	460f      	mov	r7, r1
 800c7d8:	f04f 0200 	mov.w	r2, #0
 800c7dc:	d134      	bne.n	800c848 <_dtoa_r+0x660>
 800c7de:	4b19      	ldr	r3, [pc, #100]	; (800c844 <_dtoa_r+0x65c>)
 800c7e0:	ec51 0b18 	vmov	r0, r1, d8
 800c7e4:	f7f3 fd52 	bl	800028c <__adddf3>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	4630      	mov	r0, r6
 800c7ee:	4639      	mov	r1, r7
 800c7f0:	f7f4 f992 	bl	8000b18 <__aeabi_dcmpgt>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d175      	bne.n	800c8e4 <_dtoa_r+0x6fc>
 800c7f8:	ec53 2b18 	vmov	r2, r3, d8
 800c7fc:	4911      	ldr	r1, [pc, #68]	; (800c844 <_dtoa_r+0x65c>)
 800c7fe:	2000      	movs	r0, #0
 800c800:	f7f3 fd42 	bl	8000288 <__aeabi_dsub>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	4630      	mov	r0, r6
 800c80a:	4639      	mov	r1, r7
 800c80c:	f7f4 f966 	bl	8000adc <__aeabi_dcmplt>
 800c810:	2800      	cmp	r0, #0
 800c812:	f43f af27 	beq.w	800c664 <_dtoa_r+0x47c>
 800c816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c818:	1e6b      	subs	r3, r5, #1
 800c81a:	930c      	str	r3, [sp, #48]	; 0x30
 800c81c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c820:	2b30      	cmp	r3, #48	; 0x30
 800c822:	d0f8      	beq.n	800c816 <_dtoa_r+0x62e>
 800c824:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c828:	e04a      	b.n	800c8c0 <_dtoa_r+0x6d8>
 800c82a:	bf00      	nop
 800c82c:	0800fcf8 	.word	0x0800fcf8
 800c830:	0800fcd0 	.word	0x0800fcd0
 800c834:	3ff00000 	.word	0x3ff00000
 800c838:	40240000 	.word	0x40240000
 800c83c:	401c0000 	.word	0x401c0000
 800c840:	40140000 	.word	0x40140000
 800c844:	3fe00000 	.word	0x3fe00000
 800c848:	4baf      	ldr	r3, [pc, #700]	; (800cb08 <_dtoa_r+0x920>)
 800c84a:	f7f3 fed5 	bl	80005f8 <__aeabi_dmul>
 800c84e:	4606      	mov	r6, r0
 800c850:	460f      	mov	r7, r1
 800c852:	e7ac      	b.n	800c7ae <_dtoa_r+0x5c6>
 800c854:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c858:	9d00      	ldr	r5, [sp, #0]
 800c85a:	4642      	mov	r2, r8
 800c85c:	464b      	mov	r3, r9
 800c85e:	4630      	mov	r0, r6
 800c860:	4639      	mov	r1, r7
 800c862:	f7f3 fff3 	bl	800084c <__aeabi_ddiv>
 800c866:	f7f4 f977 	bl	8000b58 <__aeabi_d2iz>
 800c86a:	9002      	str	r0, [sp, #8]
 800c86c:	f7f3 fe5a 	bl	8000524 <__aeabi_i2d>
 800c870:	4642      	mov	r2, r8
 800c872:	464b      	mov	r3, r9
 800c874:	f7f3 fec0 	bl	80005f8 <__aeabi_dmul>
 800c878:	4602      	mov	r2, r0
 800c87a:	460b      	mov	r3, r1
 800c87c:	4630      	mov	r0, r6
 800c87e:	4639      	mov	r1, r7
 800c880:	f7f3 fd02 	bl	8000288 <__aeabi_dsub>
 800c884:	9e02      	ldr	r6, [sp, #8]
 800c886:	9f01      	ldr	r7, [sp, #4]
 800c888:	3630      	adds	r6, #48	; 0x30
 800c88a:	f805 6b01 	strb.w	r6, [r5], #1
 800c88e:	9e00      	ldr	r6, [sp, #0]
 800c890:	1bae      	subs	r6, r5, r6
 800c892:	42b7      	cmp	r7, r6
 800c894:	4602      	mov	r2, r0
 800c896:	460b      	mov	r3, r1
 800c898:	d137      	bne.n	800c90a <_dtoa_r+0x722>
 800c89a:	f7f3 fcf7 	bl	800028c <__adddf3>
 800c89e:	4642      	mov	r2, r8
 800c8a0:	464b      	mov	r3, r9
 800c8a2:	4606      	mov	r6, r0
 800c8a4:	460f      	mov	r7, r1
 800c8a6:	f7f4 f937 	bl	8000b18 <__aeabi_dcmpgt>
 800c8aa:	b9c8      	cbnz	r0, 800c8e0 <_dtoa_r+0x6f8>
 800c8ac:	4642      	mov	r2, r8
 800c8ae:	464b      	mov	r3, r9
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	4639      	mov	r1, r7
 800c8b4:	f7f4 f908 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8b8:	b110      	cbz	r0, 800c8c0 <_dtoa_r+0x6d8>
 800c8ba:	9b02      	ldr	r3, [sp, #8]
 800c8bc:	07d9      	lsls	r1, r3, #31
 800c8be:	d40f      	bmi.n	800c8e0 <_dtoa_r+0x6f8>
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	4659      	mov	r1, fp
 800c8c4:	f000 fe7c 	bl	800d5c0 <_Bfree>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	702b      	strb	r3, [r5, #0]
 800c8cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8ce:	f10a 0001 	add.w	r0, sl, #1
 800c8d2:	6018      	str	r0, [r3, #0]
 800c8d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f43f acd8 	beq.w	800c28c <_dtoa_r+0xa4>
 800c8dc:	601d      	str	r5, [r3, #0]
 800c8de:	e4d5      	b.n	800c28c <_dtoa_r+0xa4>
 800c8e0:	f8cd a01c 	str.w	sl, [sp, #28]
 800c8e4:	462b      	mov	r3, r5
 800c8e6:	461d      	mov	r5, r3
 800c8e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8ec:	2a39      	cmp	r2, #57	; 0x39
 800c8ee:	d108      	bne.n	800c902 <_dtoa_r+0x71a>
 800c8f0:	9a00      	ldr	r2, [sp, #0]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d1f7      	bne.n	800c8e6 <_dtoa_r+0x6fe>
 800c8f6:	9a07      	ldr	r2, [sp, #28]
 800c8f8:	9900      	ldr	r1, [sp, #0]
 800c8fa:	3201      	adds	r2, #1
 800c8fc:	9207      	str	r2, [sp, #28]
 800c8fe:	2230      	movs	r2, #48	; 0x30
 800c900:	700a      	strb	r2, [r1, #0]
 800c902:	781a      	ldrb	r2, [r3, #0]
 800c904:	3201      	adds	r2, #1
 800c906:	701a      	strb	r2, [r3, #0]
 800c908:	e78c      	b.n	800c824 <_dtoa_r+0x63c>
 800c90a:	4b7f      	ldr	r3, [pc, #508]	; (800cb08 <_dtoa_r+0x920>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	f7f3 fe73 	bl	80005f8 <__aeabi_dmul>
 800c912:	2200      	movs	r2, #0
 800c914:	2300      	movs	r3, #0
 800c916:	4606      	mov	r6, r0
 800c918:	460f      	mov	r7, r1
 800c91a:	f7f4 f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c91e:	2800      	cmp	r0, #0
 800c920:	d09b      	beq.n	800c85a <_dtoa_r+0x672>
 800c922:	e7cd      	b.n	800c8c0 <_dtoa_r+0x6d8>
 800c924:	9a08      	ldr	r2, [sp, #32]
 800c926:	2a00      	cmp	r2, #0
 800c928:	f000 80c4 	beq.w	800cab4 <_dtoa_r+0x8cc>
 800c92c:	9a05      	ldr	r2, [sp, #20]
 800c92e:	2a01      	cmp	r2, #1
 800c930:	f300 80a8 	bgt.w	800ca84 <_dtoa_r+0x89c>
 800c934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c936:	2a00      	cmp	r2, #0
 800c938:	f000 80a0 	beq.w	800ca7c <_dtoa_r+0x894>
 800c93c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c940:	9e06      	ldr	r6, [sp, #24]
 800c942:	4645      	mov	r5, r8
 800c944:	9a04      	ldr	r2, [sp, #16]
 800c946:	2101      	movs	r1, #1
 800c948:	441a      	add	r2, r3
 800c94a:	4620      	mov	r0, r4
 800c94c:	4498      	add	r8, r3
 800c94e:	9204      	str	r2, [sp, #16]
 800c950:	f000 ff3c 	bl	800d7cc <__i2b>
 800c954:	4607      	mov	r7, r0
 800c956:	2d00      	cmp	r5, #0
 800c958:	dd0b      	ble.n	800c972 <_dtoa_r+0x78a>
 800c95a:	9b04      	ldr	r3, [sp, #16]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	dd08      	ble.n	800c972 <_dtoa_r+0x78a>
 800c960:	42ab      	cmp	r3, r5
 800c962:	9a04      	ldr	r2, [sp, #16]
 800c964:	bfa8      	it	ge
 800c966:	462b      	movge	r3, r5
 800c968:	eba8 0803 	sub.w	r8, r8, r3
 800c96c:	1aed      	subs	r5, r5, r3
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	9304      	str	r3, [sp, #16]
 800c972:	9b06      	ldr	r3, [sp, #24]
 800c974:	b1fb      	cbz	r3, 800c9b6 <_dtoa_r+0x7ce>
 800c976:	9b08      	ldr	r3, [sp, #32]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f000 809f 	beq.w	800cabc <_dtoa_r+0x8d4>
 800c97e:	2e00      	cmp	r6, #0
 800c980:	dd11      	ble.n	800c9a6 <_dtoa_r+0x7be>
 800c982:	4639      	mov	r1, r7
 800c984:	4632      	mov	r2, r6
 800c986:	4620      	mov	r0, r4
 800c988:	f000 ffdc 	bl	800d944 <__pow5mult>
 800c98c:	465a      	mov	r2, fp
 800c98e:	4601      	mov	r1, r0
 800c990:	4607      	mov	r7, r0
 800c992:	4620      	mov	r0, r4
 800c994:	f000 ff30 	bl	800d7f8 <__multiply>
 800c998:	4659      	mov	r1, fp
 800c99a:	9007      	str	r0, [sp, #28]
 800c99c:	4620      	mov	r0, r4
 800c99e:	f000 fe0f 	bl	800d5c0 <_Bfree>
 800c9a2:	9b07      	ldr	r3, [sp, #28]
 800c9a4:	469b      	mov	fp, r3
 800c9a6:	9b06      	ldr	r3, [sp, #24]
 800c9a8:	1b9a      	subs	r2, r3, r6
 800c9aa:	d004      	beq.n	800c9b6 <_dtoa_r+0x7ce>
 800c9ac:	4659      	mov	r1, fp
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f000 ffc8 	bl	800d944 <__pow5mult>
 800c9b4:	4683      	mov	fp, r0
 800c9b6:	2101      	movs	r1, #1
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f000 ff07 	bl	800d7cc <__i2b>
 800c9be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	dd7c      	ble.n	800cac0 <_dtoa_r+0x8d8>
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	4601      	mov	r1, r0
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f000 ffba 	bl	800d944 <__pow5mult>
 800c9d0:	9b05      	ldr	r3, [sp, #20]
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	dd76      	ble.n	800cac6 <_dtoa_r+0x8de>
 800c9d8:	2300      	movs	r3, #0
 800c9da:	9306      	str	r3, [sp, #24]
 800c9dc:	6933      	ldr	r3, [r6, #16]
 800c9de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c9e2:	6918      	ldr	r0, [r3, #16]
 800c9e4:	f000 fea2 	bl	800d72c <__hi0bits>
 800c9e8:	f1c0 0020 	rsb	r0, r0, #32
 800c9ec:	9b04      	ldr	r3, [sp, #16]
 800c9ee:	4418      	add	r0, r3
 800c9f0:	f010 001f 	ands.w	r0, r0, #31
 800c9f4:	f000 8086 	beq.w	800cb04 <_dtoa_r+0x91c>
 800c9f8:	f1c0 0320 	rsb	r3, r0, #32
 800c9fc:	2b04      	cmp	r3, #4
 800c9fe:	dd7f      	ble.n	800cb00 <_dtoa_r+0x918>
 800ca00:	f1c0 001c 	rsb	r0, r0, #28
 800ca04:	9b04      	ldr	r3, [sp, #16]
 800ca06:	4403      	add	r3, r0
 800ca08:	4480      	add	r8, r0
 800ca0a:	4405      	add	r5, r0
 800ca0c:	9304      	str	r3, [sp, #16]
 800ca0e:	f1b8 0f00 	cmp.w	r8, #0
 800ca12:	dd05      	ble.n	800ca20 <_dtoa_r+0x838>
 800ca14:	4659      	mov	r1, fp
 800ca16:	4642      	mov	r2, r8
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f000 ffed 	bl	800d9f8 <__lshift>
 800ca1e:	4683      	mov	fp, r0
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	dd05      	ble.n	800ca32 <_dtoa_r+0x84a>
 800ca26:	4631      	mov	r1, r6
 800ca28:	461a      	mov	r2, r3
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f000 ffe4 	bl	800d9f8 <__lshift>
 800ca30:	4606      	mov	r6, r0
 800ca32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d069      	beq.n	800cb0c <_dtoa_r+0x924>
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4658      	mov	r0, fp
 800ca3c:	f001 f848 	bl	800dad0 <__mcmp>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	da63      	bge.n	800cb0c <_dtoa_r+0x924>
 800ca44:	2300      	movs	r3, #0
 800ca46:	4659      	mov	r1, fp
 800ca48:	220a      	movs	r2, #10
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f000 fdda 	bl	800d604 <__multadd>
 800ca50:	9b08      	ldr	r3, [sp, #32]
 800ca52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca56:	4683      	mov	fp, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 818f 	beq.w	800cd7c <_dtoa_r+0xb94>
 800ca5e:	4639      	mov	r1, r7
 800ca60:	2300      	movs	r3, #0
 800ca62:	220a      	movs	r2, #10
 800ca64:	4620      	mov	r0, r4
 800ca66:	f000 fdcd 	bl	800d604 <__multadd>
 800ca6a:	f1b9 0f00 	cmp.w	r9, #0
 800ca6e:	4607      	mov	r7, r0
 800ca70:	f300 808e 	bgt.w	800cb90 <_dtoa_r+0x9a8>
 800ca74:	9b05      	ldr	r3, [sp, #20]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	dc50      	bgt.n	800cb1c <_dtoa_r+0x934>
 800ca7a:	e089      	b.n	800cb90 <_dtoa_r+0x9a8>
 800ca7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca82:	e75d      	b.n	800c940 <_dtoa_r+0x758>
 800ca84:	9b01      	ldr	r3, [sp, #4]
 800ca86:	1e5e      	subs	r6, r3, #1
 800ca88:	9b06      	ldr	r3, [sp, #24]
 800ca8a:	42b3      	cmp	r3, r6
 800ca8c:	bfbf      	itttt	lt
 800ca8e:	9b06      	ldrlt	r3, [sp, #24]
 800ca90:	9606      	strlt	r6, [sp, #24]
 800ca92:	1af2      	sublt	r2, r6, r3
 800ca94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ca96:	bfb6      	itet	lt
 800ca98:	189b      	addlt	r3, r3, r2
 800ca9a:	1b9e      	subge	r6, r3, r6
 800ca9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ca9e:	9b01      	ldr	r3, [sp, #4]
 800caa0:	bfb8      	it	lt
 800caa2:	2600      	movlt	r6, #0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	bfb5      	itete	lt
 800caa8:	eba8 0503 	sublt.w	r5, r8, r3
 800caac:	9b01      	ldrge	r3, [sp, #4]
 800caae:	2300      	movlt	r3, #0
 800cab0:	4645      	movge	r5, r8
 800cab2:	e747      	b.n	800c944 <_dtoa_r+0x75c>
 800cab4:	9e06      	ldr	r6, [sp, #24]
 800cab6:	9f08      	ldr	r7, [sp, #32]
 800cab8:	4645      	mov	r5, r8
 800caba:	e74c      	b.n	800c956 <_dtoa_r+0x76e>
 800cabc:	9a06      	ldr	r2, [sp, #24]
 800cabe:	e775      	b.n	800c9ac <_dtoa_r+0x7c4>
 800cac0:	9b05      	ldr	r3, [sp, #20]
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	dc18      	bgt.n	800caf8 <_dtoa_r+0x910>
 800cac6:	9b02      	ldr	r3, [sp, #8]
 800cac8:	b9b3      	cbnz	r3, 800caf8 <_dtoa_r+0x910>
 800caca:	9b03      	ldr	r3, [sp, #12]
 800cacc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cad0:	b9a3      	cbnz	r3, 800cafc <_dtoa_r+0x914>
 800cad2:	9b03      	ldr	r3, [sp, #12]
 800cad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cad8:	0d1b      	lsrs	r3, r3, #20
 800cada:	051b      	lsls	r3, r3, #20
 800cadc:	b12b      	cbz	r3, 800caea <_dtoa_r+0x902>
 800cade:	9b04      	ldr	r3, [sp, #16]
 800cae0:	3301      	adds	r3, #1
 800cae2:	9304      	str	r3, [sp, #16]
 800cae4:	f108 0801 	add.w	r8, r8, #1
 800cae8:	2301      	movs	r3, #1
 800caea:	9306      	str	r3, [sp, #24]
 800caec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f47f af74 	bne.w	800c9dc <_dtoa_r+0x7f4>
 800caf4:	2001      	movs	r0, #1
 800caf6:	e779      	b.n	800c9ec <_dtoa_r+0x804>
 800caf8:	2300      	movs	r3, #0
 800cafa:	e7f6      	b.n	800caea <_dtoa_r+0x902>
 800cafc:	9b02      	ldr	r3, [sp, #8]
 800cafe:	e7f4      	b.n	800caea <_dtoa_r+0x902>
 800cb00:	d085      	beq.n	800ca0e <_dtoa_r+0x826>
 800cb02:	4618      	mov	r0, r3
 800cb04:	301c      	adds	r0, #28
 800cb06:	e77d      	b.n	800ca04 <_dtoa_r+0x81c>
 800cb08:	40240000 	.word	0x40240000
 800cb0c:	9b01      	ldr	r3, [sp, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	dc38      	bgt.n	800cb84 <_dtoa_r+0x99c>
 800cb12:	9b05      	ldr	r3, [sp, #20]
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	dd35      	ble.n	800cb84 <_dtoa_r+0x99c>
 800cb18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cb1c:	f1b9 0f00 	cmp.w	r9, #0
 800cb20:	d10d      	bne.n	800cb3e <_dtoa_r+0x956>
 800cb22:	4631      	mov	r1, r6
 800cb24:	464b      	mov	r3, r9
 800cb26:	2205      	movs	r2, #5
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f000 fd6b 	bl	800d604 <__multadd>
 800cb2e:	4601      	mov	r1, r0
 800cb30:	4606      	mov	r6, r0
 800cb32:	4658      	mov	r0, fp
 800cb34:	f000 ffcc 	bl	800dad0 <__mcmp>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	f73f adbd 	bgt.w	800c6b8 <_dtoa_r+0x4d0>
 800cb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb40:	9d00      	ldr	r5, [sp, #0]
 800cb42:	ea6f 0a03 	mvn.w	sl, r3
 800cb46:	f04f 0800 	mov.w	r8, #0
 800cb4a:	4631      	mov	r1, r6
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f000 fd37 	bl	800d5c0 <_Bfree>
 800cb52:	2f00      	cmp	r7, #0
 800cb54:	f43f aeb4 	beq.w	800c8c0 <_dtoa_r+0x6d8>
 800cb58:	f1b8 0f00 	cmp.w	r8, #0
 800cb5c:	d005      	beq.n	800cb6a <_dtoa_r+0x982>
 800cb5e:	45b8      	cmp	r8, r7
 800cb60:	d003      	beq.n	800cb6a <_dtoa_r+0x982>
 800cb62:	4641      	mov	r1, r8
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 fd2b 	bl	800d5c0 <_Bfree>
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f000 fd27 	bl	800d5c0 <_Bfree>
 800cb72:	e6a5      	b.n	800c8c0 <_dtoa_r+0x6d8>
 800cb74:	2600      	movs	r6, #0
 800cb76:	4637      	mov	r7, r6
 800cb78:	e7e1      	b.n	800cb3e <_dtoa_r+0x956>
 800cb7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cb7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cb80:	4637      	mov	r7, r6
 800cb82:	e599      	b.n	800c6b8 <_dtoa_r+0x4d0>
 800cb84:	9b08      	ldr	r3, [sp, #32]
 800cb86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f000 80fd 	beq.w	800cd8a <_dtoa_r+0xba2>
 800cb90:	2d00      	cmp	r5, #0
 800cb92:	dd05      	ble.n	800cba0 <_dtoa_r+0x9b8>
 800cb94:	4639      	mov	r1, r7
 800cb96:	462a      	mov	r2, r5
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f000 ff2d 	bl	800d9f8 <__lshift>
 800cb9e:	4607      	mov	r7, r0
 800cba0:	9b06      	ldr	r3, [sp, #24]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d05c      	beq.n	800cc60 <_dtoa_r+0xa78>
 800cba6:	6879      	ldr	r1, [r7, #4]
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f000 fcc9 	bl	800d540 <_Balloc>
 800cbae:	4605      	mov	r5, r0
 800cbb0:	b928      	cbnz	r0, 800cbbe <_dtoa_r+0x9d6>
 800cbb2:	4b80      	ldr	r3, [pc, #512]	; (800cdb4 <_dtoa_r+0xbcc>)
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cbba:	f7ff bb2e 	b.w	800c21a <_dtoa_r+0x32>
 800cbbe:	693a      	ldr	r2, [r7, #16]
 800cbc0:	3202      	adds	r2, #2
 800cbc2:	0092      	lsls	r2, r2, #2
 800cbc4:	f107 010c 	add.w	r1, r7, #12
 800cbc8:	300c      	adds	r0, #12
 800cbca:	f000 fcab 	bl	800d524 <memcpy>
 800cbce:	2201      	movs	r2, #1
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f000 ff10 	bl	800d9f8 <__lshift>
 800cbd8:	9b00      	ldr	r3, [sp, #0]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	9301      	str	r3, [sp, #4]
 800cbde:	9b00      	ldr	r3, [sp, #0]
 800cbe0:	444b      	add	r3, r9
 800cbe2:	9307      	str	r3, [sp, #28]
 800cbe4:	9b02      	ldr	r3, [sp, #8]
 800cbe6:	f003 0301 	and.w	r3, r3, #1
 800cbea:	46b8      	mov	r8, r7
 800cbec:	9306      	str	r3, [sp, #24]
 800cbee:	4607      	mov	r7, r0
 800cbf0:	9b01      	ldr	r3, [sp, #4]
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	4658      	mov	r0, fp
 800cbf8:	9302      	str	r3, [sp, #8]
 800cbfa:	f7ff fa69 	bl	800c0d0 <quorem>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	3330      	adds	r3, #48	; 0x30
 800cc02:	9004      	str	r0, [sp, #16]
 800cc04:	4641      	mov	r1, r8
 800cc06:	4658      	mov	r0, fp
 800cc08:	9308      	str	r3, [sp, #32]
 800cc0a:	f000 ff61 	bl	800dad0 <__mcmp>
 800cc0e:	463a      	mov	r2, r7
 800cc10:	4681      	mov	r9, r0
 800cc12:	4631      	mov	r1, r6
 800cc14:	4620      	mov	r0, r4
 800cc16:	f000 ff77 	bl	800db08 <__mdiff>
 800cc1a:	68c2      	ldr	r2, [r0, #12]
 800cc1c:	9b08      	ldr	r3, [sp, #32]
 800cc1e:	4605      	mov	r5, r0
 800cc20:	bb02      	cbnz	r2, 800cc64 <_dtoa_r+0xa7c>
 800cc22:	4601      	mov	r1, r0
 800cc24:	4658      	mov	r0, fp
 800cc26:	f000 ff53 	bl	800dad0 <__mcmp>
 800cc2a:	9b08      	ldr	r3, [sp, #32]
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	4629      	mov	r1, r5
 800cc30:	4620      	mov	r0, r4
 800cc32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cc36:	f000 fcc3 	bl	800d5c0 <_Bfree>
 800cc3a:	9b05      	ldr	r3, [sp, #20]
 800cc3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc3e:	9d01      	ldr	r5, [sp, #4]
 800cc40:	ea43 0102 	orr.w	r1, r3, r2
 800cc44:	9b06      	ldr	r3, [sp, #24]
 800cc46:	430b      	orrs	r3, r1
 800cc48:	9b08      	ldr	r3, [sp, #32]
 800cc4a:	d10d      	bne.n	800cc68 <_dtoa_r+0xa80>
 800cc4c:	2b39      	cmp	r3, #57	; 0x39
 800cc4e:	d029      	beq.n	800cca4 <_dtoa_r+0xabc>
 800cc50:	f1b9 0f00 	cmp.w	r9, #0
 800cc54:	dd01      	ble.n	800cc5a <_dtoa_r+0xa72>
 800cc56:	9b04      	ldr	r3, [sp, #16]
 800cc58:	3331      	adds	r3, #49	; 0x31
 800cc5a:	9a02      	ldr	r2, [sp, #8]
 800cc5c:	7013      	strb	r3, [r2, #0]
 800cc5e:	e774      	b.n	800cb4a <_dtoa_r+0x962>
 800cc60:	4638      	mov	r0, r7
 800cc62:	e7b9      	b.n	800cbd8 <_dtoa_r+0x9f0>
 800cc64:	2201      	movs	r2, #1
 800cc66:	e7e2      	b.n	800cc2e <_dtoa_r+0xa46>
 800cc68:	f1b9 0f00 	cmp.w	r9, #0
 800cc6c:	db06      	blt.n	800cc7c <_dtoa_r+0xa94>
 800cc6e:	9905      	ldr	r1, [sp, #20]
 800cc70:	ea41 0909 	orr.w	r9, r1, r9
 800cc74:	9906      	ldr	r1, [sp, #24]
 800cc76:	ea59 0101 	orrs.w	r1, r9, r1
 800cc7a:	d120      	bne.n	800ccbe <_dtoa_r+0xad6>
 800cc7c:	2a00      	cmp	r2, #0
 800cc7e:	ddec      	ble.n	800cc5a <_dtoa_r+0xa72>
 800cc80:	4659      	mov	r1, fp
 800cc82:	2201      	movs	r2, #1
 800cc84:	4620      	mov	r0, r4
 800cc86:	9301      	str	r3, [sp, #4]
 800cc88:	f000 feb6 	bl	800d9f8 <__lshift>
 800cc8c:	4631      	mov	r1, r6
 800cc8e:	4683      	mov	fp, r0
 800cc90:	f000 ff1e 	bl	800dad0 <__mcmp>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	9b01      	ldr	r3, [sp, #4]
 800cc98:	dc02      	bgt.n	800cca0 <_dtoa_r+0xab8>
 800cc9a:	d1de      	bne.n	800cc5a <_dtoa_r+0xa72>
 800cc9c:	07da      	lsls	r2, r3, #31
 800cc9e:	d5dc      	bpl.n	800cc5a <_dtoa_r+0xa72>
 800cca0:	2b39      	cmp	r3, #57	; 0x39
 800cca2:	d1d8      	bne.n	800cc56 <_dtoa_r+0xa6e>
 800cca4:	9a02      	ldr	r2, [sp, #8]
 800cca6:	2339      	movs	r3, #57	; 0x39
 800cca8:	7013      	strb	r3, [r2, #0]
 800ccaa:	462b      	mov	r3, r5
 800ccac:	461d      	mov	r5, r3
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ccb4:	2a39      	cmp	r2, #57	; 0x39
 800ccb6:	d050      	beq.n	800cd5a <_dtoa_r+0xb72>
 800ccb8:	3201      	adds	r2, #1
 800ccba:	701a      	strb	r2, [r3, #0]
 800ccbc:	e745      	b.n	800cb4a <_dtoa_r+0x962>
 800ccbe:	2a00      	cmp	r2, #0
 800ccc0:	dd03      	ble.n	800ccca <_dtoa_r+0xae2>
 800ccc2:	2b39      	cmp	r3, #57	; 0x39
 800ccc4:	d0ee      	beq.n	800cca4 <_dtoa_r+0xabc>
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	e7c7      	b.n	800cc5a <_dtoa_r+0xa72>
 800ccca:	9a01      	ldr	r2, [sp, #4]
 800cccc:	9907      	ldr	r1, [sp, #28]
 800ccce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ccd2:	428a      	cmp	r2, r1
 800ccd4:	d02a      	beq.n	800cd2c <_dtoa_r+0xb44>
 800ccd6:	4659      	mov	r1, fp
 800ccd8:	2300      	movs	r3, #0
 800ccda:	220a      	movs	r2, #10
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f000 fc91 	bl	800d604 <__multadd>
 800cce2:	45b8      	cmp	r8, r7
 800cce4:	4683      	mov	fp, r0
 800cce6:	f04f 0300 	mov.w	r3, #0
 800ccea:	f04f 020a 	mov.w	r2, #10
 800ccee:	4641      	mov	r1, r8
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	d107      	bne.n	800cd04 <_dtoa_r+0xb1c>
 800ccf4:	f000 fc86 	bl	800d604 <__multadd>
 800ccf8:	4680      	mov	r8, r0
 800ccfa:	4607      	mov	r7, r0
 800ccfc:	9b01      	ldr	r3, [sp, #4]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	9301      	str	r3, [sp, #4]
 800cd02:	e775      	b.n	800cbf0 <_dtoa_r+0xa08>
 800cd04:	f000 fc7e 	bl	800d604 <__multadd>
 800cd08:	4639      	mov	r1, r7
 800cd0a:	4680      	mov	r8, r0
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	220a      	movs	r2, #10
 800cd10:	4620      	mov	r0, r4
 800cd12:	f000 fc77 	bl	800d604 <__multadd>
 800cd16:	4607      	mov	r7, r0
 800cd18:	e7f0      	b.n	800ccfc <_dtoa_r+0xb14>
 800cd1a:	f1b9 0f00 	cmp.w	r9, #0
 800cd1e:	9a00      	ldr	r2, [sp, #0]
 800cd20:	bfcc      	ite	gt
 800cd22:	464d      	movgt	r5, r9
 800cd24:	2501      	movle	r5, #1
 800cd26:	4415      	add	r5, r2
 800cd28:	f04f 0800 	mov.w	r8, #0
 800cd2c:	4659      	mov	r1, fp
 800cd2e:	2201      	movs	r2, #1
 800cd30:	4620      	mov	r0, r4
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	f000 fe60 	bl	800d9f8 <__lshift>
 800cd38:	4631      	mov	r1, r6
 800cd3a:	4683      	mov	fp, r0
 800cd3c:	f000 fec8 	bl	800dad0 <__mcmp>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	dcb2      	bgt.n	800ccaa <_dtoa_r+0xac2>
 800cd44:	d102      	bne.n	800cd4c <_dtoa_r+0xb64>
 800cd46:	9b01      	ldr	r3, [sp, #4]
 800cd48:	07db      	lsls	r3, r3, #31
 800cd4a:	d4ae      	bmi.n	800ccaa <_dtoa_r+0xac2>
 800cd4c:	462b      	mov	r3, r5
 800cd4e:	461d      	mov	r5, r3
 800cd50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd54:	2a30      	cmp	r2, #48	; 0x30
 800cd56:	d0fa      	beq.n	800cd4e <_dtoa_r+0xb66>
 800cd58:	e6f7      	b.n	800cb4a <_dtoa_r+0x962>
 800cd5a:	9a00      	ldr	r2, [sp, #0]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d1a5      	bne.n	800ccac <_dtoa_r+0xac4>
 800cd60:	f10a 0a01 	add.w	sl, sl, #1
 800cd64:	2331      	movs	r3, #49	; 0x31
 800cd66:	e779      	b.n	800cc5c <_dtoa_r+0xa74>
 800cd68:	4b13      	ldr	r3, [pc, #76]	; (800cdb8 <_dtoa_r+0xbd0>)
 800cd6a:	f7ff baaf 	b.w	800c2cc <_dtoa_r+0xe4>
 800cd6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f47f aa86 	bne.w	800c282 <_dtoa_r+0x9a>
 800cd76:	4b11      	ldr	r3, [pc, #68]	; (800cdbc <_dtoa_r+0xbd4>)
 800cd78:	f7ff baa8 	b.w	800c2cc <_dtoa_r+0xe4>
 800cd7c:	f1b9 0f00 	cmp.w	r9, #0
 800cd80:	dc03      	bgt.n	800cd8a <_dtoa_r+0xba2>
 800cd82:	9b05      	ldr	r3, [sp, #20]
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	f73f aec9 	bgt.w	800cb1c <_dtoa_r+0x934>
 800cd8a:	9d00      	ldr	r5, [sp, #0]
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4658      	mov	r0, fp
 800cd90:	f7ff f99e 	bl	800c0d0 <quorem>
 800cd94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cd98:	f805 3b01 	strb.w	r3, [r5], #1
 800cd9c:	9a00      	ldr	r2, [sp, #0]
 800cd9e:	1aaa      	subs	r2, r5, r2
 800cda0:	4591      	cmp	r9, r2
 800cda2:	ddba      	ble.n	800cd1a <_dtoa_r+0xb32>
 800cda4:	4659      	mov	r1, fp
 800cda6:	2300      	movs	r3, #0
 800cda8:	220a      	movs	r2, #10
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f000 fc2a 	bl	800d604 <__multadd>
 800cdb0:	4683      	mov	fp, r0
 800cdb2:	e7eb      	b.n	800cd8c <_dtoa_r+0xba4>
 800cdb4:	0800fbe1 	.word	0x0800fbe1
 800cdb8:	0800fde1 	.word	0x0800fde1
 800cdbc:	0800fb75 	.word	0x0800fb75

0800cdc0 <fiprintf>:
 800cdc0:	b40e      	push	{r1, r2, r3}
 800cdc2:	b503      	push	{r0, r1, lr}
 800cdc4:	4601      	mov	r1, r0
 800cdc6:	ab03      	add	r3, sp, #12
 800cdc8:	4805      	ldr	r0, [pc, #20]	; (800cde0 <fiprintf+0x20>)
 800cdca:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdce:	6800      	ldr	r0, [r0, #0]
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	f001 fc81 	bl	800e6d8 <_vfiprintf_r>
 800cdd6:	b002      	add	sp, #8
 800cdd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cddc:	b003      	add	sp, #12
 800cdde:	4770      	bx	lr
 800cde0:	20000078 	.word	0x20000078

0800cde4 <rshift>:
 800cde4:	6903      	ldr	r3, [r0, #16]
 800cde6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cdea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cdf2:	f100 0414 	add.w	r4, r0, #20
 800cdf6:	dd45      	ble.n	800ce84 <rshift+0xa0>
 800cdf8:	f011 011f 	ands.w	r1, r1, #31
 800cdfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce04:	d10c      	bne.n	800ce20 <rshift+0x3c>
 800ce06:	f100 0710 	add.w	r7, r0, #16
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	42b1      	cmp	r1, r6
 800ce0e:	d334      	bcc.n	800ce7a <rshift+0x96>
 800ce10:	1a9b      	subs	r3, r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	1eea      	subs	r2, r5, #3
 800ce16:	4296      	cmp	r6, r2
 800ce18:	bf38      	it	cc
 800ce1a:	2300      	movcc	r3, #0
 800ce1c:	4423      	add	r3, r4
 800ce1e:	e015      	b.n	800ce4c <rshift+0x68>
 800ce20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce24:	f1c1 0820 	rsb	r8, r1, #32
 800ce28:	40cf      	lsrs	r7, r1
 800ce2a:	f105 0e04 	add.w	lr, r5, #4
 800ce2e:	46a1      	mov	r9, r4
 800ce30:	4576      	cmp	r6, lr
 800ce32:	46f4      	mov	ip, lr
 800ce34:	d815      	bhi.n	800ce62 <rshift+0x7e>
 800ce36:	1a9b      	subs	r3, r3, r2
 800ce38:	009a      	lsls	r2, r3, #2
 800ce3a:	3a04      	subs	r2, #4
 800ce3c:	3501      	adds	r5, #1
 800ce3e:	42ae      	cmp	r6, r5
 800ce40:	bf38      	it	cc
 800ce42:	2200      	movcc	r2, #0
 800ce44:	18a3      	adds	r3, r4, r2
 800ce46:	50a7      	str	r7, [r4, r2]
 800ce48:	b107      	cbz	r7, 800ce4c <rshift+0x68>
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	1b1a      	subs	r2, r3, r4
 800ce4e:	42a3      	cmp	r3, r4
 800ce50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce54:	bf08      	it	eq
 800ce56:	2300      	moveq	r3, #0
 800ce58:	6102      	str	r2, [r0, #16]
 800ce5a:	bf08      	it	eq
 800ce5c:	6143      	streq	r3, [r0, #20]
 800ce5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce62:	f8dc c000 	ldr.w	ip, [ip]
 800ce66:	fa0c fc08 	lsl.w	ip, ip, r8
 800ce6a:	ea4c 0707 	orr.w	r7, ip, r7
 800ce6e:	f849 7b04 	str.w	r7, [r9], #4
 800ce72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce76:	40cf      	lsrs	r7, r1
 800ce78:	e7da      	b.n	800ce30 <rshift+0x4c>
 800ce7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce82:	e7c3      	b.n	800ce0c <rshift+0x28>
 800ce84:	4623      	mov	r3, r4
 800ce86:	e7e1      	b.n	800ce4c <rshift+0x68>

0800ce88 <__hexdig_fun>:
 800ce88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce8c:	2b09      	cmp	r3, #9
 800ce8e:	d802      	bhi.n	800ce96 <__hexdig_fun+0xe>
 800ce90:	3820      	subs	r0, #32
 800ce92:	b2c0      	uxtb	r0, r0
 800ce94:	4770      	bx	lr
 800ce96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce9a:	2b05      	cmp	r3, #5
 800ce9c:	d801      	bhi.n	800cea2 <__hexdig_fun+0x1a>
 800ce9e:	3847      	subs	r0, #71	; 0x47
 800cea0:	e7f7      	b.n	800ce92 <__hexdig_fun+0xa>
 800cea2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cea6:	2b05      	cmp	r3, #5
 800cea8:	d801      	bhi.n	800ceae <__hexdig_fun+0x26>
 800ceaa:	3827      	subs	r0, #39	; 0x27
 800ceac:	e7f1      	b.n	800ce92 <__hexdig_fun+0xa>
 800ceae:	2000      	movs	r0, #0
 800ceb0:	4770      	bx	lr
	...

0800ceb4 <__gethex>:
 800ceb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb8:	ed2d 8b02 	vpush	{d8}
 800cebc:	b089      	sub	sp, #36	; 0x24
 800cebe:	ee08 0a10 	vmov	s16, r0
 800cec2:	9304      	str	r3, [sp, #16]
 800cec4:	4bbc      	ldr	r3, [pc, #752]	; (800d1b8 <__gethex+0x304>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	9301      	str	r3, [sp, #4]
 800ceca:	4618      	mov	r0, r3
 800cecc:	468b      	mov	fp, r1
 800cece:	4690      	mov	r8, r2
 800ced0:	f7f3 f97e 	bl	80001d0 <strlen>
 800ced4:	9b01      	ldr	r3, [sp, #4]
 800ced6:	f8db 2000 	ldr.w	r2, [fp]
 800ceda:	4403      	add	r3, r0
 800cedc:	4682      	mov	sl, r0
 800cede:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cee2:	9305      	str	r3, [sp, #20]
 800cee4:	1c93      	adds	r3, r2, #2
 800cee6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ceea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ceee:	32fe      	adds	r2, #254	; 0xfe
 800cef0:	18d1      	adds	r1, r2, r3
 800cef2:	461f      	mov	r7, r3
 800cef4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cef8:	9100      	str	r1, [sp, #0]
 800cefa:	2830      	cmp	r0, #48	; 0x30
 800cefc:	d0f8      	beq.n	800cef0 <__gethex+0x3c>
 800cefe:	f7ff ffc3 	bl	800ce88 <__hexdig_fun>
 800cf02:	4604      	mov	r4, r0
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d13a      	bne.n	800cf7e <__gethex+0xca>
 800cf08:	9901      	ldr	r1, [sp, #4]
 800cf0a:	4652      	mov	r2, sl
 800cf0c:	4638      	mov	r0, r7
 800cf0e:	f001 fec5 	bl	800ec9c <strncmp>
 800cf12:	4605      	mov	r5, r0
 800cf14:	2800      	cmp	r0, #0
 800cf16:	d168      	bne.n	800cfea <__gethex+0x136>
 800cf18:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cf1c:	eb07 060a 	add.w	r6, r7, sl
 800cf20:	f7ff ffb2 	bl	800ce88 <__hexdig_fun>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	d062      	beq.n	800cfee <__gethex+0x13a>
 800cf28:	4633      	mov	r3, r6
 800cf2a:	7818      	ldrb	r0, [r3, #0]
 800cf2c:	2830      	cmp	r0, #48	; 0x30
 800cf2e:	461f      	mov	r7, r3
 800cf30:	f103 0301 	add.w	r3, r3, #1
 800cf34:	d0f9      	beq.n	800cf2a <__gethex+0x76>
 800cf36:	f7ff ffa7 	bl	800ce88 <__hexdig_fun>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	fab0 f480 	clz	r4, r0
 800cf40:	0964      	lsrs	r4, r4, #5
 800cf42:	4635      	mov	r5, r6
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	463a      	mov	r2, r7
 800cf48:	4616      	mov	r6, r2
 800cf4a:	3201      	adds	r2, #1
 800cf4c:	7830      	ldrb	r0, [r6, #0]
 800cf4e:	f7ff ff9b 	bl	800ce88 <__hexdig_fun>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d1f8      	bne.n	800cf48 <__gethex+0x94>
 800cf56:	9901      	ldr	r1, [sp, #4]
 800cf58:	4652      	mov	r2, sl
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	f001 fe9e 	bl	800ec9c <strncmp>
 800cf60:	b980      	cbnz	r0, 800cf84 <__gethex+0xd0>
 800cf62:	b94d      	cbnz	r5, 800cf78 <__gethex+0xc4>
 800cf64:	eb06 050a 	add.w	r5, r6, sl
 800cf68:	462a      	mov	r2, r5
 800cf6a:	4616      	mov	r6, r2
 800cf6c:	3201      	adds	r2, #1
 800cf6e:	7830      	ldrb	r0, [r6, #0]
 800cf70:	f7ff ff8a 	bl	800ce88 <__hexdig_fun>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d1f8      	bne.n	800cf6a <__gethex+0xb6>
 800cf78:	1bad      	subs	r5, r5, r6
 800cf7a:	00ad      	lsls	r5, r5, #2
 800cf7c:	e004      	b.n	800cf88 <__gethex+0xd4>
 800cf7e:	2400      	movs	r4, #0
 800cf80:	4625      	mov	r5, r4
 800cf82:	e7e0      	b.n	800cf46 <__gethex+0x92>
 800cf84:	2d00      	cmp	r5, #0
 800cf86:	d1f7      	bne.n	800cf78 <__gethex+0xc4>
 800cf88:	7833      	ldrb	r3, [r6, #0]
 800cf8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf8e:	2b50      	cmp	r3, #80	; 0x50
 800cf90:	d13b      	bne.n	800d00a <__gethex+0x156>
 800cf92:	7873      	ldrb	r3, [r6, #1]
 800cf94:	2b2b      	cmp	r3, #43	; 0x2b
 800cf96:	d02c      	beq.n	800cff2 <__gethex+0x13e>
 800cf98:	2b2d      	cmp	r3, #45	; 0x2d
 800cf9a:	d02e      	beq.n	800cffa <__gethex+0x146>
 800cf9c:	1c71      	adds	r1, r6, #1
 800cf9e:	f04f 0900 	mov.w	r9, #0
 800cfa2:	7808      	ldrb	r0, [r1, #0]
 800cfa4:	f7ff ff70 	bl	800ce88 <__hexdig_fun>
 800cfa8:	1e43      	subs	r3, r0, #1
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	2b18      	cmp	r3, #24
 800cfae:	d82c      	bhi.n	800d00a <__gethex+0x156>
 800cfb0:	f1a0 0210 	sub.w	r2, r0, #16
 800cfb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cfb8:	f7ff ff66 	bl	800ce88 <__hexdig_fun>
 800cfbc:	1e43      	subs	r3, r0, #1
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	2b18      	cmp	r3, #24
 800cfc2:	d91d      	bls.n	800d000 <__gethex+0x14c>
 800cfc4:	f1b9 0f00 	cmp.w	r9, #0
 800cfc8:	d000      	beq.n	800cfcc <__gethex+0x118>
 800cfca:	4252      	negs	r2, r2
 800cfcc:	4415      	add	r5, r2
 800cfce:	f8cb 1000 	str.w	r1, [fp]
 800cfd2:	b1e4      	cbz	r4, 800d00e <__gethex+0x15a>
 800cfd4:	9b00      	ldr	r3, [sp, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	bf14      	ite	ne
 800cfda:	2700      	movne	r7, #0
 800cfdc:	2706      	moveq	r7, #6
 800cfde:	4638      	mov	r0, r7
 800cfe0:	b009      	add	sp, #36	; 0x24
 800cfe2:	ecbd 8b02 	vpop	{d8}
 800cfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfea:	463e      	mov	r6, r7
 800cfec:	4625      	mov	r5, r4
 800cfee:	2401      	movs	r4, #1
 800cff0:	e7ca      	b.n	800cf88 <__gethex+0xd4>
 800cff2:	f04f 0900 	mov.w	r9, #0
 800cff6:	1cb1      	adds	r1, r6, #2
 800cff8:	e7d3      	b.n	800cfa2 <__gethex+0xee>
 800cffa:	f04f 0901 	mov.w	r9, #1
 800cffe:	e7fa      	b.n	800cff6 <__gethex+0x142>
 800d000:	230a      	movs	r3, #10
 800d002:	fb03 0202 	mla	r2, r3, r2, r0
 800d006:	3a10      	subs	r2, #16
 800d008:	e7d4      	b.n	800cfb4 <__gethex+0x100>
 800d00a:	4631      	mov	r1, r6
 800d00c:	e7df      	b.n	800cfce <__gethex+0x11a>
 800d00e:	1bf3      	subs	r3, r6, r7
 800d010:	3b01      	subs	r3, #1
 800d012:	4621      	mov	r1, r4
 800d014:	2b07      	cmp	r3, #7
 800d016:	dc0b      	bgt.n	800d030 <__gethex+0x17c>
 800d018:	ee18 0a10 	vmov	r0, s16
 800d01c:	f000 fa90 	bl	800d540 <_Balloc>
 800d020:	4604      	mov	r4, r0
 800d022:	b940      	cbnz	r0, 800d036 <__gethex+0x182>
 800d024:	4b65      	ldr	r3, [pc, #404]	; (800d1bc <__gethex+0x308>)
 800d026:	4602      	mov	r2, r0
 800d028:	21de      	movs	r1, #222	; 0xde
 800d02a:	4865      	ldr	r0, [pc, #404]	; (800d1c0 <__gethex+0x30c>)
 800d02c:	f7ff f822 	bl	800c074 <__assert_func>
 800d030:	3101      	adds	r1, #1
 800d032:	105b      	asrs	r3, r3, #1
 800d034:	e7ee      	b.n	800d014 <__gethex+0x160>
 800d036:	f100 0914 	add.w	r9, r0, #20
 800d03a:	f04f 0b00 	mov.w	fp, #0
 800d03e:	f1ca 0301 	rsb	r3, sl, #1
 800d042:	f8cd 9008 	str.w	r9, [sp, #8]
 800d046:	f8cd b000 	str.w	fp, [sp]
 800d04a:	9306      	str	r3, [sp, #24]
 800d04c:	42b7      	cmp	r7, r6
 800d04e:	d340      	bcc.n	800d0d2 <__gethex+0x21e>
 800d050:	9802      	ldr	r0, [sp, #8]
 800d052:	9b00      	ldr	r3, [sp, #0]
 800d054:	f840 3b04 	str.w	r3, [r0], #4
 800d058:	eba0 0009 	sub.w	r0, r0, r9
 800d05c:	1080      	asrs	r0, r0, #2
 800d05e:	0146      	lsls	r6, r0, #5
 800d060:	6120      	str	r0, [r4, #16]
 800d062:	4618      	mov	r0, r3
 800d064:	f000 fb62 	bl	800d72c <__hi0bits>
 800d068:	1a30      	subs	r0, r6, r0
 800d06a:	f8d8 6000 	ldr.w	r6, [r8]
 800d06e:	42b0      	cmp	r0, r6
 800d070:	dd63      	ble.n	800d13a <__gethex+0x286>
 800d072:	1b87      	subs	r7, r0, r6
 800d074:	4639      	mov	r1, r7
 800d076:	4620      	mov	r0, r4
 800d078:	f000 fefc 	bl	800de74 <__any_on>
 800d07c:	4682      	mov	sl, r0
 800d07e:	b1a8      	cbz	r0, 800d0ac <__gethex+0x1f8>
 800d080:	1e7b      	subs	r3, r7, #1
 800d082:	1159      	asrs	r1, r3, #5
 800d084:	f003 021f 	and.w	r2, r3, #31
 800d088:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d08c:	f04f 0a01 	mov.w	sl, #1
 800d090:	fa0a f202 	lsl.w	r2, sl, r2
 800d094:	420a      	tst	r2, r1
 800d096:	d009      	beq.n	800d0ac <__gethex+0x1f8>
 800d098:	4553      	cmp	r3, sl
 800d09a:	dd05      	ble.n	800d0a8 <__gethex+0x1f4>
 800d09c:	1eb9      	subs	r1, r7, #2
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f000 fee8 	bl	800de74 <__any_on>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d145      	bne.n	800d134 <__gethex+0x280>
 800d0a8:	f04f 0a02 	mov.w	sl, #2
 800d0ac:	4639      	mov	r1, r7
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f7ff fe98 	bl	800cde4 <rshift>
 800d0b4:	443d      	add	r5, r7
 800d0b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0ba:	42ab      	cmp	r3, r5
 800d0bc:	da4c      	bge.n	800d158 <__gethex+0x2a4>
 800d0be:	ee18 0a10 	vmov	r0, s16
 800d0c2:	4621      	mov	r1, r4
 800d0c4:	f000 fa7c 	bl	800d5c0 <_Bfree>
 800d0c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	6013      	str	r3, [r2, #0]
 800d0ce:	27a3      	movs	r7, #163	; 0xa3
 800d0d0:	e785      	b.n	800cfde <__gethex+0x12a>
 800d0d2:	1e73      	subs	r3, r6, #1
 800d0d4:	9a05      	ldr	r2, [sp, #20]
 800d0d6:	9303      	str	r3, [sp, #12]
 800d0d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d019      	beq.n	800d114 <__gethex+0x260>
 800d0e0:	f1bb 0f20 	cmp.w	fp, #32
 800d0e4:	d107      	bne.n	800d0f6 <__gethex+0x242>
 800d0e6:	9b02      	ldr	r3, [sp, #8]
 800d0e8:	9a00      	ldr	r2, [sp, #0]
 800d0ea:	f843 2b04 	str.w	r2, [r3], #4
 800d0ee:	9302      	str	r3, [sp, #8]
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	469b      	mov	fp, r3
 800d0f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d0fa:	f7ff fec5 	bl	800ce88 <__hexdig_fun>
 800d0fe:	9b00      	ldr	r3, [sp, #0]
 800d100:	f000 000f 	and.w	r0, r0, #15
 800d104:	fa00 f00b 	lsl.w	r0, r0, fp
 800d108:	4303      	orrs	r3, r0
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	f10b 0b04 	add.w	fp, fp, #4
 800d110:	9b03      	ldr	r3, [sp, #12]
 800d112:	e00d      	b.n	800d130 <__gethex+0x27c>
 800d114:	9b03      	ldr	r3, [sp, #12]
 800d116:	9a06      	ldr	r2, [sp, #24]
 800d118:	4413      	add	r3, r2
 800d11a:	42bb      	cmp	r3, r7
 800d11c:	d3e0      	bcc.n	800d0e0 <__gethex+0x22c>
 800d11e:	4618      	mov	r0, r3
 800d120:	9901      	ldr	r1, [sp, #4]
 800d122:	9307      	str	r3, [sp, #28]
 800d124:	4652      	mov	r2, sl
 800d126:	f001 fdb9 	bl	800ec9c <strncmp>
 800d12a:	9b07      	ldr	r3, [sp, #28]
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d1d7      	bne.n	800d0e0 <__gethex+0x22c>
 800d130:	461e      	mov	r6, r3
 800d132:	e78b      	b.n	800d04c <__gethex+0x198>
 800d134:	f04f 0a03 	mov.w	sl, #3
 800d138:	e7b8      	b.n	800d0ac <__gethex+0x1f8>
 800d13a:	da0a      	bge.n	800d152 <__gethex+0x29e>
 800d13c:	1a37      	subs	r7, r6, r0
 800d13e:	4621      	mov	r1, r4
 800d140:	ee18 0a10 	vmov	r0, s16
 800d144:	463a      	mov	r2, r7
 800d146:	f000 fc57 	bl	800d9f8 <__lshift>
 800d14a:	1bed      	subs	r5, r5, r7
 800d14c:	4604      	mov	r4, r0
 800d14e:	f100 0914 	add.w	r9, r0, #20
 800d152:	f04f 0a00 	mov.w	sl, #0
 800d156:	e7ae      	b.n	800d0b6 <__gethex+0x202>
 800d158:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d15c:	42a8      	cmp	r0, r5
 800d15e:	dd72      	ble.n	800d246 <__gethex+0x392>
 800d160:	1b45      	subs	r5, r0, r5
 800d162:	42ae      	cmp	r6, r5
 800d164:	dc36      	bgt.n	800d1d4 <__gethex+0x320>
 800d166:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d16a:	2b02      	cmp	r3, #2
 800d16c:	d02a      	beq.n	800d1c4 <__gethex+0x310>
 800d16e:	2b03      	cmp	r3, #3
 800d170:	d02c      	beq.n	800d1cc <__gethex+0x318>
 800d172:	2b01      	cmp	r3, #1
 800d174:	d115      	bne.n	800d1a2 <__gethex+0x2ee>
 800d176:	42ae      	cmp	r6, r5
 800d178:	d113      	bne.n	800d1a2 <__gethex+0x2ee>
 800d17a:	2e01      	cmp	r6, #1
 800d17c:	d10b      	bne.n	800d196 <__gethex+0x2e2>
 800d17e:	9a04      	ldr	r2, [sp, #16]
 800d180:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d184:	6013      	str	r3, [r2, #0]
 800d186:	2301      	movs	r3, #1
 800d188:	6123      	str	r3, [r4, #16]
 800d18a:	f8c9 3000 	str.w	r3, [r9]
 800d18e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d190:	2762      	movs	r7, #98	; 0x62
 800d192:	601c      	str	r4, [r3, #0]
 800d194:	e723      	b.n	800cfde <__gethex+0x12a>
 800d196:	1e71      	subs	r1, r6, #1
 800d198:	4620      	mov	r0, r4
 800d19a:	f000 fe6b 	bl	800de74 <__any_on>
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d1ed      	bne.n	800d17e <__gethex+0x2ca>
 800d1a2:	ee18 0a10 	vmov	r0, s16
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	f000 fa0a 	bl	800d5c0 <_Bfree>
 800d1ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	6013      	str	r3, [r2, #0]
 800d1b2:	2750      	movs	r7, #80	; 0x50
 800d1b4:	e713      	b.n	800cfde <__gethex+0x12a>
 800d1b6:	bf00      	nop
 800d1b8:	0800fc5c 	.word	0x0800fc5c
 800d1bc:	0800fbe1 	.word	0x0800fbe1
 800d1c0:	0800fbf2 	.word	0x0800fbf2
 800d1c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1eb      	bne.n	800d1a2 <__gethex+0x2ee>
 800d1ca:	e7d8      	b.n	800d17e <__gethex+0x2ca>
 800d1cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1d5      	bne.n	800d17e <__gethex+0x2ca>
 800d1d2:	e7e6      	b.n	800d1a2 <__gethex+0x2ee>
 800d1d4:	1e6f      	subs	r7, r5, #1
 800d1d6:	f1ba 0f00 	cmp.w	sl, #0
 800d1da:	d131      	bne.n	800d240 <__gethex+0x38c>
 800d1dc:	b127      	cbz	r7, 800d1e8 <__gethex+0x334>
 800d1de:	4639      	mov	r1, r7
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	f000 fe47 	bl	800de74 <__any_on>
 800d1e6:	4682      	mov	sl, r0
 800d1e8:	117b      	asrs	r3, r7, #5
 800d1ea:	2101      	movs	r1, #1
 800d1ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d1f0:	f007 071f 	and.w	r7, r7, #31
 800d1f4:	fa01 f707 	lsl.w	r7, r1, r7
 800d1f8:	421f      	tst	r7, r3
 800d1fa:	4629      	mov	r1, r5
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	bf18      	it	ne
 800d200:	f04a 0a02 	orrne.w	sl, sl, #2
 800d204:	1b76      	subs	r6, r6, r5
 800d206:	f7ff fded 	bl	800cde4 <rshift>
 800d20a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d20e:	2702      	movs	r7, #2
 800d210:	f1ba 0f00 	cmp.w	sl, #0
 800d214:	d048      	beq.n	800d2a8 <__gethex+0x3f4>
 800d216:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d015      	beq.n	800d24a <__gethex+0x396>
 800d21e:	2b03      	cmp	r3, #3
 800d220:	d017      	beq.n	800d252 <__gethex+0x39e>
 800d222:	2b01      	cmp	r3, #1
 800d224:	d109      	bne.n	800d23a <__gethex+0x386>
 800d226:	f01a 0f02 	tst.w	sl, #2
 800d22a:	d006      	beq.n	800d23a <__gethex+0x386>
 800d22c:	f8d9 0000 	ldr.w	r0, [r9]
 800d230:	ea4a 0a00 	orr.w	sl, sl, r0
 800d234:	f01a 0f01 	tst.w	sl, #1
 800d238:	d10e      	bne.n	800d258 <__gethex+0x3a4>
 800d23a:	f047 0710 	orr.w	r7, r7, #16
 800d23e:	e033      	b.n	800d2a8 <__gethex+0x3f4>
 800d240:	f04f 0a01 	mov.w	sl, #1
 800d244:	e7d0      	b.n	800d1e8 <__gethex+0x334>
 800d246:	2701      	movs	r7, #1
 800d248:	e7e2      	b.n	800d210 <__gethex+0x35c>
 800d24a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d24c:	f1c3 0301 	rsb	r3, r3, #1
 800d250:	9315      	str	r3, [sp, #84]	; 0x54
 800d252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d254:	2b00      	cmp	r3, #0
 800d256:	d0f0      	beq.n	800d23a <__gethex+0x386>
 800d258:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d25c:	f104 0314 	add.w	r3, r4, #20
 800d260:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d264:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d268:	f04f 0c00 	mov.w	ip, #0
 800d26c:	4618      	mov	r0, r3
 800d26e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d272:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d276:	d01c      	beq.n	800d2b2 <__gethex+0x3fe>
 800d278:	3201      	adds	r2, #1
 800d27a:	6002      	str	r2, [r0, #0]
 800d27c:	2f02      	cmp	r7, #2
 800d27e:	f104 0314 	add.w	r3, r4, #20
 800d282:	d13f      	bne.n	800d304 <__gethex+0x450>
 800d284:	f8d8 2000 	ldr.w	r2, [r8]
 800d288:	3a01      	subs	r2, #1
 800d28a:	42b2      	cmp	r2, r6
 800d28c:	d10a      	bne.n	800d2a4 <__gethex+0x3f0>
 800d28e:	1171      	asrs	r1, r6, #5
 800d290:	2201      	movs	r2, #1
 800d292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d296:	f006 061f 	and.w	r6, r6, #31
 800d29a:	fa02 f606 	lsl.w	r6, r2, r6
 800d29e:	421e      	tst	r6, r3
 800d2a0:	bf18      	it	ne
 800d2a2:	4617      	movne	r7, r2
 800d2a4:	f047 0720 	orr.w	r7, r7, #32
 800d2a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2aa:	601c      	str	r4, [r3, #0]
 800d2ac:	9b04      	ldr	r3, [sp, #16]
 800d2ae:	601d      	str	r5, [r3, #0]
 800d2b0:	e695      	b.n	800cfde <__gethex+0x12a>
 800d2b2:	4299      	cmp	r1, r3
 800d2b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d2b8:	d8d8      	bhi.n	800d26c <__gethex+0x3b8>
 800d2ba:	68a3      	ldr	r3, [r4, #8]
 800d2bc:	459b      	cmp	fp, r3
 800d2be:	db19      	blt.n	800d2f4 <__gethex+0x440>
 800d2c0:	6861      	ldr	r1, [r4, #4]
 800d2c2:	ee18 0a10 	vmov	r0, s16
 800d2c6:	3101      	adds	r1, #1
 800d2c8:	f000 f93a 	bl	800d540 <_Balloc>
 800d2cc:	4681      	mov	r9, r0
 800d2ce:	b918      	cbnz	r0, 800d2d8 <__gethex+0x424>
 800d2d0:	4b1a      	ldr	r3, [pc, #104]	; (800d33c <__gethex+0x488>)
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	2184      	movs	r1, #132	; 0x84
 800d2d6:	e6a8      	b.n	800d02a <__gethex+0x176>
 800d2d8:	6922      	ldr	r2, [r4, #16]
 800d2da:	3202      	adds	r2, #2
 800d2dc:	f104 010c 	add.w	r1, r4, #12
 800d2e0:	0092      	lsls	r2, r2, #2
 800d2e2:	300c      	adds	r0, #12
 800d2e4:	f000 f91e 	bl	800d524 <memcpy>
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	ee18 0a10 	vmov	r0, s16
 800d2ee:	f000 f967 	bl	800d5c0 <_Bfree>
 800d2f2:	464c      	mov	r4, r9
 800d2f4:	6923      	ldr	r3, [r4, #16]
 800d2f6:	1c5a      	adds	r2, r3, #1
 800d2f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2fc:	6122      	str	r2, [r4, #16]
 800d2fe:	2201      	movs	r2, #1
 800d300:	615a      	str	r2, [r3, #20]
 800d302:	e7bb      	b.n	800d27c <__gethex+0x3c8>
 800d304:	6922      	ldr	r2, [r4, #16]
 800d306:	455a      	cmp	r2, fp
 800d308:	dd0b      	ble.n	800d322 <__gethex+0x46e>
 800d30a:	2101      	movs	r1, #1
 800d30c:	4620      	mov	r0, r4
 800d30e:	f7ff fd69 	bl	800cde4 <rshift>
 800d312:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d316:	3501      	adds	r5, #1
 800d318:	42ab      	cmp	r3, r5
 800d31a:	f6ff aed0 	blt.w	800d0be <__gethex+0x20a>
 800d31e:	2701      	movs	r7, #1
 800d320:	e7c0      	b.n	800d2a4 <__gethex+0x3f0>
 800d322:	f016 061f 	ands.w	r6, r6, #31
 800d326:	d0fa      	beq.n	800d31e <__gethex+0x46a>
 800d328:	449a      	add	sl, r3
 800d32a:	f1c6 0620 	rsb	r6, r6, #32
 800d32e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d332:	f000 f9fb 	bl	800d72c <__hi0bits>
 800d336:	42b0      	cmp	r0, r6
 800d338:	dbe7      	blt.n	800d30a <__gethex+0x456>
 800d33a:	e7f0      	b.n	800d31e <__gethex+0x46a>
 800d33c:	0800fbe1 	.word	0x0800fbe1

0800d340 <L_shift>:
 800d340:	f1c2 0208 	rsb	r2, r2, #8
 800d344:	0092      	lsls	r2, r2, #2
 800d346:	b570      	push	{r4, r5, r6, lr}
 800d348:	f1c2 0620 	rsb	r6, r2, #32
 800d34c:	6843      	ldr	r3, [r0, #4]
 800d34e:	6804      	ldr	r4, [r0, #0]
 800d350:	fa03 f506 	lsl.w	r5, r3, r6
 800d354:	432c      	orrs	r4, r5
 800d356:	40d3      	lsrs	r3, r2
 800d358:	6004      	str	r4, [r0, #0]
 800d35a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d35e:	4288      	cmp	r0, r1
 800d360:	d3f4      	bcc.n	800d34c <L_shift+0xc>
 800d362:	bd70      	pop	{r4, r5, r6, pc}

0800d364 <__match>:
 800d364:	b530      	push	{r4, r5, lr}
 800d366:	6803      	ldr	r3, [r0, #0]
 800d368:	3301      	adds	r3, #1
 800d36a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d36e:	b914      	cbnz	r4, 800d376 <__match+0x12>
 800d370:	6003      	str	r3, [r0, #0]
 800d372:	2001      	movs	r0, #1
 800d374:	bd30      	pop	{r4, r5, pc}
 800d376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d37a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d37e:	2d19      	cmp	r5, #25
 800d380:	bf98      	it	ls
 800d382:	3220      	addls	r2, #32
 800d384:	42a2      	cmp	r2, r4
 800d386:	d0f0      	beq.n	800d36a <__match+0x6>
 800d388:	2000      	movs	r0, #0
 800d38a:	e7f3      	b.n	800d374 <__match+0x10>

0800d38c <__hexnan>:
 800d38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d390:	680b      	ldr	r3, [r1, #0]
 800d392:	6801      	ldr	r1, [r0, #0]
 800d394:	115e      	asrs	r6, r3, #5
 800d396:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d39a:	f013 031f 	ands.w	r3, r3, #31
 800d39e:	b087      	sub	sp, #28
 800d3a0:	bf18      	it	ne
 800d3a2:	3604      	addne	r6, #4
 800d3a4:	2500      	movs	r5, #0
 800d3a6:	1f37      	subs	r7, r6, #4
 800d3a8:	4682      	mov	sl, r0
 800d3aa:	4690      	mov	r8, r2
 800d3ac:	9301      	str	r3, [sp, #4]
 800d3ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800d3b2:	46b9      	mov	r9, r7
 800d3b4:	463c      	mov	r4, r7
 800d3b6:	9502      	str	r5, [sp, #8]
 800d3b8:	46ab      	mov	fp, r5
 800d3ba:	784a      	ldrb	r2, [r1, #1]
 800d3bc:	1c4b      	adds	r3, r1, #1
 800d3be:	9303      	str	r3, [sp, #12]
 800d3c0:	b342      	cbz	r2, 800d414 <__hexnan+0x88>
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	9105      	str	r1, [sp, #20]
 800d3c6:	9204      	str	r2, [sp, #16]
 800d3c8:	f7ff fd5e 	bl	800ce88 <__hexdig_fun>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d14f      	bne.n	800d470 <__hexnan+0xe4>
 800d3d0:	9a04      	ldr	r2, [sp, #16]
 800d3d2:	9905      	ldr	r1, [sp, #20]
 800d3d4:	2a20      	cmp	r2, #32
 800d3d6:	d818      	bhi.n	800d40a <__hexnan+0x7e>
 800d3d8:	9b02      	ldr	r3, [sp, #8]
 800d3da:	459b      	cmp	fp, r3
 800d3dc:	dd13      	ble.n	800d406 <__hexnan+0x7a>
 800d3de:	454c      	cmp	r4, r9
 800d3e0:	d206      	bcs.n	800d3f0 <__hexnan+0x64>
 800d3e2:	2d07      	cmp	r5, #7
 800d3e4:	dc04      	bgt.n	800d3f0 <__hexnan+0x64>
 800d3e6:	462a      	mov	r2, r5
 800d3e8:	4649      	mov	r1, r9
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f7ff ffa8 	bl	800d340 <L_shift>
 800d3f0:	4544      	cmp	r4, r8
 800d3f2:	d950      	bls.n	800d496 <__hexnan+0x10a>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f1a4 0904 	sub.w	r9, r4, #4
 800d3fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3fe:	f8cd b008 	str.w	fp, [sp, #8]
 800d402:	464c      	mov	r4, r9
 800d404:	461d      	mov	r5, r3
 800d406:	9903      	ldr	r1, [sp, #12]
 800d408:	e7d7      	b.n	800d3ba <__hexnan+0x2e>
 800d40a:	2a29      	cmp	r2, #41	; 0x29
 800d40c:	d156      	bne.n	800d4bc <__hexnan+0x130>
 800d40e:	3102      	adds	r1, #2
 800d410:	f8ca 1000 	str.w	r1, [sl]
 800d414:	f1bb 0f00 	cmp.w	fp, #0
 800d418:	d050      	beq.n	800d4bc <__hexnan+0x130>
 800d41a:	454c      	cmp	r4, r9
 800d41c:	d206      	bcs.n	800d42c <__hexnan+0xa0>
 800d41e:	2d07      	cmp	r5, #7
 800d420:	dc04      	bgt.n	800d42c <__hexnan+0xa0>
 800d422:	462a      	mov	r2, r5
 800d424:	4649      	mov	r1, r9
 800d426:	4620      	mov	r0, r4
 800d428:	f7ff ff8a 	bl	800d340 <L_shift>
 800d42c:	4544      	cmp	r4, r8
 800d42e:	d934      	bls.n	800d49a <__hexnan+0x10e>
 800d430:	f1a8 0204 	sub.w	r2, r8, #4
 800d434:	4623      	mov	r3, r4
 800d436:	f853 1b04 	ldr.w	r1, [r3], #4
 800d43a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d43e:	429f      	cmp	r7, r3
 800d440:	d2f9      	bcs.n	800d436 <__hexnan+0xaa>
 800d442:	1b3b      	subs	r3, r7, r4
 800d444:	f023 0303 	bic.w	r3, r3, #3
 800d448:	3304      	adds	r3, #4
 800d44a:	3401      	adds	r4, #1
 800d44c:	3e03      	subs	r6, #3
 800d44e:	42b4      	cmp	r4, r6
 800d450:	bf88      	it	hi
 800d452:	2304      	movhi	r3, #4
 800d454:	4443      	add	r3, r8
 800d456:	2200      	movs	r2, #0
 800d458:	f843 2b04 	str.w	r2, [r3], #4
 800d45c:	429f      	cmp	r7, r3
 800d45e:	d2fb      	bcs.n	800d458 <__hexnan+0xcc>
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	b91b      	cbnz	r3, 800d46c <__hexnan+0xe0>
 800d464:	4547      	cmp	r7, r8
 800d466:	d127      	bne.n	800d4b8 <__hexnan+0x12c>
 800d468:	2301      	movs	r3, #1
 800d46a:	603b      	str	r3, [r7, #0]
 800d46c:	2005      	movs	r0, #5
 800d46e:	e026      	b.n	800d4be <__hexnan+0x132>
 800d470:	3501      	adds	r5, #1
 800d472:	2d08      	cmp	r5, #8
 800d474:	f10b 0b01 	add.w	fp, fp, #1
 800d478:	dd06      	ble.n	800d488 <__hexnan+0xfc>
 800d47a:	4544      	cmp	r4, r8
 800d47c:	d9c3      	bls.n	800d406 <__hexnan+0x7a>
 800d47e:	2300      	movs	r3, #0
 800d480:	f844 3c04 	str.w	r3, [r4, #-4]
 800d484:	2501      	movs	r5, #1
 800d486:	3c04      	subs	r4, #4
 800d488:	6822      	ldr	r2, [r4, #0]
 800d48a:	f000 000f 	and.w	r0, r0, #15
 800d48e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d492:	6022      	str	r2, [r4, #0]
 800d494:	e7b7      	b.n	800d406 <__hexnan+0x7a>
 800d496:	2508      	movs	r5, #8
 800d498:	e7b5      	b.n	800d406 <__hexnan+0x7a>
 800d49a:	9b01      	ldr	r3, [sp, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d0df      	beq.n	800d460 <__hexnan+0xd4>
 800d4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a4:	f1c3 0320 	rsb	r3, r3, #32
 800d4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d4b0:	401a      	ands	r2, r3
 800d4b2:	f846 2c04 	str.w	r2, [r6, #-4]
 800d4b6:	e7d3      	b.n	800d460 <__hexnan+0xd4>
 800d4b8:	3f04      	subs	r7, #4
 800d4ba:	e7d1      	b.n	800d460 <__hexnan+0xd4>
 800d4bc:	2004      	movs	r0, #4
 800d4be:	b007      	add	sp, #28
 800d4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d4c4 <_localeconv_r>:
 800d4c4:	4800      	ldr	r0, [pc, #0]	; (800d4c8 <_localeconv_r+0x4>)
 800d4c6:	4770      	bx	lr
 800d4c8:	200001d0 	.word	0x200001d0

0800d4cc <_lseek_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	4d07      	ldr	r5, [pc, #28]	; (800d4ec <_lseek_r+0x20>)
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	4608      	mov	r0, r1
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	602a      	str	r2, [r5, #0]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	f7f4 fe6a 	bl	80021b4 <_lseek>
 800d4e0:	1c43      	adds	r3, r0, #1
 800d4e2:	d102      	bne.n	800d4ea <_lseek_r+0x1e>
 800d4e4:	682b      	ldr	r3, [r5, #0]
 800d4e6:	b103      	cbz	r3, 800d4ea <_lseek_r+0x1e>
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	bd38      	pop	{r3, r4, r5, pc}
 800d4ec:	20000b1c 	.word	0x20000b1c

0800d4f0 <malloc>:
 800d4f0:	4b02      	ldr	r3, [pc, #8]	; (800d4fc <malloc+0xc>)
 800d4f2:	4601      	mov	r1, r0
 800d4f4:	6818      	ldr	r0, [r3, #0]
 800d4f6:	f000 bd3d 	b.w	800df74 <_malloc_r>
 800d4fa:	bf00      	nop
 800d4fc:	20000078 	.word	0x20000078

0800d500 <__ascii_mbtowc>:
 800d500:	b082      	sub	sp, #8
 800d502:	b901      	cbnz	r1, 800d506 <__ascii_mbtowc+0x6>
 800d504:	a901      	add	r1, sp, #4
 800d506:	b142      	cbz	r2, 800d51a <__ascii_mbtowc+0x1a>
 800d508:	b14b      	cbz	r3, 800d51e <__ascii_mbtowc+0x1e>
 800d50a:	7813      	ldrb	r3, [r2, #0]
 800d50c:	600b      	str	r3, [r1, #0]
 800d50e:	7812      	ldrb	r2, [r2, #0]
 800d510:	1e10      	subs	r0, r2, #0
 800d512:	bf18      	it	ne
 800d514:	2001      	movne	r0, #1
 800d516:	b002      	add	sp, #8
 800d518:	4770      	bx	lr
 800d51a:	4610      	mov	r0, r2
 800d51c:	e7fb      	b.n	800d516 <__ascii_mbtowc+0x16>
 800d51e:	f06f 0001 	mvn.w	r0, #1
 800d522:	e7f8      	b.n	800d516 <__ascii_mbtowc+0x16>

0800d524 <memcpy>:
 800d524:	440a      	add	r2, r1
 800d526:	4291      	cmp	r1, r2
 800d528:	f100 33ff 	add.w	r3, r0, #4294967295
 800d52c:	d100      	bne.n	800d530 <memcpy+0xc>
 800d52e:	4770      	bx	lr
 800d530:	b510      	push	{r4, lr}
 800d532:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d53a:	4291      	cmp	r1, r2
 800d53c:	d1f9      	bne.n	800d532 <memcpy+0xe>
 800d53e:	bd10      	pop	{r4, pc}

0800d540 <_Balloc>:
 800d540:	b570      	push	{r4, r5, r6, lr}
 800d542:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d544:	4604      	mov	r4, r0
 800d546:	460d      	mov	r5, r1
 800d548:	b976      	cbnz	r6, 800d568 <_Balloc+0x28>
 800d54a:	2010      	movs	r0, #16
 800d54c:	f7ff ffd0 	bl	800d4f0 <malloc>
 800d550:	4602      	mov	r2, r0
 800d552:	6260      	str	r0, [r4, #36]	; 0x24
 800d554:	b920      	cbnz	r0, 800d560 <_Balloc+0x20>
 800d556:	4b18      	ldr	r3, [pc, #96]	; (800d5b8 <_Balloc+0x78>)
 800d558:	4818      	ldr	r0, [pc, #96]	; (800d5bc <_Balloc+0x7c>)
 800d55a:	2166      	movs	r1, #102	; 0x66
 800d55c:	f7fe fd8a 	bl	800c074 <__assert_func>
 800d560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d564:	6006      	str	r6, [r0, #0]
 800d566:	60c6      	str	r6, [r0, #12]
 800d568:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d56a:	68f3      	ldr	r3, [r6, #12]
 800d56c:	b183      	cbz	r3, 800d590 <_Balloc+0x50>
 800d56e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d576:	b9b8      	cbnz	r0, 800d5a8 <_Balloc+0x68>
 800d578:	2101      	movs	r1, #1
 800d57a:	fa01 f605 	lsl.w	r6, r1, r5
 800d57e:	1d72      	adds	r2, r6, #5
 800d580:	0092      	lsls	r2, r2, #2
 800d582:	4620      	mov	r0, r4
 800d584:	f000 fc97 	bl	800deb6 <_calloc_r>
 800d588:	b160      	cbz	r0, 800d5a4 <_Balloc+0x64>
 800d58a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d58e:	e00e      	b.n	800d5ae <_Balloc+0x6e>
 800d590:	2221      	movs	r2, #33	; 0x21
 800d592:	2104      	movs	r1, #4
 800d594:	4620      	mov	r0, r4
 800d596:	f000 fc8e 	bl	800deb6 <_calloc_r>
 800d59a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d59c:	60f0      	str	r0, [r6, #12]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1e4      	bne.n	800d56e <_Balloc+0x2e>
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	bd70      	pop	{r4, r5, r6, pc}
 800d5a8:	6802      	ldr	r2, [r0, #0]
 800d5aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5b4:	e7f7      	b.n	800d5a6 <_Balloc+0x66>
 800d5b6:	bf00      	nop
 800d5b8:	0800f9c0 	.word	0x0800f9c0
 800d5bc:	0800fc70 	.word	0x0800fc70

0800d5c0 <_Bfree>:
 800d5c0:	b570      	push	{r4, r5, r6, lr}
 800d5c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d5c4:	4605      	mov	r5, r0
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	b976      	cbnz	r6, 800d5e8 <_Bfree+0x28>
 800d5ca:	2010      	movs	r0, #16
 800d5cc:	f7ff ff90 	bl	800d4f0 <malloc>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	6268      	str	r0, [r5, #36]	; 0x24
 800d5d4:	b920      	cbnz	r0, 800d5e0 <_Bfree+0x20>
 800d5d6:	4b09      	ldr	r3, [pc, #36]	; (800d5fc <_Bfree+0x3c>)
 800d5d8:	4809      	ldr	r0, [pc, #36]	; (800d600 <_Bfree+0x40>)
 800d5da:	218a      	movs	r1, #138	; 0x8a
 800d5dc:	f7fe fd4a 	bl	800c074 <__assert_func>
 800d5e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5e4:	6006      	str	r6, [r0, #0]
 800d5e6:	60c6      	str	r6, [r0, #12]
 800d5e8:	b13c      	cbz	r4, 800d5fa <_Bfree+0x3a>
 800d5ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d5ec:	6862      	ldr	r2, [r4, #4]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5f4:	6021      	str	r1, [r4, #0]
 800d5f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d5fa:	bd70      	pop	{r4, r5, r6, pc}
 800d5fc:	0800f9c0 	.word	0x0800f9c0
 800d600:	0800fc70 	.word	0x0800fc70

0800d604 <__multadd>:
 800d604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d608:	690e      	ldr	r6, [r1, #16]
 800d60a:	4607      	mov	r7, r0
 800d60c:	4698      	mov	r8, r3
 800d60e:	460c      	mov	r4, r1
 800d610:	f101 0014 	add.w	r0, r1, #20
 800d614:	2300      	movs	r3, #0
 800d616:	6805      	ldr	r5, [r0, #0]
 800d618:	b2a9      	uxth	r1, r5
 800d61a:	fb02 8101 	mla	r1, r2, r1, r8
 800d61e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d622:	0c2d      	lsrs	r5, r5, #16
 800d624:	fb02 c505 	mla	r5, r2, r5, ip
 800d628:	b289      	uxth	r1, r1
 800d62a:	3301      	adds	r3, #1
 800d62c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d630:	429e      	cmp	r6, r3
 800d632:	f840 1b04 	str.w	r1, [r0], #4
 800d636:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d63a:	dcec      	bgt.n	800d616 <__multadd+0x12>
 800d63c:	f1b8 0f00 	cmp.w	r8, #0
 800d640:	d022      	beq.n	800d688 <__multadd+0x84>
 800d642:	68a3      	ldr	r3, [r4, #8]
 800d644:	42b3      	cmp	r3, r6
 800d646:	dc19      	bgt.n	800d67c <__multadd+0x78>
 800d648:	6861      	ldr	r1, [r4, #4]
 800d64a:	4638      	mov	r0, r7
 800d64c:	3101      	adds	r1, #1
 800d64e:	f7ff ff77 	bl	800d540 <_Balloc>
 800d652:	4605      	mov	r5, r0
 800d654:	b928      	cbnz	r0, 800d662 <__multadd+0x5e>
 800d656:	4602      	mov	r2, r0
 800d658:	4b0d      	ldr	r3, [pc, #52]	; (800d690 <__multadd+0x8c>)
 800d65a:	480e      	ldr	r0, [pc, #56]	; (800d694 <__multadd+0x90>)
 800d65c:	21b5      	movs	r1, #181	; 0xb5
 800d65e:	f7fe fd09 	bl	800c074 <__assert_func>
 800d662:	6922      	ldr	r2, [r4, #16]
 800d664:	3202      	adds	r2, #2
 800d666:	f104 010c 	add.w	r1, r4, #12
 800d66a:	0092      	lsls	r2, r2, #2
 800d66c:	300c      	adds	r0, #12
 800d66e:	f7ff ff59 	bl	800d524 <memcpy>
 800d672:	4621      	mov	r1, r4
 800d674:	4638      	mov	r0, r7
 800d676:	f7ff ffa3 	bl	800d5c0 <_Bfree>
 800d67a:	462c      	mov	r4, r5
 800d67c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d680:	3601      	adds	r6, #1
 800d682:	f8c3 8014 	str.w	r8, [r3, #20]
 800d686:	6126      	str	r6, [r4, #16]
 800d688:	4620      	mov	r0, r4
 800d68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d68e:	bf00      	nop
 800d690:	0800fbe1 	.word	0x0800fbe1
 800d694:	0800fc70 	.word	0x0800fc70

0800d698 <__s2b>:
 800d698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d69c:	460c      	mov	r4, r1
 800d69e:	4615      	mov	r5, r2
 800d6a0:	461f      	mov	r7, r3
 800d6a2:	2209      	movs	r2, #9
 800d6a4:	3308      	adds	r3, #8
 800d6a6:	4606      	mov	r6, r0
 800d6a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	db09      	blt.n	800d6c8 <__s2b+0x30>
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	f7ff ff43 	bl	800d540 <_Balloc>
 800d6ba:	b940      	cbnz	r0, 800d6ce <__s2b+0x36>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	4b19      	ldr	r3, [pc, #100]	; (800d724 <__s2b+0x8c>)
 800d6c0:	4819      	ldr	r0, [pc, #100]	; (800d728 <__s2b+0x90>)
 800d6c2:	21ce      	movs	r1, #206	; 0xce
 800d6c4:	f7fe fcd6 	bl	800c074 <__assert_func>
 800d6c8:	0052      	lsls	r2, r2, #1
 800d6ca:	3101      	adds	r1, #1
 800d6cc:	e7f0      	b.n	800d6b0 <__s2b+0x18>
 800d6ce:	9b08      	ldr	r3, [sp, #32]
 800d6d0:	6143      	str	r3, [r0, #20]
 800d6d2:	2d09      	cmp	r5, #9
 800d6d4:	f04f 0301 	mov.w	r3, #1
 800d6d8:	6103      	str	r3, [r0, #16]
 800d6da:	dd16      	ble.n	800d70a <__s2b+0x72>
 800d6dc:	f104 0909 	add.w	r9, r4, #9
 800d6e0:	46c8      	mov	r8, r9
 800d6e2:	442c      	add	r4, r5
 800d6e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d6e8:	4601      	mov	r1, r0
 800d6ea:	3b30      	subs	r3, #48	; 0x30
 800d6ec:	220a      	movs	r2, #10
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f7ff ff88 	bl	800d604 <__multadd>
 800d6f4:	45a0      	cmp	r8, r4
 800d6f6:	d1f5      	bne.n	800d6e4 <__s2b+0x4c>
 800d6f8:	f1a5 0408 	sub.w	r4, r5, #8
 800d6fc:	444c      	add	r4, r9
 800d6fe:	1b2d      	subs	r5, r5, r4
 800d700:	1963      	adds	r3, r4, r5
 800d702:	42bb      	cmp	r3, r7
 800d704:	db04      	blt.n	800d710 <__s2b+0x78>
 800d706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d70a:	340a      	adds	r4, #10
 800d70c:	2509      	movs	r5, #9
 800d70e:	e7f6      	b.n	800d6fe <__s2b+0x66>
 800d710:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d714:	4601      	mov	r1, r0
 800d716:	3b30      	subs	r3, #48	; 0x30
 800d718:	220a      	movs	r2, #10
 800d71a:	4630      	mov	r0, r6
 800d71c:	f7ff ff72 	bl	800d604 <__multadd>
 800d720:	e7ee      	b.n	800d700 <__s2b+0x68>
 800d722:	bf00      	nop
 800d724:	0800fbe1 	.word	0x0800fbe1
 800d728:	0800fc70 	.word	0x0800fc70

0800d72c <__hi0bits>:
 800d72c:	0c03      	lsrs	r3, r0, #16
 800d72e:	041b      	lsls	r3, r3, #16
 800d730:	b9d3      	cbnz	r3, 800d768 <__hi0bits+0x3c>
 800d732:	0400      	lsls	r0, r0, #16
 800d734:	2310      	movs	r3, #16
 800d736:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d73a:	bf04      	itt	eq
 800d73c:	0200      	lsleq	r0, r0, #8
 800d73e:	3308      	addeq	r3, #8
 800d740:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d744:	bf04      	itt	eq
 800d746:	0100      	lsleq	r0, r0, #4
 800d748:	3304      	addeq	r3, #4
 800d74a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d74e:	bf04      	itt	eq
 800d750:	0080      	lsleq	r0, r0, #2
 800d752:	3302      	addeq	r3, #2
 800d754:	2800      	cmp	r0, #0
 800d756:	db05      	blt.n	800d764 <__hi0bits+0x38>
 800d758:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d75c:	f103 0301 	add.w	r3, r3, #1
 800d760:	bf08      	it	eq
 800d762:	2320      	moveq	r3, #32
 800d764:	4618      	mov	r0, r3
 800d766:	4770      	bx	lr
 800d768:	2300      	movs	r3, #0
 800d76a:	e7e4      	b.n	800d736 <__hi0bits+0xa>

0800d76c <__lo0bits>:
 800d76c:	6803      	ldr	r3, [r0, #0]
 800d76e:	f013 0207 	ands.w	r2, r3, #7
 800d772:	4601      	mov	r1, r0
 800d774:	d00b      	beq.n	800d78e <__lo0bits+0x22>
 800d776:	07da      	lsls	r2, r3, #31
 800d778:	d424      	bmi.n	800d7c4 <__lo0bits+0x58>
 800d77a:	0798      	lsls	r0, r3, #30
 800d77c:	bf49      	itett	mi
 800d77e:	085b      	lsrmi	r3, r3, #1
 800d780:	089b      	lsrpl	r3, r3, #2
 800d782:	2001      	movmi	r0, #1
 800d784:	600b      	strmi	r3, [r1, #0]
 800d786:	bf5c      	itt	pl
 800d788:	600b      	strpl	r3, [r1, #0]
 800d78a:	2002      	movpl	r0, #2
 800d78c:	4770      	bx	lr
 800d78e:	b298      	uxth	r0, r3
 800d790:	b9b0      	cbnz	r0, 800d7c0 <__lo0bits+0x54>
 800d792:	0c1b      	lsrs	r3, r3, #16
 800d794:	2010      	movs	r0, #16
 800d796:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d79a:	bf04      	itt	eq
 800d79c:	0a1b      	lsreq	r3, r3, #8
 800d79e:	3008      	addeq	r0, #8
 800d7a0:	071a      	lsls	r2, r3, #28
 800d7a2:	bf04      	itt	eq
 800d7a4:	091b      	lsreq	r3, r3, #4
 800d7a6:	3004      	addeq	r0, #4
 800d7a8:	079a      	lsls	r2, r3, #30
 800d7aa:	bf04      	itt	eq
 800d7ac:	089b      	lsreq	r3, r3, #2
 800d7ae:	3002      	addeq	r0, #2
 800d7b0:	07da      	lsls	r2, r3, #31
 800d7b2:	d403      	bmi.n	800d7bc <__lo0bits+0x50>
 800d7b4:	085b      	lsrs	r3, r3, #1
 800d7b6:	f100 0001 	add.w	r0, r0, #1
 800d7ba:	d005      	beq.n	800d7c8 <__lo0bits+0x5c>
 800d7bc:	600b      	str	r3, [r1, #0]
 800d7be:	4770      	bx	lr
 800d7c0:	4610      	mov	r0, r2
 800d7c2:	e7e8      	b.n	800d796 <__lo0bits+0x2a>
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	4770      	bx	lr
 800d7c8:	2020      	movs	r0, #32
 800d7ca:	4770      	bx	lr

0800d7cc <__i2b>:
 800d7cc:	b510      	push	{r4, lr}
 800d7ce:	460c      	mov	r4, r1
 800d7d0:	2101      	movs	r1, #1
 800d7d2:	f7ff feb5 	bl	800d540 <_Balloc>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	b928      	cbnz	r0, 800d7e6 <__i2b+0x1a>
 800d7da:	4b05      	ldr	r3, [pc, #20]	; (800d7f0 <__i2b+0x24>)
 800d7dc:	4805      	ldr	r0, [pc, #20]	; (800d7f4 <__i2b+0x28>)
 800d7de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d7e2:	f7fe fc47 	bl	800c074 <__assert_func>
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	6144      	str	r4, [r0, #20]
 800d7ea:	6103      	str	r3, [r0, #16]
 800d7ec:	bd10      	pop	{r4, pc}
 800d7ee:	bf00      	nop
 800d7f0:	0800fbe1 	.word	0x0800fbe1
 800d7f4:	0800fc70 	.word	0x0800fc70

0800d7f8 <__multiply>:
 800d7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7fc:	4614      	mov	r4, r2
 800d7fe:	690a      	ldr	r2, [r1, #16]
 800d800:	6923      	ldr	r3, [r4, #16]
 800d802:	429a      	cmp	r2, r3
 800d804:	bfb8      	it	lt
 800d806:	460b      	movlt	r3, r1
 800d808:	460d      	mov	r5, r1
 800d80a:	bfbc      	itt	lt
 800d80c:	4625      	movlt	r5, r4
 800d80e:	461c      	movlt	r4, r3
 800d810:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d814:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d818:	68ab      	ldr	r3, [r5, #8]
 800d81a:	6869      	ldr	r1, [r5, #4]
 800d81c:	eb0a 0709 	add.w	r7, sl, r9
 800d820:	42bb      	cmp	r3, r7
 800d822:	b085      	sub	sp, #20
 800d824:	bfb8      	it	lt
 800d826:	3101      	addlt	r1, #1
 800d828:	f7ff fe8a 	bl	800d540 <_Balloc>
 800d82c:	b930      	cbnz	r0, 800d83c <__multiply+0x44>
 800d82e:	4602      	mov	r2, r0
 800d830:	4b42      	ldr	r3, [pc, #264]	; (800d93c <__multiply+0x144>)
 800d832:	4843      	ldr	r0, [pc, #268]	; (800d940 <__multiply+0x148>)
 800d834:	f240 115d 	movw	r1, #349	; 0x15d
 800d838:	f7fe fc1c 	bl	800c074 <__assert_func>
 800d83c:	f100 0614 	add.w	r6, r0, #20
 800d840:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d844:	4633      	mov	r3, r6
 800d846:	2200      	movs	r2, #0
 800d848:	4543      	cmp	r3, r8
 800d84a:	d31e      	bcc.n	800d88a <__multiply+0x92>
 800d84c:	f105 0c14 	add.w	ip, r5, #20
 800d850:	f104 0314 	add.w	r3, r4, #20
 800d854:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d858:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d85c:	9202      	str	r2, [sp, #8]
 800d85e:	ebac 0205 	sub.w	r2, ip, r5
 800d862:	3a15      	subs	r2, #21
 800d864:	f022 0203 	bic.w	r2, r2, #3
 800d868:	3204      	adds	r2, #4
 800d86a:	f105 0115 	add.w	r1, r5, #21
 800d86e:	458c      	cmp	ip, r1
 800d870:	bf38      	it	cc
 800d872:	2204      	movcc	r2, #4
 800d874:	9201      	str	r2, [sp, #4]
 800d876:	9a02      	ldr	r2, [sp, #8]
 800d878:	9303      	str	r3, [sp, #12]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d808      	bhi.n	800d890 <__multiply+0x98>
 800d87e:	2f00      	cmp	r7, #0
 800d880:	dc55      	bgt.n	800d92e <__multiply+0x136>
 800d882:	6107      	str	r7, [r0, #16]
 800d884:	b005      	add	sp, #20
 800d886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d88a:	f843 2b04 	str.w	r2, [r3], #4
 800d88e:	e7db      	b.n	800d848 <__multiply+0x50>
 800d890:	f8b3 a000 	ldrh.w	sl, [r3]
 800d894:	f1ba 0f00 	cmp.w	sl, #0
 800d898:	d020      	beq.n	800d8dc <__multiply+0xe4>
 800d89a:	f105 0e14 	add.w	lr, r5, #20
 800d89e:	46b1      	mov	r9, r6
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d8a6:	f8d9 b000 	ldr.w	fp, [r9]
 800d8aa:	b2a1      	uxth	r1, r4
 800d8ac:	fa1f fb8b 	uxth.w	fp, fp
 800d8b0:	fb0a b101 	mla	r1, sl, r1, fp
 800d8b4:	4411      	add	r1, r2
 800d8b6:	f8d9 2000 	ldr.w	r2, [r9]
 800d8ba:	0c24      	lsrs	r4, r4, #16
 800d8bc:	0c12      	lsrs	r2, r2, #16
 800d8be:	fb0a 2404 	mla	r4, sl, r4, r2
 800d8c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d8c6:	b289      	uxth	r1, r1
 800d8c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d8cc:	45f4      	cmp	ip, lr
 800d8ce:	f849 1b04 	str.w	r1, [r9], #4
 800d8d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d8d6:	d8e4      	bhi.n	800d8a2 <__multiply+0xaa>
 800d8d8:	9901      	ldr	r1, [sp, #4]
 800d8da:	5072      	str	r2, [r6, r1]
 800d8dc:	9a03      	ldr	r2, [sp, #12]
 800d8de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d8e2:	3304      	adds	r3, #4
 800d8e4:	f1b9 0f00 	cmp.w	r9, #0
 800d8e8:	d01f      	beq.n	800d92a <__multiply+0x132>
 800d8ea:	6834      	ldr	r4, [r6, #0]
 800d8ec:	f105 0114 	add.w	r1, r5, #20
 800d8f0:	46b6      	mov	lr, r6
 800d8f2:	f04f 0a00 	mov.w	sl, #0
 800d8f6:	880a      	ldrh	r2, [r1, #0]
 800d8f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d8fc:	fb09 b202 	mla	r2, r9, r2, fp
 800d900:	4492      	add	sl, r2
 800d902:	b2a4      	uxth	r4, r4
 800d904:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d908:	f84e 4b04 	str.w	r4, [lr], #4
 800d90c:	f851 4b04 	ldr.w	r4, [r1], #4
 800d910:	f8be 2000 	ldrh.w	r2, [lr]
 800d914:	0c24      	lsrs	r4, r4, #16
 800d916:	fb09 2404 	mla	r4, r9, r4, r2
 800d91a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d91e:	458c      	cmp	ip, r1
 800d920:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d924:	d8e7      	bhi.n	800d8f6 <__multiply+0xfe>
 800d926:	9a01      	ldr	r2, [sp, #4]
 800d928:	50b4      	str	r4, [r6, r2]
 800d92a:	3604      	adds	r6, #4
 800d92c:	e7a3      	b.n	800d876 <__multiply+0x7e>
 800d92e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d932:	2b00      	cmp	r3, #0
 800d934:	d1a5      	bne.n	800d882 <__multiply+0x8a>
 800d936:	3f01      	subs	r7, #1
 800d938:	e7a1      	b.n	800d87e <__multiply+0x86>
 800d93a:	bf00      	nop
 800d93c:	0800fbe1 	.word	0x0800fbe1
 800d940:	0800fc70 	.word	0x0800fc70

0800d944 <__pow5mult>:
 800d944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d948:	4615      	mov	r5, r2
 800d94a:	f012 0203 	ands.w	r2, r2, #3
 800d94e:	4606      	mov	r6, r0
 800d950:	460f      	mov	r7, r1
 800d952:	d007      	beq.n	800d964 <__pow5mult+0x20>
 800d954:	4c25      	ldr	r4, [pc, #148]	; (800d9ec <__pow5mult+0xa8>)
 800d956:	3a01      	subs	r2, #1
 800d958:	2300      	movs	r3, #0
 800d95a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d95e:	f7ff fe51 	bl	800d604 <__multadd>
 800d962:	4607      	mov	r7, r0
 800d964:	10ad      	asrs	r5, r5, #2
 800d966:	d03d      	beq.n	800d9e4 <__pow5mult+0xa0>
 800d968:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d96a:	b97c      	cbnz	r4, 800d98c <__pow5mult+0x48>
 800d96c:	2010      	movs	r0, #16
 800d96e:	f7ff fdbf 	bl	800d4f0 <malloc>
 800d972:	4602      	mov	r2, r0
 800d974:	6270      	str	r0, [r6, #36]	; 0x24
 800d976:	b928      	cbnz	r0, 800d984 <__pow5mult+0x40>
 800d978:	4b1d      	ldr	r3, [pc, #116]	; (800d9f0 <__pow5mult+0xac>)
 800d97a:	481e      	ldr	r0, [pc, #120]	; (800d9f4 <__pow5mult+0xb0>)
 800d97c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d980:	f7fe fb78 	bl	800c074 <__assert_func>
 800d984:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d988:	6004      	str	r4, [r0, #0]
 800d98a:	60c4      	str	r4, [r0, #12]
 800d98c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d990:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d994:	b94c      	cbnz	r4, 800d9aa <__pow5mult+0x66>
 800d996:	f240 2171 	movw	r1, #625	; 0x271
 800d99a:	4630      	mov	r0, r6
 800d99c:	f7ff ff16 	bl	800d7cc <__i2b>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	6003      	str	r3, [r0, #0]
 800d9aa:	f04f 0900 	mov.w	r9, #0
 800d9ae:	07eb      	lsls	r3, r5, #31
 800d9b0:	d50a      	bpl.n	800d9c8 <__pow5mult+0x84>
 800d9b2:	4639      	mov	r1, r7
 800d9b4:	4622      	mov	r2, r4
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	f7ff ff1e 	bl	800d7f8 <__multiply>
 800d9bc:	4639      	mov	r1, r7
 800d9be:	4680      	mov	r8, r0
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	f7ff fdfd 	bl	800d5c0 <_Bfree>
 800d9c6:	4647      	mov	r7, r8
 800d9c8:	106d      	asrs	r5, r5, #1
 800d9ca:	d00b      	beq.n	800d9e4 <__pow5mult+0xa0>
 800d9cc:	6820      	ldr	r0, [r4, #0]
 800d9ce:	b938      	cbnz	r0, 800d9e0 <__pow5mult+0x9c>
 800d9d0:	4622      	mov	r2, r4
 800d9d2:	4621      	mov	r1, r4
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	f7ff ff0f 	bl	800d7f8 <__multiply>
 800d9da:	6020      	str	r0, [r4, #0]
 800d9dc:	f8c0 9000 	str.w	r9, [r0]
 800d9e0:	4604      	mov	r4, r0
 800d9e2:	e7e4      	b.n	800d9ae <__pow5mult+0x6a>
 800d9e4:	4638      	mov	r0, r7
 800d9e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ea:	bf00      	nop
 800d9ec:	0800fdc0 	.word	0x0800fdc0
 800d9f0:	0800f9c0 	.word	0x0800f9c0
 800d9f4:	0800fc70 	.word	0x0800fc70

0800d9f8 <__lshift>:
 800d9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9fc:	460c      	mov	r4, r1
 800d9fe:	6849      	ldr	r1, [r1, #4]
 800da00:	6923      	ldr	r3, [r4, #16]
 800da02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da06:	68a3      	ldr	r3, [r4, #8]
 800da08:	4607      	mov	r7, r0
 800da0a:	4691      	mov	r9, r2
 800da0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da10:	f108 0601 	add.w	r6, r8, #1
 800da14:	42b3      	cmp	r3, r6
 800da16:	db0b      	blt.n	800da30 <__lshift+0x38>
 800da18:	4638      	mov	r0, r7
 800da1a:	f7ff fd91 	bl	800d540 <_Balloc>
 800da1e:	4605      	mov	r5, r0
 800da20:	b948      	cbnz	r0, 800da36 <__lshift+0x3e>
 800da22:	4602      	mov	r2, r0
 800da24:	4b28      	ldr	r3, [pc, #160]	; (800dac8 <__lshift+0xd0>)
 800da26:	4829      	ldr	r0, [pc, #164]	; (800dacc <__lshift+0xd4>)
 800da28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800da2c:	f7fe fb22 	bl	800c074 <__assert_func>
 800da30:	3101      	adds	r1, #1
 800da32:	005b      	lsls	r3, r3, #1
 800da34:	e7ee      	b.n	800da14 <__lshift+0x1c>
 800da36:	2300      	movs	r3, #0
 800da38:	f100 0114 	add.w	r1, r0, #20
 800da3c:	f100 0210 	add.w	r2, r0, #16
 800da40:	4618      	mov	r0, r3
 800da42:	4553      	cmp	r3, sl
 800da44:	db33      	blt.n	800daae <__lshift+0xb6>
 800da46:	6920      	ldr	r0, [r4, #16]
 800da48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da4c:	f104 0314 	add.w	r3, r4, #20
 800da50:	f019 091f 	ands.w	r9, r9, #31
 800da54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da5c:	d02b      	beq.n	800dab6 <__lshift+0xbe>
 800da5e:	f1c9 0e20 	rsb	lr, r9, #32
 800da62:	468a      	mov	sl, r1
 800da64:	2200      	movs	r2, #0
 800da66:	6818      	ldr	r0, [r3, #0]
 800da68:	fa00 f009 	lsl.w	r0, r0, r9
 800da6c:	4302      	orrs	r2, r0
 800da6e:	f84a 2b04 	str.w	r2, [sl], #4
 800da72:	f853 2b04 	ldr.w	r2, [r3], #4
 800da76:	459c      	cmp	ip, r3
 800da78:	fa22 f20e 	lsr.w	r2, r2, lr
 800da7c:	d8f3      	bhi.n	800da66 <__lshift+0x6e>
 800da7e:	ebac 0304 	sub.w	r3, ip, r4
 800da82:	3b15      	subs	r3, #21
 800da84:	f023 0303 	bic.w	r3, r3, #3
 800da88:	3304      	adds	r3, #4
 800da8a:	f104 0015 	add.w	r0, r4, #21
 800da8e:	4584      	cmp	ip, r0
 800da90:	bf38      	it	cc
 800da92:	2304      	movcc	r3, #4
 800da94:	50ca      	str	r2, [r1, r3]
 800da96:	b10a      	cbz	r2, 800da9c <__lshift+0xa4>
 800da98:	f108 0602 	add.w	r6, r8, #2
 800da9c:	3e01      	subs	r6, #1
 800da9e:	4638      	mov	r0, r7
 800daa0:	612e      	str	r6, [r5, #16]
 800daa2:	4621      	mov	r1, r4
 800daa4:	f7ff fd8c 	bl	800d5c0 <_Bfree>
 800daa8:	4628      	mov	r0, r5
 800daaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daae:	f842 0f04 	str.w	r0, [r2, #4]!
 800dab2:	3301      	adds	r3, #1
 800dab4:	e7c5      	b.n	800da42 <__lshift+0x4a>
 800dab6:	3904      	subs	r1, #4
 800dab8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dabc:	f841 2f04 	str.w	r2, [r1, #4]!
 800dac0:	459c      	cmp	ip, r3
 800dac2:	d8f9      	bhi.n	800dab8 <__lshift+0xc0>
 800dac4:	e7ea      	b.n	800da9c <__lshift+0xa4>
 800dac6:	bf00      	nop
 800dac8:	0800fbe1 	.word	0x0800fbe1
 800dacc:	0800fc70 	.word	0x0800fc70

0800dad0 <__mcmp>:
 800dad0:	b530      	push	{r4, r5, lr}
 800dad2:	6902      	ldr	r2, [r0, #16]
 800dad4:	690c      	ldr	r4, [r1, #16]
 800dad6:	1b12      	subs	r2, r2, r4
 800dad8:	d10e      	bne.n	800daf8 <__mcmp+0x28>
 800dada:	f100 0314 	add.w	r3, r0, #20
 800dade:	3114      	adds	r1, #20
 800dae0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dae4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dae8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800daec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800daf0:	42a5      	cmp	r5, r4
 800daf2:	d003      	beq.n	800dafc <__mcmp+0x2c>
 800daf4:	d305      	bcc.n	800db02 <__mcmp+0x32>
 800daf6:	2201      	movs	r2, #1
 800daf8:	4610      	mov	r0, r2
 800dafa:	bd30      	pop	{r4, r5, pc}
 800dafc:	4283      	cmp	r3, r0
 800dafe:	d3f3      	bcc.n	800dae8 <__mcmp+0x18>
 800db00:	e7fa      	b.n	800daf8 <__mcmp+0x28>
 800db02:	f04f 32ff 	mov.w	r2, #4294967295
 800db06:	e7f7      	b.n	800daf8 <__mcmp+0x28>

0800db08 <__mdiff>:
 800db08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0c:	460c      	mov	r4, r1
 800db0e:	4606      	mov	r6, r0
 800db10:	4611      	mov	r1, r2
 800db12:	4620      	mov	r0, r4
 800db14:	4617      	mov	r7, r2
 800db16:	f7ff ffdb 	bl	800dad0 <__mcmp>
 800db1a:	1e05      	subs	r5, r0, #0
 800db1c:	d110      	bne.n	800db40 <__mdiff+0x38>
 800db1e:	4629      	mov	r1, r5
 800db20:	4630      	mov	r0, r6
 800db22:	f7ff fd0d 	bl	800d540 <_Balloc>
 800db26:	b930      	cbnz	r0, 800db36 <__mdiff+0x2e>
 800db28:	4b39      	ldr	r3, [pc, #228]	; (800dc10 <__mdiff+0x108>)
 800db2a:	4602      	mov	r2, r0
 800db2c:	f240 2132 	movw	r1, #562	; 0x232
 800db30:	4838      	ldr	r0, [pc, #224]	; (800dc14 <__mdiff+0x10c>)
 800db32:	f7fe fa9f 	bl	800c074 <__assert_func>
 800db36:	2301      	movs	r3, #1
 800db38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db40:	bfa4      	itt	ge
 800db42:	463b      	movge	r3, r7
 800db44:	4627      	movge	r7, r4
 800db46:	4630      	mov	r0, r6
 800db48:	6879      	ldr	r1, [r7, #4]
 800db4a:	bfa6      	itte	ge
 800db4c:	461c      	movge	r4, r3
 800db4e:	2500      	movge	r5, #0
 800db50:	2501      	movlt	r5, #1
 800db52:	f7ff fcf5 	bl	800d540 <_Balloc>
 800db56:	b920      	cbnz	r0, 800db62 <__mdiff+0x5a>
 800db58:	4b2d      	ldr	r3, [pc, #180]	; (800dc10 <__mdiff+0x108>)
 800db5a:	4602      	mov	r2, r0
 800db5c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800db60:	e7e6      	b.n	800db30 <__mdiff+0x28>
 800db62:	693e      	ldr	r6, [r7, #16]
 800db64:	60c5      	str	r5, [r0, #12]
 800db66:	6925      	ldr	r5, [r4, #16]
 800db68:	f107 0114 	add.w	r1, r7, #20
 800db6c:	f104 0914 	add.w	r9, r4, #20
 800db70:	f100 0e14 	add.w	lr, r0, #20
 800db74:	f107 0210 	add.w	r2, r7, #16
 800db78:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800db7c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800db80:	46f2      	mov	sl, lr
 800db82:	2700      	movs	r7, #0
 800db84:	f859 3b04 	ldr.w	r3, [r9], #4
 800db88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800db8c:	fa1f f883 	uxth.w	r8, r3
 800db90:	fa17 f78b 	uxtah	r7, r7, fp
 800db94:	0c1b      	lsrs	r3, r3, #16
 800db96:	eba7 0808 	sub.w	r8, r7, r8
 800db9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800db9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dba2:	fa1f f888 	uxth.w	r8, r8
 800dba6:	141f      	asrs	r7, r3, #16
 800dba8:	454d      	cmp	r5, r9
 800dbaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dbae:	f84a 3b04 	str.w	r3, [sl], #4
 800dbb2:	d8e7      	bhi.n	800db84 <__mdiff+0x7c>
 800dbb4:	1b2b      	subs	r3, r5, r4
 800dbb6:	3b15      	subs	r3, #21
 800dbb8:	f023 0303 	bic.w	r3, r3, #3
 800dbbc:	3304      	adds	r3, #4
 800dbbe:	3415      	adds	r4, #21
 800dbc0:	42a5      	cmp	r5, r4
 800dbc2:	bf38      	it	cc
 800dbc4:	2304      	movcc	r3, #4
 800dbc6:	4419      	add	r1, r3
 800dbc8:	4473      	add	r3, lr
 800dbca:	469e      	mov	lr, r3
 800dbcc:	460d      	mov	r5, r1
 800dbce:	4565      	cmp	r5, ip
 800dbd0:	d30e      	bcc.n	800dbf0 <__mdiff+0xe8>
 800dbd2:	f10c 0203 	add.w	r2, ip, #3
 800dbd6:	1a52      	subs	r2, r2, r1
 800dbd8:	f022 0203 	bic.w	r2, r2, #3
 800dbdc:	3903      	subs	r1, #3
 800dbde:	458c      	cmp	ip, r1
 800dbe0:	bf38      	it	cc
 800dbe2:	2200      	movcc	r2, #0
 800dbe4:	441a      	add	r2, r3
 800dbe6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dbea:	b17b      	cbz	r3, 800dc0c <__mdiff+0x104>
 800dbec:	6106      	str	r6, [r0, #16]
 800dbee:	e7a5      	b.n	800db3c <__mdiff+0x34>
 800dbf0:	f855 8b04 	ldr.w	r8, [r5], #4
 800dbf4:	fa17 f488 	uxtah	r4, r7, r8
 800dbf8:	1422      	asrs	r2, r4, #16
 800dbfa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dbfe:	b2a4      	uxth	r4, r4
 800dc00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dc04:	f84e 4b04 	str.w	r4, [lr], #4
 800dc08:	1417      	asrs	r7, r2, #16
 800dc0a:	e7e0      	b.n	800dbce <__mdiff+0xc6>
 800dc0c:	3e01      	subs	r6, #1
 800dc0e:	e7ea      	b.n	800dbe6 <__mdiff+0xde>
 800dc10:	0800fbe1 	.word	0x0800fbe1
 800dc14:	0800fc70 	.word	0x0800fc70

0800dc18 <__ulp>:
 800dc18:	b082      	sub	sp, #8
 800dc1a:	ed8d 0b00 	vstr	d0, [sp]
 800dc1e:	9b01      	ldr	r3, [sp, #4]
 800dc20:	4912      	ldr	r1, [pc, #72]	; (800dc6c <__ulp+0x54>)
 800dc22:	4019      	ands	r1, r3
 800dc24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dc28:	2900      	cmp	r1, #0
 800dc2a:	dd05      	ble.n	800dc38 <__ulp+0x20>
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	460b      	mov	r3, r1
 800dc30:	ec43 2b10 	vmov	d0, r2, r3
 800dc34:	b002      	add	sp, #8
 800dc36:	4770      	bx	lr
 800dc38:	4249      	negs	r1, r1
 800dc3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dc3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dc42:	f04f 0200 	mov.w	r2, #0
 800dc46:	f04f 0300 	mov.w	r3, #0
 800dc4a:	da04      	bge.n	800dc56 <__ulp+0x3e>
 800dc4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dc50:	fa41 f300 	asr.w	r3, r1, r0
 800dc54:	e7ec      	b.n	800dc30 <__ulp+0x18>
 800dc56:	f1a0 0114 	sub.w	r1, r0, #20
 800dc5a:	291e      	cmp	r1, #30
 800dc5c:	bfda      	itte	le
 800dc5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dc62:	fa20 f101 	lsrle.w	r1, r0, r1
 800dc66:	2101      	movgt	r1, #1
 800dc68:	460a      	mov	r2, r1
 800dc6a:	e7e1      	b.n	800dc30 <__ulp+0x18>
 800dc6c:	7ff00000 	.word	0x7ff00000

0800dc70 <__b2d>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	6905      	ldr	r5, [r0, #16]
 800dc74:	f100 0714 	add.w	r7, r0, #20
 800dc78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dc7c:	1f2e      	subs	r6, r5, #4
 800dc7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dc82:	4620      	mov	r0, r4
 800dc84:	f7ff fd52 	bl	800d72c <__hi0bits>
 800dc88:	f1c0 0320 	rsb	r3, r0, #32
 800dc8c:	280a      	cmp	r0, #10
 800dc8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dd0c <__b2d+0x9c>
 800dc92:	600b      	str	r3, [r1, #0]
 800dc94:	dc14      	bgt.n	800dcc0 <__b2d+0x50>
 800dc96:	f1c0 0e0b 	rsb	lr, r0, #11
 800dc9a:	fa24 f10e 	lsr.w	r1, r4, lr
 800dc9e:	42b7      	cmp	r7, r6
 800dca0:	ea41 030c 	orr.w	r3, r1, ip
 800dca4:	bf34      	ite	cc
 800dca6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dcaa:	2100      	movcs	r1, #0
 800dcac:	3015      	adds	r0, #21
 800dcae:	fa04 f000 	lsl.w	r0, r4, r0
 800dcb2:	fa21 f10e 	lsr.w	r1, r1, lr
 800dcb6:	ea40 0201 	orr.w	r2, r0, r1
 800dcba:	ec43 2b10 	vmov	d0, r2, r3
 800dcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcc0:	42b7      	cmp	r7, r6
 800dcc2:	bf3a      	itte	cc
 800dcc4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dcc8:	f1a5 0608 	subcc.w	r6, r5, #8
 800dccc:	2100      	movcs	r1, #0
 800dcce:	380b      	subs	r0, #11
 800dcd0:	d017      	beq.n	800dd02 <__b2d+0x92>
 800dcd2:	f1c0 0c20 	rsb	ip, r0, #32
 800dcd6:	fa04 f500 	lsl.w	r5, r4, r0
 800dcda:	42be      	cmp	r6, r7
 800dcdc:	fa21 f40c 	lsr.w	r4, r1, ip
 800dce0:	ea45 0504 	orr.w	r5, r5, r4
 800dce4:	bf8c      	ite	hi
 800dce6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dcea:	2400      	movls	r4, #0
 800dcec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dcf0:	fa01 f000 	lsl.w	r0, r1, r0
 800dcf4:	fa24 f40c 	lsr.w	r4, r4, ip
 800dcf8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dcfc:	ea40 0204 	orr.w	r2, r0, r4
 800dd00:	e7db      	b.n	800dcba <__b2d+0x4a>
 800dd02:	ea44 030c 	orr.w	r3, r4, ip
 800dd06:	460a      	mov	r2, r1
 800dd08:	e7d7      	b.n	800dcba <__b2d+0x4a>
 800dd0a:	bf00      	nop
 800dd0c:	3ff00000 	.word	0x3ff00000

0800dd10 <__d2b>:
 800dd10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd14:	4689      	mov	r9, r1
 800dd16:	2101      	movs	r1, #1
 800dd18:	ec57 6b10 	vmov	r6, r7, d0
 800dd1c:	4690      	mov	r8, r2
 800dd1e:	f7ff fc0f 	bl	800d540 <_Balloc>
 800dd22:	4604      	mov	r4, r0
 800dd24:	b930      	cbnz	r0, 800dd34 <__d2b+0x24>
 800dd26:	4602      	mov	r2, r0
 800dd28:	4b25      	ldr	r3, [pc, #148]	; (800ddc0 <__d2b+0xb0>)
 800dd2a:	4826      	ldr	r0, [pc, #152]	; (800ddc4 <__d2b+0xb4>)
 800dd2c:	f240 310a 	movw	r1, #778	; 0x30a
 800dd30:	f7fe f9a0 	bl	800c074 <__assert_func>
 800dd34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd3c:	bb35      	cbnz	r5, 800dd8c <__d2b+0x7c>
 800dd3e:	2e00      	cmp	r6, #0
 800dd40:	9301      	str	r3, [sp, #4]
 800dd42:	d028      	beq.n	800dd96 <__d2b+0x86>
 800dd44:	4668      	mov	r0, sp
 800dd46:	9600      	str	r6, [sp, #0]
 800dd48:	f7ff fd10 	bl	800d76c <__lo0bits>
 800dd4c:	9900      	ldr	r1, [sp, #0]
 800dd4e:	b300      	cbz	r0, 800dd92 <__d2b+0x82>
 800dd50:	9a01      	ldr	r2, [sp, #4]
 800dd52:	f1c0 0320 	rsb	r3, r0, #32
 800dd56:	fa02 f303 	lsl.w	r3, r2, r3
 800dd5a:	430b      	orrs	r3, r1
 800dd5c:	40c2      	lsrs	r2, r0
 800dd5e:	6163      	str	r3, [r4, #20]
 800dd60:	9201      	str	r2, [sp, #4]
 800dd62:	9b01      	ldr	r3, [sp, #4]
 800dd64:	61a3      	str	r3, [r4, #24]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	bf14      	ite	ne
 800dd6a:	2202      	movne	r2, #2
 800dd6c:	2201      	moveq	r2, #1
 800dd6e:	6122      	str	r2, [r4, #16]
 800dd70:	b1d5      	cbz	r5, 800dda8 <__d2b+0x98>
 800dd72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd76:	4405      	add	r5, r0
 800dd78:	f8c9 5000 	str.w	r5, [r9]
 800dd7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd80:	f8c8 0000 	str.w	r0, [r8]
 800dd84:	4620      	mov	r0, r4
 800dd86:	b003      	add	sp, #12
 800dd88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd90:	e7d5      	b.n	800dd3e <__d2b+0x2e>
 800dd92:	6161      	str	r1, [r4, #20]
 800dd94:	e7e5      	b.n	800dd62 <__d2b+0x52>
 800dd96:	a801      	add	r0, sp, #4
 800dd98:	f7ff fce8 	bl	800d76c <__lo0bits>
 800dd9c:	9b01      	ldr	r3, [sp, #4]
 800dd9e:	6163      	str	r3, [r4, #20]
 800dda0:	2201      	movs	r2, #1
 800dda2:	6122      	str	r2, [r4, #16]
 800dda4:	3020      	adds	r0, #32
 800dda6:	e7e3      	b.n	800dd70 <__d2b+0x60>
 800dda8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ddb0:	f8c9 0000 	str.w	r0, [r9]
 800ddb4:	6918      	ldr	r0, [r3, #16]
 800ddb6:	f7ff fcb9 	bl	800d72c <__hi0bits>
 800ddba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddbe:	e7df      	b.n	800dd80 <__d2b+0x70>
 800ddc0:	0800fbe1 	.word	0x0800fbe1
 800ddc4:	0800fc70 	.word	0x0800fc70

0800ddc8 <__ratio>:
 800ddc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	4688      	mov	r8, r1
 800ddce:	4669      	mov	r1, sp
 800ddd0:	4681      	mov	r9, r0
 800ddd2:	f7ff ff4d 	bl	800dc70 <__b2d>
 800ddd6:	a901      	add	r1, sp, #4
 800ddd8:	4640      	mov	r0, r8
 800ddda:	ec55 4b10 	vmov	r4, r5, d0
 800ddde:	f7ff ff47 	bl	800dc70 <__b2d>
 800dde2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dde6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ddea:	eba3 0c02 	sub.w	ip, r3, r2
 800ddee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ddf2:	1a9b      	subs	r3, r3, r2
 800ddf4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ddf8:	ec51 0b10 	vmov	r0, r1, d0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	bfd6      	itet	le
 800de00:	460a      	movle	r2, r1
 800de02:	462a      	movgt	r2, r5
 800de04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de08:	468b      	mov	fp, r1
 800de0a:	462f      	mov	r7, r5
 800de0c:	bfd4      	ite	le
 800de0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800de12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de16:	4620      	mov	r0, r4
 800de18:	ee10 2a10 	vmov	r2, s0
 800de1c:	465b      	mov	r3, fp
 800de1e:	4639      	mov	r1, r7
 800de20:	f7f2 fd14 	bl	800084c <__aeabi_ddiv>
 800de24:	ec41 0b10 	vmov	d0, r0, r1
 800de28:	b003      	add	sp, #12
 800de2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de2e <__copybits>:
 800de2e:	3901      	subs	r1, #1
 800de30:	b570      	push	{r4, r5, r6, lr}
 800de32:	1149      	asrs	r1, r1, #5
 800de34:	6914      	ldr	r4, [r2, #16]
 800de36:	3101      	adds	r1, #1
 800de38:	f102 0314 	add.w	r3, r2, #20
 800de3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800de40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de44:	1f05      	subs	r5, r0, #4
 800de46:	42a3      	cmp	r3, r4
 800de48:	d30c      	bcc.n	800de64 <__copybits+0x36>
 800de4a:	1aa3      	subs	r3, r4, r2
 800de4c:	3b11      	subs	r3, #17
 800de4e:	f023 0303 	bic.w	r3, r3, #3
 800de52:	3211      	adds	r2, #17
 800de54:	42a2      	cmp	r2, r4
 800de56:	bf88      	it	hi
 800de58:	2300      	movhi	r3, #0
 800de5a:	4418      	add	r0, r3
 800de5c:	2300      	movs	r3, #0
 800de5e:	4288      	cmp	r0, r1
 800de60:	d305      	bcc.n	800de6e <__copybits+0x40>
 800de62:	bd70      	pop	{r4, r5, r6, pc}
 800de64:	f853 6b04 	ldr.w	r6, [r3], #4
 800de68:	f845 6f04 	str.w	r6, [r5, #4]!
 800de6c:	e7eb      	b.n	800de46 <__copybits+0x18>
 800de6e:	f840 3b04 	str.w	r3, [r0], #4
 800de72:	e7f4      	b.n	800de5e <__copybits+0x30>

0800de74 <__any_on>:
 800de74:	f100 0214 	add.w	r2, r0, #20
 800de78:	6900      	ldr	r0, [r0, #16]
 800de7a:	114b      	asrs	r3, r1, #5
 800de7c:	4298      	cmp	r0, r3
 800de7e:	b510      	push	{r4, lr}
 800de80:	db11      	blt.n	800dea6 <__any_on+0x32>
 800de82:	dd0a      	ble.n	800de9a <__any_on+0x26>
 800de84:	f011 011f 	ands.w	r1, r1, #31
 800de88:	d007      	beq.n	800de9a <__any_on+0x26>
 800de8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800de8e:	fa24 f001 	lsr.w	r0, r4, r1
 800de92:	fa00 f101 	lsl.w	r1, r0, r1
 800de96:	428c      	cmp	r4, r1
 800de98:	d10b      	bne.n	800deb2 <__any_on+0x3e>
 800de9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d803      	bhi.n	800deaa <__any_on+0x36>
 800dea2:	2000      	movs	r0, #0
 800dea4:	bd10      	pop	{r4, pc}
 800dea6:	4603      	mov	r3, r0
 800dea8:	e7f7      	b.n	800de9a <__any_on+0x26>
 800deaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800deae:	2900      	cmp	r1, #0
 800deb0:	d0f5      	beq.n	800de9e <__any_on+0x2a>
 800deb2:	2001      	movs	r0, #1
 800deb4:	e7f6      	b.n	800dea4 <__any_on+0x30>

0800deb6 <_calloc_r>:
 800deb6:	b513      	push	{r0, r1, r4, lr}
 800deb8:	434a      	muls	r2, r1
 800deba:	4611      	mov	r1, r2
 800debc:	9201      	str	r2, [sp, #4]
 800debe:	f000 f859 	bl	800df74 <_malloc_r>
 800dec2:	4604      	mov	r4, r0
 800dec4:	b118      	cbz	r0, 800dece <_calloc_r+0x18>
 800dec6:	9a01      	ldr	r2, [sp, #4]
 800dec8:	2100      	movs	r1, #0
 800deca:	f7fc fa5d 	bl	800a388 <memset>
 800dece:	4620      	mov	r0, r4
 800ded0:	b002      	add	sp, #8
 800ded2:	bd10      	pop	{r4, pc}

0800ded4 <_free_r>:
 800ded4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ded6:	2900      	cmp	r1, #0
 800ded8:	d048      	beq.n	800df6c <_free_r+0x98>
 800deda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dede:	9001      	str	r0, [sp, #4]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	f1a1 0404 	sub.w	r4, r1, #4
 800dee6:	bfb8      	it	lt
 800dee8:	18e4      	addlt	r4, r4, r3
 800deea:	f001 faaf 	bl	800f44c <__malloc_lock>
 800deee:	4a20      	ldr	r2, [pc, #128]	; (800df70 <_free_r+0x9c>)
 800def0:	9801      	ldr	r0, [sp, #4]
 800def2:	6813      	ldr	r3, [r2, #0]
 800def4:	4615      	mov	r5, r2
 800def6:	b933      	cbnz	r3, 800df06 <_free_r+0x32>
 800def8:	6063      	str	r3, [r4, #4]
 800defa:	6014      	str	r4, [r2, #0]
 800defc:	b003      	add	sp, #12
 800defe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df02:	f001 baa9 	b.w	800f458 <__malloc_unlock>
 800df06:	42a3      	cmp	r3, r4
 800df08:	d90b      	bls.n	800df22 <_free_r+0x4e>
 800df0a:	6821      	ldr	r1, [r4, #0]
 800df0c:	1862      	adds	r2, r4, r1
 800df0e:	4293      	cmp	r3, r2
 800df10:	bf04      	itt	eq
 800df12:	681a      	ldreq	r2, [r3, #0]
 800df14:	685b      	ldreq	r3, [r3, #4]
 800df16:	6063      	str	r3, [r4, #4]
 800df18:	bf04      	itt	eq
 800df1a:	1852      	addeq	r2, r2, r1
 800df1c:	6022      	streq	r2, [r4, #0]
 800df1e:	602c      	str	r4, [r5, #0]
 800df20:	e7ec      	b.n	800defc <_free_r+0x28>
 800df22:	461a      	mov	r2, r3
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	b10b      	cbz	r3, 800df2c <_free_r+0x58>
 800df28:	42a3      	cmp	r3, r4
 800df2a:	d9fa      	bls.n	800df22 <_free_r+0x4e>
 800df2c:	6811      	ldr	r1, [r2, #0]
 800df2e:	1855      	adds	r5, r2, r1
 800df30:	42a5      	cmp	r5, r4
 800df32:	d10b      	bne.n	800df4c <_free_r+0x78>
 800df34:	6824      	ldr	r4, [r4, #0]
 800df36:	4421      	add	r1, r4
 800df38:	1854      	adds	r4, r2, r1
 800df3a:	42a3      	cmp	r3, r4
 800df3c:	6011      	str	r1, [r2, #0]
 800df3e:	d1dd      	bne.n	800defc <_free_r+0x28>
 800df40:	681c      	ldr	r4, [r3, #0]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	6053      	str	r3, [r2, #4]
 800df46:	4421      	add	r1, r4
 800df48:	6011      	str	r1, [r2, #0]
 800df4a:	e7d7      	b.n	800defc <_free_r+0x28>
 800df4c:	d902      	bls.n	800df54 <_free_r+0x80>
 800df4e:	230c      	movs	r3, #12
 800df50:	6003      	str	r3, [r0, #0]
 800df52:	e7d3      	b.n	800defc <_free_r+0x28>
 800df54:	6825      	ldr	r5, [r4, #0]
 800df56:	1961      	adds	r1, r4, r5
 800df58:	428b      	cmp	r3, r1
 800df5a:	bf04      	itt	eq
 800df5c:	6819      	ldreq	r1, [r3, #0]
 800df5e:	685b      	ldreq	r3, [r3, #4]
 800df60:	6063      	str	r3, [r4, #4]
 800df62:	bf04      	itt	eq
 800df64:	1949      	addeq	r1, r1, r5
 800df66:	6021      	streq	r1, [r4, #0]
 800df68:	6054      	str	r4, [r2, #4]
 800df6a:	e7c7      	b.n	800defc <_free_r+0x28>
 800df6c:	b003      	add	sp, #12
 800df6e:	bd30      	pop	{r4, r5, pc}
 800df70:	200002c0 	.word	0x200002c0

0800df74 <_malloc_r>:
 800df74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df76:	1ccd      	adds	r5, r1, #3
 800df78:	f025 0503 	bic.w	r5, r5, #3
 800df7c:	3508      	adds	r5, #8
 800df7e:	2d0c      	cmp	r5, #12
 800df80:	bf38      	it	cc
 800df82:	250c      	movcc	r5, #12
 800df84:	2d00      	cmp	r5, #0
 800df86:	4606      	mov	r6, r0
 800df88:	db01      	blt.n	800df8e <_malloc_r+0x1a>
 800df8a:	42a9      	cmp	r1, r5
 800df8c:	d903      	bls.n	800df96 <_malloc_r+0x22>
 800df8e:	230c      	movs	r3, #12
 800df90:	6033      	str	r3, [r6, #0]
 800df92:	2000      	movs	r0, #0
 800df94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df96:	f001 fa59 	bl	800f44c <__malloc_lock>
 800df9a:	4921      	ldr	r1, [pc, #132]	; (800e020 <_malloc_r+0xac>)
 800df9c:	680a      	ldr	r2, [r1, #0]
 800df9e:	4614      	mov	r4, r2
 800dfa0:	b99c      	cbnz	r4, 800dfca <_malloc_r+0x56>
 800dfa2:	4f20      	ldr	r7, [pc, #128]	; (800e024 <_malloc_r+0xb0>)
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	b923      	cbnz	r3, 800dfb2 <_malloc_r+0x3e>
 800dfa8:	4621      	mov	r1, r4
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f000 fe2c 	bl	800ec08 <_sbrk_r>
 800dfb0:	6038      	str	r0, [r7, #0]
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	f000 fe27 	bl	800ec08 <_sbrk_r>
 800dfba:	1c43      	adds	r3, r0, #1
 800dfbc:	d123      	bne.n	800e006 <_malloc_r+0x92>
 800dfbe:	230c      	movs	r3, #12
 800dfc0:	6033      	str	r3, [r6, #0]
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	f001 fa48 	bl	800f458 <__malloc_unlock>
 800dfc8:	e7e3      	b.n	800df92 <_malloc_r+0x1e>
 800dfca:	6823      	ldr	r3, [r4, #0]
 800dfcc:	1b5b      	subs	r3, r3, r5
 800dfce:	d417      	bmi.n	800e000 <_malloc_r+0x8c>
 800dfd0:	2b0b      	cmp	r3, #11
 800dfd2:	d903      	bls.n	800dfdc <_malloc_r+0x68>
 800dfd4:	6023      	str	r3, [r4, #0]
 800dfd6:	441c      	add	r4, r3
 800dfd8:	6025      	str	r5, [r4, #0]
 800dfda:	e004      	b.n	800dfe6 <_malloc_r+0x72>
 800dfdc:	6863      	ldr	r3, [r4, #4]
 800dfde:	42a2      	cmp	r2, r4
 800dfe0:	bf0c      	ite	eq
 800dfe2:	600b      	streq	r3, [r1, #0]
 800dfe4:	6053      	strne	r3, [r2, #4]
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f001 fa36 	bl	800f458 <__malloc_unlock>
 800dfec:	f104 000b 	add.w	r0, r4, #11
 800dff0:	1d23      	adds	r3, r4, #4
 800dff2:	f020 0007 	bic.w	r0, r0, #7
 800dff6:	1ac2      	subs	r2, r0, r3
 800dff8:	d0cc      	beq.n	800df94 <_malloc_r+0x20>
 800dffa:	1a1b      	subs	r3, r3, r0
 800dffc:	50a3      	str	r3, [r4, r2]
 800dffe:	e7c9      	b.n	800df94 <_malloc_r+0x20>
 800e000:	4622      	mov	r2, r4
 800e002:	6864      	ldr	r4, [r4, #4]
 800e004:	e7cc      	b.n	800dfa0 <_malloc_r+0x2c>
 800e006:	1cc4      	adds	r4, r0, #3
 800e008:	f024 0403 	bic.w	r4, r4, #3
 800e00c:	42a0      	cmp	r0, r4
 800e00e:	d0e3      	beq.n	800dfd8 <_malloc_r+0x64>
 800e010:	1a21      	subs	r1, r4, r0
 800e012:	4630      	mov	r0, r6
 800e014:	f000 fdf8 	bl	800ec08 <_sbrk_r>
 800e018:	3001      	adds	r0, #1
 800e01a:	d1dd      	bne.n	800dfd8 <_malloc_r+0x64>
 800e01c:	e7cf      	b.n	800dfbe <_malloc_r+0x4a>
 800e01e:	bf00      	nop
 800e020:	200002c0 	.word	0x200002c0
 800e024:	200002c4 	.word	0x200002c4

0800e028 <__ssputs_r>:
 800e028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e02c:	688e      	ldr	r6, [r1, #8]
 800e02e:	429e      	cmp	r6, r3
 800e030:	4682      	mov	sl, r0
 800e032:	460c      	mov	r4, r1
 800e034:	4690      	mov	r8, r2
 800e036:	461f      	mov	r7, r3
 800e038:	d838      	bhi.n	800e0ac <__ssputs_r+0x84>
 800e03a:	898a      	ldrh	r2, [r1, #12]
 800e03c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e040:	d032      	beq.n	800e0a8 <__ssputs_r+0x80>
 800e042:	6825      	ldr	r5, [r4, #0]
 800e044:	6909      	ldr	r1, [r1, #16]
 800e046:	eba5 0901 	sub.w	r9, r5, r1
 800e04a:	6965      	ldr	r5, [r4, #20]
 800e04c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e054:	3301      	adds	r3, #1
 800e056:	444b      	add	r3, r9
 800e058:	106d      	asrs	r5, r5, #1
 800e05a:	429d      	cmp	r5, r3
 800e05c:	bf38      	it	cc
 800e05e:	461d      	movcc	r5, r3
 800e060:	0553      	lsls	r3, r2, #21
 800e062:	d531      	bpl.n	800e0c8 <__ssputs_r+0xa0>
 800e064:	4629      	mov	r1, r5
 800e066:	f7ff ff85 	bl	800df74 <_malloc_r>
 800e06a:	4606      	mov	r6, r0
 800e06c:	b950      	cbnz	r0, 800e084 <__ssputs_r+0x5c>
 800e06e:	230c      	movs	r3, #12
 800e070:	f8ca 3000 	str.w	r3, [sl]
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e07a:	81a3      	strh	r3, [r4, #12]
 800e07c:	f04f 30ff 	mov.w	r0, #4294967295
 800e080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e084:	6921      	ldr	r1, [r4, #16]
 800e086:	464a      	mov	r2, r9
 800e088:	f7ff fa4c 	bl	800d524 <memcpy>
 800e08c:	89a3      	ldrh	r3, [r4, #12]
 800e08e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e096:	81a3      	strh	r3, [r4, #12]
 800e098:	6126      	str	r6, [r4, #16]
 800e09a:	6165      	str	r5, [r4, #20]
 800e09c:	444e      	add	r6, r9
 800e09e:	eba5 0509 	sub.w	r5, r5, r9
 800e0a2:	6026      	str	r6, [r4, #0]
 800e0a4:	60a5      	str	r5, [r4, #8]
 800e0a6:	463e      	mov	r6, r7
 800e0a8:	42be      	cmp	r6, r7
 800e0aa:	d900      	bls.n	800e0ae <__ssputs_r+0x86>
 800e0ac:	463e      	mov	r6, r7
 800e0ae:	4632      	mov	r2, r6
 800e0b0:	6820      	ldr	r0, [r4, #0]
 800e0b2:	4641      	mov	r1, r8
 800e0b4:	f001 f9b0 	bl	800f418 <memmove>
 800e0b8:	68a3      	ldr	r3, [r4, #8]
 800e0ba:	6822      	ldr	r2, [r4, #0]
 800e0bc:	1b9b      	subs	r3, r3, r6
 800e0be:	4432      	add	r2, r6
 800e0c0:	60a3      	str	r3, [r4, #8]
 800e0c2:	6022      	str	r2, [r4, #0]
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	e7db      	b.n	800e080 <__ssputs_r+0x58>
 800e0c8:	462a      	mov	r2, r5
 800e0ca:	f001 f9cb 	bl	800f464 <_realloc_r>
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d1e1      	bne.n	800e098 <__ssputs_r+0x70>
 800e0d4:	6921      	ldr	r1, [r4, #16]
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	f7ff fefc 	bl	800ded4 <_free_r>
 800e0dc:	e7c7      	b.n	800e06e <__ssputs_r+0x46>
	...

0800e0e0 <_svfiprintf_r>:
 800e0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	4698      	mov	r8, r3
 800e0e6:	898b      	ldrh	r3, [r1, #12]
 800e0e8:	061b      	lsls	r3, r3, #24
 800e0ea:	b09d      	sub	sp, #116	; 0x74
 800e0ec:	4607      	mov	r7, r0
 800e0ee:	460d      	mov	r5, r1
 800e0f0:	4614      	mov	r4, r2
 800e0f2:	d50e      	bpl.n	800e112 <_svfiprintf_r+0x32>
 800e0f4:	690b      	ldr	r3, [r1, #16]
 800e0f6:	b963      	cbnz	r3, 800e112 <_svfiprintf_r+0x32>
 800e0f8:	2140      	movs	r1, #64	; 0x40
 800e0fa:	f7ff ff3b 	bl	800df74 <_malloc_r>
 800e0fe:	6028      	str	r0, [r5, #0]
 800e100:	6128      	str	r0, [r5, #16]
 800e102:	b920      	cbnz	r0, 800e10e <_svfiprintf_r+0x2e>
 800e104:	230c      	movs	r3, #12
 800e106:	603b      	str	r3, [r7, #0]
 800e108:	f04f 30ff 	mov.w	r0, #4294967295
 800e10c:	e0d1      	b.n	800e2b2 <_svfiprintf_r+0x1d2>
 800e10e:	2340      	movs	r3, #64	; 0x40
 800e110:	616b      	str	r3, [r5, #20]
 800e112:	2300      	movs	r3, #0
 800e114:	9309      	str	r3, [sp, #36]	; 0x24
 800e116:	2320      	movs	r3, #32
 800e118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e11c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e120:	2330      	movs	r3, #48	; 0x30
 800e122:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e2cc <_svfiprintf_r+0x1ec>
 800e126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e12a:	f04f 0901 	mov.w	r9, #1
 800e12e:	4623      	mov	r3, r4
 800e130:	469a      	mov	sl, r3
 800e132:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e136:	b10a      	cbz	r2, 800e13c <_svfiprintf_r+0x5c>
 800e138:	2a25      	cmp	r2, #37	; 0x25
 800e13a:	d1f9      	bne.n	800e130 <_svfiprintf_r+0x50>
 800e13c:	ebba 0b04 	subs.w	fp, sl, r4
 800e140:	d00b      	beq.n	800e15a <_svfiprintf_r+0x7a>
 800e142:	465b      	mov	r3, fp
 800e144:	4622      	mov	r2, r4
 800e146:	4629      	mov	r1, r5
 800e148:	4638      	mov	r0, r7
 800e14a:	f7ff ff6d 	bl	800e028 <__ssputs_r>
 800e14e:	3001      	adds	r0, #1
 800e150:	f000 80aa 	beq.w	800e2a8 <_svfiprintf_r+0x1c8>
 800e154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e156:	445a      	add	r2, fp
 800e158:	9209      	str	r2, [sp, #36]	; 0x24
 800e15a:	f89a 3000 	ldrb.w	r3, [sl]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f000 80a2 	beq.w	800e2a8 <_svfiprintf_r+0x1c8>
 800e164:	2300      	movs	r3, #0
 800e166:	f04f 32ff 	mov.w	r2, #4294967295
 800e16a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e16e:	f10a 0a01 	add.w	sl, sl, #1
 800e172:	9304      	str	r3, [sp, #16]
 800e174:	9307      	str	r3, [sp, #28]
 800e176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e17a:	931a      	str	r3, [sp, #104]	; 0x68
 800e17c:	4654      	mov	r4, sl
 800e17e:	2205      	movs	r2, #5
 800e180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e184:	4851      	ldr	r0, [pc, #324]	; (800e2cc <_svfiprintf_r+0x1ec>)
 800e186:	f7f2 f82b 	bl	80001e0 <memchr>
 800e18a:	9a04      	ldr	r2, [sp, #16]
 800e18c:	b9d8      	cbnz	r0, 800e1c6 <_svfiprintf_r+0xe6>
 800e18e:	06d0      	lsls	r0, r2, #27
 800e190:	bf44      	itt	mi
 800e192:	2320      	movmi	r3, #32
 800e194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e198:	0711      	lsls	r1, r2, #28
 800e19a:	bf44      	itt	mi
 800e19c:	232b      	movmi	r3, #43	; 0x2b
 800e19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a6:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a8:	d015      	beq.n	800e1d6 <_svfiprintf_r+0xf6>
 800e1aa:	9a07      	ldr	r2, [sp, #28]
 800e1ac:	4654      	mov	r4, sl
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f04f 0c0a 	mov.w	ip, #10
 800e1b4:	4621      	mov	r1, r4
 800e1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1ba:	3b30      	subs	r3, #48	; 0x30
 800e1bc:	2b09      	cmp	r3, #9
 800e1be:	d94e      	bls.n	800e25e <_svfiprintf_r+0x17e>
 800e1c0:	b1b0      	cbz	r0, 800e1f0 <_svfiprintf_r+0x110>
 800e1c2:	9207      	str	r2, [sp, #28]
 800e1c4:	e014      	b.n	800e1f0 <_svfiprintf_r+0x110>
 800e1c6:	eba0 0308 	sub.w	r3, r0, r8
 800e1ca:	fa09 f303 	lsl.w	r3, r9, r3
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	9304      	str	r3, [sp, #16]
 800e1d2:	46a2      	mov	sl, r4
 800e1d4:	e7d2      	b.n	800e17c <_svfiprintf_r+0x9c>
 800e1d6:	9b03      	ldr	r3, [sp, #12]
 800e1d8:	1d19      	adds	r1, r3, #4
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	9103      	str	r1, [sp, #12]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	bfbb      	ittet	lt
 800e1e2:	425b      	neglt	r3, r3
 800e1e4:	f042 0202 	orrlt.w	r2, r2, #2
 800e1e8:	9307      	strge	r3, [sp, #28]
 800e1ea:	9307      	strlt	r3, [sp, #28]
 800e1ec:	bfb8      	it	lt
 800e1ee:	9204      	strlt	r2, [sp, #16]
 800e1f0:	7823      	ldrb	r3, [r4, #0]
 800e1f2:	2b2e      	cmp	r3, #46	; 0x2e
 800e1f4:	d10c      	bne.n	800e210 <_svfiprintf_r+0x130>
 800e1f6:	7863      	ldrb	r3, [r4, #1]
 800e1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800e1fa:	d135      	bne.n	800e268 <_svfiprintf_r+0x188>
 800e1fc:	9b03      	ldr	r3, [sp, #12]
 800e1fe:	1d1a      	adds	r2, r3, #4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	9203      	str	r2, [sp, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	bfb8      	it	lt
 800e208:	f04f 33ff 	movlt.w	r3, #4294967295
 800e20c:	3402      	adds	r4, #2
 800e20e:	9305      	str	r3, [sp, #20]
 800e210:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e2dc <_svfiprintf_r+0x1fc>
 800e214:	7821      	ldrb	r1, [r4, #0]
 800e216:	2203      	movs	r2, #3
 800e218:	4650      	mov	r0, sl
 800e21a:	f7f1 ffe1 	bl	80001e0 <memchr>
 800e21e:	b140      	cbz	r0, 800e232 <_svfiprintf_r+0x152>
 800e220:	2340      	movs	r3, #64	; 0x40
 800e222:	eba0 000a 	sub.w	r0, r0, sl
 800e226:	fa03 f000 	lsl.w	r0, r3, r0
 800e22a:	9b04      	ldr	r3, [sp, #16]
 800e22c:	4303      	orrs	r3, r0
 800e22e:	3401      	adds	r4, #1
 800e230:	9304      	str	r3, [sp, #16]
 800e232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e236:	4826      	ldr	r0, [pc, #152]	; (800e2d0 <_svfiprintf_r+0x1f0>)
 800e238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e23c:	2206      	movs	r2, #6
 800e23e:	f7f1 ffcf 	bl	80001e0 <memchr>
 800e242:	2800      	cmp	r0, #0
 800e244:	d038      	beq.n	800e2b8 <_svfiprintf_r+0x1d8>
 800e246:	4b23      	ldr	r3, [pc, #140]	; (800e2d4 <_svfiprintf_r+0x1f4>)
 800e248:	bb1b      	cbnz	r3, 800e292 <_svfiprintf_r+0x1b2>
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	3307      	adds	r3, #7
 800e24e:	f023 0307 	bic.w	r3, r3, #7
 800e252:	3308      	adds	r3, #8
 800e254:	9303      	str	r3, [sp, #12]
 800e256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e258:	4433      	add	r3, r6
 800e25a:	9309      	str	r3, [sp, #36]	; 0x24
 800e25c:	e767      	b.n	800e12e <_svfiprintf_r+0x4e>
 800e25e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e262:	460c      	mov	r4, r1
 800e264:	2001      	movs	r0, #1
 800e266:	e7a5      	b.n	800e1b4 <_svfiprintf_r+0xd4>
 800e268:	2300      	movs	r3, #0
 800e26a:	3401      	adds	r4, #1
 800e26c:	9305      	str	r3, [sp, #20]
 800e26e:	4619      	mov	r1, r3
 800e270:	f04f 0c0a 	mov.w	ip, #10
 800e274:	4620      	mov	r0, r4
 800e276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e27a:	3a30      	subs	r2, #48	; 0x30
 800e27c:	2a09      	cmp	r2, #9
 800e27e:	d903      	bls.n	800e288 <_svfiprintf_r+0x1a8>
 800e280:	2b00      	cmp	r3, #0
 800e282:	d0c5      	beq.n	800e210 <_svfiprintf_r+0x130>
 800e284:	9105      	str	r1, [sp, #20]
 800e286:	e7c3      	b.n	800e210 <_svfiprintf_r+0x130>
 800e288:	fb0c 2101 	mla	r1, ip, r1, r2
 800e28c:	4604      	mov	r4, r0
 800e28e:	2301      	movs	r3, #1
 800e290:	e7f0      	b.n	800e274 <_svfiprintf_r+0x194>
 800e292:	ab03      	add	r3, sp, #12
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	462a      	mov	r2, r5
 800e298:	4b0f      	ldr	r3, [pc, #60]	; (800e2d8 <_svfiprintf_r+0x1f8>)
 800e29a:	a904      	add	r1, sp, #16
 800e29c:	4638      	mov	r0, r7
 800e29e:	f7fc f91b 	bl	800a4d8 <_printf_float>
 800e2a2:	1c42      	adds	r2, r0, #1
 800e2a4:	4606      	mov	r6, r0
 800e2a6:	d1d6      	bne.n	800e256 <_svfiprintf_r+0x176>
 800e2a8:	89ab      	ldrh	r3, [r5, #12]
 800e2aa:	065b      	lsls	r3, r3, #25
 800e2ac:	f53f af2c 	bmi.w	800e108 <_svfiprintf_r+0x28>
 800e2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2b2:	b01d      	add	sp, #116	; 0x74
 800e2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2b8:	ab03      	add	r3, sp, #12
 800e2ba:	9300      	str	r3, [sp, #0]
 800e2bc:	462a      	mov	r2, r5
 800e2be:	4b06      	ldr	r3, [pc, #24]	; (800e2d8 <_svfiprintf_r+0x1f8>)
 800e2c0:	a904      	add	r1, sp, #16
 800e2c2:	4638      	mov	r0, r7
 800e2c4:	f7fc fbac 	bl	800aa20 <_printf_i>
 800e2c8:	e7eb      	b.n	800e2a2 <_svfiprintf_r+0x1c2>
 800e2ca:	bf00      	nop
 800e2cc:	0800fdcc 	.word	0x0800fdcc
 800e2d0:	0800fdd6 	.word	0x0800fdd6
 800e2d4:	0800a4d9 	.word	0x0800a4d9
 800e2d8:	0800e029 	.word	0x0800e029
 800e2dc:	0800fdd2 	.word	0x0800fdd2

0800e2e0 <_sungetc_r>:
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	1c4b      	adds	r3, r1, #1
 800e2e4:	4614      	mov	r4, r2
 800e2e6:	d103      	bne.n	800e2f0 <_sungetc_r+0x10>
 800e2e8:	f04f 35ff 	mov.w	r5, #4294967295
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	bd38      	pop	{r3, r4, r5, pc}
 800e2f0:	8993      	ldrh	r3, [r2, #12]
 800e2f2:	f023 0320 	bic.w	r3, r3, #32
 800e2f6:	8193      	strh	r3, [r2, #12]
 800e2f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2fa:	6852      	ldr	r2, [r2, #4]
 800e2fc:	b2cd      	uxtb	r5, r1
 800e2fe:	b18b      	cbz	r3, 800e324 <_sungetc_r+0x44>
 800e300:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e302:	4293      	cmp	r3, r2
 800e304:	dd08      	ble.n	800e318 <_sungetc_r+0x38>
 800e306:	6823      	ldr	r3, [r4, #0]
 800e308:	1e5a      	subs	r2, r3, #1
 800e30a:	6022      	str	r2, [r4, #0]
 800e30c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e310:	6863      	ldr	r3, [r4, #4]
 800e312:	3301      	adds	r3, #1
 800e314:	6063      	str	r3, [r4, #4]
 800e316:	e7e9      	b.n	800e2ec <_sungetc_r+0xc>
 800e318:	4621      	mov	r1, r4
 800e31a:	f000 fd4f 	bl	800edbc <__submore>
 800e31e:	2800      	cmp	r0, #0
 800e320:	d0f1      	beq.n	800e306 <_sungetc_r+0x26>
 800e322:	e7e1      	b.n	800e2e8 <_sungetc_r+0x8>
 800e324:	6921      	ldr	r1, [r4, #16]
 800e326:	6823      	ldr	r3, [r4, #0]
 800e328:	b151      	cbz	r1, 800e340 <_sungetc_r+0x60>
 800e32a:	4299      	cmp	r1, r3
 800e32c:	d208      	bcs.n	800e340 <_sungetc_r+0x60>
 800e32e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e332:	42a9      	cmp	r1, r5
 800e334:	d104      	bne.n	800e340 <_sungetc_r+0x60>
 800e336:	3b01      	subs	r3, #1
 800e338:	3201      	adds	r2, #1
 800e33a:	6023      	str	r3, [r4, #0]
 800e33c:	6062      	str	r2, [r4, #4]
 800e33e:	e7d5      	b.n	800e2ec <_sungetc_r+0xc>
 800e340:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e348:	6363      	str	r3, [r4, #52]	; 0x34
 800e34a:	2303      	movs	r3, #3
 800e34c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e34e:	4623      	mov	r3, r4
 800e350:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	2301      	movs	r3, #1
 800e358:	e7dc      	b.n	800e314 <_sungetc_r+0x34>

0800e35a <__ssrefill_r>:
 800e35a:	b510      	push	{r4, lr}
 800e35c:	460c      	mov	r4, r1
 800e35e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e360:	b169      	cbz	r1, 800e37e <__ssrefill_r+0x24>
 800e362:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e366:	4299      	cmp	r1, r3
 800e368:	d001      	beq.n	800e36e <__ssrefill_r+0x14>
 800e36a:	f7ff fdb3 	bl	800ded4 <_free_r>
 800e36e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e370:	6063      	str	r3, [r4, #4]
 800e372:	2000      	movs	r0, #0
 800e374:	6360      	str	r0, [r4, #52]	; 0x34
 800e376:	b113      	cbz	r3, 800e37e <__ssrefill_r+0x24>
 800e378:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e37a:	6023      	str	r3, [r4, #0]
 800e37c:	bd10      	pop	{r4, pc}
 800e37e:	6923      	ldr	r3, [r4, #16]
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	2300      	movs	r3, #0
 800e384:	6063      	str	r3, [r4, #4]
 800e386:	89a3      	ldrh	r3, [r4, #12]
 800e388:	f043 0320 	orr.w	r3, r3, #32
 800e38c:	81a3      	strh	r3, [r4, #12]
 800e38e:	f04f 30ff 	mov.w	r0, #4294967295
 800e392:	e7f3      	b.n	800e37c <__ssrefill_r+0x22>

0800e394 <__ssvfiscanf_r>:
 800e394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e398:	460c      	mov	r4, r1
 800e39a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800e39e:	2100      	movs	r1, #0
 800e3a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e3a4:	49b2      	ldr	r1, [pc, #712]	; (800e670 <__ssvfiscanf_r+0x2dc>)
 800e3a6:	91a0      	str	r1, [sp, #640]	; 0x280
 800e3a8:	f10d 0804 	add.w	r8, sp, #4
 800e3ac:	49b1      	ldr	r1, [pc, #708]	; (800e674 <__ssvfiscanf_r+0x2e0>)
 800e3ae:	4fb2      	ldr	r7, [pc, #712]	; (800e678 <__ssvfiscanf_r+0x2e4>)
 800e3b0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800e67c <__ssvfiscanf_r+0x2e8>
 800e3b4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e3b8:	4606      	mov	r6, r0
 800e3ba:	91a1      	str	r1, [sp, #644]	; 0x284
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	f892 a000 	ldrb.w	sl, [r2]
 800e3c2:	f1ba 0f00 	cmp.w	sl, #0
 800e3c6:	f000 8151 	beq.w	800e66c <__ssvfiscanf_r+0x2d8>
 800e3ca:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800e3ce:	f013 0308 	ands.w	r3, r3, #8
 800e3d2:	f102 0501 	add.w	r5, r2, #1
 800e3d6:	d019      	beq.n	800e40c <__ssvfiscanf_r+0x78>
 800e3d8:	6863      	ldr	r3, [r4, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	dd0f      	ble.n	800e3fe <__ssvfiscanf_r+0x6a>
 800e3de:	6823      	ldr	r3, [r4, #0]
 800e3e0:	781a      	ldrb	r2, [r3, #0]
 800e3e2:	5cba      	ldrb	r2, [r7, r2]
 800e3e4:	0712      	lsls	r2, r2, #28
 800e3e6:	d401      	bmi.n	800e3ec <__ssvfiscanf_r+0x58>
 800e3e8:	462a      	mov	r2, r5
 800e3ea:	e7e8      	b.n	800e3be <__ssvfiscanf_r+0x2a>
 800e3ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e3ee:	3201      	adds	r2, #1
 800e3f0:	9245      	str	r2, [sp, #276]	; 0x114
 800e3f2:	6862      	ldr	r2, [r4, #4]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	3a01      	subs	r2, #1
 800e3f8:	6062      	str	r2, [r4, #4]
 800e3fa:	6023      	str	r3, [r4, #0]
 800e3fc:	e7ec      	b.n	800e3d8 <__ssvfiscanf_r+0x44>
 800e3fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e400:	4621      	mov	r1, r4
 800e402:	4630      	mov	r0, r6
 800e404:	4798      	blx	r3
 800e406:	2800      	cmp	r0, #0
 800e408:	d0e9      	beq.n	800e3de <__ssvfiscanf_r+0x4a>
 800e40a:	e7ed      	b.n	800e3e8 <__ssvfiscanf_r+0x54>
 800e40c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800e410:	f040 8083 	bne.w	800e51a <__ssvfiscanf_r+0x186>
 800e414:	9341      	str	r3, [sp, #260]	; 0x104
 800e416:	9343      	str	r3, [sp, #268]	; 0x10c
 800e418:	7853      	ldrb	r3, [r2, #1]
 800e41a:	2b2a      	cmp	r3, #42	; 0x2a
 800e41c:	bf02      	ittt	eq
 800e41e:	2310      	moveq	r3, #16
 800e420:	1c95      	addeq	r5, r2, #2
 800e422:	9341      	streq	r3, [sp, #260]	; 0x104
 800e424:	220a      	movs	r2, #10
 800e426:	46ab      	mov	fp, r5
 800e428:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800e42c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e430:	2b09      	cmp	r3, #9
 800e432:	d91d      	bls.n	800e470 <__ssvfiscanf_r+0xdc>
 800e434:	4891      	ldr	r0, [pc, #580]	; (800e67c <__ssvfiscanf_r+0x2e8>)
 800e436:	2203      	movs	r2, #3
 800e438:	f7f1 fed2 	bl	80001e0 <memchr>
 800e43c:	b140      	cbz	r0, 800e450 <__ssvfiscanf_r+0xbc>
 800e43e:	2301      	movs	r3, #1
 800e440:	eba0 0009 	sub.w	r0, r0, r9
 800e444:	fa03 f000 	lsl.w	r0, r3, r0
 800e448:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e44a:	4318      	orrs	r0, r3
 800e44c:	9041      	str	r0, [sp, #260]	; 0x104
 800e44e:	465d      	mov	r5, fp
 800e450:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e454:	2b78      	cmp	r3, #120	; 0x78
 800e456:	d806      	bhi.n	800e466 <__ssvfiscanf_r+0xd2>
 800e458:	2b57      	cmp	r3, #87	; 0x57
 800e45a:	d810      	bhi.n	800e47e <__ssvfiscanf_r+0xea>
 800e45c:	2b25      	cmp	r3, #37	; 0x25
 800e45e:	d05c      	beq.n	800e51a <__ssvfiscanf_r+0x186>
 800e460:	d856      	bhi.n	800e510 <__ssvfiscanf_r+0x17c>
 800e462:	2b00      	cmp	r3, #0
 800e464:	d074      	beq.n	800e550 <__ssvfiscanf_r+0x1bc>
 800e466:	2303      	movs	r3, #3
 800e468:	9347      	str	r3, [sp, #284]	; 0x11c
 800e46a:	230a      	movs	r3, #10
 800e46c:	9342      	str	r3, [sp, #264]	; 0x108
 800e46e:	e081      	b.n	800e574 <__ssvfiscanf_r+0x1e0>
 800e470:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e472:	fb02 1303 	mla	r3, r2, r3, r1
 800e476:	3b30      	subs	r3, #48	; 0x30
 800e478:	9343      	str	r3, [sp, #268]	; 0x10c
 800e47a:	465d      	mov	r5, fp
 800e47c:	e7d3      	b.n	800e426 <__ssvfiscanf_r+0x92>
 800e47e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e482:	2a20      	cmp	r2, #32
 800e484:	d8ef      	bhi.n	800e466 <__ssvfiscanf_r+0xd2>
 800e486:	a101      	add	r1, pc, #4	; (adr r1, 800e48c <__ssvfiscanf_r+0xf8>)
 800e488:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e48c:	0800e55f 	.word	0x0800e55f
 800e490:	0800e467 	.word	0x0800e467
 800e494:	0800e467 	.word	0x0800e467
 800e498:	0800e5bd 	.word	0x0800e5bd
 800e49c:	0800e467 	.word	0x0800e467
 800e4a0:	0800e467 	.word	0x0800e467
 800e4a4:	0800e467 	.word	0x0800e467
 800e4a8:	0800e467 	.word	0x0800e467
 800e4ac:	0800e467 	.word	0x0800e467
 800e4b0:	0800e467 	.word	0x0800e467
 800e4b4:	0800e467 	.word	0x0800e467
 800e4b8:	0800e5d3 	.word	0x0800e5d3
 800e4bc:	0800e5a9 	.word	0x0800e5a9
 800e4c0:	0800e517 	.word	0x0800e517
 800e4c4:	0800e517 	.word	0x0800e517
 800e4c8:	0800e517 	.word	0x0800e517
 800e4cc:	0800e467 	.word	0x0800e467
 800e4d0:	0800e5ad 	.word	0x0800e5ad
 800e4d4:	0800e467 	.word	0x0800e467
 800e4d8:	0800e467 	.word	0x0800e467
 800e4dc:	0800e467 	.word	0x0800e467
 800e4e0:	0800e467 	.word	0x0800e467
 800e4e4:	0800e5e3 	.word	0x0800e5e3
 800e4e8:	0800e5b5 	.word	0x0800e5b5
 800e4ec:	0800e557 	.word	0x0800e557
 800e4f0:	0800e467 	.word	0x0800e467
 800e4f4:	0800e467 	.word	0x0800e467
 800e4f8:	0800e5df 	.word	0x0800e5df
 800e4fc:	0800e467 	.word	0x0800e467
 800e500:	0800e5a9 	.word	0x0800e5a9
 800e504:	0800e467 	.word	0x0800e467
 800e508:	0800e467 	.word	0x0800e467
 800e50c:	0800e55f 	.word	0x0800e55f
 800e510:	3b45      	subs	r3, #69	; 0x45
 800e512:	2b02      	cmp	r3, #2
 800e514:	d8a7      	bhi.n	800e466 <__ssvfiscanf_r+0xd2>
 800e516:	2305      	movs	r3, #5
 800e518:	e02b      	b.n	800e572 <__ssvfiscanf_r+0x1de>
 800e51a:	6863      	ldr	r3, [r4, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	dd0d      	ble.n	800e53c <__ssvfiscanf_r+0x1a8>
 800e520:	6823      	ldr	r3, [r4, #0]
 800e522:	781a      	ldrb	r2, [r3, #0]
 800e524:	4552      	cmp	r2, sl
 800e526:	f040 80a1 	bne.w	800e66c <__ssvfiscanf_r+0x2d8>
 800e52a:	3301      	adds	r3, #1
 800e52c:	6862      	ldr	r2, [r4, #4]
 800e52e:	6023      	str	r3, [r4, #0]
 800e530:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e532:	3a01      	subs	r2, #1
 800e534:	3301      	adds	r3, #1
 800e536:	6062      	str	r2, [r4, #4]
 800e538:	9345      	str	r3, [sp, #276]	; 0x114
 800e53a:	e755      	b.n	800e3e8 <__ssvfiscanf_r+0x54>
 800e53c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e53e:	4621      	mov	r1, r4
 800e540:	4630      	mov	r0, r6
 800e542:	4798      	blx	r3
 800e544:	2800      	cmp	r0, #0
 800e546:	d0eb      	beq.n	800e520 <__ssvfiscanf_r+0x18c>
 800e548:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e54a:	2800      	cmp	r0, #0
 800e54c:	f040 8084 	bne.w	800e658 <__ssvfiscanf_r+0x2c4>
 800e550:	f04f 30ff 	mov.w	r0, #4294967295
 800e554:	e086      	b.n	800e664 <__ssvfiscanf_r+0x2d0>
 800e556:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e558:	f042 0220 	orr.w	r2, r2, #32
 800e55c:	9241      	str	r2, [sp, #260]	; 0x104
 800e55e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e564:	9241      	str	r2, [sp, #260]	; 0x104
 800e566:	2210      	movs	r2, #16
 800e568:	2b6f      	cmp	r3, #111	; 0x6f
 800e56a:	9242      	str	r2, [sp, #264]	; 0x108
 800e56c:	bf34      	ite	cc
 800e56e:	2303      	movcc	r3, #3
 800e570:	2304      	movcs	r3, #4
 800e572:	9347      	str	r3, [sp, #284]	; 0x11c
 800e574:	6863      	ldr	r3, [r4, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	dd41      	ble.n	800e5fe <__ssvfiscanf_r+0x26a>
 800e57a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e57c:	0659      	lsls	r1, r3, #25
 800e57e:	d404      	bmi.n	800e58a <__ssvfiscanf_r+0x1f6>
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	781a      	ldrb	r2, [r3, #0]
 800e584:	5cba      	ldrb	r2, [r7, r2]
 800e586:	0712      	lsls	r2, r2, #28
 800e588:	d440      	bmi.n	800e60c <__ssvfiscanf_r+0x278>
 800e58a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e58c:	2b02      	cmp	r3, #2
 800e58e:	dc4f      	bgt.n	800e630 <__ssvfiscanf_r+0x29c>
 800e590:	466b      	mov	r3, sp
 800e592:	4622      	mov	r2, r4
 800e594:	a941      	add	r1, sp, #260	; 0x104
 800e596:	4630      	mov	r0, r6
 800e598:	f000 f9ce 	bl	800e938 <_scanf_chars>
 800e59c:	2801      	cmp	r0, #1
 800e59e:	d065      	beq.n	800e66c <__ssvfiscanf_r+0x2d8>
 800e5a0:	2802      	cmp	r0, #2
 800e5a2:	f47f af21 	bne.w	800e3e8 <__ssvfiscanf_r+0x54>
 800e5a6:	e7cf      	b.n	800e548 <__ssvfiscanf_r+0x1b4>
 800e5a8:	220a      	movs	r2, #10
 800e5aa:	e7dd      	b.n	800e568 <__ssvfiscanf_r+0x1d4>
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	9342      	str	r3, [sp, #264]	; 0x108
 800e5b0:	2303      	movs	r3, #3
 800e5b2:	e7de      	b.n	800e572 <__ssvfiscanf_r+0x1de>
 800e5b4:	2308      	movs	r3, #8
 800e5b6:	9342      	str	r3, [sp, #264]	; 0x108
 800e5b8:	2304      	movs	r3, #4
 800e5ba:	e7da      	b.n	800e572 <__ssvfiscanf_r+0x1de>
 800e5bc:	4629      	mov	r1, r5
 800e5be:	4640      	mov	r0, r8
 800e5c0:	f000 fb32 	bl	800ec28 <__sccl>
 800e5c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5ca:	9341      	str	r3, [sp, #260]	; 0x104
 800e5cc:	4605      	mov	r5, r0
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e7cf      	b.n	800e572 <__ssvfiscanf_r+0x1de>
 800e5d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5d8:	9341      	str	r3, [sp, #260]	; 0x104
 800e5da:	2300      	movs	r3, #0
 800e5dc:	e7c9      	b.n	800e572 <__ssvfiscanf_r+0x1de>
 800e5de:	2302      	movs	r3, #2
 800e5e0:	e7c7      	b.n	800e572 <__ssvfiscanf_r+0x1de>
 800e5e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e5e4:	06c3      	lsls	r3, r0, #27
 800e5e6:	f53f aeff 	bmi.w	800e3e8 <__ssvfiscanf_r+0x54>
 800e5ea:	9b00      	ldr	r3, [sp, #0]
 800e5ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e5ee:	1d19      	adds	r1, r3, #4
 800e5f0:	9100      	str	r1, [sp, #0]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	07c0      	lsls	r0, r0, #31
 800e5f6:	bf4c      	ite	mi
 800e5f8:	801a      	strhmi	r2, [r3, #0]
 800e5fa:	601a      	strpl	r2, [r3, #0]
 800e5fc:	e6f4      	b.n	800e3e8 <__ssvfiscanf_r+0x54>
 800e5fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e600:	4621      	mov	r1, r4
 800e602:	4630      	mov	r0, r6
 800e604:	4798      	blx	r3
 800e606:	2800      	cmp	r0, #0
 800e608:	d0b7      	beq.n	800e57a <__ssvfiscanf_r+0x1e6>
 800e60a:	e79d      	b.n	800e548 <__ssvfiscanf_r+0x1b4>
 800e60c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e60e:	3201      	adds	r2, #1
 800e610:	9245      	str	r2, [sp, #276]	; 0x114
 800e612:	6862      	ldr	r2, [r4, #4]
 800e614:	3a01      	subs	r2, #1
 800e616:	2a00      	cmp	r2, #0
 800e618:	6062      	str	r2, [r4, #4]
 800e61a:	dd02      	ble.n	800e622 <__ssvfiscanf_r+0x28e>
 800e61c:	3301      	adds	r3, #1
 800e61e:	6023      	str	r3, [r4, #0]
 800e620:	e7ae      	b.n	800e580 <__ssvfiscanf_r+0x1ec>
 800e622:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e624:	4621      	mov	r1, r4
 800e626:	4630      	mov	r0, r6
 800e628:	4798      	blx	r3
 800e62a:	2800      	cmp	r0, #0
 800e62c:	d0a8      	beq.n	800e580 <__ssvfiscanf_r+0x1ec>
 800e62e:	e78b      	b.n	800e548 <__ssvfiscanf_r+0x1b4>
 800e630:	2b04      	cmp	r3, #4
 800e632:	dc06      	bgt.n	800e642 <__ssvfiscanf_r+0x2ae>
 800e634:	466b      	mov	r3, sp
 800e636:	4622      	mov	r2, r4
 800e638:	a941      	add	r1, sp, #260	; 0x104
 800e63a:	4630      	mov	r0, r6
 800e63c:	f000 f9d4 	bl	800e9e8 <_scanf_i>
 800e640:	e7ac      	b.n	800e59c <__ssvfiscanf_r+0x208>
 800e642:	4b0f      	ldr	r3, [pc, #60]	; (800e680 <__ssvfiscanf_r+0x2ec>)
 800e644:	2b00      	cmp	r3, #0
 800e646:	f43f aecf 	beq.w	800e3e8 <__ssvfiscanf_r+0x54>
 800e64a:	466b      	mov	r3, sp
 800e64c:	4622      	mov	r2, r4
 800e64e:	a941      	add	r1, sp, #260	; 0x104
 800e650:	4630      	mov	r0, r6
 800e652:	f7fc fb0b 	bl	800ac6c <_scanf_float>
 800e656:	e7a1      	b.n	800e59c <__ssvfiscanf_r+0x208>
 800e658:	89a3      	ldrh	r3, [r4, #12]
 800e65a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e65e:	bf18      	it	ne
 800e660:	f04f 30ff 	movne.w	r0, #4294967295
 800e664:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800e668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e66c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e66e:	e7f9      	b.n	800e664 <__ssvfiscanf_r+0x2d0>
 800e670:	0800e2e1 	.word	0x0800e2e1
 800e674:	0800e35b 	.word	0x0800e35b
 800e678:	0800fa75 	.word	0x0800fa75
 800e67c:	0800fdd2 	.word	0x0800fdd2
 800e680:	0800ac6d 	.word	0x0800ac6d

0800e684 <__sfputc_r>:
 800e684:	6893      	ldr	r3, [r2, #8]
 800e686:	3b01      	subs	r3, #1
 800e688:	2b00      	cmp	r3, #0
 800e68a:	b410      	push	{r4}
 800e68c:	6093      	str	r3, [r2, #8]
 800e68e:	da08      	bge.n	800e6a2 <__sfputc_r+0x1e>
 800e690:	6994      	ldr	r4, [r2, #24]
 800e692:	42a3      	cmp	r3, r4
 800e694:	db01      	blt.n	800e69a <__sfputc_r+0x16>
 800e696:	290a      	cmp	r1, #10
 800e698:	d103      	bne.n	800e6a2 <__sfputc_r+0x1e>
 800e69a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e69e:	f000 bbc7 	b.w	800ee30 <__swbuf_r>
 800e6a2:	6813      	ldr	r3, [r2, #0]
 800e6a4:	1c58      	adds	r0, r3, #1
 800e6a6:	6010      	str	r0, [r2, #0]
 800e6a8:	7019      	strb	r1, [r3, #0]
 800e6aa:	4608      	mov	r0, r1
 800e6ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6b0:	4770      	bx	lr

0800e6b2 <__sfputs_r>:
 800e6b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6b4:	4606      	mov	r6, r0
 800e6b6:	460f      	mov	r7, r1
 800e6b8:	4614      	mov	r4, r2
 800e6ba:	18d5      	adds	r5, r2, r3
 800e6bc:	42ac      	cmp	r4, r5
 800e6be:	d101      	bne.n	800e6c4 <__sfputs_r+0x12>
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	e007      	b.n	800e6d4 <__sfputs_r+0x22>
 800e6c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6c8:	463a      	mov	r2, r7
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f7ff ffda 	bl	800e684 <__sfputc_r>
 800e6d0:	1c43      	adds	r3, r0, #1
 800e6d2:	d1f3      	bne.n	800e6bc <__sfputs_r+0xa>
 800e6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6d8 <_vfiprintf_r>:
 800e6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6dc:	460d      	mov	r5, r1
 800e6de:	b09d      	sub	sp, #116	; 0x74
 800e6e0:	4614      	mov	r4, r2
 800e6e2:	4698      	mov	r8, r3
 800e6e4:	4606      	mov	r6, r0
 800e6e6:	b118      	cbz	r0, 800e6f0 <_vfiprintf_r+0x18>
 800e6e8:	6983      	ldr	r3, [r0, #24]
 800e6ea:	b90b      	cbnz	r3, 800e6f0 <_vfiprintf_r+0x18>
 800e6ec:	f000 fd90 	bl	800f210 <__sinit>
 800e6f0:	4b89      	ldr	r3, [pc, #548]	; (800e918 <_vfiprintf_r+0x240>)
 800e6f2:	429d      	cmp	r5, r3
 800e6f4:	d11b      	bne.n	800e72e <_vfiprintf_r+0x56>
 800e6f6:	6875      	ldr	r5, [r6, #4]
 800e6f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6fa:	07d9      	lsls	r1, r3, #31
 800e6fc:	d405      	bmi.n	800e70a <_vfiprintf_r+0x32>
 800e6fe:	89ab      	ldrh	r3, [r5, #12]
 800e700:	059a      	lsls	r2, r3, #22
 800e702:	d402      	bmi.n	800e70a <_vfiprintf_r+0x32>
 800e704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e706:	f000 fe21 	bl	800f34c <__retarget_lock_acquire_recursive>
 800e70a:	89ab      	ldrh	r3, [r5, #12]
 800e70c:	071b      	lsls	r3, r3, #28
 800e70e:	d501      	bpl.n	800e714 <_vfiprintf_r+0x3c>
 800e710:	692b      	ldr	r3, [r5, #16]
 800e712:	b9eb      	cbnz	r3, 800e750 <_vfiprintf_r+0x78>
 800e714:	4629      	mov	r1, r5
 800e716:	4630      	mov	r0, r6
 800e718:	f000 fbea 	bl	800eef0 <__swsetup_r>
 800e71c:	b1c0      	cbz	r0, 800e750 <_vfiprintf_r+0x78>
 800e71e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e720:	07dc      	lsls	r4, r3, #31
 800e722:	d50e      	bpl.n	800e742 <_vfiprintf_r+0x6a>
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	b01d      	add	sp, #116	; 0x74
 800e72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72e:	4b7b      	ldr	r3, [pc, #492]	; (800e91c <_vfiprintf_r+0x244>)
 800e730:	429d      	cmp	r5, r3
 800e732:	d101      	bne.n	800e738 <_vfiprintf_r+0x60>
 800e734:	68b5      	ldr	r5, [r6, #8]
 800e736:	e7df      	b.n	800e6f8 <_vfiprintf_r+0x20>
 800e738:	4b79      	ldr	r3, [pc, #484]	; (800e920 <_vfiprintf_r+0x248>)
 800e73a:	429d      	cmp	r5, r3
 800e73c:	bf08      	it	eq
 800e73e:	68f5      	ldreq	r5, [r6, #12]
 800e740:	e7da      	b.n	800e6f8 <_vfiprintf_r+0x20>
 800e742:	89ab      	ldrh	r3, [r5, #12]
 800e744:	0598      	lsls	r0, r3, #22
 800e746:	d4ed      	bmi.n	800e724 <_vfiprintf_r+0x4c>
 800e748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e74a:	f000 fe00 	bl	800f34e <__retarget_lock_release_recursive>
 800e74e:	e7e9      	b.n	800e724 <_vfiprintf_r+0x4c>
 800e750:	2300      	movs	r3, #0
 800e752:	9309      	str	r3, [sp, #36]	; 0x24
 800e754:	2320      	movs	r3, #32
 800e756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e75a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e75e:	2330      	movs	r3, #48	; 0x30
 800e760:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e924 <_vfiprintf_r+0x24c>
 800e764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e768:	f04f 0901 	mov.w	r9, #1
 800e76c:	4623      	mov	r3, r4
 800e76e:	469a      	mov	sl, r3
 800e770:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e774:	b10a      	cbz	r2, 800e77a <_vfiprintf_r+0xa2>
 800e776:	2a25      	cmp	r2, #37	; 0x25
 800e778:	d1f9      	bne.n	800e76e <_vfiprintf_r+0x96>
 800e77a:	ebba 0b04 	subs.w	fp, sl, r4
 800e77e:	d00b      	beq.n	800e798 <_vfiprintf_r+0xc0>
 800e780:	465b      	mov	r3, fp
 800e782:	4622      	mov	r2, r4
 800e784:	4629      	mov	r1, r5
 800e786:	4630      	mov	r0, r6
 800e788:	f7ff ff93 	bl	800e6b2 <__sfputs_r>
 800e78c:	3001      	adds	r0, #1
 800e78e:	f000 80aa 	beq.w	800e8e6 <_vfiprintf_r+0x20e>
 800e792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e794:	445a      	add	r2, fp
 800e796:	9209      	str	r2, [sp, #36]	; 0x24
 800e798:	f89a 3000 	ldrb.w	r3, [sl]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 80a2 	beq.w	800e8e6 <_vfiprintf_r+0x20e>
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7ac:	f10a 0a01 	add.w	sl, sl, #1
 800e7b0:	9304      	str	r3, [sp, #16]
 800e7b2:	9307      	str	r3, [sp, #28]
 800e7b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7b8:	931a      	str	r3, [sp, #104]	; 0x68
 800e7ba:	4654      	mov	r4, sl
 800e7bc:	2205      	movs	r2, #5
 800e7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7c2:	4858      	ldr	r0, [pc, #352]	; (800e924 <_vfiprintf_r+0x24c>)
 800e7c4:	f7f1 fd0c 	bl	80001e0 <memchr>
 800e7c8:	9a04      	ldr	r2, [sp, #16]
 800e7ca:	b9d8      	cbnz	r0, 800e804 <_vfiprintf_r+0x12c>
 800e7cc:	06d1      	lsls	r1, r2, #27
 800e7ce:	bf44      	itt	mi
 800e7d0:	2320      	movmi	r3, #32
 800e7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7d6:	0713      	lsls	r3, r2, #28
 800e7d8:	bf44      	itt	mi
 800e7da:	232b      	movmi	r3, #43	; 0x2b
 800e7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e7e4:	2b2a      	cmp	r3, #42	; 0x2a
 800e7e6:	d015      	beq.n	800e814 <_vfiprintf_r+0x13c>
 800e7e8:	9a07      	ldr	r2, [sp, #28]
 800e7ea:	4654      	mov	r4, sl
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	f04f 0c0a 	mov.w	ip, #10
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7f8:	3b30      	subs	r3, #48	; 0x30
 800e7fa:	2b09      	cmp	r3, #9
 800e7fc:	d94e      	bls.n	800e89c <_vfiprintf_r+0x1c4>
 800e7fe:	b1b0      	cbz	r0, 800e82e <_vfiprintf_r+0x156>
 800e800:	9207      	str	r2, [sp, #28]
 800e802:	e014      	b.n	800e82e <_vfiprintf_r+0x156>
 800e804:	eba0 0308 	sub.w	r3, r0, r8
 800e808:	fa09 f303 	lsl.w	r3, r9, r3
 800e80c:	4313      	orrs	r3, r2
 800e80e:	9304      	str	r3, [sp, #16]
 800e810:	46a2      	mov	sl, r4
 800e812:	e7d2      	b.n	800e7ba <_vfiprintf_r+0xe2>
 800e814:	9b03      	ldr	r3, [sp, #12]
 800e816:	1d19      	adds	r1, r3, #4
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	9103      	str	r1, [sp, #12]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	bfbb      	ittet	lt
 800e820:	425b      	neglt	r3, r3
 800e822:	f042 0202 	orrlt.w	r2, r2, #2
 800e826:	9307      	strge	r3, [sp, #28]
 800e828:	9307      	strlt	r3, [sp, #28]
 800e82a:	bfb8      	it	lt
 800e82c:	9204      	strlt	r2, [sp, #16]
 800e82e:	7823      	ldrb	r3, [r4, #0]
 800e830:	2b2e      	cmp	r3, #46	; 0x2e
 800e832:	d10c      	bne.n	800e84e <_vfiprintf_r+0x176>
 800e834:	7863      	ldrb	r3, [r4, #1]
 800e836:	2b2a      	cmp	r3, #42	; 0x2a
 800e838:	d135      	bne.n	800e8a6 <_vfiprintf_r+0x1ce>
 800e83a:	9b03      	ldr	r3, [sp, #12]
 800e83c:	1d1a      	adds	r2, r3, #4
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	9203      	str	r2, [sp, #12]
 800e842:	2b00      	cmp	r3, #0
 800e844:	bfb8      	it	lt
 800e846:	f04f 33ff 	movlt.w	r3, #4294967295
 800e84a:	3402      	adds	r4, #2
 800e84c:	9305      	str	r3, [sp, #20]
 800e84e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e934 <_vfiprintf_r+0x25c>
 800e852:	7821      	ldrb	r1, [r4, #0]
 800e854:	2203      	movs	r2, #3
 800e856:	4650      	mov	r0, sl
 800e858:	f7f1 fcc2 	bl	80001e0 <memchr>
 800e85c:	b140      	cbz	r0, 800e870 <_vfiprintf_r+0x198>
 800e85e:	2340      	movs	r3, #64	; 0x40
 800e860:	eba0 000a 	sub.w	r0, r0, sl
 800e864:	fa03 f000 	lsl.w	r0, r3, r0
 800e868:	9b04      	ldr	r3, [sp, #16]
 800e86a:	4303      	orrs	r3, r0
 800e86c:	3401      	adds	r4, #1
 800e86e:	9304      	str	r3, [sp, #16]
 800e870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e874:	482c      	ldr	r0, [pc, #176]	; (800e928 <_vfiprintf_r+0x250>)
 800e876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e87a:	2206      	movs	r2, #6
 800e87c:	f7f1 fcb0 	bl	80001e0 <memchr>
 800e880:	2800      	cmp	r0, #0
 800e882:	d03f      	beq.n	800e904 <_vfiprintf_r+0x22c>
 800e884:	4b29      	ldr	r3, [pc, #164]	; (800e92c <_vfiprintf_r+0x254>)
 800e886:	bb1b      	cbnz	r3, 800e8d0 <_vfiprintf_r+0x1f8>
 800e888:	9b03      	ldr	r3, [sp, #12]
 800e88a:	3307      	adds	r3, #7
 800e88c:	f023 0307 	bic.w	r3, r3, #7
 800e890:	3308      	adds	r3, #8
 800e892:	9303      	str	r3, [sp, #12]
 800e894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e896:	443b      	add	r3, r7
 800e898:	9309      	str	r3, [sp, #36]	; 0x24
 800e89a:	e767      	b.n	800e76c <_vfiprintf_r+0x94>
 800e89c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	2001      	movs	r0, #1
 800e8a4:	e7a5      	b.n	800e7f2 <_vfiprintf_r+0x11a>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	3401      	adds	r4, #1
 800e8aa:	9305      	str	r3, [sp, #20]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	f04f 0c0a 	mov.w	ip, #10
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8b8:	3a30      	subs	r2, #48	; 0x30
 800e8ba:	2a09      	cmp	r2, #9
 800e8bc:	d903      	bls.n	800e8c6 <_vfiprintf_r+0x1ee>
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d0c5      	beq.n	800e84e <_vfiprintf_r+0x176>
 800e8c2:	9105      	str	r1, [sp, #20]
 800e8c4:	e7c3      	b.n	800e84e <_vfiprintf_r+0x176>
 800e8c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	e7f0      	b.n	800e8b2 <_vfiprintf_r+0x1da>
 800e8d0:	ab03      	add	r3, sp, #12
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	462a      	mov	r2, r5
 800e8d6:	4b16      	ldr	r3, [pc, #88]	; (800e930 <_vfiprintf_r+0x258>)
 800e8d8:	a904      	add	r1, sp, #16
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f7fb fdfc 	bl	800a4d8 <_printf_float>
 800e8e0:	4607      	mov	r7, r0
 800e8e2:	1c78      	adds	r0, r7, #1
 800e8e4:	d1d6      	bne.n	800e894 <_vfiprintf_r+0x1bc>
 800e8e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8e8:	07d9      	lsls	r1, r3, #31
 800e8ea:	d405      	bmi.n	800e8f8 <_vfiprintf_r+0x220>
 800e8ec:	89ab      	ldrh	r3, [r5, #12]
 800e8ee:	059a      	lsls	r2, r3, #22
 800e8f0:	d402      	bmi.n	800e8f8 <_vfiprintf_r+0x220>
 800e8f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8f4:	f000 fd2b 	bl	800f34e <__retarget_lock_release_recursive>
 800e8f8:	89ab      	ldrh	r3, [r5, #12]
 800e8fa:	065b      	lsls	r3, r3, #25
 800e8fc:	f53f af12 	bmi.w	800e724 <_vfiprintf_r+0x4c>
 800e900:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e902:	e711      	b.n	800e728 <_vfiprintf_r+0x50>
 800e904:	ab03      	add	r3, sp, #12
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	462a      	mov	r2, r5
 800e90a:	4b09      	ldr	r3, [pc, #36]	; (800e930 <_vfiprintf_r+0x258>)
 800e90c:	a904      	add	r1, sp, #16
 800e90e:	4630      	mov	r0, r6
 800e910:	f7fc f886 	bl	800aa20 <_printf_i>
 800e914:	e7e4      	b.n	800e8e0 <_vfiprintf_r+0x208>
 800e916:	bf00      	nop
 800e918:	0800fe18 	.word	0x0800fe18
 800e91c:	0800fe38 	.word	0x0800fe38
 800e920:	0800fdf8 	.word	0x0800fdf8
 800e924:	0800fdcc 	.word	0x0800fdcc
 800e928:	0800fdd6 	.word	0x0800fdd6
 800e92c:	0800a4d9 	.word	0x0800a4d9
 800e930:	0800e6b3 	.word	0x0800e6b3
 800e934:	0800fdd2 	.word	0x0800fdd2

0800e938 <_scanf_chars>:
 800e938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e93c:	4615      	mov	r5, r2
 800e93e:	688a      	ldr	r2, [r1, #8]
 800e940:	4680      	mov	r8, r0
 800e942:	460c      	mov	r4, r1
 800e944:	b932      	cbnz	r2, 800e954 <_scanf_chars+0x1c>
 800e946:	698a      	ldr	r2, [r1, #24]
 800e948:	2a00      	cmp	r2, #0
 800e94a:	bf0c      	ite	eq
 800e94c:	2201      	moveq	r2, #1
 800e94e:	f04f 32ff 	movne.w	r2, #4294967295
 800e952:	608a      	str	r2, [r1, #8]
 800e954:	6822      	ldr	r2, [r4, #0]
 800e956:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e9e4 <_scanf_chars+0xac>
 800e95a:	06d1      	lsls	r1, r2, #27
 800e95c:	bf5f      	itttt	pl
 800e95e:	681a      	ldrpl	r2, [r3, #0]
 800e960:	1d11      	addpl	r1, r2, #4
 800e962:	6019      	strpl	r1, [r3, #0]
 800e964:	6816      	ldrpl	r6, [r2, #0]
 800e966:	2700      	movs	r7, #0
 800e968:	69a0      	ldr	r0, [r4, #24]
 800e96a:	b188      	cbz	r0, 800e990 <_scanf_chars+0x58>
 800e96c:	2801      	cmp	r0, #1
 800e96e:	d107      	bne.n	800e980 <_scanf_chars+0x48>
 800e970:	682b      	ldr	r3, [r5, #0]
 800e972:	781a      	ldrb	r2, [r3, #0]
 800e974:	6963      	ldr	r3, [r4, #20]
 800e976:	5c9b      	ldrb	r3, [r3, r2]
 800e978:	b953      	cbnz	r3, 800e990 <_scanf_chars+0x58>
 800e97a:	bb27      	cbnz	r7, 800e9c6 <_scanf_chars+0x8e>
 800e97c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e980:	2802      	cmp	r0, #2
 800e982:	d120      	bne.n	800e9c6 <_scanf_chars+0x8e>
 800e984:	682b      	ldr	r3, [r5, #0]
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e98c:	071b      	lsls	r3, r3, #28
 800e98e:	d41a      	bmi.n	800e9c6 <_scanf_chars+0x8e>
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	06da      	lsls	r2, r3, #27
 800e994:	bf5e      	ittt	pl
 800e996:	682b      	ldrpl	r3, [r5, #0]
 800e998:	781b      	ldrbpl	r3, [r3, #0]
 800e99a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e99e:	682a      	ldr	r2, [r5, #0]
 800e9a0:	686b      	ldr	r3, [r5, #4]
 800e9a2:	3201      	adds	r2, #1
 800e9a4:	602a      	str	r2, [r5, #0]
 800e9a6:	68a2      	ldr	r2, [r4, #8]
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	3a01      	subs	r2, #1
 800e9ac:	606b      	str	r3, [r5, #4]
 800e9ae:	3701      	adds	r7, #1
 800e9b0:	60a2      	str	r2, [r4, #8]
 800e9b2:	b142      	cbz	r2, 800e9c6 <_scanf_chars+0x8e>
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	dcd7      	bgt.n	800e968 <_scanf_chars+0x30>
 800e9b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e9bc:	4629      	mov	r1, r5
 800e9be:	4640      	mov	r0, r8
 800e9c0:	4798      	blx	r3
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d0d0      	beq.n	800e968 <_scanf_chars+0x30>
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	f013 0310 	ands.w	r3, r3, #16
 800e9cc:	d105      	bne.n	800e9da <_scanf_chars+0xa2>
 800e9ce:	68e2      	ldr	r2, [r4, #12]
 800e9d0:	3201      	adds	r2, #1
 800e9d2:	60e2      	str	r2, [r4, #12]
 800e9d4:	69a2      	ldr	r2, [r4, #24]
 800e9d6:	b102      	cbz	r2, 800e9da <_scanf_chars+0xa2>
 800e9d8:	7033      	strb	r3, [r6, #0]
 800e9da:	6923      	ldr	r3, [r4, #16]
 800e9dc:	441f      	add	r7, r3
 800e9de:	6127      	str	r7, [r4, #16]
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	e7cb      	b.n	800e97c <_scanf_chars+0x44>
 800e9e4:	0800fa75 	.word	0x0800fa75

0800e9e8 <_scanf_i>:
 800e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	4698      	mov	r8, r3
 800e9ee:	4b74      	ldr	r3, [pc, #464]	; (800ebc0 <_scanf_i+0x1d8>)
 800e9f0:	460c      	mov	r4, r1
 800e9f2:	4682      	mov	sl, r0
 800e9f4:	4616      	mov	r6, r2
 800e9f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e9fa:	b087      	sub	sp, #28
 800e9fc:	ab03      	add	r3, sp, #12
 800e9fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ea02:	4b70      	ldr	r3, [pc, #448]	; (800ebc4 <_scanf_i+0x1dc>)
 800ea04:	69a1      	ldr	r1, [r4, #24]
 800ea06:	4a70      	ldr	r2, [pc, #448]	; (800ebc8 <_scanf_i+0x1e0>)
 800ea08:	2903      	cmp	r1, #3
 800ea0a:	bf18      	it	ne
 800ea0c:	461a      	movne	r2, r3
 800ea0e:	68a3      	ldr	r3, [r4, #8]
 800ea10:	9201      	str	r2, [sp, #4]
 800ea12:	1e5a      	subs	r2, r3, #1
 800ea14:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ea18:	bf88      	it	hi
 800ea1a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ea1e:	4627      	mov	r7, r4
 800ea20:	bf82      	ittt	hi
 800ea22:	eb03 0905 	addhi.w	r9, r3, r5
 800ea26:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ea2a:	60a3      	strhi	r3, [r4, #8]
 800ea2c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ea30:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ea34:	bf98      	it	ls
 800ea36:	f04f 0900 	movls.w	r9, #0
 800ea3a:	6023      	str	r3, [r4, #0]
 800ea3c:	463d      	mov	r5, r7
 800ea3e:	f04f 0b00 	mov.w	fp, #0
 800ea42:	6831      	ldr	r1, [r6, #0]
 800ea44:	ab03      	add	r3, sp, #12
 800ea46:	7809      	ldrb	r1, [r1, #0]
 800ea48:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ea4c:	2202      	movs	r2, #2
 800ea4e:	f7f1 fbc7 	bl	80001e0 <memchr>
 800ea52:	b328      	cbz	r0, 800eaa0 <_scanf_i+0xb8>
 800ea54:	f1bb 0f01 	cmp.w	fp, #1
 800ea58:	d159      	bne.n	800eb0e <_scanf_i+0x126>
 800ea5a:	6862      	ldr	r2, [r4, #4]
 800ea5c:	b92a      	cbnz	r2, 800ea6a <_scanf_i+0x82>
 800ea5e:	6822      	ldr	r2, [r4, #0]
 800ea60:	2308      	movs	r3, #8
 800ea62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea66:	6063      	str	r3, [r4, #4]
 800ea68:	6022      	str	r2, [r4, #0]
 800ea6a:	6822      	ldr	r2, [r4, #0]
 800ea6c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ea70:	6022      	str	r2, [r4, #0]
 800ea72:	68a2      	ldr	r2, [r4, #8]
 800ea74:	1e51      	subs	r1, r2, #1
 800ea76:	60a1      	str	r1, [r4, #8]
 800ea78:	b192      	cbz	r2, 800eaa0 <_scanf_i+0xb8>
 800ea7a:	6832      	ldr	r2, [r6, #0]
 800ea7c:	1c51      	adds	r1, r2, #1
 800ea7e:	6031      	str	r1, [r6, #0]
 800ea80:	7812      	ldrb	r2, [r2, #0]
 800ea82:	f805 2b01 	strb.w	r2, [r5], #1
 800ea86:	6872      	ldr	r2, [r6, #4]
 800ea88:	3a01      	subs	r2, #1
 800ea8a:	2a00      	cmp	r2, #0
 800ea8c:	6072      	str	r2, [r6, #4]
 800ea8e:	dc07      	bgt.n	800eaa0 <_scanf_i+0xb8>
 800ea90:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ea94:	4631      	mov	r1, r6
 800ea96:	4650      	mov	r0, sl
 800ea98:	4790      	blx	r2
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	f040 8085 	bne.w	800ebaa <_scanf_i+0x1c2>
 800eaa0:	f10b 0b01 	add.w	fp, fp, #1
 800eaa4:	f1bb 0f03 	cmp.w	fp, #3
 800eaa8:	d1cb      	bne.n	800ea42 <_scanf_i+0x5a>
 800eaaa:	6863      	ldr	r3, [r4, #4]
 800eaac:	b90b      	cbnz	r3, 800eab2 <_scanf_i+0xca>
 800eaae:	230a      	movs	r3, #10
 800eab0:	6063      	str	r3, [r4, #4]
 800eab2:	6863      	ldr	r3, [r4, #4]
 800eab4:	4945      	ldr	r1, [pc, #276]	; (800ebcc <_scanf_i+0x1e4>)
 800eab6:	6960      	ldr	r0, [r4, #20]
 800eab8:	1ac9      	subs	r1, r1, r3
 800eaba:	f000 f8b5 	bl	800ec28 <__sccl>
 800eabe:	f04f 0b00 	mov.w	fp, #0
 800eac2:	68a3      	ldr	r3, [r4, #8]
 800eac4:	6822      	ldr	r2, [r4, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d03d      	beq.n	800eb46 <_scanf_i+0x15e>
 800eaca:	6831      	ldr	r1, [r6, #0]
 800eacc:	6960      	ldr	r0, [r4, #20]
 800eace:	f891 c000 	ldrb.w	ip, [r1]
 800ead2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d035      	beq.n	800eb46 <_scanf_i+0x15e>
 800eada:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800eade:	d124      	bne.n	800eb2a <_scanf_i+0x142>
 800eae0:	0510      	lsls	r0, r2, #20
 800eae2:	d522      	bpl.n	800eb2a <_scanf_i+0x142>
 800eae4:	f10b 0b01 	add.w	fp, fp, #1
 800eae8:	f1b9 0f00 	cmp.w	r9, #0
 800eaec:	d003      	beq.n	800eaf6 <_scanf_i+0x10e>
 800eaee:	3301      	adds	r3, #1
 800eaf0:	f109 39ff 	add.w	r9, r9, #4294967295
 800eaf4:	60a3      	str	r3, [r4, #8]
 800eaf6:	6873      	ldr	r3, [r6, #4]
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	6073      	str	r3, [r6, #4]
 800eafe:	dd1b      	ble.n	800eb38 <_scanf_i+0x150>
 800eb00:	6833      	ldr	r3, [r6, #0]
 800eb02:	3301      	adds	r3, #1
 800eb04:	6033      	str	r3, [r6, #0]
 800eb06:	68a3      	ldr	r3, [r4, #8]
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	60a3      	str	r3, [r4, #8]
 800eb0c:	e7d9      	b.n	800eac2 <_scanf_i+0xda>
 800eb0e:	f1bb 0f02 	cmp.w	fp, #2
 800eb12:	d1ae      	bne.n	800ea72 <_scanf_i+0x8a>
 800eb14:	6822      	ldr	r2, [r4, #0]
 800eb16:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800eb1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800eb1e:	d1bf      	bne.n	800eaa0 <_scanf_i+0xb8>
 800eb20:	2310      	movs	r3, #16
 800eb22:	6063      	str	r3, [r4, #4]
 800eb24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eb28:	e7a2      	b.n	800ea70 <_scanf_i+0x88>
 800eb2a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800eb2e:	6022      	str	r2, [r4, #0]
 800eb30:	780b      	ldrb	r3, [r1, #0]
 800eb32:	f805 3b01 	strb.w	r3, [r5], #1
 800eb36:	e7de      	b.n	800eaf6 <_scanf_i+0x10e>
 800eb38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eb3c:	4631      	mov	r1, r6
 800eb3e:	4650      	mov	r0, sl
 800eb40:	4798      	blx	r3
 800eb42:	2800      	cmp	r0, #0
 800eb44:	d0df      	beq.n	800eb06 <_scanf_i+0x11e>
 800eb46:	6823      	ldr	r3, [r4, #0]
 800eb48:	05d9      	lsls	r1, r3, #23
 800eb4a:	d50d      	bpl.n	800eb68 <_scanf_i+0x180>
 800eb4c:	42bd      	cmp	r5, r7
 800eb4e:	d909      	bls.n	800eb64 <_scanf_i+0x17c>
 800eb50:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eb54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb58:	4632      	mov	r2, r6
 800eb5a:	4650      	mov	r0, sl
 800eb5c:	4798      	blx	r3
 800eb5e:	f105 39ff 	add.w	r9, r5, #4294967295
 800eb62:	464d      	mov	r5, r9
 800eb64:	42bd      	cmp	r5, r7
 800eb66:	d028      	beq.n	800ebba <_scanf_i+0x1d2>
 800eb68:	6822      	ldr	r2, [r4, #0]
 800eb6a:	f012 0210 	ands.w	r2, r2, #16
 800eb6e:	d113      	bne.n	800eb98 <_scanf_i+0x1b0>
 800eb70:	702a      	strb	r2, [r5, #0]
 800eb72:	6863      	ldr	r3, [r4, #4]
 800eb74:	9e01      	ldr	r6, [sp, #4]
 800eb76:	4639      	mov	r1, r7
 800eb78:	4650      	mov	r0, sl
 800eb7a:	47b0      	blx	r6
 800eb7c:	f8d8 3000 	ldr.w	r3, [r8]
 800eb80:	6821      	ldr	r1, [r4, #0]
 800eb82:	1d1a      	adds	r2, r3, #4
 800eb84:	f8c8 2000 	str.w	r2, [r8]
 800eb88:	f011 0f20 	tst.w	r1, #32
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	d00f      	beq.n	800ebb0 <_scanf_i+0x1c8>
 800eb90:	6018      	str	r0, [r3, #0]
 800eb92:	68e3      	ldr	r3, [r4, #12]
 800eb94:	3301      	adds	r3, #1
 800eb96:	60e3      	str	r3, [r4, #12]
 800eb98:	1bed      	subs	r5, r5, r7
 800eb9a:	44ab      	add	fp, r5
 800eb9c:	6925      	ldr	r5, [r4, #16]
 800eb9e:	445d      	add	r5, fp
 800eba0:	6125      	str	r5, [r4, #16]
 800eba2:	2000      	movs	r0, #0
 800eba4:	b007      	add	sp, #28
 800eba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebaa:	f04f 0b00 	mov.w	fp, #0
 800ebae:	e7ca      	b.n	800eb46 <_scanf_i+0x15e>
 800ebb0:	07ca      	lsls	r2, r1, #31
 800ebb2:	bf4c      	ite	mi
 800ebb4:	8018      	strhmi	r0, [r3, #0]
 800ebb6:	6018      	strpl	r0, [r3, #0]
 800ebb8:	e7eb      	b.n	800eb92 <_scanf_i+0x1aa>
 800ebba:	2001      	movs	r0, #1
 800ebbc:	e7f2      	b.n	800eba4 <_scanf_i+0x1bc>
 800ebbe:	bf00      	nop
 800ebc0:	0800f888 	.word	0x0800f888
 800ebc4:	0800edb9 	.word	0x0800edb9
 800ebc8:	0800bfd9 	.word	0x0800bfd9
 800ebcc:	0800fdf6 	.word	0x0800fdf6

0800ebd0 <_read_r>:
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	4d07      	ldr	r5, [pc, #28]	; (800ebf0 <_read_r+0x20>)
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	4608      	mov	r0, r1
 800ebd8:	4611      	mov	r1, r2
 800ebda:	2200      	movs	r2, #0
 800ebdc:	602a      	str	r2, [r5, #0]
 800ebde:	461a      	mov	r2, r3
 800ebe0:	f7f3 fa88 	bl	80020f4 <_read>
 800ebe4:	1c43      	adds	r3, r0, #1
 800ebe6:	d102      	bne.n	800ebee <_read_r+0x1e>
 800ebe8:	682b      	ldr	r3, [r5, #0]
 800ebea:	b103      	cbz	r3, 800ebee <_read_r+0x1e>
 800ebec:	6023      	str	r3, [r4, #0]
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
 800ebf0:	20000b1c 	.word	0x20000b1c
 800ebf4:	00000000 	.word	0x00000000

0800ebf8 <nan>:
 800ebf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ec00 <nan+0x8>
 800ebfc:	4770      	bx	lr
 800ebfe:	bf00      	nop
 800ec00:	00000000 	.word	0x00000000
 800ec04:	7ff80000 	.word	0x7ff80000

0800ec08 <_sbrk_r>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	4d06      	ldr	r5, [pc, #24]	; (800ec24 <_sbrk_r+0x1c>)
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	4604      	mov	r4, r0
 800ec10:	4608      	mov	r0, r1
 800ec12:	602b      	str	r3, [r5, #0]
 800ec14:	f7f3 fadc 	bl	80021d0 <_sbrk>
 800ec18:	1c43      	adds	r3, r0, #1
 800ec1a:	d102      	bne.n	800ec22 <_sbrk_r+0x1a>
 800ec1c:	682b      	ldr	r3, [r5, #0]
 800ec1e:	b103      	cbz	r3, 800ec22 <_sbrk_r+0x1a>
 800ec20:	6023      	str	r3, [r4, #0]
 800ec22:	bd38      	pop	{r3, r4, r5, pc}
 800ec24:	20000b1c 	.word	0x20000b1c

0800ec28 <__sccl>:
 800ec28:	b570      	push	{r4, r5, r6, lr}
 800ec2a:	780b      	ldrb	r3, [r1, #0]
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	2b5e      	cmp	r3, #94	; 0x5e
 800ec30:	bf0b      	itete	eq
 800ec32:	784b      	ldrbeq	r3, [r1, #1]
 800ec34:	1c48      	addne	r0, r1, #1
 800ec36:	1c88      	addeq	r0, r1, #2
 800ec38:	2200      	movne	r2, #0
 800ec3a:	bf08      	it	eq
 800ec3c:	2201      	moveq	r2, #1
 800ec3e:	1e61      	subs	r1, r4, #1
 800ec40:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ec44:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ec48:	42a9      	cmp	r1, r5
 800ec4a:	d1fb      	bne.n	800ec44 <__sccl+0x1c>
 800ec4c:	b90b      	cbnz	r3, 800ec52 <__sccl+0x2a>
 800ec4e:	3801      	subs	r0, #1
 800ec50:	bd70      	pop	{r4, r5, r6, pc}
 800ec52:	f082 0101 	eor.w	r1, r2, #1
 800ec56:	54e1      	strb	r1, [r4, r3]
 800ec58:	1c42      	adds	r2, r0, #1
 800ec5a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800ec5e:	2d2d      	cmp	r5, #45	; 0x2d
 800ec60:	f102 36ff 	add.w	r6, r2, #4294967295
 800ec64:	4610      	mov	r0, r2
 800ec66:	d006      	beq.n	800ec76 <__sccl+0x4e>
 800ec68:	2d5d      	cmp	r5, #93	; 0x5d
 800ec6a:	d0f1      	beq.n	800ec50 <__sccl+0x28>
 800ec6c:	b90d      	cbnz	r5, 800ec72 <__sccl+0x4a>
 800ec6e:	4630      	mov	r0, r6
 800ec70:	e7ee      	b.n	800ec50 <__sccl+0x28>
 800ec72:	462b      	mov	r3, r5
 800ec74:	e7ef      	b.n	800ec56 <__sccl+0x2e>
 800ec76:	7816      	ldrb	r6, [r2, #0]
 800ec78:	2e5d      	cmp	r6, #93	; 0x5d
 800ec7a:	d0fa      	beq.n	800ec72 <__sccl+0x4a>
 800ec7c:	42b3      	cmp	r3, r6
 800ec7e:	dcf8      	bgt.n	800ec72 <__sccl+0x4a>
 800ec80:	4618      	mov	r0, r3
 800ec82:	3001      	adds	r0, #1
 800ec84:	4286      	cmp	r6, r0
 800ec86:	5421      	strb	r1, [r4, r0]
 800ec88:	dcfb      	bgt.n	800ec82 <__sccl+0x5a>
 800ec8a:	43d8      	mvns	r0, r3
 800ec8c:	4430      	add	r0, r6
 800ec8e:	1c5d      	adds	r5, r3, #1
 800ec90:	42b3      	cmp	r3, r6
 800ec92:	bfa8      	it	ge
 800ec94:	2000      	movge	r0, #0
 800ec96:	182b      	adds	r3, r5, r0
 800ec98:	3202      	adds	r2, #2
 800ec9a:	e7de      	b.n	800ec5a <__sccl+0x32>

0800ec9c <strncmp>:
 800ec9c:	b510      	push	{r4, lr}
 800ec9e:	b16a      	cbz	r2, 800ecbc <strncmp+0x20>
 800eca0:	3901      	subs	r1, #1
 800eca2:	1884      	adds	r4, r0, r2
 800eca4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800eca8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d103      	bne.n	800ecb8 <strncmp+0x1c>
 800ecb0:	42a0      	cmp	r0, r4
 800ecb2:	d001      	beq.n	800ecb8 <strncmp+0x1c>
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d1f5      	bne.n	800eca4 <strncmp+0x8>
 800ecb8:	1a98      	subs	r0, r3, r2
 800ecba:	bd10      	pop	{r4, pc}
 800ecbc:	4610      	mov	r0, r2
 800ecbe:	e7fc      	b.n	800ecba <strncmp+0x1e>

0800ecc0 <_strtoul_l.isra.0>:
 800ecc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecc4:	4e3b      	ldr	r6, [pc, #236]	; (800edb4 <_strtoul_l.isra.0+0xf4>)
 800ecc6:	4686      	mov	lr, r0
 800ecc8:	468c      	mov	ip, r1
 800ecca:	4660      	mov	r0, ip
 800eccc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ecd0:	5da5      	ldrb	r5, [r4, r6]
 800ecd2:	f015 0508 	ands.w	r5, r5, #8
 800ecd6:	d1f8      	bne.n	800ecca <_strtoul_l.isra.0+0xa>
 800ecd8:	2c2d      	cmp	r4, #45	; 0x2d
 800ecda:	d134      	bne.n	800ed46 <_strtoul_l.isra.0+0x86>
 800ecdc:	f89c 4000 	ldrb.w	r4, [ip]
 800ece0:	f04f 0801 	mov.w	r8, #1
 800ece4:	f100 0c02 	add.w	ip, r0, #2
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d05e      	beq.n	800edaa <_strtoul_l.isra.0+0xea>
 800ecec:	2b10      	cmp	r3, #16
 800ecee:	d10c      	bne.n	800ed0a <_strtoul_l.isra.0+0x4a>
 800ecf0:	2c30      	cmp	r4, #48	; 0x30
 800ecf2:	d10a      	bne.n	800ed0a <_strtoul_l.isra.0+0x4a>
 800ecf4:	f89c 0000 	ldrb.w	r0, [ip]
 800ecf8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ecfc:	2858      	cmp	r0, #88	; 0x58
 800ecfe:	d14f      	bne.n	800eda0 <_strtoul_l.isra.0+0xe0>
 800ed00:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ed04:	2310      	movs	r3, #16
 800ed06:	f10c 0c02 	add.w	ip, ip, #2
 800ed0a:	f04f 37ff 	mov.w	r7, #4294967295
 800ed0e:	2500      	movs	r5, #0
 800ed10:	fbb7 f7f3 	udiv	r7, r7, r3
 800ed14:	fb03 f907 	mul.w	r9, r3, r7
 800ed18:	ea6f 0909 	mvn.w	r9, r9
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ed22:	2e09      	cmp	r6, #9
 800ed24:	d818      	bhi.n	800ed58 <_strtoul_l.isra.0+0x98>
 800ed26:	4634      	mov	r4, r6
 800ed28:	42a3      	cmp	r3, r4
 800ed2a:	dd24      	ble.n	800ed76 <_strtoul_l.isra.0+0xb6>
 800ed2c:	2d00      	cmp	r5, #0
 800ed2e:	db1f      	blt.n	800ed70 <_strtoul_l.isra.0+0xb0>
 800ed30:	4287      	cmp	r7, r0
 800ed32:	d31d      	bcc.n	800ed70 <_strtoul_l.isra.0+0xb0>
 800ed34:	d101      	bne.n	800ed3a <_strtoul_l.isra.0+0x7a>
 800ed36:	45a1      	cmp	r9, r4
 800ed38:	db1a      	blt.n	800ed70 <_strtoul_l.isra.0+0xb0>
 800ed3a:	fb00 4003 	mla	r0, r0, r3, r4
 800ed3e:	2501      	movs	r5, #1
 800ed40:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ed44:	e7eb      	b.n	800ed1e <_strtoul_l.isra.0+0x5e>
 800ed46:	2c2b      	cmp	r4, #43	; 0x2b
 800ed48:	bf08      	it	eq
 800ed4a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ed4e:	46a8      	mov	r8, r5
 800ed50:	bf08      	it	eq
 800ed52:	f100 0c02 	addeq.w	ip, r0, #2
 800ed56:	e7c7      	b.n	800ece8 <_strtoul_l.isra.0+0x28>
 800ed58:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ed5c:	2e19      	cmp	r6, #25
 800ed5e:	d801      	bhi.n	800ed64 <_strtoul_l.isra.0+0xa4>
 800ed60:	3c37      	subs	r4, #55	; 0x37
 800ed62:	e7e1      	b.n	800ed28 <_strtoul_l.isra.0+0x68>
 800ed64:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ed68:	2e19      	cmp	r6, #25
 800ed6a:	d804      	bhi.n	800ed76 <_strtoul_l.isra.0+0xb6>
 800ed6c:	3c57      	subs	r4, #87	; 0x57
 800ed6e:	e7db      	b.n	800ed28 <_strtoul_l.isra.0+0x68>
 800ed70:	f04f 35ff 	mov.w	r5, #4294967295
 800ed74:	e7e4      	b.n	800ed40 <_strtoul_l.isra.0+0x80>
 800ed76:	2d00      	cmp	r5, #0
 800ed78:	da07      	bge.n	800ed8a <_strtoul_l.isra.0+0xca>
 800ed7a:	2322      	movs	r3, #34	; 0x22
 800ed7c:	f8ce 3000 	str.w	r3, [lr]
 800ed80:	f04f 30ff 	mov.w	r0, #4294967295
 800ed84:	b942      	cbnz	r2, 800ed98 <_strtoul_l.isra.0+0xd8>
 800ed86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed8a:	f1b8 0f00 	cmp.w	r8, #0
 800ed8e:	d000      	beq.n	800ed92 <_strtoul_l.isra.0+0xd2>
 800ed90:	4240      	negs	r0, r0
 800ed92:	2a00      	cmp	r2, #0
 800ed94:	d0f7      	beq.n	800ed86 <_strtoul_l.isra.0+0xc6>
 800ed96:	b10d      	cbz	r5, 800ed9c <_strtoul_l.isra.0+0xdc>
 800ed98:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ed9c:	6011      	str	r1, [r2, #0]
 800ed9e:	e7f2      	b.n	800ed86 <_strtoul_l.isra.0+0xc6>
 800eda0:	2430      	movs	r4, #48	; 0x30
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d1b1      	bne.n	800ed0a <_strtoul_l.isra.0+0x4a>
 800eda6:	2308      	movs	r3, #8
 800eda8:	e7af      	b.n	800ed0a <_strtoul_l.isra.0+0x4a>
 800edaa:	2c30      	cmp	r4, #48	; 0x30
 800edac:	d0a2      	beq.n	800ecf4 <_strtoul_l.isra.0+0x34>
 800edae:	230a      	movs	r3, #10
 800edb0:	e7ab      	b.n	800ed0a <_strtoul_l.isra.0+0x4a>
 800edb2:	bf00      	nop
 800edb4:	0800fa75 	.word	0x0800fa75

0800edb8 <_strtoul_r>:
 800edb8:	f7ff bf82 	b.w	800ecc0 <_strtoul_l.isra.0>

0800edbc <__submore>:
 800edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc0:	460c      	mov	r4, r1
 800edc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800edc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edc8:	4299      	cmp	r1, r3
 800edca:	d11d      	bne.n	800ee08 <__submore+0x4c>
 800edcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800edd0:	f7ff f8d0 	bl	800df74 <_malloc_r>
 800edd4:	b918      	cbnz	r0, 800edde <__submore+0x22>
 800edd6:	f04f 30ff 	mov.w	r0, #4294967295
 800edda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ede2:	63a3      	str	r3, [r4, #56]	; 0x38
 800ede4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ede8:	6360      	str	r0, [r4, #52]	; 0x34
 800edea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800edee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800edf2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800edf6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800edfa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800edfe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ee02:	6020      	str	r0, [r4, #0]
 800ee04:	2000      	movs	r0, #0
 800ee06:	e7e8      	b.n	800edda <__submore+0x1e>
 800ee08:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ee0a:	0077      	lsls	r7, r6, #1
 800ee0c:	463a      	mov	r2, r7
 800ee0e:	f000 fb29 	bl	800f464 <_realloc_r>
 800ee12:	4605      	mov	r5, r0
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d0de      	beq.n	800edd6 <__submore+0x1a>
 800ee18:	eb00 0806 	add.w	r8, r0, r6
 800ee1c:	4601      	mov	r1, r0
 800ee1e:	4632      	mov	r2, r6
 800ee20:	4640      	mov	r0, r8
 800ee22:	f7fe fb7f 	bl	800d524 <memcpy>
 800ee26:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ee2a:	f8c4 8000 	str.w	r8, [r4]
 800ee2e:	e7e9      	b.n	800ee04 <__submore+0x48>

0800ee30 <__swbuf_r>:
 800ee30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee32:	460e      	mov	r6, r1
 800ee34:	4614      	mov	r4, r2
 800ee36:	4605      	mov	r5, r0
 800ee38:	b118      	cbz	r0, 800ee42 <__swbuf_r+0x12>
 800ee3a:	6983      	ldr	r3, [r0, #24]
 800ee3c:	b90b      	cbnz	r3, 800ee42 <__swbuf_r+0x12>
 800ee3e:	f000 f9e7 	bl	800f210 <__sinit>
 800ee42:	4b21      	ldr	r3, [pc, #132]	; (800eec8 <__swbuf_r+0x98>)
 800ee44:	429c      	cmp	r4, r3
 800ee46:	d12b      	bne.n	800eea0 <__swbuf_r+0x70>
 800ee48:	686c      	ldr	r4, [r5, #4]
 800ee4a:	69a3      	ldr	r3, [r4, #24]
 800ee4c:	60a3      	str	r3, [r4, #8]
 800ee4e:	89a3      	ldrh	r3, [r4, #12]
 800ee50:	071a      	lsls	r2, r3, #28
 800ee52:	d52f      	bpl.n	800eeb4 <__swbuf_r+0x84>
 800ee54:	6923      	ldr	r3, [r4, #16]
 800ee56:	b36b      	cbz	r3, 800eeb4 <__swbuf_r+0x84>
 800ee58:	6923      	ldr	r3, [r4, #16]
 800ee5a:	6820      	ldr	r0, [r4, #0]
 800ee5c:	1ac0      	subs	r0, r0, r3
 800ee5e:	6963      	ldr	r3, [r4, #20]
 800ee60:	b2f6      	uxtb	r6, r6
 800ee62:	4283      	cmp	r3, r0
 800ee64:	4637      	mov	r7, r6
 800ee66:	dc04      	bgt.n	800ee72 <__swbuf_r+0x42>
 800ee68:	4621      	mov	r1, r4
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f000 f93c 	bl	800f0e8 <_fflush_r>
 800ee70:	bb30      	cbnz	r0, 800eec0 <__swbuf_r+0x90>
 800ee72:	68a3      	ldr	r3, [r4, #8]
 800ee74:	3b01      	subs	r3, #1
 800ee76:	60a3      	str	r3, [r4, #8]
 800ee78:	6823      	ldr	r3, [r4, #0]
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	6022      	str	r2, [r4, #0]
 800ee7e:	701e      	strb	r6, [r3, #0]
 800ee80:	6963      	ldr	r3, [r4, #20]
 800ee82:	3001      	adds	r0, #1
 800ee84:	4283      	cmp	r3, r0
 800ee86:	d004      	beq.n	800ee92 <__swbuf_r+0x62>
 800ee88:	89a3      	ldrh	r3, [r4, #12]
 800ee8a:	07db      	lsls	r3, r3, #31
 800ee8c:	d506      	bpl.n	800ee9c <__swbuf_r+0x6c>
 800ee8e:	2e0a      	cmp	r6, #10
 800ee90:	d104      	bne.n	800ee9c <__swbuf_r+0x6c>
 800ee92:	4621      	mov	r1, r4
 800ee94:	4628      	mov	r0, r5
 800ee96:	f000 f927 	bl	800f0e8 <_fflush_r>
 800ee9a:	b988      	cbnz	r0, 800eec0 <__swbuf_r+0x90>
 800ee9c:	4638      	mov	r0, r7
 800ee9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea0:	4b0a      	ldr	r3, [pc, #40]	; (800eecc <__swbuf_r+0x9c>)
 800eea2:	429c      	cmp	r4, r3
 800eea4:	d101      	bne.n	800eeaa <__swbuf_r+0x7a>
 800eea6:	68ac      	ldr	r4, [r5, #8]
 800eea8:	e7cf      	b.n	800ee4a <__swbuf_r+0x1a>
 800eeaa:	4b09      	ldr	r3, [pc, #36]	; (800eed0 <__swbuf_r+0xa0>)
 800eeac:	429c      	cmp	r4, r3
 800eeae:	bf08      	it	eq
 800eeb0:	68ec      	ldreq	r4, [r5, #12]
 800eeb2:	e7ca      	b.n	800ee4a <__swbuf_r+0x1a>
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	f000 f81a 	bl	800eef0 <__swsetup_r>
 800eebc:	2800      	cmp	r0, #0
 800eebe:	d0cb      	beq.n	800ee58 <__swbuf_r+0x28>
 800eec0:	f04f 37ff 	mov.w	r7, #4294967295
 800eec4:	e7ea      	b.n	800ee9c <__swbuf_r+0x6c>
 800eec6:	bf00      	nop
 800eec8:	0800fe18 	.word	0x0800fe18
 800eecc:	0800fe38 	.word	0x0800fe38
 800eed0:	0800fdf8 	.word	0x0800fdf8

0800eed4 <__ascii_wctomb>:
 800eed4:	b149      	cbz	r1, 800eeea <__ascii_wctomb+0x16>
 800eed6:	2aff      	cmp	r2, #255	; 0xff
 800eed8:	bf85      	ittet	hi
 800eeda:	238a      	movhi	r3, #138	; 0x8a
 800eedc:	6003      	strhi	r3, [r0, #0]
 800eede:	700a      	strbls	r2, [r1, #0]
 800eee0:	f04f 30ff 	movhi.w	r0, #4294967295
 800eee4:	bf98      	it	ls
 800eee6:	2001      	movls	r0, #1
 800eee8:	4770      	bx	lr
 800eeea:	4608      	mov	r0, r1
 800eeec:	4770      	bx	lr
	...

0800eef0 <__swsetup_r>:
 800eef0:	4b32      	ldr	r3, [pc, #200]	; (800efbc <__swsetup_r+0xcc>)
 800eef2:	b570      	push	{r4, r5, r6, lr}
 800eef4:	681d      	ldr	r5, [r3, #0]
 800eef6:	4606      	mov	r6, r0
 800eef8:	460c      	mov	r4, r1
 800eefa:	b125      	cbz	r5, 800ef06 <__swsetup_r+0x16>
 800eefc:	69ab      	ldr	r3, [r5, #24]
 800eefe:	b913      	cbnz	r3, 800ef06 <__swsetup_r+0x16>
 800ef00:	4628      	mov	r0, r5
 800ef02:	f000 f985 	bl	800f210 <__sinit>
 800ef06:	4b2e      	ldr	r3, [pc, #184]	; (800efc0 <__swsetup_r+0xd0>)
 800ef08:	429c      	cmp	r4, r3
 800ef0a:	d10f      	bne.n	800ef2c <__swsetup_r+0x3c>
 800ef0c:	686c      	ldr	r4, [r5, #4]
 800ef0e:	89a3      	ldrh	r3, [r4, #12]
 800ef10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef14:	0719      	lsls	r1, r3, #28
 800ef16:	d42c      	bmi.n	800ef72 <__swsetup_r+0x82>
 800ef18:	06dd      	lsls	r5, r3, #27
 800ef1a:	d411      	bmi.n	800ef40 <__swsetup_r+0x50>
 800ef1c:	2309      	movs	r3, #9
 800ef1e:	6033      	str	r3, [r6, #0]
 800ef20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef24:	81a3      	strh	r3, [r4, #12]
 800ef26:	f04f 30ff 	mov.w	r0, #4294967295
 800ef2a:	e03e      	b.n	800efaa <__swsetup_r+0xba>
 800ef2c:	4b25      	ldr	r3, [pc, #148]	; (800efc4 <__swsetup_r+0xd4>)
 800ef2e:	429c      	cmp	r4, r3
 800ef30:	d101      	bne.n	800ef36 <__swsetup_r+0x46>
 800ef32:	68ac      	ldr	r4, [r5, #8]
 800ef34:	e7eb      	b.n	800ef0e <__swsetup_r+0x1e>
 800ef36:	4b24      	ldr	r3, [pc, #144]	; (800efc8 <__swsetup_r+0xd8>)
 800ef38:	429c      	cmp	r4, r3
 800ef3a:	bf08      	it	eq
 800ef3c:	68ec      	ldreq	r4, [r5, #12]
 800ef3e:	e7e6      	b.n	800ef0e <__swsetup_r+0x1e>
 800ef40:	0758      	lsls	r0, r3, #29
 800ef42:	d512      	bpl.n	800ef6a <__swsetup_r+0x7a>
 800ef44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef46:	b141      	cbz	r1, 800ef5a <__swsetup_r+0x6a>
 800ef48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef4c:	4299      	cmp	r1, r3
 800ef4e:	d002      	beq.n	800ef56 <__swsetup_r+0x66>
 800ef50:	4630      	mov	r0, r6
 800ef52:	f7fe ffbf 	bl	800ded4 <_free_r>
 800ef56:	2300      	movs	r3, #0
 800ef58:	6363      	str	r3, [r4, #52]	; 0x34
 800ef5a:	89a3      	ldrh	r3, [r4, #12]
 800ef5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef60:	81a3      	strh	r3, [r4, #12]
 800ef62:	2300      	movs	r3, #0
 800ef64:	6063      	str	r3, [r4, #4]
 800ef66:	6923      	ldr	r3, [r4, #16]
 800ef68:	6023      	str	r3, [r4, #0]
 800ef6a:	89a3      	ldrh	r3, [r4, #12]
 800ef6c:	f043 0308 	orr.w	r3, r3, #8
 800ef70:	81a3      	strh	r3, [r4, #12]
 800ef72:	6923      	ldr	r3, [r4, #16]
 800ef74:	b94b      	cbnz	r3, 800ef8a <__swsetup_r+0x9a>
 800ef76:	89a3      	ldrh	r3, [r4, #12]
 800ef78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef80:	d003      	beq.n	800ef8a <__swsetup_r+0x9a>
 800ef82:	4621      	mov	r1, r4
 800ef84:	4630      	mov	r0, r6
 800ef86:	f000 fa07 	bl	800f398 <__smakebuf_r>
 800ef8a:	89a0      	ldrh	r0, [r4, #12]
 800ef8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef90:	f010 0301 	ands.w	r3, r0, #1
 800ef94:	d00a      	beq.n	800efac <__swsetup_r+0xbc>
 800ef96:	2300      	movs	r3, #0
 800ef98:	60a3      	str	r3, [r4, #8]
 800ef9a:	6963      	ldr	r3, [r4, #20]
 800ef9c:	425b      	negs	r3, r3
 800ef9e:	61a3      	str	r3, [r4, #24]
 800efa0:	6923      	ldr	r3, [r4, #16]
 800efa2:	b943      	cbnz	r3, 800efb6 <__swsetup_r+0xc6>
 800efa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800efa8:	d1ba      	bne.n	800ef20 <__swsetup_r+0x30>
 800efaa:	bd70      	pop	{r4, r5, r6, pc}
 800efac:	0781      	lsls	r1, r0, #30
 800efae:	bf58      	it	pl
 800efb0:	6963      	ldrpl	r3, [r4, #20]
 800efb2:	60a3      	str	r3, [r4, #8]
 800efb4:	e7f4      	b.n	800efa0 <__swsetup_r+0xb0>
 800efb6:	2000      	movs	r0, #0
 800efb8:	e7f7      	b.n	800efaa <__swsetup_r+0xba>
 800efba:	bf00      	nop
 800efbc:	20000078 	.word	0x20000078
 800efc0:	0800fe18 	.word	0x0800fe18
 800efc4:	0800fe38 	.word	0x0800fe38
 800efc8:	0800fdf8 	.word	0x0800fdf8

0800efcc <abort>:
 800efcc:	b508      	push	{r3, lr}
 800efce:	2006      	movs	r0, #6
 800efd0:	f000 fa96 	bl	800f500 <raise>
 800efd4:	2001      	movs	r0, #1
 800efd6:	f7f3 f883 	bl	80020e0 <_exit>
	...

0800efdc <__sflush_r>:
 800efdc:	898a      	ldrh	r2, [r1, #12]
 800efde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe2:	4605      	mov	r5, r0
 800efe4:	0710      	lsls	r0, r2, #28
 800efe6:	460c      	mov	r4, r1
 800efe8:	d458      	bmi.n	800f09c <__sflush_r+0xc0>
 800efea:	684b      	ldr	r3, [r1, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	dc05      	bgt.n	800effc <__sflush_r+0x20>
 800eff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	dc02      	bgt.n	800effc <__sflush_r+0x20>
 800eff6:	2000      	movs	r0, #0
 800eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800effe:	2e00      	cmp	r6, #0
 800f000:	d0f9      	beq.n	800eff6 <__sflush_r+0x1a>
 800f002:	2300      	movs	r3, #0
 800f004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f008:	682f      	ldr	r7, [r5, #0]
 800f00a:	602b      	str	r3, [r5, #0]
 800f00c:	d032      	beq.n	800f074 <__sflush_r+0x98>
 800f00e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f010:	89a3      	ldrh	r3, [r4, #12]
 800f012:	075a      	lsls	r2, r3, #29
 800f014:	d505      	bpl.n	800f022 <__sflush_r+0x46>
 800f016:	6863      	ldr	r3, [r4, #4]
 800f018:	1ac0      	subs	r0, r0, r3
 800f01a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f01c:	b10b      	cbz	r3, 800f022 <__sflush_r+0x46>
 800f01e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f020:	1ac0      	subs	r0, r0, r3
 800f022:	2300      	movs	r3, #0
 800f024:	4602      	mov	r2, r0
 800f026:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f028:	6a21      	ldr	r1, [r4, #32]
 800f02a:	4628      	mov	r0, r5
 800f02c:	47b0      	blx	r6
 800f02e:	1c43      	adds	r3, r0, #1
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	d106      	bne.n	800f042 <__sflush_r+0x66>
 800f034:	6829      	ldr	r1, [r5, #0]
 800f036:	291d      	cmp	r1, #29
 800f038:	d82c      	bhi.n	800f094 <__sflush_r+0xb8>
 800f03a:	4a2a      	ldr	r2, [pc, #168]	; (800f0e4 <__sflush_r+0x108>)
 800f03c:	40ca      	lsrs	r2, r1
 800f03e:	07d6      	lsls	r6, r2, #31
 800f040:	d528      	bpl.n	800f094 <__sflush_r+0xb8>
 800f042:	2200      	movs	r2, #0
 800f044:	6062      	str	r2, [r4, #4]
 800f046:	04d9      	lsls	r1, r3, #19
 800f048:	6922      	ldr	r2, [r4, #16]
 800f04a:	6022      	str	r2, [r4, #0]
 800f04c:	d504      	bpl.n	800f058 <__sflush_r+0x7c>
 800f04e:	1c42      	adds	r2, r0, #1
 800f050:	d101      	bne.n	800f056 <__sflush_r+0x7a>
 800f052:	682b      	ldr	r3, [r5, #0]
 800f054:	b903      	cbnz	r3, 800f058 <__sflush_r+0x7c>
 800f056:	6560      	str	r0, [r4, #84]	; 0x54
 800f058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f05a:	602f      	str	r7, [r5, #0]
 800f05c:	2900      	cmp	r1, #0
 800f05e:	d0ca      	beq.n	800eff6 <__sflush_r+0x1a>
 800f060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f064:	4299      	cmp	r1, r3
 800f066:	d002      	beq.n	800f06e <__sflush_r+0x92>
 800f068:	4628      	mov	r0, r5
 800f06a:	f7fe ff33 	bl	800ded4 <_free_r>
 800f06e:	2000      	movs	r0, #0
 800f070:	6360      	str	r0, [r4, #52]	; 0x34
 800f072:	e7c1      	b.n	800eff8 <__sflush_r+0x1c>
 800f074:	6a21      	ldr	r1, [r4, #32]
 800f076:	2301      	movs	r3, #1
 800f078:	4628      	mov	r0, r5
 800f07a:	47b0      	blx	r6
 800f07c:	1c41      	adds	r1, r0, #1
 800f07e:	d1c7      	bne.n	800f010 <__sflush_r+0x34>
 800f080:	682b      	ldr	r3, [r5, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d0c4      	beq.n	800f010 <__sflush_r+0x34>
 800f086:	2b1d      	cmp	r3, #29
 800f088:	d001      	beq.n	800f08e <__sflush_r+0xb2>
 800f08a:	2b16      	cmp	r3, #22
 800f08c:	d101      	bne.n	800f092 <__sflush_r+0xb6>
 800f08e:	602f      	str	r7, [r5, #0]
 800f090:	e7b1      	b.n	800eff6 <__sflush_r+0x1a>
 800f092:	89a3      	ldrh	r3, [r4, #12]
 800f094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f098:	81a3      	strh	r3, [r4, #12]
 800f09a:	e7ad      	b.n	800eff8 <__sflush_r+0x1c>
 800f09c:	690f      	ldr	r7, [r1, #16]
 800f09e:	2f00      	cmp	r7, #0
 800f0a0:	d0a9      	beq.n	800eff6 <__sflush_r+0x1a>
 800f0a2:	0793      	lsls	r3, r2, #30
 800f0a4:	680e      	ldr	r6, [r1, #0]
 800f0a6:	bf08      	it	eq
 800f0a8:	694b      	ldreq	r3, [r1, #20]
 800f0aa:	600f      	str	r7, [r1, #0]
 800f0ac:	bf18      	it	ne
 800f0ae:	2300      	movne	r3, #0
 800f0b0:	eba6 0807 	sub.w	r8, r6, r7
 800f0b4:	608b      	str	r3, [r1, #8]
 800f0b6:	f1b8 0f00 	cmp.w	r8, #0
 800f0ba:	dd9c      	ble.n	800eff6 <__sflush_r+0x1a>
 800f0bc:	6a21      	ldr	r1, [r4, #32]
 800f0be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0c0:	4643      	mov	r3, r8
 800f0c2:	463a      	mov	r2, r7
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	47b0      	blx	r6
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	dc06      	bgt.n	800f0da <__sflush_r+0xfe>
 800f0cc:	89a3      	ldrh	r3, [r4, #12]
 800f0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0d2:	81a3      	strh	r3, [r4, #12]
 800f0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0d8:	e78e      	b.n	800eff8 <__sflush_r+0x1c>
 800f0da:	4407      	add	r7, r0
 800f0dc:	eba8 0800 	sub.w	r8, r8, r0
 800f0e0:	e7e9      	b.n	800f0b6 <__sflush_r+0xda>
 800f0e2:	bf00      	nop
 800f0e4:	20400001 	.word	0x20400001

0800f0e8 <_fflush_r>:
 800f0e8:	b538      	push	{r3, r4, r5, lr}
 800f0ea:	690b      	ldr	r3, [r1, #16]
 800f0ec:	4605      	mov	r5, r0
 800f0ee:	460c      	mov	r4, r1
 800f0f0:	b913      	cbnz	r3, 800f0f8 <_fflush_r+0x10>
 800f0f2:	2500      	movs	r5, #0
 800f0f4:	4628      	mov	r0, r5
 800f0f6:	bd38      	pop	{r3, r4, r5, pc}
 800f0f8:	b118      	cbz	r0, 800f102 <_fflush_r+0x1a>
 800f0fa:	6983      	ldr	r3, [r0, #24]
 800f0fc:	b90b      	cbnz	r3, 800f102 <_fflush_r+0x1a>
 800f0fe:	f000 f887 	bl	800f210 <__sinit>
 800f102:	4b14      	ldr	r3, [pc, #80]	; (800f154 <_fflush_r+0x6c>)
 800f104:	429c      	cmp	r4, r3
 800f106:	d11b      	bne.n	800f140 <_fflush_r+0x58>
 800f108:	686c      	ldr	r4, [r5, #4]
 800f10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d0ef      	beq.n	800f0f2 <_fflush_r+0xa>
 800f112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f114:	07d0      	lsls	r0, r2, #31
 800f116:	d404      	bmi.n	800f122 <_fflush_r+0x3a>
 800f118:	0599      	lsls	r1, r3, #22
 800f11a:	d402      	bmi.n	800f122 <_fflush_r+0x3a>
 800f11c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f11e:	f000 f915 	bl	800f34c <__retarget_lock_acquire_recursive>
 800f122:	4628      	mov	r0, r5
 800f124:	4621      	mov	r1, r4
 800f126:	f7ff ff59 	bl	800efdc <__sflush_r>
 800f12a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f12c:	07da      	lsls	r2, r3, #31
 800f12e:	4605      	mov	r5, r0
 800f130:	d4e0      	bmi.n	800f0f4 <_fflush_r+0xc>
 800f132:	89a3      	ldrh	r3, [r4, #12]
 800f134:	059b      	lsls	r3, r3, #22
 800f136:	d4dd      	bmi.n	800f0f4 <_fflush_r+0xc>
 800f138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f13a:	f000 f908 	bl	800f34e <__retarget_lock_release_recursive>
 800f13e:	e7d9      	b.n	800f0f4 <_fflush_r+0xc>
 800f140:	4b05      	ldr	r3, [pc, #20]	; (800f158 <_fflush_r+0x70>)
 800f142:	429c      	cmp	r4, r3
 800f144:	d101      	bne.n	800f14a <_fflush_r+0x62>
 800f146:	68ac      	ldr	r4, [r5, #8]
 800f148:	e7df      	b.n	800f10a <_fflush_r+0x22>
 800f14a:	4b04      	ldr	r3, [pc, #16]	; (800f15c <_fflush_r+0x74>)
 800f14c:	429c      	cmp	r4, r3
 800f14e:	bf08      	it	eq
 800f150:	68ec      	ldreq	r4, [r5, #12]
 800f152:	e7da      	b.n	800f10a <_fflush_r+0x22>
 800f154:	0800fe18 	.word	0x0800fe18
 800f158:	0800fe38 	.word	0x0800fe38
 800f15c:	0800fdf8 	.word	0x0800fdf8

0800f160 <std>:
 800f160:	2300      	movs	r3, #0
 800f162:	b510      	push	{r4, lr}
 800f164:	4604      	mov	r4, r0
 800f166:	e9c0 3300 	strd	r3, r3, [r0]
 800f16a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f16e:	6083      	str	r3, [r0, #8]
 800f170:	8181      	strh	r1, [r0, #12]
 800f172:	6643      	str	r3, [r0, #100]	; 0x64
 800f174:	81c2      	strh	r2, [r0, #14]
 800f176:	6183      	str	r3, [r0, #24]
 800f178:	4619      	mov	r1, r3
 800f17a:	2208      	movs	r2, #8
 800f17c:	305c      	adds	r0, #92	; 0x5c
 800f17e:	f7fb f903 	bl	800a388 <memset>
 800f182:	4b05      	ldr	r3, [pc, #20]	; (800f198 <std+0x38>)
 800f184:	6263      	str	r3, [r4, #36]	; 0x24
 800f186:	4b05      	ldr	r3, [pc, #20]	; (800f19c <std+0x3c>)
 800f188:	62a3      	str	r3, [r4, #40]	; 0x28
 800f18a:	4b05      	ldr	r3, [pc, #20]	; (800f1a0 <std+0x40>)
 800f18c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f18e:	4b05      	ldr	r3, [pc, #20]	; (800f1a4 <std+0x44>)
 800f190:	6224      	str	r4, [r4, #32]
 800f192:	6323      	str	r3, [r4, #48]	; 0x30
 800f194:	bd10      	pop	{r4, pc}
 800f196:	bf00      	nop
 800f198:	0800b131 	.word	0x0800b131
 800f19c:	0800b157 	.word	0x0800b157
 800f1a0:	0800b18f 	.word	0x0800b18f
 800f1a4:	0800b1b3 	.word	0x0800b1b3

0800f1a8 <_cleanup_r>:
 800f1a8:	4901      	ldr	r1, [pc, #4]	; (800f1b0 <_cleanup_r+0x8>)
 800f1aa:	f000 b8af 	b.w	800f30c <_fwalk_reent>
 800f1ae:	bf00      	nop
 800f1b0:	0800f0e9 	.word	0x0800f0e9

0800f1b4 <__sfmoreglue>:
 800f1b4:	b570      	push	{r4, r5, r6, lr}
 800f1b6:	1e4a      	subs	r2, r1, #1
 800f1b8:	2568      	movs	r5, #104	; 0x68
 800f1ba:	4355      	muls	r5, r2
 800f1bc:	460e      	mov	r6, r1
 800f1be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f1c2:	f7fe fed7 	bl	800df74 <_malloc_r>
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	b140      	cbz	r0, 800f1dc <__sfmoreglue+0x28>
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	e9c0 1600 	strd	r1, r6, [r0]
 800f1d0:	300c      	adds	r0, #12
 800f1d2:	60a0      	str	r0, [r4, #8]
 800f1d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f1d8:	f7fb f8d6 	bl	800a388 <memset>
 800f1dc:	4620      	mov	r0, r4
 800f1de:	bd70      	pop	{r4, r5, r6, pc}

0800f1e0 <__sfp_lock_acquire>:
 800f1e0:	4801      	ldr	r0, [pc, #4]	; (800f1e8 <__sfp_lock_acquire+0x8>)
 800f1e2:	f000 b8b3 	b.w	800f34c <__retarget_lock_acquire_recursive>
 800f1e6:	bf00      	nop
 800f1e8:	20000b28 	.word	0x20000b28

0800f1ec <__sfp_lock_release>:
 800f1ec:	4801      	ldr	r0, [pc, #4]	; (800f1f4 <__sfp_lock_release+0x8>)
 800f1ee:	f000 b8ae 	b.w	800f34e <__retarget_lock_release_recursive>
 800f1f2:	bf00      	nop
 800f1f4:	20000b28 	.word	0x20000b28

0800f1f8 <__sinit_lock_acquire>:
 800f1f8:	4801      	ldr	r0, [pc, #4]	; (800f200 <__sinit_lock_acquire+0x8>)
 800f1fa:	f000 b8a7 	b.w	800f34c <__retarget_lock_acquire_recursive>
 800f1fe:	bf00      	nop
 800f200:	20000b23 	.word	0x20000b23

0800f204 <__sinit_lock_release>:
 800f204:	4801      	ldr	r0, [pc, #4]	; (800f20c <__sinit_lock_release+0x8>)
 800f206:	f000 b8a2 	b.w	800f34e <__retarget_lock_release_recursive>
 800f20a:	bf00      	nop
 800f20c:	20000b23 	.word	0x20000b23

0800f210 <__sinit>:
 800f210:	b510      	push	{r4, lr}
 800f212:	4604      	mov	r4, r0
 800f214:	f7ff fff0 	bl	800f1f8 <__sinit_lock_acquire>
 800f218:	69a3      	ldr	r3, [r4, #24]
 800f21a:	b11b      	cbz	r3, 800f224 <__sinit+0x14>
 800f21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f220:	f7ff bff0 	b.w	800f204 <__sinit_lock_release>
 800f224:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f228:	6523      	str	r3, [r4, #80]	; 0x50
 800f22a:	4b13      	ldr	r3, [pc, #76]	; (800f278 <__sinit+0x68>)
 800f22c:	4a13      	ldr	r2, [pc, #76]	; (800f27c <__sinit+0x6c>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	62a2      	str	r2, [r4, #40]	; 0x28
 800f232:	42a3      	cmp	r3, r4
 800f234:	bf04      	itt	eq
 800f236:	2301      	moveq	r3, #1
 800f238:	61a3      	streq	r3, [r4, #24]
 800f23a:	4620      	mov	r0, r4
 800f23c:	f000 f820 	bl	800f280 <__sfp>
 800f240:	6060      	str	r0, [r4, #4]
 800f242:	4620      	mov	r0, r4
 800f244:	f000 f81c 	bl	800f280 <__sfp>
 800f248:	60a0      	str	r0, [r4, #8]
 800f24a:	4620      	mov	r0, r4
 800f24c:	f000 f818 	bl	800f280 <__sfp>
 800f250:	2200      	movs	r2, #0
 800f252:	60e0      	str	r0, [r4, #12]
 800f254:	2104      	movs	r1, #4
 800f256:	6860      	ldr	r0, [r4, #4]
 800f258:	f7ff ff82 	bl	800f160 <std>
 800f25c:	68a0      	ldr	r0, [r4, #8]
 800f25e:	2201      	movs	r2, #1
 800f260:	2109      	movs	r1, #9
 800f262:	f7ff ff7d 	bl	800f160 <std>
 800f266:	68e0      	ldr	r0, [r4, #12]
 800f268:	2202      	movs	r2, #2
 800f26a:	2112      	movs	r1, #18
 800f26c:	f7ff ff78 	bl	800f160 <std>
 800f270:	2301      	movs	r3, #1
 800f272:	61a3      	str	r3, [r4, #24]
 800f274:	e7d2      	b.n	800f21c <__sinit+0xc>
 800f276:	bf00      	nop
 800f278:	0800f934 	.word	0x0800f934
 800f27c:	0800f1a9 	.word	0x0800f1a9

0800f280 <__sfp>:
 800f280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f282:	4607      	mov	r7, r0
 800f284:	f7ff ffac 	bl	800f1e0 <__sfp_lock_acquire>
 800f288:	4b1e      	ldr	r3, [pc, #120]	; (800f304 <__sfp+0x84>)
 800f28a:	681e      	ldr	r6, [r3, #0]
 800f28c:	69b3      	ldr	r3, [r6, #24]
 800f28e:	b913      	cbnz	r3, 800f296 <__sfp+0x16>
 800f290:	4630      	mov	r0, r6
 800f292:	f7ff ffbd 	bl	800f210 <__sinit>
 800f296:	3648      	adds	r6, #72	; 0x48
 800f298:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f29c:	3b01      	subs	r3, #1
 800f29e:	d503      	bpl.n	800f2a8 <__sfp+0x28>
 800f2a0:	6833      	ldr	r3, [r6, #0]
 800f2a2:	b30b      	cbz	r3, 800f2e8 <__sfp+0x68>
 800f2a4:	6836      	ldr	r6, [r6, #0]
 800f2a6:	e7f7      	b.n	800f298 <__sfp+0x18>
 800f2a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f2ac:	b9d5      	cbnz	r5, 800f2e4 <__sfp+0x64>
 800f2ae:	4b16      	ldr	r3, [pc, #88]	; (800f308 <__sfp+0x88>)
 800f2b0:	60e3      	str	r3, [r4, #12]
 800f2b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f2b6:	6665      	str	r5, [r4, #100]	; 0x64
 800f2b8:	f000 f847 	bl	800f34a <__retarget_lock_init_recursive>
 800f2bc:	f7ff ff96 	bl	800f1ec <__sfp_lock_release>
 800f2c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f2c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f2c8:	6025      	str	r5, [r4, #0]
 800f2ca:	61a5      	str	r5, [r4, #24]
 800f2cc:	2208      	movs	r2, #8
 800f2ce:	4629      	mov	r1, r5
 800f2d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f2d4:	f7fb f858 	bl	800a388 <memset>
 800f2d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f2dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2e4:	3468      	adds	r4, #104	; 0x68
 800f2e6:	e7d9      	b.n	800f29c <__sfp+0x1c>
 800f2e8:	2104      	movs	r1, #4
 800f2ea:	4638      	mov	r0, r7
 800f2ec:	f7ff ff62 	bl	800f1b4 <__sfmoreglue>
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	6030      	str	r0, [r6, #0]
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d1d5      	bne.n	800f2a4 <__sfp+0x24>
 800f2f8:	f7ff ff78 	bl	800f1ec <__sfp_lock_release>
 800f2fc:	230c      	movs	r3, #12
 800f2fe:	603b      	str	r3, [r7, #0]
 800f300:	e7ee      	b.n	800f2e0 <__sfp+0x60>
 800f302:	bf00      	nop
 800f304:	0800f934 	.word	0x0800f934
 800f308:	ffff0001 	.word	0xffff0001

0800f30c <_fwalk_reent>:
 800f30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f310:	4606      	mov	r6, r0
 800f312:	4688      	mov	r8, r1
 800f314:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f318:	2700      	movs	r7, #0
 800f31a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f31e:	f1b9 0901 	subs.w	r9, r9, #1
 800f322:	d505      	bpl.n	800f330 <_fwalk_reent+0x24>
 800f324:	6824      	ldr	r4, [r4, #0]
 800f326:	2c00      	cmp	r4, #0
 800f328:	d1f7      	bne.n	800f31a <_fwalk_reent+0xe>
 800f32a:	4638      	mov	r0, r7
 800f32c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f330:	89ab      	ldrh	r3, [r5, #12]
 800f332:	2b01      	cmp	r3, #1
 800f334:	d907      	bls.n	800f346 <_fwalk_reent+0x3a>
 800f336:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f33a:	3301      	adds	r3, #1
 800f33c:	d003      	beq.n	800f346 <_fwalk_reent+0x3a>
 800f33e:	4629      	mov	r1, r5
 800f340:	4630      	mov	r0, r6
 800f342:	47c0      	blx	r8
 800f344:	4307      	orrs	r7, r0
 800f346:	3568      	adds	r5, #104	; 0x68
 800f348:	e7e9      	b.n	800f31e <_fwalk_reent+0x12>

0800f34a <__retarget_lock_init_recursive>:
 800f34a:	4770      	bx	lr

0800f34c <__retarget_lock_acquire_recursive>:
 800f34c:	4770      	bx	lr

0800f34e <__retarget_lock_release_recursive>:
 800f34e:	4770      	bx	lr

0800f350 <__swhatbuf_r>:
 800f350:	b570      	push	{r4, r5, r6, lr}
 800f352:	460e      	mov	r6, r1
 800f354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f358:	2900      	cmp	r1, #0
 800f35a:	b096      	sub	sp, #88	; 0x58
 800f35c:	4614      	mov	r4, r2
 800f35e:	461d      	mov	r5, r3
 800f360:	da07      	bge.n	800f372 <__swhatbuf_r+0x22>
 800f362:	2300      	movs	r3, #0
 800f364:	602b      	str	r3, [r5, #0]
 800f366:	89b3      	ldrh	r3, [r6, #12]
 800f368:	061a      	lsls	r2, r3, #24
 800f36a:	d410      	bmi.n	800f38e <__swhatbuf_r+0x3e>
 800f36c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f370:	e00e      	b.n	800f390 <__swhatbuf_r+0x40>
 800f372:	466a      	mov	r2, sp
 800f374:	f000 f8e0 	bl	800f538 <_fstat_r>
 800f378:	2800      	cmp	r0, #0
 800f37a:	dbf2      	blt.n	800f362 <__swhatbuf_r+0x12>
 800f37c:	9a01      	ldr	r2, [sp, #4]
 800f37e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f382:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f386:	425a      	negs	r2, r3
 800f388:	415a      	adcs	r2, r3
 800f38a:	602a      	str	r2, [r5, #0]
 800f38c:	e7ee      	b.n	800f36c <__swhatbuf_r+0x1c>
 800f38e:	2340      	movs	r3, #64	; 0x40
 800f390:	2000      	movs	r0, #0
 800f392:	6023      	str	r3, [r4, #0]
 800f394:	b016      	add	sp, #88	; 0x58
 800f396:	bd70      	pop	{r4, r5, r6, pc}

0800f398 <__smakebuf_r>:
 800f398:	898b      	ldrh	r3, [r1, #12]
 800f39a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f39c:	079d      	lsls	r5, r3, #30
 800f39e:	4606      	mov	r6, r0
 800f3a0:	460c      	mov	r4, r1
 800f3a2:	d507      	bpl.n	800f3b4 <__smakebuf_r+0x1c>
 800f3a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f3a8:	6023      	str	r3, [r4, #0]
 800f3aa:	6123      	str	r3, [r4, #16]
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	6163      	str	r3, [r4, #20]
 800f3b0:	b002      	add	sp, #8
 800f3b2:	bd70      	pop	{r4, r5, r6, pc}
 800f3b4:	ab01      	add	r3, sp, #4
 800f3b6:	466a      	mov	r2, sp
 800f3b8:	f7ff ffca 	bl	800f350 <__swhatbuf_r>
 800f3bc:	9900      	ldr	r1, [sp, #0]
 800f3be:	4605      	mov	r5, r0
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	f7fe fdd7 	bl	800df74 <_malloc_r>
 800f3c6:	b948      	cbnz	r0, 800f3dc <__smakebuf_r+0x44>
 800f3c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3cc:	059a      	lsls	r2, r3, #22
 800f3ce:	d4ef      	bmi.n	800f3b0 <__smakebuf_r+0x18>
 800f3d0:	f023 0303 	bic.w	r3, r3, #3
 800f3d4:	f043 0302 	orr.w	r3, r3, #2
 800f3d8:	81a3      	strh	r3, [r4, #12]
 800f3da:	e7e3      	b.n	800f3a4 <__smakebuf_r+0xc>
 800f3dc:	4b0d      	ldr	r3, [pc, #52]	; (800f414 <__smakebuf_r+0x7c>)
 800f3de:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3e0:	89a3      	ldrh	r3, [r4, #12]
 800f3e2:	6020      	str	r0, [r4, #0]
 800f3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3e8:	81a3      	strh	r3, [r4, #12]
 800f3ea:	9b00      	ldr	r3, [sp, #0]
 800f3ec:	6163      	str	r3, [r4, #20]
 800f3ee:	9b01      	ldr	r3, [sp, #4]
 800f3f0:	6120      	str	r0, [r4, #16]
 800f3f2:	b15b      	cbz	r3, 800f40c <__smakebuf_r+0x74>
 800f3f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3f8:	4630      	mov	r0, r6
 800f3fa:	f000 f8af 	bl	800f55c <_isatty_r>
 800f3fe:	b128      	cbz	r0, 800f40c <__smakebuf_r+0x74>
 800f400:	89a3      	ldrh	r3, [r4, #12]
 800f402:	f023 0303 	bic.w	r3, r3, #3
 800f406:	f043 0301 	orr.w	r3, r3, #1
 800f40a:	81a3      	strh	r3, [r4, #12]
 800f40c:	89a0      	ldrh	r0, [r4, #12]
 800f40e:	4305      	orrs	r5, r0
 800f410:	81a5      	strh	r5, [r4, #12]
 800f412:	e7cd      	b.n	800f3b0 <__smakebuf_r+0x18>
 800f414:	0800f1a9 	.word	0x0800f1a9

0800f418 <memmove>:
 800f418:	4288      	cmp	r0, r1
 800f41a:	b510      	push	{r4, lr}
 800f41c:	eb01 0402 	add.w	r4, r1, r2
 800f420:	d902      	bls.n	800f428 <memmove+0x10>
 800f422:	4284      	cmp	r4, r0
 800f424:	4623      	mov	r3, r4
 800f426:	d807      	bhi.n	800f438 <memmove+0x20>
 800f428:	1e43      	subs	r3, r0, #1
 800f42a:	42a1      	cmp	r1, r4
 800f42c:	d008      	beq.n	800f440 <memmove+0x28>
 800f42e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f432:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f436:	e7f8      	b.n	800f42a <memmove+0x12>
 800f438:	4402      	add	r2, r0
 800f43a:	4601      	mov	r1, r0
 800f43c:	428a      	cmp	r2, r1
 800f43e:	d100      	bne.n	800f442 <memmove+0x2a>
 800f440:	bd10      	pop	{r4, pc}
 800f442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f44a:	e7f7      	b.n	800f43c <memmove+0x24>

0800f44c <__malloc_lock>:
 800f44c:	4801      	ldr	r0, [pc, #4]	; (800f454 <__malloc_lock+0x8>)
 800f44e:	f7ff bf7d 	b.w	800f34c <__retarget_lock_acquire_recursive>
 800f452:	bf00      	nop
 800f454:	20000b24 	.word	0x20000b24

0800f458 <__malloc_unlock>:
 800f458:	4801      	ldr	r0, [pc, #4]	; (800f460 <__malloc_unlock+0x8>)
 800f45a:	f7ff bf78 	b.w	800f34e <__retarget_lock_release_recursive>
 800f45e:	bf00      	nop
 800f460:	20000b24 	.word	0x20000b24

0800f464 <_realloc_r>:
 800f464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f466:	4607      	mov	r7, r0
 800f468:	4614      	mov	r4, r2
 800f46a:	460e      	mov	r6, r1
 800f46c:	b921      	cbnz	r1, 800f478 <_realloc_r+0x14>
 800f46e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f472:	4611      	mov	r1, r2
 800f474:	f7fe bd7e 	b.w	800df74 <_malloc_r>
 800f478:	b922      	cbnz	r2, 800f484 <_realloc_r+0x20>
 800f47a:	f7fe fd2b 	bl	800ded4 <_free_r>
 800f47e:	4625      	mov	r5, r4
 800f480:	4628      	mov	r0, r5
 800f482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f484:	f000 f87a 	bl	800f57c <_malloc_usable_size_r>
 800f488:	42a0      	cmp	r0, r4
 800f48a:	d20f      	bcs.n	800f4ac <_realloc_r+0x48>
 800f48c:	4621      	mov	r1, r4
 800f48e:	4638      	mov	r0, r7
 800f490:	f7fe fd70 	bl	800df74 <_malloc_r>
 800f494:	4605      	mov	r5, r0
 800f496:	2800      	cmp	r0, #0
 800f498:	d0f2      	beq.n	800f480 <_realloc_r+0x1c>
 800f49a:	4631      	mov	r1, r6
 800f49c:	4622      	mov	r2, r4
 800f49e:	f7fe f841 	bl	800d524 <memcpy>
 800f4a2:	4631      	mov	r1, r6
 800f4a4:	4638      	mov	r0, r7
 800f4a6:	f7fe fd15 	bl	800ded4 <_free_r>
 800f4aa:	e7e9      	b.n	800f480 <_realloc_r+0x1c>
 800f4ac:	4635      	mov	r5, r6
 800f4ae:	e7e7      	b.n	800f480 <_realloc_r+0x1c>

0800f4b0 <_raise_r>:
 800f4b0:	291f      	cmp	r1, #31
 800f4b2:	b538      	push	{r3, r4, r5, lr}
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	460d      	mov	r5, r1
 800f4b8:	d904      	bls.n	800f4c4 <_raise_r+0x14>
 800f4ba:	2316      	movs	r3, #22
 800f4bc:	6003      	str	r3, [r0, #0]
 800f4be:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c2:	bd38      	pop	{r3, r4, r5, pc}
 800f4c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4c6:	b112      	cbz	r2, 800f4ce <_raise_r+0x1e>
 800f4c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4cc:	b94b      	cbnz	r3, 800f4e2 <_raise_r+0x32>
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	f000 f830 	bl	800f534 <_getpid_r>
 800f4d4:	462a      	mov	r2, r5
 800f4d6:	4601      	mov	r1, r0
 800f4d8:	4620      	mov	r0, r4
 800f4da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4de:	f000 b817 	b.w	800f510 <_kill_r>
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d00a      	beq.n	800f4fc <_raise_r+0x4c>
 800f4e6:	1c59      	adds	r1, r3, #1
 800f4e8:	d103      	bne.n	800f4f2 <_raise_r+0x42>
 800f4ea:	2316      	movs	r3, #22
 800f4ec:	6003      	str	r3, [r0, #0]
 800f4ee:	2001      	movs	r0, #1
 800f4f0:	e7e7      	b.n	800f4c2 <_raise_r+0x12>
 800f4f2:	2400      	movs	r4, #0
 800f4f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	4798      	blx	r3
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	e7e0      	b.n	800f4c2 <_raise_r+0x12>

0800f500 <raise>:
 800f500:	4b02      	ldr	r3, [pc, #8]	; (800f50c <raise+0xc>)
 800f502:	4601      	mov	r1, r0
 800f504:	6818      	ldr	r0, [r3, #0]
 800f506:	f7ff bfd3 	b.w	800f4b0 <_raise_r>
 800f50a:	bf00      	nop
 800f50c:	20000078 	.word	0x20000078

0800f510 <_kill_r>:
 800f510:	b538      	push	{r3, r4, r5, lr}
 800f512:	4d07      	ldr	r5, [pc, #28]	; (800f530 <_kill_r+0x20>)
 800f514:	2300      	movs	r3, #0
 800f516:	4604      	mov	r4, r0
 800f518:	4608      	mov	r0, r1
 800f51a:	4611      	mov	r1, r2
 800f51c:	602b      	str	r3, [r5, #0]
 800f51e:	f7f2 fdcf 	bl	80020c0 <_kill>
 800f522:	1c43      	adds	r3, r0, #1
 800f524:	d102      	bne.n	800f52c <_kill_r+0x1c>
 800f526:	682b      	ldr	r3, [r5, #0]
 800f528:	b103      	cbz	r3, 800f52c <_kill_r+0x1c>
 800f52a:	6023      	str	r3, [r4, #0]
 800f52c:	bd38      	pop	{r3, r4, r5, pc}
 800f52e:	bf00      	nop
 800f530:	20000b1c 	.word	0x20000b1c

0800f534 <_getpid_r>:
 800f534:	f7f2 bdbc 	b.w	80020b0 <_getpid>

0800f538 <_fstat_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	4d07      	ldr	r5, [pc, #28]	; (800f558 <_fstat_r+0x20>)
 800f53c:	2300      	movs	r3, #0
 800f53e:	4604      	mov	r4, r0
 800f540:	4608      	mov	r0, r1
 800f542:	4611      	mov	r1, r2
 800f544:	602b      	str	r3, [r5, #0]
 800f546:	f7f2 fe1a 	bl	800217e <_fstat>
 800f54a:	1c43      	adds	r3, r0, #1
 800f54c:	d102      	bne.n	800f554 <_fstat_r+0x1c>
 800f54e:	682b      	ldr	r3, [r5, #0]
 800f550:	b103      	cbz	r3, 800f554 <_fstat_r+0x1c>
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	bd38      	pop	{r3, r4, r5, pc}
 800f556:	bf00      	nop
 800f558:	20000b1c 	.word	0x20000b1c

0800f55c <_isatty_r>:
 800f55c:	b538      	push	{r3, r4, r5, lr}
 800f55e:	4d06      	ldr	r5, [pc, #24]	; (800f578 <_isatty_r+0x1c>)
 800f560:	2300      	movs	r3, #0
 800f562:	4604      	mov	r4, r0
 800f564:	4608      	mov	r0, r1
 800f566:	602b      	str	r3, [r5, #0]
 800f568:	f7f2 fe19 	bl	800219e <_isatty>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	d102      	bne.n	800f576 <_isatty_r+0x1a>
 800f570:	682b      	ldr	r3, [r5, #0]
 800f572:	b103      	cbz	r3, 800f576 <_isatty_r+0x1a>
 800f574:	6023      	str	r3, [r4, #0]
 800f576:	bd38      	pop	{r3, r4, r5, pc}
 800f578:	20000b1c 	.word	0x20000b1c

0800f57c <_malloc_usable_size_r>:
 800f57c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f580:	1f18      	subs	r0, r3, #4
 800f582:	2b00      	cmp	r3, #0
 800f584:	bfbc      	itt	lt
 800f586:	580b      	ldrlt	r3, [r1, r0]
 800f588:	18c0      	addlt	r0, r0, r3
 800f58a:	4770      	bx	lr

0800f58c <_init>:
 800f58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58e:	bf00      	nop
 800f590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f592:	bc08      	pop	{r3}
 800f594:	469e      	mov	lr, r3
 800f596:	4770      	bx	lr

0800f598 <_fini>:
 800f598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f59a:	bf00      	nop
 800f59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f59e:	bc08      	pop	{r3}
 800f5a0:	469e      	mov	lr, r3
 800f5a2:	4770      	bx	lr
